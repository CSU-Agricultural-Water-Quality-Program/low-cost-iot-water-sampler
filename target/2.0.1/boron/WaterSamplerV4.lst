
c:/Users/edeleon/Documents/Particle/WaterSamplerV4/target/2.0.1/boron/WaterSamplerV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ac80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000deca0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000028c  2003de9c  000deca4  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006c8  2003e128  2003e128  0002e128  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000def30  000def30  0001ef30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000def58  000def58  0001ef58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002465aa  00000000  00000000  0001ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024502  00000000  00000000  00265506  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00039018  00000000  00000000  00289a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000033c0  00000000  00000000  002c2a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009b38  00000000  00000000  002c5de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a480  00000000  00000000  002cf918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005a5c1  00000000  00000000  00319d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00120da5  00000000  00000000  00374359  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009be4  00000000  00000000  00495100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fe8b 	bl	dbd4c <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fe93 	bl	dbd68 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de9c 	.word	0x2003de9c
   d404c:	000deca4 	.word	0x000deca4
   d4050:	2003e128 	.word	0x2003e128
   d4054:	2003e128 	.word	0x2003e128
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f004 fbc1 	bl	d87e8 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dec5c 	.word	0x000dec5c
   d4080:	000dec94 	.word	0x000dec94

000d4084 <module_user_setup>:
   d4084:	f000 bd96 	b.w	d4bb4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f001 f9e9 	bl	d5460 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f004 bb6b 	b.w	d876c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 bd9d 	b.w	d7bd4 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bd9b 	b.w	d7bd4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 bda1 	b.w	d7be4 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f003 bd9f 	b.w	d7be4 <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40ba:	4608      	mov	r0, r1
   d40bc:	9101      	str	r1, [sp, #4]
   d40be:	f007 febc 	bl	dbe3a <strlen>
    if (len + l > buff_size)
   d40c2:	6863      	ldr	r3, [r4, #4]
   d40c4:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40c6:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40c8:	18e8      	adds	r0, r5, r3
   d40ca:	4290      	cmp	r0, r2
   d40cc:	d808      	bhi.n	d40e0 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d40ce:	6820      	ldr	r0, [r4, #0]
   d40d0:	9901      	ldr	r1, [sp, #4]
   d40d2:	462a      	mov	r2, r5
   d40d4:	4418      	add	r0, r3
   d40d6:	f007 fe39 	bl	dbd4c <memcpy>
    len += l;
   d40da:	6860      	ldr	r0, [r4, #4]
   d40dc:	4428      	add	r0, r5
   d40de:	6060      	str	r0, [r4, #4]
}
   d40e0:	b003      	add	sp, #12
   d40e2:	bd30      	pop	{r4, r5, pc}

000d40e4 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40e4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40e6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40ea:	6003      	str	r3, [r0, #0]
   d40ec:	4605      	mov	r5, r0
   d40ee:	b17c      	cbz	r4, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000de85c 	.word	0x000de85c

000d4118 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4118:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d411a:	f003 fb2f 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d411e:	4b03      	ldr	r3, [pc, #12]	; (d412c <_ZN10CloudClass7processEv+0x14>)
   d4120:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d4122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d4126:	f003 bd25 	b.w	d7b74 <spark_process>
   d412a:	bf00      	nop
   d412c:	2003e7d4 	.word	0x2003e7d4

000d4130 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4130:	6803      	ldr	r3, [r0, #0]
   d4132:	b12b      	cbz	r3, d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4134:	6842      	ldr	r2, [r0, #4]
   d4136:	4293      	cmp	r3, r2
   d4138:	d202      	bcs.n	d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d413a:	4618      	mov	r0, r3
   d413c:	f007 bdef 	b.w	dbd1e <atoi>
   d4140:	2000      	movs	r0, #0
   d4142:	4770      	bx	lr

000d4144 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4144:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4146:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4148:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d414a:	b145      	cbz	r5, d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d414c:	6843      	ldr	r3, [r0, #4]
   d414e:	429d      	cmp	r5, r3
   d4150:	d205      	bcs.n	d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d4152:	4628      	mov	r0, r5
   d4154:	f007 fe71 	bl	dbe3a <strlen>
   d4158:	3001      	adds	r0, #1
   d415a:	4405      	add	r5, r0
   d415c:	6025      	str	r5, [r4, #0]
        }
   d415e:	4620      	mov	r0, r4
   d4160:	bd38      	pop	{r3, r4, r5, pc}

000d4162 <_ZN10BlynkParam3addEPKc>:
{
   d4162:	b410      	push	{r4}
   d4164:	4603      	mov	r3, r0
    if (str == NULL) {
   d4166:	460a      	mov	r2, r1
   d4168:	b939      	cbnz	r1, d417a <_ZN10BlynkParam3addEPKc+0x18>
        buff[len++] = '\0';
   d416a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d416e:	1c4c      	adds	r4, r1, #1
   d4170:	605c      	str	r4, [r3, #4]
   d4172:	5442      	strb	r2, [r0, r1]
}
   d4174:	f85d 4b04 	ldr.w	r4, [sp], #4
   d4178:	4770      	bx	lr
   d417a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d417e:	f7ff bf9a 	b.w	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
	...

000d4184 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4184:	b538      	push	{r3, r4, r5, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d418a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d418e:	6825      	ldr	r5, [r4, #0]
   d4190:	4a04      	ldr	r2, [pc, #16]	; (d41a4 <_ZN10BlynkParam3addEi+0x20>)
   d4192:	1a09      	subs	r1, r1, r0
   d4194:	4428      	add	r0, r5
   d4196:	f003 fd35 	bl	d7c04 <snprintf>
   d419a:	6863      	ldr	r3, [r4, #4]
   d419c:	3001      	adds	r0, #1
   d419e:	4403      	add	r3, r0
   d41a0:	6063      	str	r3, [r4, #4]
    }
   d41a2:	bd38      	pop	{r3, r4, r5, pc}
   d41a4:	000ddc10 	.word	0x000ddc10

000d41a8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41a8:	b538      	push	{r3, r4, r5, lr}
   d41aa:	4604      	mov	r4, r0
   d41ac:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41ae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41b2:	6825      	ldr	r5, [r4, #0]
   d41b4:	4a04      	ldr	r2, [pc, #16]	; (d41c8 <_ZN10BlynkParam3addEl+0x20>)
   d41b6:	1a09      	subs	r1, r1, r0
   d41b8:	4428      	add	r0, r5
   d41ba:	f003 fd23 	bl	d7c04 <snprintf>
   d41be:	6863      	ldr	r3, [r4, #4]
   d41c0:	3001      	adds	r0, #1
   d41c2:	4403      	add	r3, r0
   d41c4:	6063      	str	r3, [r4, #4]
    }
   d41c6:	bd38      	pop	{r3, r4, r5, pc}
   d41c8:	000ddc13 	.word	0x000ddc13

000d41cc <_Z21check_sample_intervalv>:
    return 1;   // successful sample
   }
   else return 0;   // sample failed
}

bool check_sample_interval(){
   d41cc:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41ce:	f003 fad5 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
	currentMillis = millis();
   d41d2:	4b06      	ldr	r3, [pc, #24]	; (d41ec <_Z21check_sample_intervalv+0x20>)
   d41d4:	6018      	str	r0, [r3, #0]
	if(currentMillis - old_sample_millis >= sample_interval_ms){
   d41d6:	4b06      	ldr	r3, [pc, #24]	; (d41f0 <_Z21check_sample_intervalv+0x24>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	1ac0      	subs	r0, r0, r3
   d41dc:	4b05      	ldr	r3, [pc, #20]	; (d41f4 <_Z21check_sample_intervalv+0x28>)
   d41de:	681b      	ldr	r3, [r3, #0]
		return 1;
	}	
	else return 0;
}
   d41e0:	4298      	cmp	r0, r3
   d41e2:	bf34      	ite	cc
   d41e4:	2000      	movcc	r0, #0
   d41e6:	2001      	movcs	r0, #1
   d41e8:	bd08      	pop	{r3, pc}
   d41ea:	bf00      	nop
   d41ec:	2003e190 	.word	0x2003e190
   d41f0:	2003e344 	.word	0x2003e344
   d41f4:	2003e35c 	.word	0x2003e35c

000d41f8 <_Z19check_sample_numberv>:

bool check_sample_number(){
	float current_bottle_mL = sample_number * ml_to_collect;
	if(current_bottle_mL <= sample_bottle_mL){
   d41f8:	4b0a      	ldr	r3, [pc, #40]	; (d4224 <_Z19check_sample_numberv+0x2c>)
   d41fa:	ed93 7a00 	vldr	s14, [r3]
	float current_bottle_mL = sample_number * ml_to_collect;
   d41fe:	4b0a      	ldr	r3, [pc, #40]	; (d4228 <_Z19check_sample_numberv+0x30>)
   d4200:	681a      	ldr	r2, [r3, #0]
   d4202:	4b0a      	ldr	r3, [pc, #40]	; (d422c <_Z19check_sample_numberv+0x34>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	4353      	muls	r3, r2
   d4208:	ee07 3a90 	vmov	s15, r3
	if(current_bottle_mL <= sample_bottle_mL){
   d420c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float current_bottle_mL = sample_number * ml_to_collect;
   d4210:	eef8 7a67 	vcvt.f32.u32	s15, s15
	if(current_bottle_mL <= sample_bottle_mL){
   d4214:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return 1;
	}
	else return 0;
}
   d421c:	bfac      	ite	ge
   d421e:	2001      	movge	r0, #1
   d4220:	2000      	movlt	r0, #0
   d4222:	4770      	bx	lr
   d4224:	2003ded4 	.word	0x2003ded4
   d4228:	2003e364 	.word	0x2003e364
   d422c:	2003e33c 	.word	0x2003e33c

000d4230 <_Z11ReadVoltageh>:
  Serial.println(stateTransitionString);
  Blynk.virtualWrite(V2, stateTransitionString);
  Blynk.virtualWrite(V2, "\n");
}

double ReadVoltage(byte pin){  // read voltage on esp32 w correction
   d4230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
   d4234:	f005 fc05 	bl	d9a42 <analogRead>
  if(reading < 1 || reading > 4095) return 0;
   d4238:	f640 72fe 	movw	r2, #4094	; 0xffe
   d423c:	1e43      	subs	r3, r0, #1
   d423e:	4293      	cmp	r3, r2
   d4240:	d854      	bhi.n	d42ec <_Z11ReadVoltageh+0xbc>
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
   d4242:	f007 f999 	bl	db578 <__aeabi_i2d>
   d4246:	4604      	mov	r4, r0
   d4248:	460d      	mov	r5, r1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d424a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; d42f8 <_Z11ReadVoltageh+0xc8>
   d424e:	ec45 4b10 	vmov	d0, r4, r5
   d4252:	f005 fe45 	bl	d9ee0 <pow>
   d4256:	ed9f 1b2a 	vldr	d1, [pc, #168]	; d4300 <_Z11ReadVoltageh+0xd0>
   d425a:	ec57 6b10 	vmov	r6, r7, d0
   d425e:	ec45 4b10 	vmov	d0, r4, r5
   d4262:	f005 fe3d 	bl	d9ee0 <pow>
  // return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
  return -0.000000000000016 * pow(reading,4) + 0.000000000118171 * pow(reading,3)- 0.000000301211691 * pow(reading,2)+ 0.001109019271794 * reading + 0.034143524634089;
   d4266:	a32a      	add	r3, pc, #168	; (adr r3, d4310 <_Z11ReadVoltageh+0xe0>)
   d4268:	e9d3 2300 	ldrd	r2, r3, [r3]
   d426c:	4630      	mov	r0, r6
   d426e:	4639      	mov	r1, r7
   d4270:	ec59 8b10 	vmov	r8, r9, d0
   d4274:	f007 f9ea 	bl	db64c <__aeabi_dmul>
   d4278:	a327      	add	r3, pc, #156	; (adr r3, d4318 <_Z11ReadVoltageh+0xe8>)
   d427a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d427e:	4606      	mov	r6, r0
   d4280:	460f      	mov	r7, r1
   d4282:	4640      	mov	r0, r8
   d4284:	4649      	mov	r1, r9
   d4286:	f007 f9e1 	bl	db64c <__aeabi_dmul>
   d428a:	4602      	mov	r2, r0
   d428c:	460b      	mov	r3, r1
   d428e:	4630      	mov	r0, r6
   d4290:	4639      	mov	r1, r7
   d4292:	f007 f825 	bl	db2e0 <__adddf3>
   d4296:	4622      	mov	r2, r4
   d4298:	4606      	mov	r6, r0
   d429a:	460f      	mov	r7, r1
   d429c:	462b      	mov	r3, r5
   d429e:	4620      	mov	r0, r4
   d42a0:	4629      	mov	r1, r5
   d42a2:	f007 f9d3 	bl	db64c <__aeabi_dmul>
   d42a6:	a31e      	add	r3, pc, #120	; (adr r3, d4320 <_Z11ReadVoltageh+0xf0>)
   d42a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ac:	f007 f9ce 	bl	db64c <__aeabi_dmul>
   d42b0:	4602      	mov	r2, r0
   d42b2:	460b      	mov	r3, r1
   d42b4:	4630      	mov	r0, r6
   d42b6:	4639      	mov	r1, r7
   d42b8:	f007 f810 	bl	db2dc <__aeabi_dsub>
   d42bc:	a31a      	add	r3, pc, #104	; (adr r3, d4328 <_Z11ReadVoltageh+0xf8>)
   d42be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c2:	4606      	mov	r6, r0
   d42c4:	460f      	mov	r7, r1
   d42c6:	4620      	mov	r0, r4
   d42c8:	4629      	mov	r1, r5
   d42ca:	f007 f9bf 	bl	db64c <__aeabi_dmul>
   d42ce:	4602      	mov	r2, r0
   d42d0:	460b      	mov	r3, r1
   d42d2:	4630      	mov	r0, r6
   d42d4:	4639      	mov	r1, r7
   d42d6:	f007 f803 	bl	db2e0 <__adddf3>
   d42da:	a315      	add	r3, pc, #84	; (adr r3, d4330 <_Z11ReadVoltageh+0x100>)
   d42dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e0:	f006 fffe 	bl	db2e0 <__adddf3>
   d42e4:	ec41 0b10 	vmov	d0, r0, r1
} 
   d42e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(reading < 1 || reading > 4095) return 0;
   d42ec:	ed9f 0b06 	vldr	d0, [pc, #24]	; d4308 <_Z11ReadVoltageh+0xd8>
   d42f0:	e7fa      	b.n	d42e8 <_Z11ReadVoltageh+0xb8>
   d42f2:	bf00      	nop
   d42f4:	f3af 8000 	nop.w
   d42f8:	00000000 	.word	0x00000000
   d42fc:	40100000 	.word	0x40100000
   d4300:	00000000 	.word	0x00000000
   d4304:	40080000 	.word	0x40080000
	...
   d4310:	9ee75616 	.word	0x9ee75616
   d4314:	bd1203af 	.word	0xbd1203af
   d4318:	be3de60b 	.word	0xbe3de60b
   d431c:	3de03dc5 	.word	0x3de03dc5
   d4320:	06d63921 	.word	0x06d63921
   d4324:	3e9436c7 	.word	0x3e9436c7
   d4328:	6030f8a1 	.word	0x6030f8a1
   d432c:	3f522b90 	.word	0x3f522b90
   d4330:	9358dfd2 	.word	0x9358dfd2
   d4334:	3fa17b42 	.word	0x3fa17b42

000d4338 <BlynkWidgetWrite9>:
  Blynk.virtualWrite(V2, sample_bottle_mL); 
  Blynk.virtualWrite(V2, " mL\n");
}

BLYNK_WRITE(V9) // get button value from blynk
{
   d4338:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   d433a:	6808      	ldr	r0, [r1, #0]
   d433c:	f007 fcef 	bl	dbd1e <atoi>
  int pinValue = param.asInt();
  sample_now=pinValue;
   d4340:	4b02      	ldr	r3, [pc, #8]	; (d434c <BlynkWidgetWrite9+0x14>)
   d4342:	3800      	subs	r0, #0
   d4344:	bf18      	it	ne
   d4346:	2001      	movne	r0, #1
   d4348:	7018      	strb	r0, [r3, #0]
 // Serial.print("sample_now: ");Serial.println(sample_now);
}
   d434a:	bd08      	pop	{r3, pc}
   d434c:	2003e360 	.word	0x2003e360

000d4350 <_ZN10MeanFilterIlE8AddValueEl>:
	_windowSize = windowSize;
	_count = 0;
}

template<typename T>
T MeanFilter<T>::AddValue(const T value)
   d4350:	b530      	push	{r4, r5, lr}
{
	_sum += value;
   d4352:	6903      	ldr	r3, [r0, #16]
   d4354:	440b      	add	r3, r1
   d4356:	6103      	str	r3, [r0, #16]

	if (_count >= _windowSize)
   d4358:	1d02      	adds	r2, r0, #4
   d435a:	ca34      	ldmia	r2, {r2, r4, r5}
   d435c:	42a5      	cmp	r5, r4
		_sum -= *_accessor;
   d435e:	bfa2      	ittt	ge
   d4360:	6814      	ldrge	r4, [r2, #0]
   d4362:	1b1b      	subge	r3, r3, r4
   d4364:	6103      	strge	r3, [r0, #16]
}

template<typename T>
inline void MeanFilter<T>::addToBuffer(const T value)
{
	*_accessor = value;
   d4366:	6011      	str	r1, [r2, #0]
	
	++_accessor;
   d4368:	6843      	ldr	r3, [r0, #4]
	if (_accessor >= _items + _windowSize)
   d436a:	6801      	ldr	r1, [r0, #0]
   d436c:	6882      	ldr	r2, [r0, #8]
	++_accessor;
   d436e:	3304      	adds	r3, #4
	if (_accessor >= _items + _windowSize)
   d4370:	eb01 0482 	add.w	r4, r1, r2, lsl #2
		_accessor = _items;
   d4374:	42a3      	cmp	r3, r4
   d4376:	bf28      	it	cs
   d4378:	460b      	movcs	r3, r1
   d437a:	6043      	str	r3, [r0, #4]
}

template<typename T>
inline void MeanFilter<T>::incCounter()
{
	if (_count < _windowSize)
   d437c:	68c3      	ldr	r3, [r0, #12]
   d437e:	4293      	cmp	r3, r2
		++_count;
   d4380:	bfbc      	itt	lt
   d4382:	3301      	addlt	r3, #1
   d4384:	60c3      	strlt	r3, [r0, #12]
	return (_sum / _count);
   d4386:	e9d0 0203 	ldrd	r0, r2, [r0, #12]
}
   d438a:	fb92 f0f0 	sdiv	r0, r2, r0
   d438e:	bd30      	pop	{r4, r5, pc}

000d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4390:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4392:	2300      	movs	r3, #0
   d4394:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4396:	6800      	ldr	r0, [r0, #0]
   d4398:	f005 f9cc 	bl	d9734 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d439c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d43a0:	f003 b966 	b.w	d7670 <BlynkNoOpCbk>

000d43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d43a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d43a8:	eb01 0902 	add.w	r9, r1, r2
   d43ac:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d43ae:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d43b0:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d43b4:	4680      	mov	r8, r0
   d43b6:	460d      	mov	r5, r1
   d43b8:	4616      	mov	r6, r2
    if (it >= param.end())
   d43ba:	f080 8092 	bcs.w	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d43be:	a805      	add	r0, sp, #20
   d43c0:	880f      	ldrh	r7, [r1, #0]
   d43c2:	f7ff febf 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d43c6:	6803      	ldr	r3, [r0, #0]
   d43c8:	4599      	cmp	r9, r3
   d43ca:	f240 808a 	bls.w	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43ce:	a805      	add	r0, sp, #20
   d43d0:	f7ff feae 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d43d4:	f247 2376 	movw	r3, #29302	; 0x7276
   d43d8:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43da:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d43dc:	f000 80a9 	beq.w	d4532 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d43e0:	d827      	bhi.n	d4432 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d43e2:	f247 2361 	movw	r3, #29281	; 0x7261
   d43e6:	429f      	cmp	r7, r3
   d43e8:	d07e      	beq.n	d44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d43ea:	f247 2364 	movw	r3, #29284	; 0x7264
   d43ee:	429f      	cmp	r7, r3
   d43f0:	d042      	beq.n	d4478 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d43f2:	f646 5370 	movw	r3, #28016	; 0x6d70
   d43f6:	429f      	cmp	r7, r3
   d43f8:	d128      	bne.n	d444c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d43fa:	4e63      	ldr	r6, [pc, #396]	; (d4588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43fc:	4f63      	ldr	r7, [pc, #396]	; (d458c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d43fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d45a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4402:	9b05      	ldr	r3, [sp, #20]
   d4404:	4599      	cmp	r9, r3
   d4406:	d96c      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4408:	a805      	add	r0, sp, #20
   d440a:	f7ff fe91 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d440e:	b2c4      	uxtb	r4, r0
            ++it;
   d4410:	a805      	add	r0, sp, #20
   d4412:	f7ff fe97 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4416:	9d05      	ldr	r5, [sp, #20]
   d4418:	4631      	mov	r1, r6
   d441a:	4628      	mov	r0, r5
   d441c:	f007 fcdd 	bl	dbdda <strcmp>
   d4420:	4601      	mov	r1, r0
   d4422:	b9e0      	cbnz	r0, d445e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4424:	4620      	mov	r0, r4
   d4426:	f005 facf 	bl	d99c8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d442a:	a805      	add	r0, sp, #20
   d442c:	f7ff fe8a 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4430:	e7e7      	b.n	d4402 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4432:	f247 7364 	movw	r3, #30564	; 0x7764
   d4436:	429f      	cmp	r7, r3
   d4438:	d03f      	beq.n	d44ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d443a:	f247 7376 	movw	r3, #30582	; 0x7776
   d443e:	429f      	cmp	r7, r3
   d4440:	f000 8087 	beq.w	d4552 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4444:	f247 7361 	movw	r3, #30561	; 0x7761
   d4448:	429f      	cmp	r7, r3
   d444a:	d05f      	beq.n	d450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
            BlynkWidgetWriteDefault(req, param2);
        }
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d444c:	2300      	movs	r3, #0
   d444e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4452:	2202      	movs	r2, #2
   d4454:	9200      	str	r2, [sp, #0]
   d4456:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d445a:	4619      	mov	r1, r3
   d445c:	e029      	b.n	d44b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d445e:	4639      	mov	r1, r7
   d4460:	4628      	mov	r0, r5
   d4462:	f007 fcba 	bl	dbdda <strcmp>
   d4466:	b128      	cbz	r0, d4474 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4468:	4641      	mov	r1, r8
   d446a:	4628      	mov	r0, r5
   d446c:	f007 fcb5 	bl	dbdda <strcmp>
   d4470:	2800      	cmp	r0, #0
   d4472:	d1da      	bne.n	d442a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d4474:	2101      	movs	r1, #1
   d4476:	e7d5      	b.n	d4424 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4478:	ab0a      	add	r3, sp, #40	; 0x28
   d447a:	4945      	ldr	r1, [pc, #276]	; (d4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d447c:	9307      	str	r3, [sp, #28]
   d447e:	a807      	add	r0, sp, #28
   d4480:	2310      	movs	r3, #16
   d4482:	2500      	movs	r5, #0
   d4484:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4488:	f7ff fe15 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d448c:	a807      	add	r0, sp, #28
   d448e:	4621      	mov	r1, r4
   d4490:	f7ff fe78 	bl	d4184 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4494:	4620      	mov	r0, r4
   d4496:	f005 fac1 	bl	d9a1c <digitalRead>
        rsp.add(analogRead(pin));
   d449a:	4601      	mov	r1, r0
   d449c:	a807      	add	r0, sp, #28
   d449e:	f7ff fe83 	bl	d41a8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d44a2:	9b08      	ldr	r3, [sp, #32]
   d44a4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d44a8:	3b01      	subs	r3, #1
   d44aa:	9300      	str	r3, [sp, #0]
   d44ac:	9b07      	ldr	r3, [sp, #28]
   d44ae:	462a      	mov	r2, r5
   d44b0:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d44b2:	4640      	mov	r0, r8
   d44b4:	f000 fa70 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d44b8:	e013      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d44ba:	a805      	add	r0, sp, #20
   d44bc:	f7ff fe42 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d44c0:	6803      	ldr	r3, [r0, #0]
   d44c2:	4599      	cmp	r9, r3
   d44c4:	d90d      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d44c6:	b2a4      	uxth	r4, r4
   d44c8:	2101      	movs	r1, #1
   d44ca:	4620      	mov	r0, r4
   d44cc:	f005 fa7c 	bl	d99c8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d44d0:	a805      	add	r0, sp, #20
   d44d2:	f7ff fe2d 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d44d6:	1e01      	subs	r1, r0, #0
   d44d8:	bf18      	it	ne
   d44da:	2101      	movne	r1, #1
   d44dc:	4620      	mov	r0, r4
   d44de:	f005 fa84 	bl	d99ea <digitalWrite>
    }
}
   d44e2:	b00f      	add	sp, #60	; 0x3c
   d44e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d44e8:	ab0a      	add	r3, sp, #40	; 0x28
   d44ea:	9307      	str	r3, [sp, #28]
   d44ec:	a807      	add	r0, sp, #28
   d44ee:	2310      	movs	r3, #16
   d44f0:	4928      	ldr	r1, [pc, #160]	; (d4594 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d44f2:	2500      	movs	r5, #0
   d44f4:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d44f8:	f7ff fddd 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d44fc:	a807      	add	r0, sp, #28
   d44fe:	4621      	mov	r1, r4
   d4500:	f7ff fe40 	bl	d4184 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4504:	4620      	mov	r0, r4
   d4506:	f005 fa9c 	bl	d9a42 <analogRead>
   d450a:	e7c6      	b.n	d449a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d450c:	a805      	add	r0, sp, #20
   d450e:	f7ff fe19 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d4512:	6803      	ldr	r3, [r0, #0]
   d4514:	4599      	cmp	r9, r3
   d4516:	d9e4      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4518:	b2a4      	uxth	r4, r4
   d451a:	2101      	movs	r1, #1
   d451c:	4620      	mov	r0, r4
   d451e:	f005 fa53 	bl	d99c8 <pinMode>
        analogWrite(pin, it.asInt());
   d4522:	a805      	add	r0, sp, #20
   d4524:	f7ff fe04 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d4528:	4601      	mov	r1, r0
   d452a:	4620      	mov	r0, r4
   d452c:	f005 faa0 	bl	d9a70 <_Z11analogWritetm>
    } break;
   d4530:	e7d7      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        WidgetReadHandler handler = GetReadHandler(pin);
   d4532:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   d4534:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4538:	f003 f89c 	bl	d7674 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d453c:	4603      	mov	r3, r0
            handler(req);
   d453e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4540:	b123      	cbz	r3, d454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4542:	4a15      	ldr	r2, [pc, #84]	; (d4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4544:	4293      	cmp	r3, r2
   d4546:	d001      	beq.n	d454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4548:	4798      	blx	r3
   d454a:	e7ca      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetReadDefault(req);
   d454c:	f003 f88e 	bl	d766c <BlynkWidgetRead>
    } break;
   d4550:	e7c7      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4552:	a805      	add	r0, sp, #20
   d4554:	f7ff fdf6 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4558:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   d455a:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d455e:	1b5d      	subs	r5, r3, r5
   d4560:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4562:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d4564:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4568:	950c      	str	r5, [sp, #48]	; 0x30
   d456a:	f003 f88d 	bl	d7688 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d456e:	4603      	mov	r3, r0
            handler(req, param2);
   d4570:	a90a      	add	r1, sp, #40	; 0x28
   d4572:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d4574:	b123      	cbz	r3, d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d4576:	4a09      	ldr	r2, [pc, #36]	; (d459c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4578:	4293      	cmp	r3, r2
   d457a:	d001      	beq.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param2);
   d457c:	4798      	blx	r3
   d457e:	e7b0      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param2);
   d4580:	f003 f875 	bl	d766e <BlynkWidgetWrite>
    } break;
   d4584:	e7ad      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d4586:	bf00      	nop
   d4588:	000de149 	.word	0x000de149
   d458c:	000ddc17 	.word	0x000ddc17
   d4590:	000ddc1f 	.word	0x000ddc1f
   d4594:	000ddc22 	.word	0x000ddc22
   d4598:	000d766d 	.word	0x000d766d
   d459c:	000d766f 	.word	0x000d766f
   d45a0:	000ddc1b 	.word	0x000ddc1b

000d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45a8:	b08c      	sub	sp, #48	; 0x30
   d45aa:	af04      	add	r7, sp, #16
   d45ac:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d45ae:	2205      	movs	r2, #5
   d45b0:	6800      	ldr	r0, [r0, #0]
   d45b2:	1d39      	adds	r1, r7, #4
   d45b4:	f003 ff4e 	bl	d8454 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d45b8:	b3b8      	cbz	r0, d462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d45ba:	2805      	cmp	r0, #5
   d45bc:	d004      	beq.n	d45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d45be:	2000      	movs	r0, #0
}
   d45c0:	3720      	adds	r7, #32
   d45c2:	46bd      	mov	sp, r7
   d45c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45c8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d45cc:	0a13      	lsrs	r3, r2, #8
   d45ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d45d2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d45d6:	f8a7 3005 	strh.w	r3, [r7, #5]
   d45da:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d45dc:	0a13      	lsrs	r3, r2, #8
   d45de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45e2:	fa1f f883 	uxth.w	r8, r3
   d45e6:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d45ea:	2900      	cmp	r1, #0
   d45ec:	d0e7      	beq.n	d45be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d45ee:	793b      	ldrb	r3, [r7, #4]
   d45f0:	bb23      	cbnz	r3, d463c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d45f2:	f003 f839 	bl	d7668 <_Z11BlynkMillisv>
   d45f6:	60e0      	str	r0, [r4, #12]
   d45f8:	4602      	mov	r2, r0
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45fa:	7f60      	ldrb	r0, [r4, #29]
   d45fc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4600:	b9c0      	cbnz	r0, d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4602:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4606:	2901      	cmp	r1, #1
   d4608:	d114      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d460a:	2b09      	cmp	r3, #9
   d460c:	d00f      	beq.n	d462e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d460e:	2bc8      	cmp	r3, #200	; 0xc8
   d4610:	d001      	beq.n	d4616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4612:	2b04      	cmp	r3, #4
   d4614:	d1d4      	bne.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4616:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4618:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d461a:	4620      	mov	r0, r4
                state = CONNECTED;
   d461c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d461e:	f000 fa69 	bl	d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4622:	f7ff fd79 	bl	d4118 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4626:	f003 f823 	bl	d7670 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d462a:	2001      	movs	r0, #1
   d462c:	e7c8      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d462e:	2303      	movs	r3, #3
   d4630:	7763      	strb	r3, [r4, #29]
                break;
   d4632:	e7c5      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4634:	1f58      	subs	r0, r3, #5
   d4636:	bf18      	it	ne
   d4638:	2001      	movne	r0, #1
   d463a:	e7c1      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d463c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4640:	d903      	bls.n	d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4642:	4620      	mov	r0, r4
   d4644:	f7ff fea4 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4648:	e7ef      	b.n	d462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d464a:	f108 0308 	add.w	r3, r8, #8
   d464e:	f023 0307 	bic.w	r3, r3, #7
   d4652:	466e      	mov	r6, sp
   d4654:	ebad 0d03 	sub.w	sp, sp, r3
   d4658:	ad04      	add	r5, sp, #16
   d465a:	6820      	ldr	r0, [r4, #0]
   d465c:	4642      	mov	r2, r8
   d465e:	4629      	mov	r1, r5
   d4660:	f003 fef8 	bl	d8454 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4664:	4580      	cmp	r8, r0
   d4666:	f04f 0000 	mov.w	r0, #0
   d466a:	d172      	bne.n	d4752 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ae>
    inputBuffer[hdr.length] = '\0';
   d466c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4670:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d4672:	f002 fff9 	bl	d7668 <_Z11BlynkMillisv>
    switch (hdr.type)
   d4676:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4678:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d467a:	2b14      	cmp	r3, #20
   d467c:	f000 8098 	beq.w	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20c>
   d4680:	d83b      	bhi.n	d46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x156>
   d4682:	2b0f      	cmp	r3, #15
   d4684:	f000 8094 	beq.w	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20c>
   d4688:	d807      	bhi.n	d469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d468a:	2b02      	cmp	r3, #2
   d468c:	d03b      	beq.n	d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x162>
   d468e:	2b06      	cmp	r3, #6
   d4690:	d044      	beq.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
        internalReconnect();
   d4692:	4620      	mov	r0, r4
   d4694:	f7ff fe7c 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4698:	e04b      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
    switch (hdr.type)
   d469a:	2b11      	cmp	r3, #17
   d469c:	d1f9      	bne.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d469e:	2300      	movs	r3, #0
   d46a0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d46a2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46a6:	442b      	add	r3, r5
        if (it >= param.end())
   d46a8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46aa:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d46ae:	d240      	bcs.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        ++it;
   d46b0:	f107 000c 	add.w	r0, r7, #12
   d46b4:	682c      	ldr	r4, [r5, #0]
   d46b6:	f7ff fd45 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d46ba:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d46bc:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d46c0:	1b5d      	subs	r5, r3, r5
   d46c2:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d46c4:	e9c7 3505 	strd	r3, r5, [r7, #20]
   d46c8:	4b54      	ldr	r3, [pc, #336]	; (d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>)
   d46ca:	61fd      	str	r5, [r7, #28]
   d46cc:	429c      	cmp	r4, r3
   d46ce:	f000 809f 	beq.w	d4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
   d46d2:	d87a      	bhi.n	d47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x226>
   d46d4:	4b52      	ldr	r3, [pc, #328]	; (d4820 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27c>)
   d46d6:	429c      	cmp	r4, r3
   d46d8:	f000 8088 	beq.w	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d46dc:	3303      	adds	r3, #3
   d46de:	429c      	cmp	r4, r3
   d46e0:	f000 808a 	beq.w	d47f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d46e4:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d46e8:	3b06      	subs	r3, #6
   d46ea:	429c      	cmp	r4, r3
   d46ec:	d121      	bne.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46ee:	f107 0114 	add.w	r1, r7, #20
   d46f2:	4638      	mov	r0, r7
   d46f4:	f002 ffbb 	bl	d766e <BlynkWidgetWrite>
   d46f8:	e01b      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
    switch (hdr.type)
   d46fa:	2b29      	cmp	r3, #41	; 0x29
   d46fc:	d01b      	beq.n	d4736 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
   d46fe:	2b37      	cmp	r3, #55	; 0x37
   d4700:	d017      	beq.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d4702:	2b1d      	cmp	r3, #29
   d4704:	d1c5      	bne.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4706:	7f63      	ldrb	r3, [r4, #29]
   d4708:	b943      	cbnz	r3, d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
            state = CONNECTED;
   d470a:	2301      	movs	r3, #1
   d470c:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d470e:	4620      	mov	r0, r4
   d4710:	f000 f9f0 	bl	d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4714:	f7ff fd00 	bl	d4118 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4718:	f002 ffaa 	bl	d7670 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d471c:	2300      	movs	r3, #0
   d471e:	21c8      	movs	r1, #200	; 0xc8
   d4720:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4724:	9100      	str	r1, [sp, #0]
   d4726:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d472a:	4619      	mov	r1, r3
   d472c:	4620      	mov	r0, r4
   d472e:	f000 f933 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4732:	2001      	movs	r0, #1
   d4734:	e00d      	b.n	d4752 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ae>
        if (!redir_serv) {
   d4736:	68a3      	ldr	r3, [r4, #8]
   d4738:	b91b      	cbnz	r3, d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19e>
             redir_serv = (char*)malloc(32);
   d473a:	2020      	movs	r0, #32
   d473c:	f003 fa4a 	bl	d7bd4 <malloc>
   d4740:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4742:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4746:	44a8      	add	r8, r5
        if (it >= param.end())
   d4748:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d474a:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d474e:	d302      	bcc.n	d4756 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b2>
            return false;
   d4750:	2000      	movs	r0, #0
   d4752:	46b5      	mov	sp, r6
   d4754:	e734      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 32);
   d4756:	4629      	mov	r1, r5
   d4758:	2220      	movs	r2, #32
   d475a:	68a0      	ldr	r0, [r4, #8]
   d475c:	f007 fb87 	bl	dbe6e <strncpy>
        redir_serv[31] = '\0';
   d4760:	68a3      	ldr	r3, [r4, #8]
   d4762:	2500      	movs	r5, #0
   d4764:	77dd      	strb	r5, [r3, #31]
        if (++it < param.end())
   d4766:	f107 0014 	add.w	r0, r7, #20
   d476a:	f7ff fceb 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d476e:	6803      	ldr	r3, [r0, #0]
   d4770:	4543      	cmp	r3, r8
   d4772:	d21b      	bcs.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x208>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4774:	6978      	ldr	r0, [r7, #20]
   d4776:	b120      	cbz	r0, d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1de>
   d4778:	69bb      	ldr	r3, [r7, #24]
   d477a:	4298      	cmp	r0, r3
   d477c:	d214      	bcs.n	d47a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x204>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d477e:	f007 fad2 	bl	dbd26 <atol>
            redir_port = it.asLong();
   d4782:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4784:	6820      	ldr	r0, [r4, #0]
   d4786:	f004 ffd5 	bl	d9734 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d478a:	6823      	ldr	r3, [r4, #0]
   d478c:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d478e:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4790:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4792:	2300      	movs	r3, #0
   d4794:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4796:	f002 ff67 	bl	d7668 <_Z11BlynkMillisv>
   d479a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d479e:	3808      	subs	r0, #8
   d47a0:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d47a4:	6160      	str	r0, [r4, #20]
   d47a6:	e7c4      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d47a8:	4628      	mov	r0, r5
   d47aa:	e7ea      	b.n	d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1de>
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d47ac:	2550      	movs	r5, #80	; 0x50
   d47ae:	e7e9      	b.n	d4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e0>
        msgIdOutOverride = hdr.msg_id;
   d47b0:	687b      	ldr	r3, [r7, #4]
   d47b2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d47b6:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d47b8:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   d47bc:	4629      	mov	r1, r5
   d47be:	4620      	mov	r0, r4
   d47c0:	f7ff fdf0 	bl	d43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d47c4:	2300      	movs	r3, #0
   d47c6:	8363      	strh	r3, [r4, #26]
   d47c8:	e7b3      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d47ca:	4b16      	ldr	r3, [pc, #88]	; (d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x280>)
   d47cc:	429c      	cmp	r4, r3
   d47ce:	d019      	beq.n	d4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
   d47d0:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d47d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d47d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d47dc:	429c      	cmp	r4, r3
   d47de:	d1a8      	bne.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d47e0:	f107 0114 	add.w	r1, r7, #20
   d47e4:	4638      	mov	r0, r7
   d47e6:	f002 ff42 	bl	d766e <BlynkWidgetWrite>
   d47ea:	e7a2      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d47ec:	f107 0114 	add.w	r1, r7, #20
   d47f0:	4638      	mov	r0, r7
   d47f2:	f002 ff3c 	bl	d766e <BlynkWidgetWrite>
   d47f6:	e79c      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d47f8:	f107 0114 	add.w	r1, r7, #20
   d47fc:	4638      	mov	r0, r7
   d47fe:	f002 ff36 	bl	d766e <BlynkWidgetWrite>
   d4802:	e796      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4804:	f107 0114 	add.w	r1, r7, #20
   d4808:	4638      	mov	r0, r7
   d480a:	f002 ff30 	bl	d766e <BlynkWidgetWrite>
   d480e:	e790      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4810:	f107 0114 	add.w	r1, r7, #20
   d4814:	4638      	mov	r0, r7
   d4816:	f002 ff2a 	bl	d766e <BlynkWidgetWrite>
   d481a:	e78a      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d481c:	6174656d 	.word	0x6174656d
   d4820:	00637472 	.word	0x00637472
   d4824:	6e6f6361 	.word	0x6e6f6361

000d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d4828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d482c:	4604      	mov	r4, r0
   d482e:	b08c      	sub	sp, #48	; 0x30
   d4830:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4832:	f7ff fc71 	bl	d4118 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d4836:	7f63      	ldrb	r3, [r4, #29]
   d4838:	2b02      	cmp	r3, #2
   d483a:	f000 80a8 	beq.w	d498e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d483e:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4840:	8b62      	ldrh	r2, [r4, #26]
   d4842:	3301      	adds	r3, #1
   d4844:	b2db      	uxtb	r3, r3
   d4846:	7723      	strb	r3, [r4, #28]
   d4848:	b10a      	cbz	r2, d484e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d484a:	2501      	movs	r5, #1
   d484c:	e016      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d484e:	2b02      	cmp	r3, #2
   d4850:	d8fb      	bhi.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4852:	6820      	ldr	r0, [r4, #0]
   d4854:	f004 fd31 	bl	d92ba <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d4858:	b1b8      	cbz	r0, d488a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d485a:	b925      	cbnz	r5, d4866 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d485c:	6820      	ldr	r0, [r4, #0]
   d485e:	f004 ff0f 	bl	d9680 <_ZN9TCPClient9availableEv>
   d4862:	2800      	cmp	r0, #0
   d4864:	dd11      	ble.n	d488a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fe9c 	bl	d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d486c:	4605      	mov	r5, r0
   d486e:	2800      	cmp	r0, #0
   d4870:	d1f4      	bne.n	d485c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4872:	6820      	ldr	r0, [r4, #0]
   d4874:	f004 ff5e 	bl	d9734 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4878:	f002 fefa 	bl	d7670 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d487c:	7f23      	ldrb	r3, [r4, #28]
   d487e:	3b01      	subs	r3, #1
   d4880:	7723      	strb	r3, [r4, #28]
}
   d4882:	4628      	mov	r0, r5
   d4884:	b00c      	add	sp, #48	; 0x30
   d4886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d488a:	f002 feed 	bl	d7668 <_Z11BlynkMillisv>
   d488e:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4890:	6820      	ldr	r0, [r4, #0]
   d4892:	f004 fd12 	bl	d92ba <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4896:	7f67      	ldrb	r7, [r4, #29]
   d4898:	2f01      	cmp	r7, #1
   d489a:	4605      	mov	r5, r0
   d489c:	d129      	bne.n	d48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d489e:	b920      	cbnz	r0, d48aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d48a0:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d48a2:	4620      	mov	r0, r4
   d48a4:	f7ff fd74 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d48a8:	e7e8      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d48aa:	68e3      	ldr	r3, [r4, #12]
   d48ac:	f644 2238 	movw	r2, #19000	; 0x4a38
   d48b0:	1af3      	subs	r3, r6, r3
   d48b2:	4293      	cmp	r3, r2
   d48b4:	d904      	bls.n	d48c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff fd6a 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d48bc:	2500      	movs	r5, #0
   d48be:	e7dd      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d48c0:	f242 7210 	movw	r2, #10000	; 0x2710
   d48c4:	4293      	cmp	r3, r2
   d48c6:	d803      	bhi.n	d48d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48c8:	6923      	ldr	r3, [r4, #16]
   d48ca:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d48cc:	4293      	cmp	r3, r2
   d48ce:	d9bc      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d48d0:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d48d6:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48d8:	4293      	cmp	r3, r2
   d48da:	d9b6      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d48dc:	2300      	movs	r3, #0
   d48de:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d48e2:	9300      	str	r3, [sp, #0]
   d48e4:	461a      	mov	r2, r3
   d48e6:	2106      	movs	r1, #6
   d48e8:	4620      	mov	r0, r4
   d48ea:	f000 f855 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d48ee:	6166      	str	r6, [r4, #20]
   d48f0:	e7ab      	b.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d48f2:	2f00      	cmp	r7, #0
   d48f4:	d1a9      	bne.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48f6:	6962      	ldr	r2, [r4, #20]
   d48f8:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d48fa:	b140      	cbz	r0, d490e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d48fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4900:	429a      	cmp	r2, r3
   d4902:	d9a2      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4904:	6820      	ldr	r0, [r4, #0]
   d4906:	f004 ff15 	bl	d9734 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d490a:	7767      	strb	r7, [r4, #29]
   d490c:	e7d6      	b.n	d48bc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d490e:	f241 3388 	movw	r3, #5000	; 0x1388
   d4912:	429a      	cmp	r2, r3
   d4914:	d999      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4916:	6820      	ldr	r0, [r4, #0]
   d4918:	f004 ff0c 	bl	d9734 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d491c:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4920:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4924:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d4928:	f1be 0f00 	cmp.w	lr, #0
   d492c:	d00b      	beq.n	d4946 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d492e:	462b      	mov	r3, r5
   d4930:	4642      	mov	r2, r8
   d4932:	4671      	mov	r1, lr
   d4934:	4660      	mov	r0, ip
   d4936:	f004 fda1 	bl	d947c <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d493a:	1e43      	subs	r3, r0, #1
   d493c:	425d      	negs	r5, r3
   d493e:	415d      	adcs	r5, r3
   d4940:	b98d      	cbnz	r5, d4966 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4942:	6166      	str	r6, [r4, #20]
                return false;
   d4944:	e79a      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4946:	4b13      	ldr	r3, [pc, #76]	; (d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d4948:	9306      	str	r3, [sp, #24]
   d494a:	f10c 0720 	add.w	r7, ip, #32
   d494e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4950:	ad07      	add	r5, sp, #28
   d4952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4954:	683b      	ldr	r3, [r7, #0]
   d4956:	702b      	strb	r3, [r5, #0]
   d4958:	4642      	mov	r2, r8
   d495a:	4673      	mov	r3, lr
   d495c:	a906      	add	r1, sp, #24
   d495e:	4660      	mov	r0, ip
   d4960:	f004 fe12 	bl	d9588 <_ZN9TCPClient7connectE9IPAddresstm>
   d4964:	e7e9      	b.n	d493a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4966:	6863      	ldr	r3, [r4, #4]
   d4968:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d496a:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d496c:	4618      	mov	r0, r3
            msgIdOut = 1;
   d496e:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4970:	f007 fa63 	bl	dbe3a <strlen>
   d4974:	2200      	movs	r2, #0
   d4976:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d497a:	9b05      	ldr	r3, [sp, #20]
   d497c:	9000      	str	r0, [sp, #0]
   d497e:	4632      	mov	r2, r6
   d4980:	211d      	movs	r1, #29
   d4982:	4620      	mov	r0, r4
   d4984:	f000 f808 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4988:	6923      	ldr	r3, [r4, #16]
   d498a:	6163      	str	r3, [r4, #20]
            return true;
   d498c:	e776      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d498e:	2500      	movs	r5, #0
   d4990:	e777      	b.n	d4882 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4992:	bf00      	nop
   d4994:	000de758 	.word	0x000de758

000d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d499c:	b083      	sub	sp, #12
   d499e:	af00      	add	r7, sp, #0
   d49a0:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d49a2:	6800      	ldr	r0, [r0, #0]
   d49a4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d49a6:	4688      	mov	r8, r1
   d49a8:	4616      	mov	r6, r2
   d49aa:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d49ac:	46eb      	mov	fp, sp
   d49ae:	f004 fc84 	bl	d92ba <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d49b2:	2800      	cmp	r0, #0
   d49b4:	d07f      	beq.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d49b6:	f1b8 0f1d 	cmp.w	r8, #29
   d49ba:	d804      	bhi.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d49bc:	4b4c      	ldr	r3, [pc, #304]	; (d4af0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d49be:	fa23 f308 	lsr.w	r3, r3, r8
   d49c2:	07db      	lsls	r3, r3, #31
   d49c4:	d402      	bmi.n	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d49c6:	7f63      	ldrb	r3, [r4, #29]
   d49c8:	2b01      	cmp	r3, #1
   d49ca:	d174      	bne.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49cc:	b946      	cbnz	r6, d49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49ce:	8b66      	ldrh	r6, [r4, #26]
   d49d0:	b936      	cbnz	r6, d49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49d2:	8b23      	ldrh	r3, [r4, #24]
   d49d4:	3301      	adds	r3, #1
   d49d6:	b29b      	uxth	r3, r3
   d49d8:	2b00      	cmp	r3, #0
   d49da:	d071      	beq.n	d4ac0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49dc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49de:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49e0:	f1a8 030c 	sub.w	r3, r8, #12
   d49e4:	2b08      	cmp	r3, #8
   d49e6:	d816      	bhi.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49e8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d49ec:	4293      	cmp	r3, r2
   d49ee:	bf38      	it	cc
   d49f0:	4613      	movcc	r3, r2
   d49f2:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49f6:	f002 fe37 	bl	d7668 <_Z11BlynkMillisv>
   d49fa:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49fe:	2800      	cmp	r0, #0
   d4a00:	db60      	blt.n	d4ac4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a02:	2100      	movs	r1, #0
   d4a04:	4620      	mov	r0, r4
   d4a06:	f7ff ff0f 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a0a:	f002 fe2d 	bl	d7668 <_Z11BlynkMillisv>
   d4a0e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a12:	2800      	cmp	r0, #0
   d4a14:	daf5      	bge.n	d4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a16:	f1b9 0f00 	cmp.w	r9, #0
   d4a1a:	d05a      	beq.n	d4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a1c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a20:	2a00      	cmp	r2, #0
   d4a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a24:	bf08      	it	eq
   d4a26:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a28:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a2c:	f10a 0307 	add.w	r3, sl, #7
   d4a30:	f023 0307 	bic.w	r3, r3, #7
   d4a34:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a3a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a3e:	18ea      	adds	r2, r5, r3
   d4a40:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a44:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a4a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a4e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a52:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a56:	f1b9 0f00 	cmp.w	r9, #0
   d4a5a:	d03c      	beq.n	d4ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a5c:	2d00      	cmp	r5, #0
   d4a5e:	d03a      	beq.n	d4ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a60:	462a      	mov	r2, r5
   d4a62:	4649      	mov	r1, r9
   d4a64:	f10d 0005 	add.w	r0, sp, #5
   d4a68:	f007 f970 	bl	dbd4c <memcpy>
        pos += length;
   d4a6c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a70:	b13b      	cbz	r3, d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a74:	b12b      	cbz	r3, d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a76:	461a      	mov	r2, r3
   d4a78:	687b      	ldr	r3, [r7, #4]
   d4a7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a7c:	4418      	add	r0, r3
   d4a7e:	f007 f965 	bl	dbd4c <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a82:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a84:	4555      	cmp	r5, sl
   d4a86:	d22a      	bcs.n	d4ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a88:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a8c:	687b      	ldr	r3, [r7, #4]
   d4a8e:	6820      	ldr	r0, [r4, #0]
   d4a90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a94:	bf28      	it	cs
   d4a96:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a9a:	1959      	adds	r1, r3, r5
   d4a9c:	f004 fbf7 	bl	d928e <_ZN9TCPClient5writeEPKhj>
   d4aa0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4aa2:	2000      	movs	r0, #0
   d4aa4:	f002 fdde 	bl	d7664 <_Z10BlynkDelaym>
        if (w == 0) {
   d4aa8:	b9be      	cbnz	r6, d4ada <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4aaa:	6820      	ldr	r0, [r4, #0]
   d4aac:	f004 fe42 	bl	d9734 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4ab0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4ab2:	f002 fddd 	bl	d7670 <BlynkNoOpCbk>
}
   d4ab6:	370c      	adds	r7, #12
   d4ab8:	46dd      	mov	sp, fp
   d4aba:	46bd      	mov	sp, r7
   d4abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4ac0:	2301      	movs	r3, #1
   d4ac2:	e78b      	b.n	d49dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4ac4:	7f21      	ldrb	r1, [r4, #28]
   d4ac6:	2900      	cmp	r1, #0
   d4ac8:	d1a5      	bne.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4aca:	4620      	mov	r0, r4
   d4acc:	f7ff feac 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ad0:	e7a1      	b.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4ad2:	2305      	movs	r3, #5
   d4ad4:	e7a3      	b.n	d4a1e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4ad6:	2005      	movs	r0, #5
   d4ad8:	e7c9      	b.n	d4a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4ada:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4adc:	e7d2      	b.n	d4a84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4ade:	d003      	beq.n	d4ae8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff fc55 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4ae6:	e7e6      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4ae8:	f002 fdbe 	bl	d7668 <_Z11BlynkMillisv>
   d4aec:	6120      	str	r0, [r4, #16]
   d4aee:	e7e2      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4af0:	20000045 	.word	0x20000045

000d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4af4:	b500      	push	{lr}
   d4af6:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4af8:	ab04      	add	r3, sp, #16
   d4afa:	2200      	movs	r2, #0
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	2349      	movs	r3, #73	; 0x49
   d4b00:	9300      	str	r3, [sp, #0]
   d4b02:	9202      	str	r2, [sp, #8]
   d4b04:	4b03      	ldr	r3, [pc, #12]	; (d4b14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b06:	2111      	movs	r1, #17
   d4b08:	f7ff ff46 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b0c:	b015      	add	sp, #84	; 0x54
   d4b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b12:	bf00      	nop
   d4b14:	000ddd26 	.word	0x000ddd26

000d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b1a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b1e:	ab08      	add	r3, sp, #32
   d4b20:	2400      	movs	r4, #0
   d4b22:	4605      	mov	r5, r0
   d4b24:	460f      	mov	r7, r1
   d4b26:	9305      	str	r3, [sp, #20]
   d4b28:	a805      	add	r0, sp, #20
   d4b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b2e:	490e      	ldr	r1, [pc, #56]	; (d4b68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_+0x50>)
   d4b30:	4616      	mov	r6, r2
   d4b32:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b36:	f7ff fabe 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
   d4b3a:	4639      	mov	r1, r7
   d4b3c:	a805      	add	r0, sp, #20
   d4b3e:	f7ff fb21 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d4b42:	4631      	mov	r1, r6
   d4b44:	a805      	add	r0, sp, #20
   d4b46:	f7ff fb0c 	bl	d4162 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b4a:	9b06      	ldr	r3, [sp, #24]
   d4b4c:	3b01      	subs	r3, #1
   d4b4e:	9300      	str	r3, [sp, #0]
   d4b50:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b54:	9b05      	ldr	r3, [sp, #20]
   d4b56:	4622      	mov	r2, r4
   d4b58:	2114      	movs	r1, #20
   d4b5a:	4628      	mov	r0, r5
   d4b5c:	f7ff ff1c 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b60:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b66:	bf00      	nop
   d4b68:	000ddc25 	.word	0x000ddc25

000d4b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>:
     * This will probably cause user-defined BLYNK_WRITE handler to be called.
     *
     * @param pin Virtual Pin number
     */
    template <typename... Args>
    void syncVirtual(Args... pins) {
   d4b6c:	b570      	push	{r4, r5, r6, lr}
   d4b6e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b72:	ab08      	add	r3, sp, #32
   d4b74:	2400      	movs	r4, #0
   d4b76:	4605      	mov	r5, r0
   d4b78:	460e      	mov	r6, r1
   d4b7a:	9305      	str	r3, [sp, #20]
   d4b7c:	a805      	add	r0, sp, #20
   d4b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b82:	490b      	ldr	r1, [pc, #44]	; (d4bb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_+0x44>)
   d4b84:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b88:	f7ff fa95 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        add(last);
   d4b8c:	4631      	mov	r1, r6
   d4b8e:	a805      	add	r0, sp, #20
   d4b90:	f7ff faf8 	bl	d4184 <_ZN10BlynkParam3addEi>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vr");
        cmd.add_multi(pins...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b94:	9b06      	ldr	r3, [sp, #24]
   d4b96:	3b01      	subs	r3, #1
   d4b98:	9300      	str	r3, [sp, #0]
   d4b9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b9e:	9b05      	ldr	r3, [sp, #20]
   d4ba0:	4622      	mov	r2, r4
   d4ba2:	2110      	movs	r1, #16
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	f7ff fef7 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4baa:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4bae:	bd70      	pop	{r4, r5, r6, pc}
   d4bb0:	000ddc28 	.word	0x000ddc28

000d4bb4 <setup>:
void setup() {
   d4bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.begin(115200); // opens serial port, sets data rate to 9600 bps
   d4bb8:	f004 f9dc 	bl	d8f74 <_Z16_fetch_usbserialv>
   d4bbc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4bc0:	f004 f9c6 	bl	d8f50 <_ZN9USBSerial5beginEl>
  while (!Serial) {
   d4bc4:	f004 f9d6 	bl	d8f74 <_Z16_fetch_usbserialv>
   d4bc8:	f004 f9c9 	bl	d8f5e <_ZN9USBSerialcvbEv>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0f9      	beq.n	d4bc4 <setup+0x10>
  Serial.setTimeout(10);
   d4bd0:	f004 f9d0 	bl	d8f74 <_Z16_fetch_usbserialv>
   d4bd4:	210a      	movs	r1, #10
   d4bd6:	f003 fc3b 	bl	d8450 <_ZN6Stream10setTimeoutEm>
  pinMode(LED_BUILTIN, OUTPUT);
   d4bda:	2101      	movs	r1, #1
   d4bdc:	2007      	movs	r0, #7
   d4bde:	f004 fef3 	bl	d99c8 <pinMode>
  pinMode(STEP_PIN1, OUTPUT);
   d4be2:	2101      	movs	r1, #1
   d4be4:	2005      	movs	r0, #5
   d4be6:	f004 feef 	bl	d99c8 <pinMode>
  pinMode(DIR_PIN1, OUTPUT);
   d4bea:	2101      	movs	r1, #1
   d4bec:	2003      	movs	r0, #3
   d4bee:	f004 feeb 	bl	d99c8 <pinMode>
  pinMode(STEPEN_PIN1, OUTPUT);
   d4bf2:	2101      	movs	r1, #1
   d4bf4:	2002      	movs	r0, #2
   d4bf6:	f004 fee7 	bl	d99c8 <pinMode>
  pinMode(STEP_PIN2, OUTPUT);
   d4bfa:	2101      	movs	r1, #1
   d4bfc:	200e      	movs	r0, #14
   d4bfe:	f004 fee3 	bl	d99c8 <pinMode>
  pinMode(DIR_PIN2, OUTPUT);
   d4c02:	2101      	movs	r1, #1
   d4c04:	2006      	movs	r0, #6
   d4c06:	f004 fedf 	bl	d99c8 <pinMode>
  pinMode(STEPEN_PIN2, OUTPUT);
   d4c0a:	2101      	movs	r1, #1
   d4c0c:	200f      	movs	r0, #15
   d4c0e:	f004 fedb 	bl	d99c8 <pinMode>
  pinMode(WATER_PIN, INPUT_PULLUP);  // water detector
   d4c12:	2102      	movs	r1, #2
   d4c14:	2004      	movs	r0, #4
   d4c16:	f004 fed7 	bl	d99c8 <pinMode>
  stepper1.setMaxSpeed(1200); // Set the maximum speed in steps per second:
   d4c1a:	ed9f 0a34 	vldr	s0, [pc, #208]	; d4cec <setup+0x138>
   d4c1e:	4834      	ldr	r0, [pc, #208]	; (d4cf0 <setup+0x13c>)
        this->authkey = auth;
   d4c20:	4c34      	ldr	r4, [pc, #208]	; (d4cf4 <setup+0x140>)
   d4c22:	f001 f915 	bl	d5e50 <_ZN12AccelStepper11setMaxSpeedEf>
  stepper2.setMaxSpeed(1200); // Set the maximum speed in steps per second:
   d4c26:	ed9f 0a31 	vldr	s0, [pc, #196]	; d4cec <setup+0x138>
   d4c2a:	4833      	ldr	r0, [pc, #204]	; (d4cf8 <setup+0x144>)
   d4c2c:	f001 f910 	bl	d5e50 <_ZN12AccelStepper11setMaxSpeedEf>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4c30:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4c34:	f002 fd16 	bl	d7664 <_Z10BlynkDelaym>
   d4c38:	4b30      	ldr	r3, [pc, #192]	; (d4cfc <setup+0x148>)
   d4c3a:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4c3c:	f002 fd14 	bl	d7668 <_Z11BlynkMillisv>
   d4c40:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   d4c44:	6823      	ldr	r3, [r4, #0]
        domain = d;
   d4c46:	4a2e      	ldr	r2, [pc, #184]	; (d4d00 <setup+0x14c>)
   d4c48:	635a      	str	r2, [r3, #52]	; 0x34
   d4c4a:	3808      	subs	r0, #8
   d4c4c:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   d4c50:	2250      	movs	r2, #80	; 0x50
   d4c52:	6160      	str	r0, [r4, #20]
   d4c54:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   d4c56:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   d4c58:	f242 3727 	movw	r7, #8999	; 0x2327
            run();
   d4c5c:	46a0      	mov	r8, r4
    void disconnect() { client.stop(); }
   d4c5e:	6820      	ldr	r0, [r4, #0]
   d4c60:	f004 fd68 	bl	d9734 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4c64:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4c66:	f002 fcff 	bl	d7668 <_Z11BlynkMillisv>
   d4c6a:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4c6c:	7f63      	ldrb	r3, [r4, #29]
   d4c6e:	2b01      	cmp	r3, #1
   d4c70:	d00c      	beq.n	d4c8c <setup+0xd8>
               (BlynkMillis() - started < timeout))
   d4c72:	f002 fcf9 	bl	d7668 <_Z11BlynkMillisv>
   d4c76:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4c78:	42b8      	cmp	r0, r7
   d4c7a:	d804      	bhi.n	d4c86 <setup+0xd2>
            run();
   d4c7c:	2100      	movs	r1, #0
   d4c7e:	4640      	mov	r0, r8
   d4c80:	f7ff fdd2 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4c84:	e7f2      	b.n	d4c6c <setup+0xb8>
        config(auth, domain, port);
        while(this->connect() != true) {}
   d4c86:	7f63      	ldrb	r3, [r4, #29]
   d4c88:	2b01      	cmp	r3, #1
   d4c8a:	d1e8      	bne.n	d4c5e <setup+0xaa>
  Blynk.virtualWrite(V2, "clr");  // clear Terminal Widget
   d4c8c:	4a1d      	ldr	r2, [pc, #116]	; (d4d04 <setup+0x150>)
   d4c8e:	4819      	ldr	r0, [pc, #100]	; (d4cf4 <setup+0x140>)
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4c90:	4e1d      	ldr	r6, [pc, #116]	; (d4d08 <setup+0x154>)
   d4c92:	4d1e      	ldr	r5, [pc, #120]	; (d4d0c <setup+0x158>)
  Blynk.virtualWrite(V2, "clr");  // clear Terminal Widget
   d4c94:	2102      	movs	r1, #2
   d4c96:	f7ff ff3f 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, "WiFi connected\n");
   d4c9a:	4a1d      	ldr	r2, [pc, #116]	; (d4d10 <setup+0x15c>)
   d4c9c:	4815      	ldr	r0, [pc, #84]	; (d4cf4 <setup+0x140>)
   d4c9e:	2102      	movs	r1, #2
   d4ca0:	f7ff ff3a 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.syncVirtual(V1);  // sync slider value
   d4ca4:	4813      	ldr	r0, [pc, #76]	; (d4cf4 <setup+0x140>)
   d4ca6:	2101      	movs	r1, #1
   d4ca8:	f7ff ff60 	bl	d4b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>
   d4cac:	2433      	movs	r4, #51	; 0x33
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4cae:	2004      	movs	r0, #4
   d4cb0:	f004 feb4 	bl	d9a1c <digitalRead>
   d4cb4:	4601      	mov	r1, r0
   d4cb6:	4630      	mov	r0, r6
   d4cb8:	f7ff fb4a 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
  for (int x = 0; x < 51; x++) {  // read non contact water sensor on hose
   d4cbc:	3c01      	subs	r4, #1
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4cbe:	6028      	str	r0, [r5, #0]
  for (int x = 0; x < 51; x++) {  // read non contact water sensor on hose
   d4cc0:	d1f5      	bne.n	d4cae <setup+0xfa>
    state = PURGE_STATE;
   d4cc2:	4b14      	ldr	r3, [pc, #80]	; (d4d14 <setup+0x160>)
   d4cc4:	2205      	movs	r2, #5
  digitalWrite(STEPEN_PIN1, LOW); // Pump1 on
   d4cc6:	4621      	mov	r1, r4
   d4cc8:	2002      	movs	r0, #2
    state = PURGE_STATE;
   d4cca:	701a      	strb	r2, [r3, #0]
  digitalWrite(STEPEN_PIN1, LOW); // Pump1 on
   d4ccc:	f004 fe8d 	bl	d99ea <digitalWrite>
  digitalWrite(STEPEN_PIN2, LOW); // Pump2 on
   d4cd0:	4621      	mov	r1, r4
   d4cd2:	200f      	movs	r0, #15
   d4cd4:	f004 fe89 	bl	d99ea <digitalWrite>
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4cd8:	4b0f      	ldr	r3, [pc, #60]	; (d4d18 <setup+0x164>)
   d4cda:	681a      	ldr	r2, [r3, #0]
   d4cdc:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4ce0:	4353      	muls	r3, r2
   d4ce2:	4a0e      	ldr	r2, [pc, #56]	; (d4d1c <setup+0x168>)
   d4ce4:	6013      	str	r3, [r2, #0]
}  // end setup
   d4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4cea:	bf00      	nop
   d4cec:	44960000 	.word	0x44960000
   d4cf0:	2003e378 	.word	0x2003e378
   d4cf4:	2003e12c 	.word	0x2003e12c
   d4cf8:	2003e3cc 	.word	0x2003e3cc
   d4cfc:	2003dea0 	.word	0x2003dea0
   d4d00:	000ddc2b 	.word	0x000ddc2b
   d4d04:	000ddc3b 	.word	0x000ddc3b
   d4d08:	2003e198 	.word	0x2003e198
   d4d0c:	2003e444 	.word	0x2003e444
   d4d10:	000ddc3f 	.word	0x000ddc3f
   d4d14:	2003e374 	.word	0x2003e374
   d4d18:	2003ded8 	.word	0x2003ded8
   d4d1c:	2003e35c 	.word	0x2003e35c

000d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d22:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4d26:	ab08      	add	r3, sp, #32
   d4d28:	2400      	movs	r4, #0
   d4d2a:	4605      	mov	r5, r0
   d4d2c:	460f      	mov	r7, r1
   d4d2e:	9305      	str	r3, [sp, #20]
   d4d30:	a805      	add	r0, sp, #20
   d4d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4d36:	490e      	ldr	r1, [pc, #56]	; (d4d70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
   d4d38:	4616      	mov	r6, r2
   d4d3a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4d3e:	f7ff f9ba 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4d42:	4639      	mov	r1, r7
   d4d44:	a805      	add	r0, sp, #20
   d4d46:	f7ff fa1d 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d4d4a:	4631      	mov	r1, r6
   d4d4c:	a805      	add	r0, sp, #20
   d4d4e:	f7ff fa19 	bl	d4184 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4d52:	9b06      	ldr	r3, [sp, #24]
   d4d54:	3b01      	subs	r3, #1
   d4d56:	9300      	str	r3, [sp, #0]
   d4d58:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4d5c:	9b05      	ldr	r3, [sp, #20]
   d4d5e:	4622      	mov	r2, r4
   d4d60:	2114      	movs	r1, #20
   d4d62:	4628      	mov	r0, r5
   d4d64:	f7ff fe18 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4d68:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d6e:	bf00      	nop
   d4d70:	000ddc25 	.word	0x000ddc25

000d4d74 <BlynkWidgetWrite1>:
{
   d4d74:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
   d4d76:	6808      	ldr	r0, [r1, #0]
  ml_to_collect  = pinValue;
   d4d78:	4c10      	ldr	r4, [pc, #64]	; (d4dbc <BlynkWidgetWrite1+0x48>)
   d4d7a:	f006 ffd0 	bl	dbd1e <atoi>
  float pinValue = param.asInt(); // assigning incoming value from pin V1 to a variable
   d4d7e:	ee07 0a90 	vmov	s15, r0
   d4d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d86:	480e      	ldr	r0, [pc, #56]	; (d4dc0 <BlynkWidgetWrite1+0x4c>)
  ml_to_collect  = pinValue;
   d4d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d8c:	210c      	movs	r1, #12
  ml_to_collect  = pinValue;
   d4d8e:	ee17 2a90 	vmov	r2, s15
   d4d92:	edc4 7a00 	vstr	s15, [r4]
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d96:	f7ff ffc3 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "ml_to_collect set to: ");
   d4d9a:	4a0a      	ldr	r2, [pc, #40]	; (d4dc4 <BlynkWidgetWrite1+0x50>)
   d4d9c:	4808      	ldr	r0, [pc, #32]	; (d4dc0 <BlynkWidgetWrite1+0x4c>)
   d4d9e:	2102      	movs	r1, #2
   d4da0:	f7ff feba 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, ml_to_collect); 
   d4da4:	6822      	ldr	r2, [r4, #0]
   d4da6:	4806      	ldr	r0, [pc, #24]	; (d4dc0 <BlynkWidgetWrite1+0x4c>)
   d4da8:	2102      	movs	r1, #2
   d4daa:	f7ff ffb9 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " mL\n");  
   d4dae:	4a06      	ldr	r2, [pc, #24]	; (d4dc8 <BlynkWidgetWrite1+0x54>)
   d4db0:	4803      	ldr	r0, [pc, #12]	; (d4dc0 <BlynkWidgetWrite1+0x4c>)
   d4db2:	2102      	movs	r1, #2
   d4db4:	f7ff feb0 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4db8:	bd10      	pop	{r4, pc}
   d4dba:	bf00      	nop
   d4dbc:	2003e33c 	.word	0x2003e33c
   d4dc0:	2003e12c 	.word	0x2003e12c
   d4dc4:	000ddc4f 	.word	0x000ddc4f
   d4dc8:	000ddc66 	.word	0x000ddc66

000d4dcc <BlynkWidgetWrite3>:
{
   d4dcc:	b510      	push	{r4, lr}
   d4dce:	6808      	ldr	r0, [r1, #0]
  sample_interval_min  = pinValue;	// desired sample interval in minutes
   d4dd0:	4c0e      	ldr	r4, [pc, #56]	; (d4e0c <BlynkWidgetWrite3+0x40>)
   d4dd2:	f006 ffa4 	bl	dbd1e <atoi>
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4dd6:	490e      	ldr	r1, [pc, #56]	; (d4e10 <BlynkWidgetWrite3+0x44>)
  sample_interval_min  = pinValue;	// desired sample interval in minutes
   d4dd8:	6020      	str	r0, [r4, #0]
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4dda:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4dde:	4343      	muls	r3, r0
   d4de0:	600b      	str	r3, [r1, #0]
   d4de2:	4602      	mov	r2, r0
  Blynk.virtualWrite(13, sample_interval_min); // virtual pin 
   d4de4:	210d      	movs	r1, #13
   d4de6:	480b      	ldr	r0, [pc, #44]	; (d4e14 <BlynkWidgetWrite3+0x48>)
   d4de8:	f7ff ff9a 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "sample interval set to: ");
   d4dec:	4a0a      	ldr	r2, [pc, #40]	; (d4e18 <BlynkWidgetWrite3+0x4c>)
   d4dee:	4809      	ldr	r0, [pc, #36]	; (d4e14 <BlynkWidgetWrite3+0x48>)
   d4df0:	2102      	movs	r1, #2
   d4df2:	f7ff fe91 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, sample_interval_min); 
   d4df6:	6822      	ldr	r2, [r4, #0]
   d4df8:	4806      	ldr	r0, [pc, #24]	; (d4e14 <BlynkWidgetWrite3+0x48>)
   d4dfa:	2102      	movs	r1, #2
   d4dfc:	f7ff ff90 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " min\n");
   d4e00:	4a06      	ldr	r2, [pc, #24]	; (d4e1c <BlynkWidgetWrite3+0x50>)
   d4e02:	4804      	ldr	r0, [pc, #16]	; (d4e14 <BlynkWidgetWrite3+0x48>)
   d4e04:	2102      	movs	r1, #2
   d4e06:	f7ff fe87 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4e0a:	bd10      	pop	{r4, pc}
   d4e0c:	2003ded8 	.word	0x2003ded8
   d4e10:	2003e35c 	.word	0x2003e35c
   d4e14:	2003e12c 	.word	0x2003e12c
   d4e18:	000ddc6b 	.word	0x000ddc6b
   d4e1c:	000ddc84 	.word	0x000ddc84

000d4e20 <BlynkWidgetWrite4>:
{
   d4e20:	b510      	push	{r4, lr}
   d4e22:	6808      	ldr	r0, [r1, #0]
  threshold  = pinValue; // depth threshold (cm) for autosampler to begin sample collection
   d4e24:	4c0c      	ldr	r4, [pc, #48]	; (d4e58 <BlynkWidgetWrite4+0x38>)
   d4e26:	f006 ff7a 	bl	dbd1e <atoi>
  Blynk.virtualWrite(14, threshold); // virtual pin
   d4e2a:	210e      	movs	r1, #14
   d4e2c:	4602      	mov	r2, r0
  threshold  = pinValue; // depth threshold (cm) for autosampler to begin sample collection
   d4e2e:	6020      	str	r0, [r4, #0]
  Blynk.virtualWrite(14, threshold); // virtual pin
   d4e30:	480a      	ldr	r0, [pc, #40]	; (d4e5c <BlynkWidgetWrite4+0x3c>)
   d4e32:	f7ff ff75 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "threshold set to: ");
   d4e36:	4a0a      	ldr	r2, [pc, #40]	; (d4e60 <BlynkWidgetWrite4+0x40>)
   d4e38:	4808      	ldr	r0, [pc, #32]	; (d4e5c <BlynkWidgetWrite4+0x3c>)
   d4e3a:	2102      	movs	r1, #2
   d4e3c:	f7ff fe6c 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, threshold); 
   d4e40:	6822      	ldr	r2, [r4, #0]
   d4e42:	4806      	ldr	r0, [pc, #24]	; (d4e5c <BlynkWidgetWrite4+0x3c>)
   d4e44:	2102      	movs	r1, #2
   d4e46:	f7ff ff6b 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " cm\n"); 
   d4e4a:	4a06      	ldr	r2, [pc, #24]	; (d4e64 <BlynkWidgetWrite4+0x44>)
   d4e4c:	4803      	ldr	r0, [pc, #12]	; (d4e5c <BlynkWidgetWrite4+0x3c>)
   d4e4e:	2102      	movs	r1, #2
   d4e50:	f7ff fe62 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4e54:	bd10      	pop	{r4, pc}
   d4e56:	bf00      	nop
   d4e58:	2003df44 	.word	0x2003df44
   d4e5c:	2003e12c 	.word	0x2003e12c
   d4e60:	000ddc8a 	.word	0x000ddc8a
   d4e64:	000ddc9d 	.word	0x000ddc9d

000d4e68 <BlynkWidgetWrite5>:
{
   d4e68:	b510      	push	{r4, lr}
   d4e6a:	6808      	ldr	r0, [r1, #0]
  sample_bottle_mL  = pinValue; // sample bottle volume in mL
   d4e6c:	4c0c      	ldr	r4, [pc, #48]	; (d4ea0 <BlynkWidgetWrite5+0x38>)
   d4e6e:	f006 ff56 	bl	dbd1e <atoi>
  Blynk.virtualWrite(15, sample_bottle_mL); // virtual pin 
   d4e72:	210f      	movs	r1, #15
   d4e74:	4602      	mov	r2, r0
  sample_bottle_mL  = pinValue; // sample bottle volume in mL
   d4e76:	6020      	str	r0, [r4, #0]
  Blynk.virtualWrite(15, sample_bottle_mL); // virtual pin 
   d4e78:	480a      	ldr	r0, [pc, #40]	; (d4ea4 <BlynkWidgetWrite5+0x3c>)
   d4e7a:	f7ff ff51 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "sample_bottle_mL set to: ");
   d4e7e:	4a0a      	ldr	r2, [pc, #40]	; (d4ea8 <BlynkWidgetWrite5+0x40>)
   d4e80:	4808      	ldr	r0, [pc, #32]	; (d4ea4 <BlynkWidgetWrite5+0x3c>)
   d4e82:	2102      	movs	r1, #2
   d4e84:	f7ff fe48 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, sample_bottle_mL); 
   d4e88:	6822      	ldr	r2, [r4, #0]
   d4e8a:	4806      	ldr	r0, [pc, #24]	; (d4ea4 <BlynkWidgetWrite5+0x3c>)
   d4e8c:	2102      	movs	r1, #2
   d4e8e:	f7ff ff47 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " mL\n");
   d4e92:	4a06      	ldr	r2, [pc, #24]	; (d4eac <BlynkWidgetWrite5+0x44>)
   d4e94:	4803      	ldr	r0, [pc, #12]	; (d4ea4 <BlynkWidgetWrite5+0x3c>)
   d4e96:	2102      	movs	r1, #2
   d4e98:	f7ff fe3e 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4e9c:	bd10      	pop	{r4, pc}
   d4e9e:	bf00      	nop
   d4ea0:	2003ded4 	.word	0x2003ded4
   d4ea4:	2003e12c 	.word	0x2003e12c
   d4ea8:	000ddca2 	.word	0x000ddca2
   d4eac:	000ddc66 	.word	0x000ddc66

000d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4eb4:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4eb8:	ab08      	add	r3, sp, #32
   d4eba:	2400      	movs	r4, #0
   d4ebc:	4605      	mov	r5, r0
   d4ebe:	460e      	mov	r6, r1
   d4ec0:	9305      	str	r3, [sp, #20]
   d4ec2:	a805      	add	r0, sp, #20
   d4ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4ec8:	4915      	ldr	r1, [pc, #84]	; (d4f20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x70>)
   d4eca:	ee10 8a10 	vmov	r8, s0
   d4ece:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4ed2:	f7ff f8f0 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4ed6:	a805      	add	r0, sp, #20
   d4ed8:	4631      	mov	r1, r6
   d4eda:	f7ff f953 	bl	d4184 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d4ede:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
   d4ee2:	9b05      	ldr	r3, [sp, #20]
   d4ee4:	4640      	mov	r0, r8
   d4ee6:	1b8f      	subs	r7, r1, r6
   d4ee8:	441e      	add	r6, r3
   d4eea:	f006 fb57 	bl	db59c <__aeabi_f2d>
   d4eee:	4a0d      	ldr	r2, [pc, #52]	; (d4f24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x74>)
   d4ef0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ef4:	4639      	mov	r1, r7
   d4ef6:	4630      	mov	r0, r6
   d4ef8:	f002 fe84 	bl	d7c04 <snprintf>
   d4efc:	1c43      	adds	r3, r0, #1
   d4efe:	9806      	ldr	r0, [sp, #24]
   d4f00:	4403      	add	r3, r0
   d4f02:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4f04:	3b01      	subs	r3, #1
   d4f06:	9300      	str	r3, [sp, #0]
   d4f08:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4f0c:	9b05      	ldr	r3, [sp, #20]
   d4f0e:	4622      	mov	r2, r4
   d4f10:	2114      	movs	r1, #20
   d4f12:	4628      	mov	r0, r5
   d4f14:	f7ff fd40 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4f18:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f20:	000ddc25 	.word	0x000ddc25
   d4f24:	000ddcbc 	.word	0x000ddcbc

000d4f28 <_Z13reportingDatav>:
bool reportingData() {  // send data to Blynk
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	ed2d 8b02 	vpush	{d8}
  Blynk.virtualWrite(10, float(volCal1*sampleSteps)); // virtual pin 
   d4f2e:	4b21      	ldr	r3, [pc, #132]	; (d4fb4 <_Z13reportingDatav+0x8c>)
   d4f30:	4821      	ldr	r0, [pc, #132]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4f32:	ed93 0a00 	vldr	s0, [r3]
   d4f36:	4b21      	ldr	r3, [pc, #132]	; (d4fbc <_Z13reportingDatav+0x94>)
  Blynk.virtualWrite(13, float(primeMillis)/1000); // virtual pin 
   d4f38:	ed9f 8a21 	vldr	s16, [pc, #132]	; d4fc0 <_Z13reportingDatav+0x98>
  Blynk.virtualWrite(10, float(volCal1*sampleSteps)); // virtual pin 
   d4f3c:	edd3 7a00 	vldr	s15, [r3]
   d4f40:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f44:	210a      	movs	r1, #10
   d4f46:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4f4a:	f7ff ffb1 	bl	d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4f4e:	4b1d      	ldr	r3, [pc, #116]	; (d4fc4 <_Z13reportingDatav+0x9c>)
   d4f50:	4819      	ldr	r0, [pc, #100]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4f52:	681a      	ldr	r2, [r3, #0]
   d4f54:	210c      	movs	r1, #12
   d4f56:	f7ff fee3 	bl	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(13, float(primeMillis)/1000); // virtual pin 
   d4f5a:	4b1b      	ldr	r3, [pc, #108]	; (d4fc8 <_Z13reportingDatav+0xa0>)
   d4f5c:	4816      	ldr	r0, [pc, #88]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4f5e:	ed93 0a00 	vldr	s0, [r3]
   d4f62:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f66:	210d      	movs	r1, #13
   d4f68:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f6c:	f7ff ffa0 	bl	d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(14, float(sampleMillis)/1000); // virtual pin
   d4f70:	4b16      	ldr	r3, [pc, #88]	; (d4fcc <_Z13reportingDatav+0xa4>)
   d4f72:	4811      	ldr	r0, [pc, #68]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4f74:	210e      	movs	r1, #14
   d4f76:	ed93 0a00 	vldr	s0, [r3]
   d4f7a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f7e:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f82:	f7ff ff95 	bl	d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(16, float(purgeMillis)/1000); // virtual pin
   d4f86:	4b12      	ldr	r3, [pc, #72]	; (d4fd0 <_Z13reportingDatav+0xa8>)
   d4f88:	480b      	ldr	r0, [pc, #44]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4f8a:	2110      	movs	r1, #16
   d4f8c:	ed93 0a00 	vldr	s0, [r3]
   d4f90:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f94:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f98:	f7ff ff8a 	bl	d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(17, depth); // virtual pin
   d4f9c:	4b0d      	ldr	r3, [pc, #52]	; (d4fd4 <_Z13reportingDatav+0xac>)
   d4f9e:	4806      	ldr	r0, [pc, #24]	; (d4fb8 <_Z13reportingDatav+0x90>)
   d4fa0:	2111      	movs	r1, #17
   d4fa2:	ed93 0a00 	vldr	s0, [r3]
   d4fa6:	f7ff ff83 	bl	d4eb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
}
   d4faa:	ecbd 8b02 	vpop	{d8}
   d4fae:	2001      	movs	r0, #1
   d4fb0:	bd08      	pop	{r3, pc}
   d4fb2:	bf00      	nop
   d4fb4:	2003ded0 	.word	0x2003ded0
   d4fb8:	2003e12c 	.word	0x2003e12c
   d4fbc:	2003df48 	.word	0x2003df48
   d4fc0:	447a0000 	.word	0x447a0000
   d4fc4:	2003e33c 	.word	0x2003e33c
   d4fc8:	2003e348 	.word	0x2003e348
   d4fcc:	2003e354 	.word	0x2003e354
   d4fd0:	2003e34c 	.word	0x2003e34c
   d4fd4:	2003e194 	.word	0x2003e194

000d4fd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fda:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4fde:	ab08      	add	r3, sp, #32
   d4fe0:	2400      	movs	r4, #0
   d4fe2:	4605      	mov	r5, r0
   d4fe4:	460f      	mov	r7, r1
   d4fe6:	9305      	str	r3, [sp, #20]
   d4fe8:	a805      	add	r0, sp, #20
   d4fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4fee:	490e      	ldr	r1, [pc, #56]	; (d5028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_+0x50>)
   d4ff0:	4616      	mov	r6, r2
   d4ff2:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4ff6:	f7ff f85e 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4ffa:	4639      	mov	r1, r7
   d4ffc:	a805      	add	r0, sp, #20
   d4ffe:	f7ff f8c1 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d5002:	4631      	mov	r1, r6
   d5004:	a805      	add	r0, sp, #20
   d5006:	f7ff f8ac 	bl	d4162 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d500a:	9b06      	ldr	r3, [sp, #24]
   d500c:	3b01      	subs	r3, #1
   d500e:	9300      	str	r3, [sp, #0]
   d5010:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5014:	9b05      	ldr	r3, [sp, #20]
   d5016:	4622      	mov	r2, r4
   d5018:	2114      	movs	r1, #20
   d501a:	4628      	mov	r0, r5
   d501c:	f7ff fcbc 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5020:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d5024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5026:	bf00      	nop
   d5028:	000ddc25 	.word	0x000ddc25

000d502c <_Z20printStateTransitionv>:
{
   d502c:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d502e:	4d12      	ldr	r5, [pc, #72]	; (d5078 <_Z20printStateTransitionv+0x4c>)
   d5030:	4c12      	ldr	r4, [pc, #72]	; (d507c <_Z20printStateTransitionv+0x50>)
   d5032:	4913      	ldr	r1, [pc, #76]	; (d5080 <_Z20printStateTransitionv+0x54>)
   d5034:	782a      	ldrb	r2, [r5, #0]
   d5036:	7820      	ldrb	r0, [r4, #0]
{
   d5038:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d503a:	230e      	movs	r3, #14
   d503c:	fb03 1202 	mla	r2, r3, r2, r1
   d5040:	9200      	str	r2, [sp, #0]
   d5042:	fb03 1300 	mla	r3, r3, r0, r1
   d5046:	4a0f      	ldr	r2, [pc, #60]	; (d5084 <_Z20printStateTransitionv+0x58>)
   d5048:	2128      	movs	r1, #40	; 0x28
   d504a:	a802      	add	r0, sp, #8
   d504c:	f002 fdda 	bl	d7c04 <snprintf>
  oldState = state;
   d5050:	782b      	ldrb	r3, [r5, #0]
   d5052:	7023      	strb	r3, [r4, #0]
  Serial.println(stateTransitionString);
   d5054:	f003 ff8e 	bl	d8f74 <_Z16_fetch_usbserialv>
   d5058:	a902      	add	r1, sp, #8
   d505a:	f003 f9bc 	bl	d83d6 <_ZN5Print7printlnEPKc>
  Blynk.virtualWrite(V2, stateTransitionString);
   d505e:	aa02      	add	r2, sp, #8
   d5060:	4809      	ldr	r0, [pc, #36]	; (d5088 <_Z20printStateTransitionv+0x5c>)
   d5062:	2102      	movs	r1, #2
   d5064:	f7ff ffb8 	bl	d4fd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_>
  Blynk.virtualWrite(V2, "\n");
   d5068:	4a08      	ldr	r2, [pc, #32]	; (d508c <_Z20printStateTransitionv+0x60>)
   d506a:	4807      	ldr	r0, [pc, #28]	; (d5088 <_Z20printStateTransitionv+0x5c>)
   d506c:	2102      	movs	r1, #2
   d506e:	f7ff fd53 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d5072:	b00d      	add	sp, #52	; 0x34
   d5074:	bd30      	pop	{r4, r5, pc}
   d5076:	bf00      	nop
   d5078:	2003e374 	.word	0x2003e374
   d507c:	2003e340 	.word	0x2003e340
   d5080:	2003dedd 	.word	0x2003dedd
   d5084:	000ddcc2 	.word	0x000ddcc2
   d5088:	2003e12c 	.word	0x2003e12c
   d508c:	000de124 	.word	0x000de124

000d5090 <_Z11primeSystemv>:
bool primeSystem() {    // prime system with water 
   d5090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   digitalWrite(STEPEN_PIN1, LOW); // Pump on
   d5094:	2100      	movs	r1, #0
   d5096:	2002      	movs	r0, #2
   d5098:	f004 fca7 	bl	d99ea <digitalWrite>
   digitalWrite(STEPEN_PIN2, LOW); // Pump on
   d509c:	2100      	movs	r1, #0
   d509e:	200f      	movs	r0, #15
   d50a0:	f004 fca3 	bl	d99ea <digitalWrite>
   d50a4:	f002 fb6a 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
   startMillis=millis();
   d50a8:	4d29      	ldr	r5, [pc, #164]	; (d5150 <_Z11primeSystemv+0xc0>)
   currentMillis=startMillis;
   d50aa:	4c2a      	ldr	r4, [pc, #168]	; (d5154 <_Z11primeSystemv+0xc4>)
   startMillis=millis();
   d50ac:	6028      	str	r0, [r5, #0]
   currentMillis=startMillis;
   d50ae:	6020      	str	r0, [r4, #0]
   waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d50b0:	2004      	movs	r0, #4
   d50b2:	f004 fcb3 	bl	d9a1c <digitalRead>
   d50b6:	4601      	mov	r1, r0
   d50b8:	4827      	ldr	r0, [pc, #156]	; (d5158 <_Z11primeSystemv+0xc8>)
   d50ba:	4e28      	ldr	r6, [pc, #160]	; (d515c <_Z11primeSystemv+0xcc>)
   d50bc:	4f28      	ldr	r7, [pc, #160]	; (d5160 <_Z11primeSystemv+0xd0>)
     stepper1.setSpeed(stepperSpeed);
   d50be:	f8df 80b4 	ldr.w	r8, [pc, #180]	; d5174 <_Z11primeSystemv+0xe4>
   d50c2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d516c <_Z11primeSystemv+0xdc>
   waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d50c6:	f7ff f943 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
   d50ca:	6030      	str	r0, [r6, #0]
   while (waterMean != 0 && (currentMillis-startMillis)<maxprimeMillis){
   d50cc:	6833      	ldr	r3, [r6, #0]
   d50ce:	b34b      	cbz	r3, d5124 <_Z11primeSystemv+0x94>
   d50d0:	682a      	ldr	r2, [r5, #0]
   d50d2:	6823      	ldr	r3, [r4, #0]
   d50d4:	1a9b      	subs	r3, r3, r2
   d50d6:	683a      	ldr	r2, [r7, #0]
   d50d8:	4293      	cmp	r3, r2
   d50da:	d223      	bcs.n	d5124 <_Z11primeSystemv+0x94>
     stepper1.setSpeed(stepperSpeed);
   d50dc:	edd8 7a00 	vldr	s15, [r8]
   d50e0:	4648      	mov	r0, r9
   d50e2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d50e6:	f000 feeb 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d50ea:	4648      	mov	r0, r9
   d50ec:	f000 fd46 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
     stepper2.setSpeed(stepperSpeed);
   d50f0:	edd8 7a00 	vldr	s15, [r8]
   d50f4:	481b      	ldr	r0, [pc, #108]	; (d5164 <_Z11primeSystemv+0xd4>)
   d50f6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d50fa:	f000 fee1 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper2.runSpeed();
   d50fe:	4819      	ldr	r0, [pc, #100]	; (d5164 <_Z11primeSystemv+0xd4>)
   d5100:	f000 fd3c 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
   d5104:	f002 fb3a 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
     currentMillis=millis();   // wait for prime of tubing or runs of time
   d5108:	6020      	str	r0, [r4, #0]
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d510a:	2004      	movs	r0, #4
   d510c:	f004 fc86 	bl	d9a1c <digitalRead>
   d5110:	4601      	mov	r1, r0
   d5112:	4811      	ldr	r0, [pc, #68]	; (d5158 <_Z11primeSystemv+0xc8>)
   d5114:	f7ff f91c 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
     Blynk.run();
   d5118:	2100      	movs	r1, #0
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d511a:	6030      	str	r0, [r6, #0]
     Blynk.run();
   d511c:	4812      	ldr	r0, [pc, #72]	; (d5168 <_Z11primeSystemv+0xd8>)
   d511e:	f7ff fb83 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (waterMean != 0 && (currentMillis-startMillis)<maxprimeMillis){
   d5122:	e7d3      	b.n	d50cc <_Z11primeSystemv+0x3c>
   stepper1.stop();       // turn Pump1 Off
   d5124:	4811      	ldr	r0, [pc, #68]	; (d516c <_Z11primeSystemv+0xdc>)
   d5126:	f000 ff13 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   stepper2.stop();       // turn Pump2 Off
   d512a:	480e      	ldr	r0, [pc, #56]	; (d5164 <_Z11primeSystemv+0xd4>)
   d512c:	f000 ff10 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   delay(50);
   d5130:	2032      	movs	r0, #50	; 0x32
   d5132:	f003 fa2f 	bl	d8594 <delay>
   if((currentMillis-startMillis)<=maxprimeMillis){
   d5136:	682a      	ldr	r2, [r5, #0]
   d5138:	6823      	ldr	r3, [r4, #0]
   d513a:	1a9b      	subs	r3, r3, r2
   d513c:	683a      	ldr	r2, [r7, #0]
   d513e:	4293      	cmp	r3, r2
    primeMillis=currentMillis-startMillis;
   d5140:	bf9d      	ittte	ls
   d5142:	4a0b      	ldrls	r2, [pc, #44]	; (d5170 <_Z11primeSystemv+0xe0>)
   d5144:	6013      	strls	r3, [r2, #0]
    return 1;   // successful prime
   d5146:	2001      	movls	r0, #1
   else return 0;   // prime failed
   d5148:	2000      	movhi	r0, #0
}
   d514a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d514e:	bf00      	nop
   d5150:	2003e370 	.word	0x2003e370
   d5154:	2003e190 	.word	0x2003e190
   d5158:	2003e198 	.word	0x2003e198
   d515c:	2003e444 	.word	0x2003e444
   d5160:	2003dec4 	.word	0x2003dec4
   d5164:	2003e3cc 	.word	0x2003e3cc
   d5168:	2003e12c 	.word	0x2003e12c
   d516c:	2003e378 	.word	0x2003e378
   d5170:	2003e348 	.word	0x2003e348
   d5174:	2003df40 	.word	0x2003df40

000d5178 <_Z13collectSamplev>:
bool collectSample() {  // pump desired volume into sample bottle
   d5178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   digitalWrite(STEPEN_PIN1,LOW);    // pump1 on
   d517c:	2100      	movs	r1, #0
   d517e:	2002      	movs	r0, #2
   d5180:	f004 fc33 	bl	d99ea <digitalWrite>
   digitalWrite(STEPEN_PIN2,LOW);    // pump2 on
   d5184:	2100      	movs	r1, #0
   d5186:	200f      	movs	r0, #15
   d5188:	f004 fc2f 	bl	d99ea <digitalWrite>
   d518c:	f002 faf6 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
   sampleSteps = ml_to_collect/volCal1;
   d5190:	4b5d      	ldr	r3, [pc, #372]	; (d5308 <_Z13collectSamplev+0x190>)
   startMillis=millis();
   d5192:	4d5e      	ldr	r5, [pc, #376]	; (d530c <_Z13collectSamplev+0x194>)
   sampleSteps = ml_to_collect/volCal1;
   d5194:	ed93 7a00 	vldr	s14, [r3]
   d5198:	4b5d      	ldr	r3, [pc, #372]	; (d5310 <_Z13collectSamplev+0x198>)
   currentMillis=startMillis;
   d519a:	4c5e      	ldr	r4, [pc, #376]	; (d5314 <_Z13collectSamplev+0x19c>)
   sampleSteps = ml_to_collect/volCal1;
   d519c:	edd3 6a00 	vldr	s13, [r3]
   d51a0:	4e5d      	ldr	r6, [pc, #372]	; (d5318 <_Z13collectSamplev+0x1a0>)
   startMillis=millis();
   d51a2:	6028      	str	r0, [r5, #0]
   sampleSteps = ml_to_collect/volCal1;
   d51a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   currentMillis=startMillis;
   d51a8:	6020      	str	r0, [r4, #0]
   sampleSteps = ml_to_collect/volCal1;
   d51aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
   stepper1.setCurrentPosition(0);
   d51ae:	485b      	ldr	r0, [pc, #364]	; (d531c <_Z13collectSamplev+0x1a4>)
   while (stepper1.currentPosition() != sampleSteps && stepper2.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d51b0:	4f5a      	ldr	r7, [pc, #360]	; (d531c <_Z13collectSamplev+0x1a4>)
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d51b2:	f8df 9190 	ldr.w	r9, [pc, #400]	; d5344 <_Z13collectSamplev+0x1cc>
   stepper1.setCurrentPosition(0);
   d51b6:	2100      	movs	r1, #0
   d51b8:	46b2      	mov	sl, r6
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d51ba:	f04f 0800 	mov.w	r8, #0
   sampleSteps = ml_to_collect/volCal1;
   d51be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d51c2:	edc6 7a00 	vstr	s15, [r6]
   stepper1.setCurrentPosition(0);
   d51c6:	f000 fcf8 	bl	d5bba <_ZN12AccelStepper18setCurrentPositionEl>
   stepper2.setCurrentPosition(0);
   d51ca:	4855      	ldr	r0, [pc, #340]	; (d5320 <_Z13collectSamplev+0x1a8>)
   d51cc:	2100      	movs	r1, #0
   d51ce:	f000 fcf4 	bl	d5bba <_ZN12AccelStepper18setCurrentPositionEl>
   while (stepper1.currentPosition() != sampleSteps && stepper2.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d51d2:	4638      	mov	r0, r7
   d51d4:	f000 fcef 	bl	d5bb6 <_ZN12AccelStepper15currentPositionEv>
   d51d8:	f8da 3000 	ldr.w	r3, [sl]
   d51dc:	4e51      	ldr	r6, [pc, #324]	; (d5324 <_Z13collectSamplev+0x1ac>)
   d51de:	4298      	cmp	r0, r3
   d51e0:	d070      	beq.n	d52c4 <_Z13collectSamplev+0x14c>
   d51e2:	484f      	ldr	r0, [pc, #316]	; (d5320 <_Z13collectSamplev+0x1a8>)
   d51e4:	f000 fce7 	bl	d5bb6 <_ZN12AccelStepper15currentPositionEv>
   d51e8:	f8da 3000 	ldr.w	r3, [sl]
   d51ec:	4298      	cmp	r0, r3
   d51ee:	d069      	beq.n	d52c4 <_Z13collectSamplev+0x14c>
   d51f0:	6829      	ldr	r1, [r5, #0]
   d51f2:	6823      	ldr	r3, [r4, #0]
   d51f4:	1a5b      	subs	r3, r3, r1
   d51f6:	6831      	ldr	r1, [r6, #0]
   d51f8:	428b      	cmp	r3, r1
   d51fa:	d263      	bcs.n	d52c4 <_Z13collectSamplev+0x14c>
     stepper1.setSpeed(stepperSpeed);
   d51fc:	4e4a      	ldr	r6, [pc, #296]	; (d5328 <_Z13collectSamplev+0x1b0>)
   d51fe:	f002 fabd 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
   d5202:	edd6 7a00 	vldr	s15, [r6]
     currentMillis=millis(); // wait for sampling to complete or run out of time
   d5206:	6020      	str	r0, [r4, #0]
     stepper1.setSpeed(stepperSpeed);
   d5208:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d520c:	4638      	mov	r0, r7
   d520e:	f000 fe57 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d5212:	4638      	mov	r0, r7
   d5214:	f000 fcb2 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
     stepper2.setSpeed(stepperSpeed);
   d5218:	ed96 0a00 	vldr	s0, [r6]
   d521c:	4840      	ldr	r0, [pc, #256]	; (d5320 <_Z13collectSamplev+0x1a8>)
   d521e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d5222:	f000 fe4d 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper2.runSpeed();
   d5226:	483e      	ldr	r0, [pc, #248]	; (d5320 <_Z13collectSamplev+0x1a8>)
   d5228:	f000 fca8 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d522c:	2011      	movs	r0, #17
   d522e:	f7fe ffff 	bl	d4230 <_Z11ReadVoltageh>
   d5232:	ec51 0b10 	vmov	r0, r1, d0
   d5236:	f006 fd01 	bl	dbc3c <__aeabi_d2f>
	_sum += value;
   d523a:	4b3c      	ldr	r3, [pc, #240]	; (d532c <_Z13collectSamplev+0x1b4>)
	if (_count >= _windowSize)
   d523c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
	_sum += value;
   d5240:	edd3 7a04 	vldr	s15, [r3, #16]
   d5244:	ee07 0a10 	vmov	s14, r0
	if (_count >= _windowSize)
   d5248:	4291      	cmp	r1, r2
	_sum += value;
   d524a:	ee77 7a27 	vadd.f32	s15, s14, s15
		_sum -= *_accessor;
   d524e:	bfa8      	it	ge
   d5250:	685a      	ldrge	r2, [r3, #4]
	_sum += value;
   d5252:	edc3 7a04 	vstr	s15, [r3, #16]
		_sum -= *_accessor;
   d5256:	bfa8      	it	ge
   d5258:	edd2 6a00 	vldrge	s13, [r2]
	*_accessor = value;
   d525c:	685a      	ldr	r2, [r3, #4]
		_sum -= *_accessor;
   d525e:	bfa4      	itt	ge
   d5260:	ee77 7ae6 	vsubge.f32	s15, s15, s13
   d5264:	edc3 7a04 	vstrge	s15, [r3, #16]
	*_accessor = value;
   d5268:	6010      	str	r0, [r2, #0]
	if (_accessor >= _items + _windowSize)
   d526a:	6818      	ldr	r0, [r3, #0]
	++_accessor;
   d526c:	685a      	ldr	r2, [r3, #4]
	if (_accessor >= _items + _windowSize)
   d526e:	6899      	ldr	r1, [r3, #8]
	return (_sum / _count);
   d5270:	ed93 7a04 	vldr	s14, [r3, #16]
	if (_accessor >= _items + _windowSize)
   d5274:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
	++_accessor;
   d5278:	3204      	adds	r2, #4
		_accessor = _items;
   d527a:	4562      	cmp	r2, ip
   d527c:	bf28      	it	cs
   d527e:	4602      	movcs	r2, r0
   d5280:	605a      	str	r2, [r3, #4]
	if (_count < _windowSize)
   d5282:	68da      	ldr	r2, [r3, #12]
   d5284:	428a      	cmp	r2, r1
		++_count;
   d5286:	bfbc      	itt	lt
   d5288:	3201      	addlt	r2, #1
   d528a:	60da      	strlt	r2, [r3, #12]
	return (_sum / _count);
   d528c:	edd3 7a03 	vldr	s15, [r3, #12]
   d5290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5294:	eec7 7a27 	vdiv.f32	s15, s14, s15
   d5298:	ee17 0a90 	vmov	r0, s15
   d529c:	f006 f97e 	bl	db59c <__aeabi_f2d>
   d52a0:	4642      	mov	r2, r8
   d52a2:	464b      	mov	r3, r9
   d52a4:	f006 f9d2 	bl	db64c <__aeabi_dmul>
   d52a8:	a315      	add	r3, pc, #84	; (adr r3, d5300 <_Z13collectSamplev+0x188>)
   d52aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52ae:	f006 f9cd 	bl	db64c <__aeabi_dmul>
   d52b2:	f006 fcc3 	bl	dbc3c <__aeabi_d2f>
   d52b6:	4b1e      	ldr	r3, [pc, #120]	; (d5330 <_Z13collectSamplev+0x1b8>)
     Blynk.run();
   d52b8:	2100      	movs	r1, #0
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d52ba:	6018      	str	r0, [r3, #0]
     Blynk.run();
   d52bc:	481d      	ldr	r0, [pc, #116]	; (d5334 <_Z13collectSamplev+0x1bc>)
   d52be:	f7ff fab3 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (stepper1.currentPosition() != sampleSteps && stepper2.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d52c2:	e786      	b.n	d51d2 <_Z13collectSamplev+0x5a>
   stepper1.stop();       // turn Pump Off
   d52c4:	4815      	ldr	r0, [pc, #84]	; (d531c <_Z13collectSamplev+0x1a4>)
   d52c6:	f000 fe43 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   stepper2.stop();       // turn Pump Off
   d52ca:	4815      	ldr	r0, [pc, #84]	; (d5320 <_Z13collectSamplev+0x1a8>)
   d52cc:	f000 fe40 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   delay(50);
   d52d0:	2032      	movs	r0, #50	; 0x32
   d52d2:	f003 f95f 	bl	d8594 <delay>
   if((currentMillis-startMillis)<maxsampleMillis){
   d52d6:	6829      	ldr	r1, [r5, #0]
   d52d8:	6823      	ldr	r3, [r4, #0]
   d52da:	6832      	ldr	r2, [r6, #0]
   d52dc:	1a5b      	subs	r3, r3, r1
   d52de:	4293      	cmp	r3, r2
   d52e0:	d20a      	bcs.n	d52f8 <_Z13collectSamplev+0x180>
    sampleMillis=currentMillis-startMillis;
   d52e2:	4a15      	ldr	r2, [pc, #84]	; (d5338 <_Z13collectSamplev+0x1c0>)
   d52e4:	6013      	str	r3, [r2, #0]
    old_sample_millis = startMillis;
   d52e6:	4b15      	ldr	r3, [pc, #84]	; (d533c <_Z13collectSamplev+0x1c4>)
	  sample_number++;
   d52e8:	4a15      	ldr	r2, [pc, #84]	; (d5340 <_Z13collectSamplev+0x1c8>)
    old_sample_millis = startMillis;
   d52ea:	6019      	str	r1, [r3, #0]
	  sample_number++;
   d52ec:	6813      	ldr	r3, [r2, #0]
   d52ee:	3301      	adds	r3, #1
   d52f0:	6013      	str	r3, [r2, #0]
    return 1;   // successful sample
   d52f2:	2001      	movs	r0, #1
}
   d52f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   else return 0;   // sample failed
   d52f8:	2000      	movs	r0, #0
   d52fa:	e7fb      	b.n	d52f4 <_Z13collectSamplev+0x17c>
   d52fc:	f3af 8000 	nop.w
   d5300:	33333333 	.word	0x33333333
   d5304:	3ff03333 	.word	0x3ff03333
   d5308:	2003e33c 	.word	0x2003e33c
   d530c:	2003e370 	.word	0x2003e370
   d5310:	2003df48 	.word	0x2003df48
   d5314:	2003e190 	.word	0x2003e190
   d5318:	2003ded0 	.word	0x2003ded0
   d531c:	2003e378 	.word	0x2003e378
   d5320:	2003e3cc 	.word	0x2003e3cc
   d5324:	2003decc 	.word	0x2003decc
   d5328:	2003df40 	.word	0x2003df40
   d532c:	2003e430 	.word	0x2003e430
   d5330:	2003e18c 	.word	0x2003e18c
   d5334:	2003e12c 	.word	0x2003e12c
   d5338:	2003e354 	.word	0x2003e354
   d533c:	2003e344 	.word	0x2003e344
   d5340:	2003e364 	.word	0x2003e364
   d5344:	40240000 	.word	0x40240000

000d5348 <_Z11purgeSystemv>:
bool purgeSystem() {  // reverse pump and purge water lines of all water
   d5348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   if (primeMillis>1000){           // if > 1s
   d534c:	4b37      	ldr	r3, [pc, #220]	; (d542c <_Z11purgeSystemv+0xe4>)
   d534e:	4d38      	ldr	r5, [pc, #224]	; (d5430 <_Z11purgeSystemv+0xe8>)
   d5350:	681b      	ldr	r3, [r3, #0]
   startMillis=millis();
   d5352:	4e38      	ldr	r6, [pc, #224]	; (d5434 <_Z11purgeSystemv+0xec>)
   currentMillis=startMillis;
   d5354:	4c38      	ldr	r4, [pc, #224]	; (d5438 <_Z11purgeSystemv+0xf0>)
   sampleStepsPerge = sampleSteps*-1;
   d5356:	4f39      	ldr	r7, [pc, #228]	; (d543c <_Z11purgeSystemv+0xf4>)
   while (stepper1.currentPosition() != sampleStepsPerge && stepper2.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d5358:	f8df 90e8 	ldr.w	r9, [pc, #232]	; d5444 <_Z11purgeSystemv+0xfc>
   d535c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d5448 <_Z11purgeSystemv+0x100>
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d5360:	f8df a0f8 	ldr.w	sl, [pc, #248]	; d545c <_Z11purgeSystemv+0x114>
   if (primeMillis>1000){           // if > 1s
   d5364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     maxpurgeMillis= primeMillis*2;}
   d5368:	bf8c      	ite	hi
   d536a:	005b      	lslhi	r3, r3, #1
   maxpurgeMillis= 45*1000;}     // if <1s then default to 45s. 
   d536c:	f64a 73c8 	movwls	r3, #45000	; 0xafc8
   d5370:	602b      	str	r3, [r5, #0]
   d5372:	f002 fa03 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
   sampleStepsPerge = sampleSteps*-1;
   d5376:	4b32      	ldr	r3, [pc, #200]	; (d5440 <_Z11purgeSystemv+0xf8>)
   startMillis=millis();
   d5378:	6030      	str	r0, [r6, #0]
   sampleStepsPerge = sampleSteps*-1;
   d537a:	681b      	ldr	r3, [r3, #0]
   currentMillis=startMillis;
   d537c:	6020      	str	r0, [r4, #0]
   sampleStepsPerge = sampleSteps*-1;
   d537e:	425b      	negs	r3, r3
   stepper1.setCurrentPosition(0);
   d5380:	4830      	ldr	r0, [pc, #192]	; (d5444 <_Z11purgeSystemv+0xfc>)
   sampleStepsPerge = sampleSteps*-1;
   d5382:	603b      	str	r3, [r7, #0]
   stepper1.setCurrentPosition(0);
   d5384:	2100      	movs	r1, #0
   d5386:	f000 fc18 	bl	d5bba <_ZN12AccelStepper18setCurrentPositionEl>
   stepper2.setCurrentPosition(0);
   d538a:	482f      	ldr	r0, [pc, #188]	; (d5448 <_Z11purgeSystemv+0x100>)
   d538c:	2100      	movs	r1, #0
   d538e:	f000 fc14 	bl	d5bba <_ZN12AccelStepper18setCurrentPositionEl>
   while (stepper1.currentPosition() != sampleStepsPerge && stepper2.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d5392:	4648      	mov	r0, r9
   d5394:	f000 fc0f 	bl	d5bb6 <_ZN12AccelStepper15currentPositionEv>
   d5398:	683b      	ldr	r3, [r7, #0]
   d539a:	4298      	cmp	r0, r3
   d539c:	d02c      	beq.n	d53f8 <_Z11purgeSystemv+0xb0>
   d539e:	4640      	mov	r0, r8
   d53a0:	f000 fc09 	bl	d5bb6 <_ZN12AccelStepper15currentPositionEv>
   d53a4:	683b      	ldr	r3, [r7, #0]
   d53a6:	4298      	cmp	r0, r3
   d53a8:	d026      	beq.n	d53f8 <_Z11purgeSystemv+0xb0>
   d53aa:	6832      	ldr	r2, [r6, #0]
   d53ac:	6823      	ldr	r3, [r4, #0]
   d53ae:	1a9b      	subs	r3, r3, r2
   d53b0:	682a      	ldr	r2, [r5, #0]
   d53b2:	4293      	cmp	r3, r2
   d53b4:	d220      	bcs.n	d53f8 <_Z11purgeSystemv+0xb0>
   d53b6:	f002 f9e1 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
     currentMillis=millis(); // wait for purge to complete or run out of time
   d53ba:	6020      	str	r0, [r4, #0]
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d53bc:	2004      	movs	r0, #4
   d53be:	f004 fb2d 	bl	d9a1c <digitalRead>
   d53c2:	4601      	mov	r1, r0
   d53c4:	4650      	mov	r0, sl
   d53c6:	f7fe ffc3 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
   d53ca:	4b20      	ldr	r3, [pc, #128]	; (d544c <_Z11purgeSystemv+0x104>)
     stepper1.setSpeed(-1000);
   d53cc:	ed9f 0a20 	vldr	s0, [pc, #128]	; d5450 <_Z11purgeSystemv+0x108>
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d53d0:	6018      	str	r0, [r3, #0]
     stepper1.setSpeed(-1000);
   d53d2:	4648      	mov	r0, r9
   d53d4:	f000 fd74 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d53d8:	4648      	mov	r0, r9
   d53da:	f000 fbcf 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
     stepper2.setSpeed(-1000);
   d53de:	ed9f 0a1c 	vldr	s0, [pc, #112]	; d5450 <_Z11purgeSystemv+0x108>
   d53e2:	4640      	mov	r0, r8
   d53e4:	f000 fd6c 	bl	d5ec0 <_ZN12AccelStepper8setSpeedEf>
     stepper2.runSpeed();
   d53e8:	4640      	mov	r0, r8
   d53ea:	f000 fbc7 	bl	d5b7c <_ZN12AccelStepper8runSpeedEv>
     Blynk.run();
   d53ee:	2100      	movs	r1, #0
   d53f0:	4818      	ldr	r0, [pc, #96]	; (d5454 <_Z11purgeSystemv+0x10c>)
   d53f2:	f7ff fa19 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (stepper1.currentPosition() != sampleStepsPerge && stepper2.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d53f6:	e7cc      	b.n	d5392 <_Z11purgeSystemv+0x4a>
   stepper1.stop();       // turn Pump1 Off
   d53f8:	4812      	ldr	r0, [pc, #72]	; (d5444 <_Z11purgeSystemv+0xfc>)
   d53fa:	f000 fda9 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   stepper2.stop();       // turn Pump2 Off
   d53fe:	4812      	ldr	r0, [pc, #72]	; (d5448 <_Z11purgeSystemv+0x100>)
   d5400:	f000 fda6 	bl	d5f50 <_ZN12AccelStepper4stopEv>
   digitalWrite(STEPEN_PIN1,HIGH);    // pump1 off, forward
   d5404:	2101      	movs	r1, #1
   d5406:	2002      	movs	r0, #2
   d5408:	f004 faef 	bl	d99ea <digitalWrite>
   digitalWrite(STEPEN_PIN2,HIGH);    // pump2 off, forward
   d540c:	200f      	movs	r0, #15
   d540e:	2101      	movs	r1, #1
   d5410:	f004 faeb 	bl	d99ea <digitalWrite>
   if((currentMillis-startMillis)<=maxpurgeMillis){
   d5414:	6832      	ldr	r2, [r6, #0]
   d5416:	6823      	ldr	r3, [r4, #0]
   d5418:	1a9b      	subs	r3, r3, r2
   d541a:	682a      	ldr	r2, [r5, #0]
   d541c:	4293      	cmp	r3, r2
    purgeMillis=currentMillis-startMillis;
   d541e:	bf9d      	ittte	ls
   d5420:	4a0d      	ldrls	r2, [pc, #52]	; (d5458 <_Z11purgeSystemv+0x110>)
   d5422:	6013      	strls	r3, [r2, #0]
    return 1;   // successful sample
   d5424:	2001      	movls	r0, #1
   else return 0;   // purge failed
   d5426:	2000      	movhi	r0, #0
}
   d5428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d542c:	2003e348 	.word	0x2003e348
   d5430:	2003dec8 	.word	0x2003dec8
   d5434:	2003e370 	.word	0x2003e370
   d5438:	2003e190 	.word	0x2003e190
   d543c:	2003e358 	.word	0x2003e358
   d5440:	2003ded0 	.word	0x2003ded0
   d5444:	2003e378 	.word	0x2003e378
   d5448:	2003e3cc 	.word	0x2003e3cc
   d544c:	2003e444 	.word	0x2003e444
   d5450:	c47a0000 	.word	0xc47a0000
   d5454:	2003e12c 	.word	0x2003e12c
   d5458:	2003e34c 	.word	0x2003e34c
   d545c:	2003e198 	.word	0x2003e198

000d5460 <loop>:
{
   d5460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5464:	ed2d 8b02 	vpush	{d8}
  switch(state) {
   d5468:	4c75      	ldr	r4, [pc, #468]	; (d5640 <loop+0x1e0>)
  Blynk.run();
   d546a:	4876      	ldr	r0, [pc, #472]	; (d5644 <loop+0x1e4>)
{
   d546c:	b08b      	sub	sp, #44	; 0x2c
  Blynk.run();
   d546e:	2100      	movs	r1, #0
   d5470:	f7ff f9da 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  switch(state) {
   d5474:	7823      	ldrb	r3, [r4, #0]
   d5476:	3b01      	subs	r3, #1
   d5478:	2b05      	cmp	r3, #5
   d547a:	d823      	bhi.n	d54c4 <loop+0x64>
   d547c:	e8df f003 	tbb	[pc, r3]
   d5480:	5649037d 	.word	0x5649037d
   d5484:	6e62      	.short	0x6e62
   if (state != oldState) printStateTransition();
   d5486:	4b70      	ldr	r3, [pc, #448]	; (d5648 <loop+0x1e8>)
   d5488:	781b      	ldrb	r3, [r3, #0]
   d548a:	2b02      	cmp	r3, #2
   d548c:	d001      	beq.n	d5492 <loop+0x32>
   d548e:	f7ff fdcd 	bl	d502c <_Z20printStateTransitionv>
   if (ml_to_collect>0 && check_sample_interval()==1 && depth >= threshold && check_sample_number()==1) state = PRIME_STATE;
   d5492:	4b6e      	ldr	r3, [pc, #440]	; (d564c <loop+0x1ec>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	2b00      	cmp	r3, #0
   d5498:	dd14      	ble.n	d54c4 <loop+0x64>
   d549a:	f7fe fe97 	bl	d41cc <_Z21check_sample_intervalv>
   d549e:	b188      	cbz	r0, d54c4 <loop+0x64>
   d54a0:	4b6b      	ldr	r3, [pc, #428]	; (d5650 <loop+0x1f0>)
   d54a2:	edd3 7a00 	vldr	s15, [r3]
   d54a6:	4b6b      	ldr	r3, [pc, #428]	; (d5654 <loop+0x1f4>)
   d54a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54ac:	ed93 7a00 	vldr	s14, [r3]
   d54b0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d54b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d54b8:	d804      	bhi.n	d54c4 <loop+0x64>
   d54ba:	f7fe fe9d 	bl	d41f8 <_Z19check_sample_numberv>
   d54be:	b108      	cbz	r0, d54c4 <loop+0x64>
   d54c0:	2303      	movs	r3, #3
      state = ERROR_STATE;
   d54c2:	7023      	strb	r3, [r4, #0]
 if(Time.minute() % 2 == 0 && Time_old != Time.minute()){ //Samples every 10 min. change the "10" to change sample interval in min (1 - 59)
   d54c4:	f003 f850 	bl	d8568 <_ZN9TimeClass6minuteEv>
   d54c8:	f010 0401 	ands.w	r4, r0, #1
   d54cc:	f040 80a9 	bne.w	d5622 <loop+0x1c2>
   d54d0:	4d61      	ldr	r5, [pc, #388]	; (d5658 <loop+0x1f8>)
   d54d2:	f003 f849 	bl	d8568 <_ZN9TimeClass6minuteEv>
   d54d6:	682b      	ldr	r3, [r5, #0]
   d54d8:	4298      	cmp	r0, r3
   d54da:	f000 80a2 	beq.w	d5622 <loop+0x1c2>
   d54de:	4f5f      	ldr	r7, [pc, #380]	; (d565c <loop+0x1fc>)
  for(int i=0;i<NUMSAMPLES;i++){
   d54e0:	4e5f      	ldr	r6, [pc, #380]	; (d5660 <loop+0x200>)
    v=analogRead(sensorPin);
   d54e2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; d5690 <loop+0x230>
   d54e6:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d5694 <loop+0x234>
  for(int i=0;i<NUMSAMPLES;i++){
   d54ea:	6832      	ldr	r2, [r6, #0]
   d54ec:	42a2      	cmp	r2, r4
   d54ee:	dd50      	ble.n	d5592 <loop+0x132>
    v=analogRead(sensorPin);
   d54f0:	f899 0000 	ldrb.w	r0, [r9]
   d54f4:	f004 faa5 	bl	d9a42 <analogRead>
    measurements[i]=(v); // convert to volts
   d54f8:	ee07 0a90 	vmov	s15, r0
   d54fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v=analogRead(sensorPin);
   d5500:	f8c8 0000 	str.w	r0, [r8]
    delay(10);  // Change (or remove) this delay value to alter the sampling time span.
   d5504:	200a      	movs	r0, #10
    measurements[i]=(v); // convert to volts
   d5506:	ece7 7a01 	vstmia	r7!, {s15}
  for(int i=0;i<NUMSAMPLES;i++){
   d550a:	3401      	adds	r4, #1
    delay(10);  // Change (or remove) this delay value to alter the sampling time span.
   d550c:	f003 f842 	bl	d8594 <delay>
  for(int i=0;i<NUMSAMPLES;i++){
   d5510:	e7eb      	b.n	d54ea <loop+0x8a>
    if (state != oldState) printStateTransition();
   d5512:	4b4d      	ldr	r3, [pc, #308]	; (d5648 <loop+0x1e8>)
   d5514:	781b      	ldrb	r3, [r3, #0]
   d5516:	2b03      	cmp	r3, #3
   d5518:	d001      	beq.n	d551e <loop+0xbe>
   d551a:	f7ff fd87 	bl	d502c <_Z20printStateTransitionv>
    if (!primeSystem())
   d551e:	f7ff fdb7 	bl	d5090 <_Z11primeSystemv>
   d5522:	b908      	cbnz	r0, d5528 <loop+0xc8>
      state = ERROR_STATE;
   d5524:	2301      	movs	r3, #1
   d5526:	e7cc      	b.n	d54c2 <loop+0x62>
    else state = SAMPLE_STATE;
   d5528:	2304      	movs	r3, #4
   d552a:	e7ca      	b.n	d54c2 <loop+0x62>
    if (state != oldState) printStateTransition();
   d552c:	4b46      	ldr	r3, [pc, #280]	; (d5648 <loop+0x1e8>)
   d552e:	781b      	ldrb	r3, [r3, #0]
   d5530:	2b04      	cmp	r3, #4
   d5532:	d001      	beq.n	d5538 <loop+0xd8>
   d5534:	f7ff fd7a 	bl	d502c <_Z20printStateTransitionv>
    if (!collectSample())
   d5538:	f7ff fe1e 	bl	d5178 <_Z13collectSamplev>
   d553c:	2800      	cmp	r0, #0
   d553e:	d0f1      	beq.n	d5524 <loop+0xc4>
    else state = PURGE_STATE;
   d5540:	2305      	movs	r3, #5
   d5542:	e7be      	b.n	d54c2 <loop+0x62>
   if (state != oldState) printStateTransition();
   d5544:	4b40      	ldr	r3, [pc, #256]	; (d5648 <loop+0x1e8>)
   d5546:	781b      	ldrb	r3, [r3, #0]
   d5548:	2b05      	cmp	r3, #5
   d554a:	d001      	beq.n	d5550 <loop+0xf0>
   d554c:	f7ff fd6e 	bl	d502c <_Z20printStateTransitionv>
   if (!purgeSystem())
   d5550:	f7ff fefa 	bl	d5348 <_Z11purgeSystemv>
   d5554:	2800      	cmp	r0, #0
   d5556:	d0e5      	beq.n	d5524 <loop+0xc4>
    state = REPORTING_STATE;
   d5558:	2306      	movs	r3, #6
   d555a:	e7b2      	b.n	d54c2 <loop+0x62>
   if (state != oldState) printStateTransition();
   d555c:	4b3a      	ldr	r3, [pc, #232]	; (d5648 <loop+0x1e8>)
   d555e:	781b      	ldrb	r3, [r3, #0]
   d5560:	2b06      	cmp	r3, #6
   d5562:	d001      	beq.n	d5568 <loop+0x108>
   d5564:	f7ff fd62 	bl	d502c <_Z20printStateTransitionv>
   if (!reportingData())
   d5568:	f7ff fcde 	bl	d4f28 <_Z13reportingDatav>
   d556c:	2800      	cmp	r0, #0
   d556e:	d0d9      	beq.n	d5524 <loop+0xc4>
    sample_now=false;
   d5570:	4b3c      	ldr	r3, [pc, #240]	; (d5664 <loop+0x204>)
   d5572:	2200      	movs	r2, #0
   d5574:	701a      	strb	r2, [r3, #0]
    state = IDLE_STATE;
   d5576:	2302      	movs	r3, #2
   d5578:	e7a3      	b.n	d54c2 <loop+0x62>
    if (state != oldState) printStateTransition();
   d557a:	4b33      	ldr	r3, [pc, #204]	; (d5648 <loop+0x1e8>)
   d557c:	781b      	ldrb	r3, [r3, #0]
   d557e:	2b01      	cmp	r3, #1
   d5580:	d001      	beq.n	d5586 <loop+0x126>
   d5582:	f7ff fd53 	bl	d502c <_Z20printStateTransitionv>
    Blynk.virtualWrite(V2, "Halted in error state\n");
   d5586:	4a38      	ldr	r2, [pc, #224]	; (d5668 <loop+0x208>)
   d5588:	482e      	ldr	r0, [pc, #184]	; (d5644 <loop+0x1e4>)
   d558a:	2102      	movs	r1, #2
   d558c:	f7ff fac4 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
    while(1);  // halt
   d5590:	e7fe      	b.n	d5590 <loop+0x130>
  smoothed=stats.median(measurements,NUMSAMPLES); // Median filter (choose which filter to use)
   d5592:	4932      	ldr	r1, [pc, #200]	; (d565c <loop+0x1fc>)
   d5594:	4835      	ldr	r0, [pc, #212]	; (d566c <loop+0x20c>)
   d5596:	4c36      	ldr	r4, [pc, #216]	; (d5670 <loop+0x210>)
   d5598:	f000 f992 	bl	d58c0 <_ZN10QuickStats6medianEPfi>
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d559c:	6832      	ldr	r2, [r6, #0]
   d559e:	492f      	ldr	r1, [pc, #188]	; (d565c <loop+0x1fc>)
   d55a0:	4832      	ldr	r0, [pc, #200]	; (d566c <loop+0x20c>)
  smoothed=stats.median(measurements,NUMSAMPLES); // Median filter (choose which filter to use)
   d55a2:	ed84 0a00 	vstr	s0, [r4]
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d55a6:	f000 f94d 	bl	d5844 <_ZN10QuickStats2CVEPfi>
   d55aa:	4b32      	ldr	r3, [pc, #200]	; (d5674 <loop+0x214>)
  depth = (-0.0412*smoothed) + 87.409; //18-1
   d55ac:	6820      	ldr	r0, [r4, #0]
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d55ae:	ed83 0a00 	vstr	s0, [r3]
  depth = (-0.0412*smoothed) + 87.409; //18-1
   d55b2:	f005 fff3 	bl	db59c <__aeabi_f2d>
   d55b6:	a31e      	add	r3, pc, #120	; (adr r3, d5630 <loop+0x1d0>)
   d55b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55bc:	f006 f846 	bl	db64c <__aeabi_dmul>
   d55c0:	a31d      	add	r3, pc, #116	; (adr r3, d5638 <loop+0x1d8>)
   d55c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55c6:	f005 fe8b 	bl	db2e0 <__adddf3>
   d55ca:	f006 fb37 	bl	dbc3c <__aeabi_d2f>
   d55ce:	4e21      	ldr	r6, [pc, #132]	; (d5654 <loop+0x1f4>)
  CellularSignal sig = Cellular.RSSI();
   d55d0:	4929      	ldr	r1, [pc, #164]	; (d5678 <loop+0x218>)
  depth = (-0.0412*smoothed) + 87.409; //18-1
   d55d2:	6030      	str	r0, [r6, #0]
  CellularSignal sig = Cellular.RSSI();
   d55d4:	4668      	mov	r0, sp
   d55d6:	f003 fd2b 	bl	d9030 <_ZN5spark13CellularClass4RSSIEv>
  rssi = sig.rssi;
   d55da:	eddd 7a02 	vldr	s15, [sp, #8]
   d55de:	4c27      	ldr	r4, [pc, #156]	; (d567c <loop+0x21c>)
   d55e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  float strength = sig.getStrength();
   d55e4:	4668      	mov	r0, sp
  rssi = sig.rssi;
   d55e6:	edc4 7a00 	vstr	s15, [r4]
  float strength = sig.getStrength();
   d55ea:	f003 f807 	bl	d85fc <_ZNK14CellularSignal11getStrengthEv>
  ubidots.add("Level_cm", depth);  // Change for your variable. 
   d55ee:	4924      	ldr	r1, [pc, #144]	; (d5680 <loop+0x220>)
   d55f0:	4824      	ldr	r0, [pc, #144]	; (d5684 <loop+0x224>)
  float strength = sig.getStrength();
   d55f2:	eeb0 8a40 	vmov.f32	s16, s0
  ubidots.add("Level_cm", depth);  // Change for your variable. 
   d55f6:	ed96 0a00 	vldr	s0, [r6]
   d55fa:	f001 fa08 	bl	d6a0e <_ZN7Ubidots3addEPcf>
  ubidots.add("Rssi", rssi);
   d55fe:	ed94 0a00 	vldr	s0, [r4]
   d5602:	4921      	ldr	r1, [pc, #132]	; (d5688 <loop+0x228>)
   d5604:	481f      	ldr	r0, [pc, #124]	; (d5684 <loop+0x224>)
   d5606:	f001 fa02 	bl	d6a0e <_ZN7Ubidots3addEPcf>
  ubidots.add("SigS", strength);
   d560a:	4920      	ldr	r1, [pc, #128]	; (d568c <loop+0x22c>)
   d560c:	481d      	ldr	r0, [pc, #116]	; (d5684 <loop+0x224>)
   d560e:	eeb0 0a48 	vmov.f32	s0, s16
   d5612:	f001 f9fc 	bl	d6a0e <_ZN7Ubidots3addEPcf>
    bufferSent =ubidots.send();  //Send data to ubidot
   d5616:	481b      	ldr	r0, [pc, #108]	; (d5684 <loop+0x224>)
   d5618:	f001 fa02 	bl	d6a20 <_ZN7Ubidots4sendEv>
    Time_old = Time.minute(); // resetting time 
   d561c:	f002 ffa4 	bl	d8568 <_ZN9TimeClass6minuteEv>
   d5620:	6028      	str	r0, [r5, #0]
} // end main loop
   d5622:	b00b      	add	sp, #44	; 0x2c
   d5624:	ecbd 8b02 	vpop	{d8}
   d5628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d562c:	f3af 8000 	nop.w
   d5630:	9930be0e 	.word	0x9930be0e
   d5634:	bfa5182a 	.word	0xbfa5182a
   d5638:	0e560419 	.word	0x0e560419
   d563c:	4055da2d 	.word	0x4055da2d
   d5640:	2003e374 	.word	0x2003e374
   d5644:	2003e12c 	.word	0x2003e12c
   d5648:	2003e340 	.word	0x2003e340
   d564c:	2003e33c 	.word	0x2003e33c
   d5650:	2003df44 	.word	0x2003df44
   d5654:	2003e194 	.word	0x2003e194
   d5658:	2003e14c 	.word	0x2003e14c
   d565c:	2003e1ac 	.word	0x2003e1ac
   d5660:	2003de9c 	.word	0x2003de9c
   d5664:	2003e360 	.word	0x2003e360
   d5668:	000ddcd0 	.word	0x000ddcd0
   d566c:	2003e375 	.word	0x2003e375
   d5670:	2003e368 	.word	0x2003e368
   d5674:	2003e36c 	.word	0x2003e36c
   d5678:	2003e670 	.word	0x2003e670
   d567c:	2003e350 	.word	0x2003e350
   d5680:	000ddce7 	.word	0x000ddce7
   d5684:	2003e420 	.word	0x2003e420
   d5688:	000ddcf0 	.word	0x000ddcf0
   d568c:	000ddcf5 	.word	0x000ddcf5
   d5690:	2003dedc 	.word	0x2003dedc
   d5694:	2003e42c 	.word	0x2003e42c

000d5698 <_GLOBAL__sub_I_Blynk>:
}
   d5698:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        : domain(NULL), port(0)
   d569c:	4d2d      	ldr	r5, [pc, #180]	; (d5754 <_GLOBAL__sub_I_Blynk+0xbc>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d569e:	4e2e      	ldr	r6, [pc, #184]	; (d5758 <_GLOBAL__sub_I_Blynk+0xc0>)
   d56a0:	4628      	mov	r0, r5
   d56a2:	2400      	movs	r4, #0
   d56a4:	f004 f896 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d56a8:	f105 001c 	add.w	r0, r5, #28
   d56ac:	f003 fba4 	bl	d8df8 <_ZN9IPAddressC1Ev>
   d56b0:	636c      	str	r4, [r5, #52]	; 0x34
   d56b2:	872c      	strh	r4, [r5, #56]	; 0x38
   d56b4:	4632      	mov	r2, r6
   d56b6:	4929      	ldr	r1, [pc, #164]	; (d575c <_GLOBAL__sub_I_Blynk+0xc4>)
   d56b8:	4628      	mov	r0, r5
   d56ba:	f004 fa3f 	bl	d9b3c <__aeabi_atexit>
        , state(CONNECTING)
   d56be:	4b28      	ldr	r3, [pc, #160]	; (d5760 <_GLOBAL__sub_I_Blynk+0xc8>)
Ubidots ubidots(TOKEN, UBI_TCP); // Comment this line to use another protocol.
   d56c0:	4928      	ldr	r1, [pc, #160]	; (d5764 <_GLOBAL__sub_I_Blynk+0xcc>)
   d56c2:	619c      	str	r4, [r3, #24]
   d56c4:	e9c3 5400 	strd	r5, r4, [r3]
   d56c8:	4d27      	ldr	r5, [pc, #156]	; (d5768 <_GLOBAL__sub_I_Blynk+0xd0>)
   d56ca:	839c      	strh	r4, [r3, #28]
   d56cc:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d56d0:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d56d4:	2201      	movs	r2, #1
   d56d6:	4628      	mov	r0, r5
   d56d8:	f001 f978 	bl	d69cc <_ZN7UbidotsC1EPc11IotProtocol>
AccelStepper stepper1 = AccelStepper(motorInterfaceType, STEP_PIN1, DIR_PIN1);
   d56dc:	2705      	movs	r7, #5
Ubidots ubidots(TOKEN, UBI_TCP); // Comment this line to use another protocol.
   d56de:	4632      	mov	r2, r6
AccelStepper stepper1 = AccelStepper(motorInterfaceType, STEP_PIN1, DIR_PIN1);
   d56e0:	f04f 0804 	mov.w	r8, #4
Ubidots ubidots(TOKEN, UBI_TCP); // Comment this line to use another protocol.
   d56e4:	4921      	ldr	r1, [pc, #132]	; (d576c <_GLOBAL__sub_I_Blynk+0xd4>)
   d56e6:	4628      	mov	r0, r5
AccelStepper stepper1 = AccelStepper(motorInterfaceType, STEP_PIN1, DIR_PIN1);
   d56e8:	2501      	movs	r5, #1
Ubidots ubidots(TOKEN, UBI_TCP); // Comment this line to use another protocol.
   d56ea:	f004 fa27 	bl	d9b3c <__aeabi_atexit>
AccelStepper stepper1 = AccelStepper(motorInterfaceType, STEP_PIN1, DIR_PIN1);
   d56ee:	463a      	mov	r2, r7
   d56f0:	4629      	mov	r1, r5
   d56f2:	e9cd 7501 	strd	r7, r5, [sp, #4]
   d56f6:	f8cd 8000 	str.w	r8, [sp]
   d56fa:	2303      	movs	r3, #3
   d56fc:	481c      	ldr	r0, [pc, #112]	; (d5770 <_GLOBAL__sub_I_Blynk+0xd8>)
   d56fe:	f000 fb6f 	bl	d5de0 <_ZN12AccelStepperC1Ehhhhhb>
AccelStepper stepper2 = AccelStepper(motorInterfaceType, STEP_PIN2, DIR_PIN2);
   d5702:	4629      	mov	r1, r5
   d5704:	2306      	movs	r3, #6
   d5706:	220e      	movs	r2, #14
   d5708:	e9cd 7501 	strd	r7, r5, [sp, #4]
   d570c:	f8cd 8000 	str.w	r8, [sp]
   d5710:	4818      	ldr	r0, [pc, #96]	; (d5774 <_GLOBAL__sub_I_Blynk+0xdc>)
   d5712:	f000 fb65 	bl	d5de0 <_ZN12AccelStepperC1Ehhhhhb>
	_items = new T[windowSize];
   d5716:	2064      	movs	r0, #100	; 0x64
   d5718:	f7fe fcbf 	bl	d409a <_Znaj>
   d571c:	4b16      	ldr	r3, [pc, #88]	; (d5778 <_GLOBAL__sub_I_Blynk+0xe0>)
	_windowSize = windowSize;
   d571e:	2219      	movs	r2, #25
	_count = 0;
   d5720:	e9c3 2402 	strd	r2, r4, [r3, #8]
	_accessor = _items;
   d5724:	e9c3 0000 	strd	r0, r0, [r3]
	_items = new T[windowSize];
   d5728:	20c8      	movs	r0, #200	; 0xc8
   d572a:	f7fe fcb6 	bl	d409a <_Znaj>
   d572e:	4b13      	ldr	r3, [pc, #76]	; (d577c <_GLOBAL__sub_I_Blynk+0xe4>)
	_windowSize = windowSize;
   d5730:	2232      	movs	r2, #50	; 0x32
	_count = 0;
   d5732:	e9c3 2402 	strd	r2, r4, [r3, #8]
QuickStats stats; //initialize an instance of this class
   d5736:	4c12      	ldr	r4, [pc, #72]	; (d5780 <_GLOBAL__sub_I_Blynk+0xe8>)
	_accessor = _items;
   d5738:	e9c3 0000 	strd	r0, r0, [r3]
   d573c:	4620      	mov	r0, r4
   d573e:	f000 f823 	bl	d5788 <_ZN10QuickStatsC1Ev>
   d5742:	4910      	ldr	r1, [pc, #64]	; (d5784 <_GLOBAL__sub_I_Blynk+0xec>)
   d5744:	4632      	mov	r2, r6
   d5746:	4620      	mov	r0, r4
}
   d5748:	b004      	add	sp, #16
   d574a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
QuickStats stats; //initialize an instance of this class
   d574e:	f004 b9f5 	b.w	d9b3c <__aeabi_atexit>
   d5752:	bf00      	nop
   d5754:	2003e150 	.word	0x2003e150
   d5758:	2003e128 	.word	0x2003e128
   d575c:	000d40e5 	.word	0x000d40e5
   d5760:	2003e12c 	.word	0x2003e12c
   d5764:	000ddcfa 	.word	0x000ddcfa
   d5768:	2003e420 	.word	0x2003e420
   d576c:	000d69e9 	.word	0x000d69e9
   d5770:	2003e378 	.word	0x2003e378
   d5774:	2003e3cc 	.word	0x2003e3cc
   d5778:	2003e198 	.word	0x2003e198
   d577c:	2003e430 	.word	0x2003e430
   d5780:	2003e375 	.word	0x2003e375
   d5784:	000d578b 	.word	0x000d578b

000d5788 <_ZN10QuickStatsC1Ev>:

#include "Arduino.h"
#include "QuickStats.h"
#include <math.h>

QuickStats::QuickStats(){/*nothing to construct*/}
   d5788:	4770      	bx	lr

000d578a <_ZN10QuickStatsD1Ev>:
QuickStats::~QuickStats(){/*nothing to destruct*/}
   d578a:	4770      	bx	lr

000d578c <_ZN10QuickStats7averageEPfi>:

float QuickStats::average(float samples[],int m)
{
  float total1=0.0;
   d578c:	eddf 7a08 	vldr	s15, [pc, #32]	; d57b0 <_ZN10QuickStats7averageEPfi+0x24>
  for(int i=0;i<m;i++){
   d5790:	2300      	movs	r3, #0
   d5792:	4293      	cmp	r3, r2
   d5794:	da05      	bge.n	d57a2 <_ZN10QuickStats7averageEPfi+0x16>
    total1=total1+samples[i];
   d5796:	ecb1 7a01 	vldmia	r1!, {s14}
  for(int i=0;i<m;i++){
   d579a:	3301      	adds	r3, #1
    total1=total1+samples[i];
   d579c:	ee77 7a87 	vadd.f32	s15, s15, s14
  for(int i=0;i<m;i++){
   d57a0:	e7f7      	b.n	d5792 <_ZN10QuickStats7averageEPfi+0x6>
  }
  return total1/(float)m;
   d57a2:	ee07 2a10 	vmov	s14, r2
   d57a6:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
   d57aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d57ae:	4770      	bx	lr
   d57b0:	00000000 	.word	0x00000000

000d57b4 <_ZN10QuickStats5stdevEPfi>:
  bubbleSort(sorted,m);  // Sort the values
  return(sorted[m-1]);   // last element is the maximum
}

float QuickStats::stdev(float samples[],int m)
{
   d57b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d57b8:	ed2d 8b02 	vpush	{d8}
   d57bc:	460c      	mov	r4, r1
   d57be:	4615      	mov	r5, r2
  float avg=0.0;
  float total2=0.0;
  avg=average(samples,m);
   d57c0:	f7ff ffe4 	bl	d578c <_ZN10QuickStats7averageEPfi>
  for(int i=0;i<m;i++){
   d57c4:	2600      	movs	r6, #0
  avg=average(samples,m);
   d57c6:	eeb0 8a40 	vmov.f32	s16, s0
  float total2=0.0;
   d57ca:	2000      	movs	r0, #0
  for(int i=0;i<m;i++){
   d57cc:	f005 fee6 	bl	db59c <__aeabi_f2d>
   d57d0:	42ae      	cmp	r6, r5
   d57d2:	4680      	mov	r8, r0
   d57d4:	4689      	mov	r9, r1
   d57d6:	da13      	bge.n	d5800 <_ZN10QuickStats5stdevEPfi+0x4c>
    total2 = total2 + pow(samples[i] - avg,2);
   d57d8:	ecf4 7a01 	vldmia	r4!, {s15}
   d57dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
  for(int i=0;i<m;i++){
   d57e0:	3601      	adds	r6, #1
   d57e2:	ee17 0a90 	vmov	r0, s15
   d57e6:	f005 fed9 	bl	db59c <__aeabi_f2d>
   d57ea:	4602      	mov	r2, r0
   d57ec:	460b      	mov	r3, r1
   d57ee:	f005 ff2d 	bl	db64c <__aeabi_dmul>
    total2 = total2 + pow(samples[i] - avg,2);
   d57f2:	4642      	mov	r2, r8
   d57f4:	464b      	mov	r3, r9
   d57f6:	f005 fd73 	bl	db2e0 <__adddf3>
   d57fa:	f006 fa1f 	bl	dbc3c <__aeabi_d2f>
  for(int i=0;i<m;i++){
   d57fe:	e7e5      	b.n	d57cc <_ZN10QuickStats5stdevEPfi+0x18>
  }
  return sqrt(total2/((float)m-1.0));
   d5800:	ee07 5a90 	vmov	s15, r5
   d5804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5808:	ee17 0a90 	vmov	r0, s15
   d580c:	f005 fec6 	bl	db59c <__aeabi_f2d>
   d5810:	4b0b      	ldr	r3, [pc, #44]	; (d5840 <_ZN10QuickStats5stdevEPfi+0x8c>)
   d5812:	2200      	movs	r2, #0
   d5814:	f005 fd62 	bl	db2dc <__aeabi_dsub>
   d5818:	4602      	mov	r2, r0
   d581a:	460b      	mov	r3, r1
   d581c:	4640      	mov	r0, r8
   d581e:	4649      	mov	r1, r9
   d5820:	f006 f83e 	bl	db8a0 <__aeabi_ddiv>
   d5824:	ec41 0b10 	vmov	d0, r0, r1
   d5828:	f004 fd10 	bl	da24c <sqrt>
   d582c:	ec51 0b10 	vmov	r0, r1, d0
   d5830:	f006 fa04 	bl	dbc3c <__aeabi_d2f>
}
   d5834:	ecbd 8b02 	vpop	{d8}
   d5838:	ee00 0a10 	vmov	s0, r0
   d583c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d5840:	3ff00000 	.word	0x3ff00000

000d5844 <_ZN10QuickStats2CVEPfi>:
  temp1=stdev(samples,m);
  return (temp1/sqrt((float)m));
}

float QuickStats::CV(float samples[],int m)  //Coefficient of variation (%RSD, or relative stdev)
{
   d5844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5846:	460d      	mov	r5, r1
  float avg=0.0;
  float sd=0.0;
  avg=average(samples,m);
   d5848:	f7ff ffa0 	bl	d578c <_ZN10QuickStats7averageEPfi>
  sd=stdev(samples,m);
   d584c:	4629      	mov	r1, r5
  avg=average(samples,m);
   d584e:	ee10 6a10 	vmov	r6, s0
  sd=stdev(samples,m);
   d5852:	f7ff ffaf 	bl	d57b4 <_ZN10QuickStats5stdevEPfi>
   d5856:	ee10 0a10 	vmov	r0, s0
  return 100.0*sd/avg;
   d585a:	f005 fe9f 	bl	db59c <__aeabi_f2d>
   d585e:	4b0a      	ldr	r3, [pc, #40]	; (d5888 <_ZN10QuickStats2CVEPfi+0x44>)
   d5860:	2200      	movs	r2, #0
   d5862:	f005 fef3 	bl	db64c <__aeabi_dmul>
   d5866:	4604      	mov	r4, r0
   d5868:	4630      	mov	r0, r6
   d586a:	460d      	mov	r5, r1
   d586c:	f005 fe96 	bl	db59c <__aeabi_f2d>
   d5870:	4602      	mov	r2, r0
   d5872:	460b      	mov	r3, r1
   d5874:	4620      	mov	r0, r4
   d5876:	4629      	mov	r1, r5
   d5878:	f006 f812 	bl	db8a0 <__aeabi_ddiv>
   d587c:	f006 f9de 	bl	dbc3c <__aeabi_d2f>
}
   d5880:	ee00 0a10 	vmov	s0, r0
   d5884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5886:	bf00      	nop
   d5888:	40590000 	.word	0x40590000

000d588c <_ZN10QuickStats10bubbleSortEPfi>:

void QuickStats::bubbleSort(float A[],int len)
{
   d588c:	b510      	push	{r4, lr}
  unsigned long newn;
  unsigned long n=len;
  float temp=0.0;
  do {
    newn=1;
    for(int p=1;p<len;p++){
   d588e:	2001      	movs	r0, #1
   d5890:	460b      	mov	r3, r1
    newn=1;
   d5892:	4604      	mov	r4, r0
    for(int p=1;p<len;p++){
   d5894:	4290      	cmp	r0, r2
   d5896:	da10      	bge.n	d58ba <_ZN10QuickStats10bubbleSortEPfi+0x2e>
      if(A[p-1]>A[p]){
   d5898:	ed93 7a00 	vldr	s14, [r3]
   d589c:	edd3 7a01 	vldr	s15, [r3, #4]
   d58a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d58a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        temp=A[p];           //swap places in array
        A[p]=A[p-1];
   d58a8:	bfc2      	ittt	gt
   d58aa:	ed83 7a01 	vstrgt	s14, [r3, #4]
        A[p-1]=temp;
   d58ae:	edc3 7a00 	vstrgt	s15, [r3]
        newn=p;
   d58b2:	4604      	movgt	r4, r0
    for(int p=1;p<len;p++){
   d58b4:	3304      	adds	r3, #4
   d58b6:	3001      	adds	r0, #1
   d58b8:	e7ec      	b.n	d5894 <_ZN10QuickStats10bubbleSortEPfi+0x8>
      } //end if
    } //end for
    n=newn;
  } while(n>1);
   d58ba:	2c01      	cmp	r4, #1
   d58bc:	d1e7      	bne.n	d588e <_ZN10QuickStats10bubbleSortEPfi+0x2>
}
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_ZN10QuickStats6medianEPfi>:
    return sample;
  }
}

float QuickStats::median(float samples[],int m) //calculate the median
{
   d58c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //First bubble sort the values: https://en.wikipedia.org/wiki/Bubble_sort
  float sorted[m];   //Define and initialize sorted array.
   d58c2:	0093      	lsls	r3, r2, #2
   d58c4:	3307      	adds	r3, #7
   d58c6:	f023 0307 	bic.w	r3, r3, #7
{
   d58ca:	af00      	add	r7, sp, #0
  float sorted[m];   //Define and initialize sorted array.
   d58cc:	ebad 0d03 	sub.w	sp, sp, r3
   d58d0:	466c      	mov	r4, sp
  float temp=0.0;      //Temporary float for swapping elements
  /*Serial.println("Before:");
  for(int j=0;j<m;j++){
    Serial.println(samples[j]);
  }*/
  for(int i=0;i<m;i++){
   d58d2:	4625      	mov	r5, r4
   d58d4:	2300      	movs	r3, #0
   d58d6:	4293      	cmp	r3, r2
   d58d8:	da05      	bge.n	d58e6 <_ZN10QuickStats6medianEPfi+0x26>
    sorted[i]=samples[i];
   d58da:	f851 6b04 	ldr.w	r6, [r1], #4
   d58de:	f845 6b04 	str.w	r6, [r5], #4
  for(int i=0;i<m;i++){
   d58e2:	3301      	adds	r3, #1
   d58e4:	e7f7      	b.n	d58d6 <_ZN10QuickStats6medianEPfi+0x16>
  }
  bubbleSort(sorted,m);  // Sort the values
   d58e6:	4621      	mov	r1, r4
   d58e8:	f7ff ffd0 	bl	d588c <_ZN10QuickStats10bubbleSortEPfi>
  /*Serial.println("After:");
  for(int i=0;i<m;i++){
    Serial.println(sorted[i]);
  }*/
  if (bitRead(m,0)==1) {  //If the last bit of a number is 1, it's odd. This is equivalent to "TRUE". Also use if m%2!=0.
   d58ec:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   d58f0:	105b      	asrs	r3, r3, #1
   d58f2:	009b      	lsls	r3, r3, #2
   d58f4:	f012 0f01 	tst.w	r2, #1
    return sorted[m/2]; //If the number of data points is odd, return middle number.
   d58f8:	4423      	add	r3, r4
  } else {    
    return (sorted[(m/2)-1]+sorted[m/2])/2; //If the number of data points is even, return avg of the middle two numbers.
   d58fa:	bf05      	ittet	eq
   d58fc:	ed13 0a01 	vldreq	s0, [r3, #-4]
   d5900:	edd3 7a00 	vldreq	s15, [r3]
    return sorted[m/2]; //If the number of data points is odd, return middle number.
   d5904:	ed93 0a00 	vldrne	s0, [r3]
    return (sorted[(m/2)-1]+sorted[m/2])/2; //If the number of data points is even, return avg of the middle two numbers.
   d5908:	ee30 0a27 	vaddeq.f32	s0, s0, s15
   d590c:	bf04      	itt	eq
   d590e:	eef6 7a00 	vmoveq.f32	s15, #96	; 0x3f000000  0.5
   d5912:	ee20 0a27 	vmuleq.f32	s0, s0, s15
  }
}
   d5916:	46bd      	mov	sp, r7
   d5918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d591a <_ZN12AccelStepper4stepEl>:
}

// Subclasses can override
void AccelStepper::step(long step)
{
    switch (_interface)
   d591a:	7903      	ldrb	r3, [r0, #4]
   d591c:	2b08      	cmp	r3, #8
   d591e:	d81b      	bhi.n	d5958 <_ZN12AccelStepper4stepEl+0x3e>
   d5920:	e8df f003 	tbb	[pc, r3]
   d5924:	0e0b0805 	.word	0x0e0b0805
   d5928:	1a141a11 	.word	0x1a141a11
   d592c:	17          	.byte	0x17
   d592d:	00          	.byte	0x00
    {
        case FUNCTION:
            step0(step);
   d592e:	6803      	ldr	r3, [r0, #0]
   d5930:	691b      	ldr	r3, [r3, #16]
	case HALF3WIRE:
	    step6(step);
	    break;

	case HALF4WIRE:
	    step8(step);
   d5932:	4718      	bx	r3
	    step1(step);
   d5934:	6803      	ldr	r3, [r0, #0]
   d5936:	695b      	ldr	r3, [r3, #20]
   d5938:	e7fb      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    step2(step);
   d593a:	6803      	ldr	r3, [r0, #0]
   d593c:	699b      	ldr	r3, [r3, #24]
   d593e:	e7f8      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    step3(step);
   d5940:	6803      	ldr	r3, [r0, #0]
   d5942:	69db      	ldr	r3, [r3, #28]
   d5944:	e7f5      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    step4(step);
   d5946:	6803      	ldr	r3, [r0, #0]
   d5948:	6a1b      	ldr	r3, [r3, #32]
   d594a:	e7f2      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    step6(step);
   d594c:	6803      	ldr	r3, [r0, #0]
   d594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5950:	e7ef      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    step8(step);
   d5952:	6803      	ldr	r3, [r0, #0]
   d5954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5956:	e7ec      	b.n	d5932 <_ZN12AccelStepper4stepEl+0x18>
	    break;
    }
}
   d5958:	4770      	bx	lr

000d595a <_ZN12AccelStepper5step6El>:
// 3 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step6(long step)
{
    switch (step % 6)
   d595a:	2306      	movs	r3, #6
   d595c:	fb91 f2f3 	sdiv	r2, r1, r3
   d5960:	fb02 1313 	mls	r3, r2, r3, r1
   d5964:	2b05      	cmp	r3, #5
   d5966:	d81c      	bhi.n	d59a2 <_ZN12AccelStepper5step6El+0x48>
   d5968:	e8df f003 	tbb	[pc, r3]
   d596c:	0f0b0703 	.word	0x0f0b0703
   d5970:	1713      	.short	0x1713
    {
	case 0:    // 100
	    setOutputPins(0b100);
   d5972:	6803      	ldr	r3, [r0, #0]
   d5974:	689b      	ldr	r3, [r3, #8]
   d5976:	2104      	movs	r1, #4
	case 4:    // 010
	    setOutputPins(0b010);
            break;

	case 5:    // 011
	    setOutputPins(0b110);
   d5978:	4718      	bx	r3
	    setOutputPins(0b101);
   d597a:	6803      	ldr	r3, [r0, #0]
   d597c:	2105      	movs	r1, #5
   d597e:	689b      	ldr	r3, [r3, #8]
   d5980:	e7fa      	b.n	d5978 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b001);
   d5982:	6803      	ldr	r3, [r0, #0]
   d5984:	2101      	movs	r1, #1
   d5986:	689b      	ldr	r3, [r3, #8]
   d5988:	e7f6      	b.n	d5978 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b011);
   d598a:	6803      	ldr	r3, [r0, #0]
   d598c:	2103      	movs	r1, #3
   d598e:	689b      	ldr	r3, [r3, #8]
   d5990:	e7f2      	b.n	d5978 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b010);
   d5992:	6803      	ldr	r3, [r0, #0]
   d5994:	2102      	movs	r1, #2
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	e7ee      	b.n	d5978 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b110);
   d599a:	6803      	ldr	r3, [r0, #0]
   d599c:	2106      	movs	r1, #6
   d599e:	689b      	ldr	r3, [r3, #8]
   d59a0:	e7ea      	b.n	d5978 <_ZN12AccelStepper5step6El+0x1e>
            break;

    }
}
   d59a2:	4770      	bx	lr

000d59a4 <_ZN12AccelStepper5step8El>:
// 4 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step8(long step)
{
    switch (step & 0x7)
   d59a4:	6803      	ldr	r3, [r0, #0]
   d59a6:	f001 0107 	and.w	r1, r1, #7
   d59aa:	3901      	subs	r1, #1
   d59ac:	689b      	ldr	r3, [r3, #8]
   d59ae:	2906      	cmp	r1, #6
   d59b0:	d805      	bhi.n	d59be <_ZN12AccelStepper5step8El+0x1a>
   d59b2:	e8df f001 	tbb	[pc, r1]
   d59b6:	0806      	.short	0x0806
   d59b8:	100e0c0a 	.word	0x100e0c0a
   d59bc:	12          	.byte	0x12
   d59bd:	00          	.byte	0x00
    {
	case 0:    // 1000
	    setOutputPins(0b0001);
   d59be:	2101      	movs	r1, #1
	case 6:    // 0001
	    setOutputPins(0b1000);
            break;

        case 7:    //1001
	    setOutputPins(0b1001);
   d59c0:	4718      	bx	r3
	    setOutputPins(0b0101);
   d59c2:	2105      	movs	r1, #5
   d59c4:	e7fc      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0100);
   d59c6:	2104      	movs	r1, #4
   d59c8:	e7fa      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0110);
   d59ca:	2106      	movs	r1, #6
   d59cc:	e7f8      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0010);
   d59ce:	2102      	movs	r1, #2
   d59d0:	e7f6      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1010);
   d59d2:	210a      	movs	r1, #10
   d59d4:	e7f4      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1000);
   d59d6:	2108      	movs	r1, #8
   d59d8:	e7f2      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1001);
   d59da:	2109      	movs	r1, #9
   d59dc:	e7f0      	b.n	d59c0 <_ZN12AccelStepper5step8El+0x1c>

000d59de <_ZN12AccelStepper13setOutputPinsEh>:
{
   d59de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d59e0:	7905      	ldrb	r5, [r0, #4]
   d59e2:	2d04      	cmp	r5, #4
{
   d59e4:	460f      	mov	r7, r1
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d59e6:	d007      	beq.n	d59f8 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
   d59e8:	2d08      	cmp	r5, #8
   d59ea:	d017      	beq.n	d5a1c <_ZN12AccelStepper13setOutputPinsEh+0x3e>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
   d59ec:	2d03      	cmp	r5, #3
   d59ee:	d003      	beq.n	d59f8 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
	numpins = 3;
   d59f0:	2d06      	cmp	r5, #6
   d59f2:	bf14      	ite	ne
   d59f4:	2502      	movne	r5, #2
   d59f6:	2503      	moveq	r5, #3
    for (i = 0; i < numpins; i++)
   d59f8:	1d44      	adds	r4, r0, #5
	numpins = 3;
   d59fa:	2600      	movs	r6, #0
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
   d59fc:	f814 0b01 	ldrb.w	r0, [r4], #1
   d5a00:	fa47 f306 	asr.w	r3, r7, r6
   d5a04:	78e1      	ldrb	r1, [r4, #3]
   d5a06:	07db      	lsls	r3, r3, #31
   d5a08:	bf48      	it	mi
   d5a0a:	f081 0101 	eormi.w	r1, r1, #1
   d5a0e:	3601      	adds	r6, #1
   d5a10:	f003 ffeb 	bl	d99ea <digitalWrite>
    for (i = 0; i < numpins; i++)
   d5a14:	b2f3      	uxtb	r3, r6
   d5a16:	429d      	cmp	r5, r3
   d5a18:	d8f0      	bhi.n	d59fc <_ZN12AccelStepper13setOutputPinsEh+0x1e>
}
   d5a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	numpins = 4;
   d5a1c:	2504      	movs	r5, #4
   d5a1e:	e7eb      	b.n	d59f8 <_ZN12AccelStepper13setOutputPinsEh+0x1a>

000d5a20 <_ZN12AccelStepper5step1El>:
{
   d5a20:	b510      	push	{r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
   d5a22:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   d5a26:	6803      	ldr	r3, [r0, #0]
{
   d5a28:	4604      	mov	r4, r0
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
   d5a2a:	2a00      	cmp	r2, #0
   d5a2c:	bf14      	ite	ne
   d5a2e:	2102      	movne	r1, #2
   d5a30:	2100      	moveq	r1, #0
   d5a32:	689b      	ldr	r3, [r3, #8]
   d5a34:	4798      	blx	r3
    setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
   d5a36:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5a3a:	6823      	ldr	r3, [r4, #0]
   d5a3c:	2a00      	cmp	r2, #0
   d5a3e:	bf14      	ite	ne
   d5a40:	2103      	movne	r1, #3
   d5a42:	2101      	moveq	r1, #1
   d5a44:	689b      	ldr	r3, [r3, #8]
   d5a46:	4620      	mov	r0, r4
   d5a48:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5a4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d5a4c:	f001 fe86 	bl	d775c <HAL_Delay_Microseconds>
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
   d5a50:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5a54:	6823      	ldr	r3, [r4, #0]
   d5a56:	2a00      	cmp	r2, #0
   d5a58:	4620      	mov	r0, r4
   d5a5a:	689b      	ldr	r3, [r3, #8]
}
   d5a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
   d5a60:	bf14      	ite	ne
   d5a62:	2102      	movne	r1, #2
   d5a64:	2100      	moveq	r1, #0
   d5a66:	4718      	bx	r3

000d5a68 <_ZN12AccelStepper5step0El>:
    if (_speed > 0)
   d5a68:	edd0 7a06 	vldr	s15, [r0, #24]
   d5a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_forward();
   d5a74:	bfcc      	ite	gt
   d5a76:	6b83      	ldrgt	r3, [r0, #56]	; 0x38
	_backward();
   d5a78:	6bc3      	ldrle	r3, [r0, #60]	; 0x3c
   d5a7a:	4718      	bx	r3

000d5a7c <_ZN12AccelStepper5step2El>:
    switch (step & 0x3)
   d5a7c:	6803      	ldr	r3, [r0, #0]
   d5a7e:	f001 0103 	and.w	r1, r1, #3
   d5a82:	2902      	cmp	r1, #2
   d5a84:	689b      	ldr	r3, [r3, #8]
   d5a86:	d006      	beq.n	d5a96 <_ZN12AccelStepper5step2El+0x1a>
   d5a88:	2903      	cmp	r1, #3
   d5a8a:	d006      	beq.n	d5a9a <_ZN12AccelStepper5step2El+0x1e>
   d5a8c:	2901      	cmp	r1, #1
	    setOutputPins(0b10);
   d5a8e:	bf14      	ite	ne
   d5a90:	2102      	movne	r1, #2
	    setOutputPins(0b11);
   d5a92:	2103      	moveq	r1, #3
	    setOutputPins(0b00);
   d5a94:	4718      	bx	r3
	    setOutputPins(0b01);
   d5a96:	2101      	movs	r1, #1
   d5a98:	e7fc      	b.n	d5a94 <_ZN12AccelStepper5step2El+0x18>
	    setOutputPins(0b00);
   d5a9a:	2100      	movs	r1, #0
   d5a9c:	e7fa      	b.n	d5a94 <_ZN12AccelStepper5step2El+0x18>

000d5a9e <_ZN12AccelStepper5step3El>:
    switch (step % 3)
   d5a9e:	2303      	movs	r3, #3
   d5aa0:	fb91 f3f3 	sdiv	r3, r1, r3
   d5aa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5aa8:	1ac9      	subs	r1, r1, r3
   d5aaa:	2901      	cmp	r1, #1
{
   d5aac:	4602      	mov	r2, r0
    switch (step % 3)
   d5aae:	d006      	beq.n	d5abe <_ZN12AccelStepper5step3El+0x20>
   d5ab0:	2902      	cmp	r1, #2
   d5ab2:	d004      	beq.n	d5abe <_ZN12AccelStepper5step3El+0x20>
   d5ab4:	b931      	cbnz	r1, d5ac4 <_ZN12AccelStepper5step3El+0x26>
	    setOutputPins(0b100);
   d5ab6:	6803      	ldr	r3, [r0, #0]
   d5ab8:	689b      	ldr	r3, [r3, #8]
   d5aba:	2104      	movs	r1, #4
	    setOutputPins(0b010);
   d5abc:	4718      	bx	r3
   d5abe:	6813      	ldr	r3, [r2, #0]
   d5ac0:	689b      	ldr	r3, [r3, #8]
   d5ac2:	e7fb      	b.n	d5abc <_ZN12AccelStepper5step3El+0x1e>
}
   d5ac4:	4770      	bx	lr

000d5ac6 <_ZN12AccelStepper5step4El>:
    switch (step & 0x3)
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	f001 0103 	and.w	r1, r1, #3
   d5acc:	2902      	cmp	r1, #2
   d5ace:	689b      	ldr	r3, [r3, #8]
   d5ad0:	d006      	beq.n	d5ae0 <_ZN12AccelStepper5step4El+0x1a>
   d5ad2:	2903      	cmp	r1, #3
   d5ad4:	d006      	beq.n	d5ae4 <_ZN12AccelStepper5step4El+0x1e>
   d5ad6:	2901      	cmp	r1, #1
	    setOutputPins(0b0101);
   d5ad8:	bf14      	ite	ne
   d5ada:	2105      	movne	r1, #5
	    setOutputPins(0b0110);
   d5adc:	2106      	moveq	r1, #6
	    setOutputPins(0b1001);
   d5ade:	4718      	bx	r3
	    setOutputPins(0b1010);
   d5ae0:	210a      	movs	r1, #10
   d5ae2:	e7fc      	b.n	d5ade <_ZN12AccelStepper5step4El+0x18>
	    setOutputPins(0b1001);
   d5ae4:	2109      	movs	r1, #9
   d5ae6:	e7fa      	b.n	d5ade <_ZN12AccelStepper5step4El+0x18>

000d5ae8 <_ZN12AccelStepper14disableOutputsEv>:
    }
}

// Prevents power consumption on the outputs
void    AccelStepper::disableOutputs()
{
   d5ae8:	b510      	push	{r4, lr}
    if (! _interface) return;
   d5aea:	7903      	ldrb	r3, [r0, #4]
{
   d5aec:	4604      	mov	r4, r0
    if (! _interface) return;
   d5aee:	b193      	cbz	r3, d5b16 <_ZN12AccelStepper14disableOutputsEv+0x2e>

    setOutputPins(0); // Handles inversion automatically
   d5af0:	6803      	ldr	r3, [r0, #0]
   d5af2:	2100      	movs	r1, #0
   d5af4:	689b      	ldr	r3, [r3, #8]
   d5af6:	4798      	blx	r3
    if (_enablePin != 0xff)
   d5af8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5afc:	28ff      	cmp	r0, #255	; 0xff
   d5afe:	d00a      	beq.n	d5b16 <_ZN12AccelStepper14disableOutputsEv+0x2e>
    {
        pinMode(_enablePin, OUTPUT);
   d5b00:	2101      	movs	r1, #1
   d5b02:	f003 ff61 	bl	d99c8 <pinMode>
        digitalWrite(_enablePin, LOW ^ _enableInverted);
   d5b06:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   d5b0a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    }
}
   d5b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, LOW ^ _enableInverted);
   d5b12:	f003 bf6a 	b.w	d99ea <digitalWrite>
}
   d5b16:	bd10      	pop	{r4, pc}

000d5b18 <_ZN12AccelStepper13enableOutputsEv>:

void    AccelStepper::enableOutputs()
{
   d5b18:	b510      	push	{r4, lr}
    if (! _interface)
   d5b1a:	7903      	ldrb	r3, [r0, #4]
{
   d5b1c:	4604      	mov	r4, r0
    if (! _interface)
   d5b1e:	b363      	cbz	r3, d5b7a <_ZN12AccelStepper13enableOutputsEv+0x62>
	return;

    pinMode(_pin[0], OUTPUT);
   d5b20:	7940      	ldrb	r0, [r0, #5]
   d5b22:	2101      	movs	r1, #1
   d5b24:	f003 ff50 	bl	d99c8 <pinMode>
    pinMode(_pin[1], OUTPUT);
   d5b28:	79a0      	ldrb	r0, [r4, #6]
   d5b2a:	2101      	movs	r1, #1
   d5b2c:	f003 ff4c 	bl	d99c8 <pinMode>
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d5b30:	7923      	ldrb	r3, [r4, #4]
   d5b32:	2b04      	cmp	r3, #4
   d5b34:	d001      	beq.n	d5b3a <_ZN12AccelStepper13enableOutputsEv+0x22>
   d5b36:	2b08      	cmp	r3, #8
   d5b38:	d118      	bne.n	d5b6c <_ZN12AccelStepper13enableOutputsEv+0x54>
    {
        pinMode(_pin[2], OUTPUT);
   d5b3a:	79e0      	ldrb	r0, [r4, #7]
   d5b3c:	2101      	movs	r1, #1
   d5b3e:	f003 ff43 	bl	d99c8 <pinMode>
        pinMode(_pin[3], OUTPUT);
   d5b42:	7a20      	ldrb	r0, [r4, #8]
   d5b44:	2101      	movs	r1, #1
    }
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
    {
        pinMode(_pin[2], OUTPUT);
   d5b46:	f003 ff3f 	bl	d99c8 <pinMode>
    }

    if (_enablePin != 0xff)
   d5b4a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5b4e:	28ff      	cmp	r0, #255	; 0xff
   d5b50:	d013      	beq.n	d5b7a <_ZN12AccelStepper13enableOutputsEv+0x62>
    {
        pinMode(_enablePin, OUTPUT);
   d5b52:	2101      	movs	r1, #1
   d5b54:	f003 ff38 	bl	d99c8 <pinMode>
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
   d5b58:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   d5b5c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5b60:	f081 0101 	eor.w	r1, r1, #1
    }
}
   d5b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
   d5b68:	f003 bf3f 	b.w	d99ea <digitalWrite>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
   d5b6c:	2b03      	cmp	r3, #3
   d5b6e:	d001      	beq.n	d5b74 <_ZN12AccelStepper13enableOutputsEv+0x5c>
   d5b70:	2b06      	cmp	r3, #6
   d5b72:	d1ea      	bne.n	d5b4a <_ZN12AccelStepper13enableOutputsEv+0x32>
        pinMode(_pin[2], OUTPUT);
   d5b74:	79e0      	ldrb	r0, [r4, #7]
   d5b76:	2101      	movs	r1, #1
   d5b78:	e7e5      	b.n	d5b46 <_ZN12AccelStepper13enableOutputsEv+0x2e>
}
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_ZN12AccelStepper8runSpeedEv>:
{
   d5b7c:	b538      	push	{r3, r4, r5, lr}
    if (!_stepInterval)
   d5b7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   d5b80:	4604      	mov	r4, r0
    if (!_stepInterval)
   d5b82:	b90b      	cbnz	r3, d5b88 <_ZN12AccelStepper8runSpeedEv+0xc>
	return false;
   d5b84:	2000      	movs	r0, #0
}
   d5b86:	bd38      	pop	{r3, r4, r5, pc}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5b88:	f001 fdf0 	bl	d776c <HAL_Timer_Get_Micro_Seconds>
    if (time - _lastStepTime >= _stepInterval)
   d5b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5b8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5b90:	1ac3      	subs	r3, r0, r3
   d5b92:	4293      	cmp	r3, r2
   d5b94:	4605      	mov	r5, r0
   d5b96:	d3f5      	bcc.n	d5b84 <_ZN12AccelStepper8runSpeedEv+0x8>
	if (_direction == DIRECTION_CW)
   d5b98:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5b9c:	6921      	ldr	r1, [r4, #16]
   d5b9e:	b143      	cbz	r3, d5bb2 <_ZN12AccelStepper8runSpeedEv+0x36>
	    _currentPos += 1;
   d5ba0:	3101      	adds	r1, #1
	step(_currentPos);
   d5ba2:	6823      	ldr	r3, [r4, #0]
   d5ba4:	6121      	str	r1, [r4, #16]
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	68db      	ldr	r3, [r3, #12]
   d5baa:	4798      	blx	r3
	_lastStepTime = time; // Caution: does not account for costs in step()
   d5bac:	62e5      	str	r5, [r4, #44]	; 0x2c
	return true;
   d5bae:	2001      	movs	r0, #1
   d5bb0:	e7e9      	b.n	d5b86 <_ZN12AccelStepper8runSpeedEv+0xa>
	    _currentPos -= 1;
   d5bb2:	3901      	subs	r1, #1
   d5bb4:	e7f5      	b.n	d5ba2 <_ZN12AccelStepper8runSpeedEv+0x26>

000d5bb6 <_ZN12AccelStepper15currentPositionEv>:
}
   d5bb6:	6900      	ldr	r0, [r0, #16]
   d5bb8:	4770      	bx	lr

000d5bba <_ZN12AccelStepper18setCurrentPositionEl>:
    _n = 0;
   d5bba:	2300      	movs	r3, #0
   d5bbc:	6403      	str	r3, [r0, #64]	; 0x40
    _stepInterval = 0;
   d5bbe:	6283      	str	r3, [r0, #40]	; 0x28
    _speed = 0.0;
   d5bc0:	2300      	movs	r3, #0
    _targetPos = _currentPos = position;
   d5bc2:	e9c0 1104 	strd	r1, r1, [r0, #16]
    _speed = 0.0;
   d5bc6:	6183      	str	r3, [r0, #24]
}
   d5bc8:	4770      	bx	lr
	...

000d5bcc <_ZN12AccelStepper15computeNewSpeedEv>:
{
   d5bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5bd0:	edd0 7a06 	vldr	s15, [r0, #24]
   d5bd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return _targetPos - _currentPos;
   d5bd8:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
{
   d5bdc:	4604      	mov	r4, r0
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5bde:	ee17 0a90 	vmov	r0, s15
   d5be2:	f005 fcdb 	bl	db59c <__aeabi_f2d>
   d5be6:	4680      	mov	r8, r0
   d5be8:	6a20      	ldr	r0, [r4, #32]
   d5bea:	4689      	mov	r9, r1
   d5bec:	f005 fcd6 	bl	db59c <__aeabi_f2d>
   d5bf0:	4602      	mov	r2, r0
   d5bf2:	460b      	mov	r3, r1
   d5bf4:	f005 fb74 	bl	db2e0 <__adddf3>
   d5bf8:	4602      	mov	r2, r0
   d5bfa:	460b      	mov	r3, r1
   d5bfc:	4640      	mov	r0, r8
   d5bfe:	4649      	mov	r1, r9
   d5c00:	f005 fe4e 	bl	db8a0 <__aeabi_ddiv>
    return _targetPos - _currentPos;
   d5c04:	1bbd      	subs	r5, r7, r6
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5c06:	f005 ffd1 	bl	dbbac <__aeabi_d2iz>
    if (distanceTo == 0 && stepsToStop <= 1)
   d5c0a:	2d00      	cmp	r5, #0
   d5c0c:	d157      	bne.n	d5cbe <_ZN12AccelStepper15computeNewSpeedEv+0xf2>
   d5c0e:	2801      	cmp	r0, #1
   d5c10:	dc60      	bgt.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	_speed = 0.0;
   d5c12:	2300      	movs	r3, #0
	_stepInterval = 0;
   d5c14:	62a5      	str	r5, [r4, #40]	; 0x28
	_speed = 0.0;
   d5c16:	61a3      	str	r3, [r4, #24]
	_n = 0;
   d5c18:	6425      	str	r5, [r4, #64]	; 0x40
}
   d5c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (_n > 0)
   d5c1e:	2b00      	cmp	r3, #0
   d5c20:	dd08      	ble.n	d5c34 <_ZN12AccelStepper15computeNewSpeedEv+0x68>
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
   d5c22:	42a8      	cmp	r0, r5
   d5c24:	da03      	bge.n	d5c2e <_ZN12AccelStepper15computeNewSpeedEv+0x62>
   d5c26:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5c2a:	2b00      	cmp	r3, #0
   d5c2c:	d152      	bne.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
		_n = -stepsToStop; // Start deceleration
   d5c2e:	4240      	negs	r0, r0
   d5c30:	6420      	str	r0, [r4, #64]	; 0x40
   d5c32:	e04f      	b.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	else if (_n < 0)
   d5c34:	d04e      	beq.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
   d5c36:	42a8      	cmp	r0, r5
   d5c38:	da4c      	bge.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5c3a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5c3e:	2a00      	cmp	r2, #0
   d5c40:	d048      	beq.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
		_n = -_n; // Start accceleration
   d5c42:	425b      	negs	r3, r3
   d5c44:	6423      	str	r3, [r4, #64]	; 0x40
   d5c46:	e045      	b.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	else if (_n < 0)
   d5c48:	d044      	beq.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
   d5c4a:	1bf6      	subs	r6, r6, r7
   d5c4c:	4286      	cmp	r6, r0
   d5c4e:	dd41      	ble.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5c50:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5c54:	2a00      	cmp	r2, #0
   d5c56:	d13d      	bne.n	d5cd4 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5c58:	e7f3      	b.n	d5c42 <_ZN12AccelStepper15computeNewSpeedEv+0x76>
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
   d5c5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5c5c:	f005 fc9e 	bl	db59c <__aeabi_f2d>
   d5c60:	4602      	mov	r2, r0
   d5c62:	460b      	mov	r3, r1
   d5c64:	4606      	mov	r6, r0
   d5c66:	460f      	mov	r7, r1
   d5c68:	f005 fb3a 	bl	db2e0 <__adddf3>
   d5c6c:	4680      	mov	r8, r0
   d5c6e:	4650      	mov	r0, sl
   d5c70:	4689      	mov	r9, r1
   d5c72:	f005 fc81 	bl	db578 <__aeabi_i2d>
   d5c76:	4b2a      	ldr	r3, [pc, #168]	; (d5d20 <_ZN12AccelStepper15computeNewSpeedEv+0x154>)
   d5c78:	2200      	movs	r2, #0
   d5c7a:	f005 fce7 	bl	db64c <__aeabi_dmul>
   d5c7e:	4b29      	ldr	r3, [pc, #164]	; (d5d24 <_ZN12AccelStepper15computeNewSpeedEv+0x158>)
   d5c80:	2200      	movs	r2, #0
   d5c82:	f005 fb2d 	bl	db2e0 <__adddf3>
   d5c86:	4602      	mov	r2, r0
   d5c88:	460b      	mov	r3, r1
   d5c8a:	4640      	mov	r0, r8
   d5c8c:	4649      	mov	r1, r9
   d5c8e:	f005 fe07 	bl	db8a0 <__aeabi_ddiv>
   d5c92:	4602      	mov	r2, r0
   d5c94:	460b      	mov	r3, r1
   d5c96:	4630      	mov	r0, r6
   d5c98:	4639      	mov	r1, r7
   d5c9a:	f005 fb1f 	bl	db2dc <__aeabi_dsub>
   d5c9e:	f005 ffcd 	bl	dbc3c <__aeabi_d2f>
	_cn = max(_cn, _cmin);
   d5ca2:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
   d5ca6:	ee07 0a90 	vmov	s15, r0
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5caa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5cb2:	bfd8      	it	le
   d5cb4:	eef0 7a47 	vmovle.f32	s15, s14
	_cn = max(_cn, _cmin);
   d5cb8:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
   d5cbc:	e017      	b.n	d5cee <_ZN12AccelStepper15computeNewSpeedEv+0x122>
    if (distanceTo > 0)
   d5cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5cc0:	dcad      	bgt.n	d5c1e <_ZN12AccelStepper15computeNewSpeedEv+0x52>
	if (_n > 0)
   d5cc2:	2b00      	cmp	r3, #0
   d5cc4:	ddc0      	ble.n	d5c48 <_ZN12AccelStepper15computeNewSpeedEv+0x7c>
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
   d5cc6:	1bf6      	subs	r6, r6, r7
   d5cc8:	4286      	cmp	r6, r0
   d5cca:	ddb0      	ble.n	d5c2e <_ZN12AccelStepper15computeNewSpeedEv+0x62>
   d5ccc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5cd0:	2b00      	cmp	r3, #0
   d5cd2:	d1ac      	bne.n	d5c2e <_ZN12AccelStepper15computeNewSpeedEv+0x62>
    if (_n == 0)
   d5cd4:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
   d5cd8:	f1ba 0f00 	cmp.w	sl, #0
   d5cdc:	d1bd      	bne.n	d5c5a <_ZN12AccelStepper15computeNewSpeedEv+0x8e>
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
   d5cde:	2d00      	cmp	r5, #0
	_cn = _c0;
   d5ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5ce2:	64a3      	str	r3, [r4, #72]	; 0x48
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
   d5ce4:	bfd4      	ite	le
   d5ce6:	2500      	movle	r5, #0
   d5ce8:	2501      	movgt	r5, #1
   d5cea:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    _stepInterval = _cn;
   d5cee:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    _speed = 1000000.0 / _cn;
   d5cf2:	eddf 6a0d 	vldr	s13, [pc, #52]	; d5d28 <_ZN12AccelStepper15computeNewSpeedEv+0x15c>
    _stepInterval = _cn;
   d5cf6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    _n++;
   d5cfa:	f10a 0301 	add.w	r3, sl, #1
    _stepInterval = _cn;
   d5cfe:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    _speed = 1000000.0 / _cn;
   d5d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _n++;
   d5d06:	6423      	str	r3, [r4, #64]	; 0x40
    if (_direction == DIRECTION_CCW)
   d5d08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    _speed = 1000000.0 / _cn;
   d5d0c:	edc4 7a06 	vstr	s15, [r4, #24]
    if (_direction == DIRECTION_CCW)
   d5d10:	2b00      	cmp	r3, #0
   d5d12:	d182      	bne.n	d5c1a <_ZN12AccelStepper15computeNewSpeedEv+0x4e>
	_speed = -_speed;
   d5d14:	eef1 7a67 	vneg.f32	s15, s15
   d5d18:	edc4 7a06 	vstr	s15, [r4, #24]
   d5d1c:	e77d      	b.n	d5c1a <_ZN12AccelStepper15computeNewSpeedEv+0x4e>
   d5d1e:	bf00      	nop
   d5d20:	40100000 	.word	0x40100000
   d5d24:	3ff00000 	.word	0x3ff00000
   d5d28:	49742400 	.word	0x49742400

000d5d2c <_ZN12AccelStepper6moveToEl>:
    if (_targetPos != absolute)
   d5d2c:	6942      	ldr	r2, [r0, #20]
   d5d2e:	428a      	cmp	r2, r1
   d5d30:	d002      	beq.n	d5d38 <_ZN12AccelStepper6moveToEl+0xc>
	_targetPos = absolute;
   d5d32:	6141      	str	r1, [r0, #20]
	computeNewSpeed();
   d5d34:	f7ff bf4a 	b.w	d5bcc <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5d38:	4770      	bx	lr

000d5d3a <_ZN12AccelStepper4moveEl>:
    moveTo(_currentPos + relative);
   d5d3a:	6903      	ldr	r3, [r0, #16]
   d5d3c:	4419      	add	r1, r3
   d5d3e:	f7ff bff5 	b.w	d5d2c <_ZN12AccelStepper6moveToEl>
   d5d42:	0000      	movs	r0, r0
   d5d44:	0000      	movs	r0, r0
	...

000d5d48 <_ZN12AccelStepper15setAccelerationEf.part.0>:
void AccelStepper::setAcceleration(float acceleration)
   d5d48:	b510      	push	{r4, lr}
   d5d4a:	ed2d 8b02 	vpush	{d8}
    if (_acceleration != acceleration)
   d5d4e:	ed90 7a08 	vldr	s14, [r0, #32]
   d5d52:	eeb4 7a40 	vcmp.f32	s14, s0
   d5d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void AccelStepper::setAcceleration(float acceleration)
   d5d5a:	4604      	mov	r4, r0
   d5d5c:	eeb0 8a40 	vmov.f32	s16, s0
    if (_acceleration != acceleration)
   d5d60:	d032      	beq.n	d5dc8 <_ZN12AccelStepper15setAccelerationEf.part.0+0x80>
	_n = _n * (_acceleration / acceleration);
   d5d62:	eec7 6a00 	vdiv.f32	s13, s14, s0
   d5d66:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
   d5d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   d5d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5d76:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
   d5d7a:	ee10 0a10 	vmov	r0, s0
   d5d7e:	f005 fc0d 	bl	db59c <__aeabi_f2d>
   d5d82:	4602      	mov	r2, r0
   d5d84:	460b      	mov	r3, r1
   d5d86:	2000      	movs	r0, #0
   d5d88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   d5d8c:	f005 fd88 	bl	db8a0 <__aeabi_ddiv>
   d5d90:	ec41 0b10 	vmov	d0, r0, r1
   d5d94:	f004 fa5a 	bl	da24c <sqrt>
   d5d98:	a30d      	add	r3, pc, #52	; (adr r3, d5dd0 <_ZN12AccelStepper15setAccelerationEf.part.0+0x88>)
   d5d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5d9e:	ec51 0b10 	vmov	r0, r1, d0
   d5da2:	f005 fc53 	bl	db64c <__aeabi_dmul>
   d5da6:	a30c      	add	r3, pc, #48	; (adr r3, d5dd8 <_ZN12AccelStepper15setAccelerationEf.part.0+0x90>)
   d5da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5dac:	f005 fc4e 	bl	db64c <__aeabi_dmul>
   d5db0:	f005 ff44 	bl	dbc3c <__aeabi_d2f>
	_acceleration = acceleration;
   d5db4:	ed84 8a08 	vstr	s16, [r4, #32]
}
   d5db8:	ecbd 8b02 	vpop	{d8}
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
   d5dbc:	6460      	str	r0, [r4, #68]	; 0x44
	computeNewSpeed();
   d5dbe:	4620      	mov	r0, r4
}
   d5dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	computeNewSpeed();
   d5dc4:	f7ff bf02 	b.w	d5bcc <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5dc8:	ecbd 8b02 	vpop	{d8}
   d5dcc:	bd10      	pop	{r4, pc}
   d5dce:	bf00      	nop
   d5dd0:	c083126f 	.word	0xc083126f
   d5dd4:	3fe5a1ca 	.word	0x3fe5a1ca
   d5dd8:	00000000 	.word	0x00000000
   d5ddc:	412e8480 	.word	0x412e8480

000d5de0 <_ZN12AccelStepperC1Ehhhhhb>:
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _minPulseWidth = 1;
   d5de2:	f04f 0c01 	mov.w	ip, #1
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5de6:	4d19      	ldr	r5, [pc, #100]	; (d5e4c <_ZN12AccelStepperC1Ehhhhhb+0x6c>)
    _pin[1] = pin2;
   d5de8:	7183      	strb	r3, [r0, #6]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5dea:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _pin[2] = pin3;
   d5dee:	f89d 3018 	ldrb.w	r3, [sp, #24]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5df2:	6005      	str	r5, [r0, #0]
    _maxSpeed = 1.0;
   d5df4:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    _speed = 0.0;
   d5df8:	2500      	movs	r5, #0
    _interface = interface;
   d5dfa:	7101      	strb	r1, [r0, #4]
    _minPulseWidth = 1;
   d5dfc:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    _currentPos = 0;
   d5e00:	2100      	movs	r1, #0
    _enablePin = 0xff;
   d5e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
    _pin[2] = pin3;
   d5e06:	71c3      	strb	r3, [r0, #7]
    _pin[3] = pin4;
   d5e08:	f89d 301c 	ldrb.w	r3, [sp, #28]
    _speed = 0.0;
   d5e0c:	6185      	str	r5, [r0, #24]
    _targetPos = 0;
   d5e0e:	e9c0 1104 	strd	r1, r1, [r0, #16]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5e12:	4604      	mov	r4, r0
    _maxSpeed = 1.0;
   d5e14:	61c6      	str	r6, [r0, #28]
    _acceleration = 0.0;
   d5e16:	6205      	str	r5, [r0, #32]
    _sqrt_twoa = 1.0;
   d5e18:	6246      	str	r6, [r0, #36]	; 0x24
    _stepInterval = 0;
   d5e1a:	6281      	str	r1, [r0, #40]	; 0x28
    _enablePin = 0xff;
   d5e1c:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    _lastStepTime = 0;
   d5e20:	62c1      	str	r1, [r0, #44]	; 0x2c
    _pin[0] = pin1;
   d5e22:	7142      	strb	r2, [r0, #5]
    _pin[3] = pin4;
   d5e24:	7203      	strb	r3, [r0, #8]
    _n = 0;
   d5e26:	6401      	str	r1, [r0, #64]	; 0x40
    _c0 = 0.0;
   d5e28:	6445      	str	r5, [r0, #68]	; 0x44
    _cn = 0.0;
   d5e2a:	6485      	str	r5, [r0, #72]	; 0x48
    _cmin = 1.0;
   d5e2c:	64c6      	str	r6, [r0, #76]	; 0x4c
    _direction = DIRECTION_CCW;
   d5e2e:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
	_pinInverted[i] = 0;
   d5e32:	7241      	strb	r1, [r0, #9]
   d5e34:	8141      	strh	r1, [r0, #10]
   d5e36:	7301      	strb	r1, [r0, #12]
    if (enable)
   d5e38:	b10f      	cbz	r7, d5e3e <_ZN12AccelStepperC1Ehhhhhb+0x5e>
	enableOutputs();
   d5e3a:	f7ff fe6d 	bl	d5b18 <_ZN12AccelStepper13enableOutputsEv>
    if (acceleration == 0.0)
   d5e3e:	4620      	mov	r0, r4
   d5e40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d5e44:	f7ff ff80 	bl	d5d48 <_ZN12AccelStepper15setAccelerationEf.part.0>
}
   d5e48:	4620      	mov	r0, r4
   d5e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5e4c:	000ddd7c 	.word	0x000ddd7c

000d5e50 <_ZN12AccelStepper11setMaxSpeedEf>:
{
   d5e50:	b5d0      	push	{r4, r6, r7, lr}
    if (_maxSpeed != speed)
   d5e52:	edd0 7a07 	vldr	s15, [r0, #28]
   d5e56:	eef4 7a40 	vcmp.f32	s15, s0
   d5e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5e5e:	4604      	mov	r4, r0
    if (_maxSpeed != speed)
   d5e60:	d029      	beq.n	d5eb6 <_ZN12AccelStepper11setMaxSpeedEf+0x66>
	_cmin = 1000000.0 / speed;
   d5e62:	ed9f 7a15 	vldr	s14, [pc, #84]	; d5eb8 <_ZN12AccelStepper11setMaxSpeedEf+0x68>
	if (_n > 0)
   d5e66:	6c03      	ldr	r3, [r0, #64]	; 0x40
	_maxSpeed = speed;
   d5e68:	ed80 0a07 	vstr	s0, [r0, #28]
	_cmin = 1000000.0 / speed;
   d5e6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
	if (_n > 0)
   d5e70:	2b00      	cmp	r3, #0
	_cmin = 1000000.0 / speed;
   d5e72:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
	if (_n > 0)
   d5e76:	dd1e      	ble.n	d5eb6 <_ZN12AccelStepper11setMaxSpeedEf+0x66>
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5e78:	edd0 7a06 	vldr	s15, [r0, #24]
   d5e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d5e80:	ee17 0a90 	vmov	r0, s15
   d5e84:	f005 fb8a 	bl	db59c <__aeabi_f2d>
   d5e88:	4606      	mov	r6, r0
   d5e8a:	6a20      	ldr	r0, [r4, #32]
   d5e8c:	460f      	mov	r7, r1
   d5e8e:	f005 fb85 	bl	db59c <__aeabi_f2d>
   d5e92:	4602      	mov	r2, r0
   d5e94:	460b      	mov	r3, r1
   d5e96:	f005 fa23 	bl	db2e0 <__adddf3>
   d5e9a:	4602      	mov	r2, r0
   d5e9c:	460b      	mov	r3, r1
   d5e9e:	4630      	mov	r0, r6
   d5ea0:	4639      	mov	r1, r7
   d5ea2:	f005 fcfd 	bl	db8a0 <__aeabi_ddiv>
   d5ea6:	f005 fe81 	bl	dbbac <__aeabi_d2iz>
   d5eaa:	6420      	str	r0, [r4, #64]	; 0x40
	    computeNewSpeed();
   d5eac:	4620      	mov	r0, r4
}
   d5eae:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	    computeNewSpeed();
   d5eb2:	f7ff be8b 	b.w	d5bcc <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5eb6:	bdd0      	pop	{r4, r6, r7, pc}
   d5eb8:	49742400 	.word	0x49742400
   d5ebc:	00000000 	.word	0x00000000

000d5ec0 <_ZN12AccelStepper8setSpeedEf>:
{
   d5ec0:	b510      	push	{r4, lr}
   d5ec2:	ed2d 8b02 	vpush	{d8}
    if (speed == _speed)
   d5ec6:	edd0 7a06 	vldr	s15, [r0, #24]
   d5eca:	eef4 7a40 	vcmp.f32	s15, s0
   d5ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5ed2:	4604      	mov	r4, r0
    if (speed == _speed)
   d5ed4:	d01a      	beq.n	d5f0c <_ZN12AccelStepper8setSpeedEf+0x4c>
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
   d5ed6:	edd0 7a07 	vldr	s15, [r0, #28]
   d5eda:	eeb1 8a67 	vneg.f32	s16, s15
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d5ede:	eeb4 8ac0 	vcmpe.f32	s16, s0
   d5ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5ee6:	dc08      	bgt.n	d5efa <_ZN12AccelStepper8setSpeedEf+0x3a>
   d5ee8:	eef4 7ac0 	vcmpe.f32	s15, s0
   d5eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5ef0:	bf54      	ite	pl
   d5ef2:	eeb0 8a40 	vmovpl.f32	s16, s0
   d5ef6:	eeb0 8a67 	vmovmi.f32	s16, s15
    if (speed == 0.0)
   d5efa:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f02:	d106      	bne.n	d5f12 <_ZN12AccelStepper8setSpeedEf+0x52>
	_stepInterval = 0;
   d5f04:	2300      	movs	r3, #0
   d5f06:	62a3      	str	r3, [r4, #40]	; 0x28
    _speed = speed;
   d5f08:	ed84 8a06 	vstr	s16, [r4, #24]
}
   d5f0c:	ecbd 8b02 	vpop	{d8}
   d5f10:	bd10      	pop	{r4, pc}
	_stepInterval = fabs(1000000.0 / speed);
   d5f12:	ee18 0a10 	vmov	r0, s16
   d5f16:	f005 fb41 	bl	db59c <__aeabi_f2d>
   d5f1a:	4602      	mov	r2, r0
   d5f1c:	460b      	mov	r3, r1
   d5f1e:	a10a      	add	r1, pc, #40	; (adr r1, d5f48 <_ZN12AccelStepper8setSpeedEf+0x88>)
   d5f20:	e9d1 0100 	ldrd	r0, r1, [r1]
   d5f24:	f005 fcbc 	bl	db8a0 <__aeabi_ddiv>
   d5f28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d5f2c:	4619      	mov	r1, r3
   d5f2e:	f005 fe65 	bl	dbbfc <__aeabi_d2uiz>
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
   d5f32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f3a:	bfcc      	ite	gt
   d5f3c:	2301      	movgt	r3, #1
   d5f3e:	2300      	movle	r3, #0
	_stepInterval = fabs(1000000.0 / speed);
   d5f40:	62a0      	str	r0, [r4, #40]	; 0x28
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
   d5f42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   d5f46:	e7df      	b.n	d5f08 <_ZN12AccelStepper8setSpeedEf+0x48>
   d5f48:	00000000 	.word	0x00000000
   d5f4c:	412e8480 	.word	0x412e8480

000d5f50 <_ZN12AccelStepper4stopEv>:
    moveTo(position);
    runToPosition();
}

void AccelStepper::stop()
{
   d5f50:	b5d0      	push	{r4, r6, r7, lr}
   d5f52:	ed2d 8b02 	vpush	{d8}
    if (_speed != 0.0)
   d5f56:	ed90 8a06 	vldr	s16, [r0, #24]
   d5f5a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5f62:	4604      	mov	r4, r0
    if (_speed != 0.0)
   d5f64:	d024      	beq.n	d5fb0 <_ZN12AccelStepper4stopEv+0x60>
    {
	long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
   d5f66:	ee68 7a08 	vmul.f32	s15, s16, s16
   d5f6a:	ee17 0a90 	vmov	r0, s15
   d5f6e:	f005 fb15 	bl	db59c <__aeabi_f2d>
   d5f72:	4606      	mov	r6, r0
   d5f74:	6a20      	ldr	r0, [r4, #32]
   d5f76:	460f      	mov	r7, r1
   d5f78:	f005 fb10 	bl	db59c <__aeabi_f2d>
   d5f7c:	4602      	mov	r2, r0
   d5f7e:	460b      	mov	r3, r1
   d5f80:	f005 f9ae 	bl	db2e0 <__adddf3>
   d5f84:	4602      	mov	r2, r0
   d5f86:	460b      	mov	r3, r1
   d5f88:	4630      	mov	r0, r6
   d5f8a:	4639      	mov	r1, r7
   d5f8c:	f005 fc88 	bl	db8a0 <__aeabi_ddiv>
   d5f90:	f005 fe0c 	bl	dbbac <__aeabi_d2iz>
	if (_speed > 0)
   d5f94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	    move(stepsToStop);
	else
	    move(-stepsToStop);
    }
}
   d5f98:	ecbd 8b02 	vpop	{d8}
	if (_speed > 0)
   d5f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	    move(stepsToStop);
   d5fa0:	bfcc      	ite	gt
   d5fa2:	1c41      	addgt	r1, r0, #1
	    move(-stepsToStop);
   d5fa4:	43c1      	mvnle	r1, r0
   d5fa6:	4620      	mov	r0, r4
}
   d5fa8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	    move(-stepsToStop);
   d5fac:	f7ff bec5 	b.w	d5d3a <_ZN12AccelStepper4moveEl>
}
   d5fb0:	ecbd 8b02 	vpop	{d8}
   d5fb4:	bdd0      	pop	{r4, r6, r7, pc}

000d5fb6 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d5fb6:	7501      	strb	r1, [r0, #20]
   d5fb8:	4770      	bx	lr
	...

000d5fbc <_ZN9TCPClientD1Ev>:
   d5fbc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5fbe:	6984      	ldr	r4, [r0, #24]
   d5fc0:	4b0a      	ldr	r3, [pc, #40]	; (d5fec <_ZN9TCPClientD1Ev+0x30>)
   d5fc2:	6003      	str	r3, [r0, #0]
   d5fc4:	4605      	mov	r5, r0
   d5fc6:	b17c      	cbz	r4, d5fe8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5fc8:	6863      	ldr	r3, [r4, #4]
   d5fca:	3b01      	subs	r3, #1
   d5fcc:	6063      	str	r3, [r4, #4]
   d5fce:	b95b      	cbnz	r3, d5fe8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5fd0:	6823      	ldr	r3, [r4, #0]
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	689b      	ldr	r3, [r3, #8]
   d5fd6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5fd8:	68a3      	ldr	r3, [r4, #8]
   d5fda:	3b01      	subs	r3, #1
   d5fdc:	60a3      	str	r3, [r4, #8]
   d5fde:	b91b      	cbnz	r3, d5fe8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5fe0:	6823      	ldr	r3, [r4, #0]
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	68db      	ldr	r3, [r3, #12]
   d5fe6:	4798      	blx	r3
   d5fe8:	4628      	mov	r0, r5
   d5fea:	bd38      	pop	{r3, r4, r5, pc}
   d5fec:	000de85c 	.word	0x000de85c

000d5ff0 <_ZN9TCPClientD0Ev>:
   d5ff0:	b510      	push	{r4, lr}
   d5ff2:	4604      	mov	r4, r0
   d5ff4:	f7ff ffe2 	bl	d5fbc <_ZN9TCPClientD1Ev>
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	211c      	movs	r1, #28
   d5ffc:	f003 fda3 	bl	d9b46 <_ZdlPvj>
   d6000:	4620      	mov	r0, r4
   d6002:	bd10      	pop	{r4, pc}

000d6004 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6004:	b530      	push	{r4, r5, lr}
   d6006:	4d06      	ldr	r5, [pc, #24]	; (d6020 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d6008:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d600a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d600e:	2500      	movs	r5, #0
  _token = token;
   d6010:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6012:	7505      	strb	r5, [r0, #20]
   d6014:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6018:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d601c:	6185      	str	r5, [r0, #24]
}
   d601e:	bd30      	pop	{r4, r5, pc}
   d6020:	000ddeb4 	.word	0x000ddeb4

000d6024 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6028:	460d      	mov	r5, r1
   d602a:	4617      	mov	r7, r2
   d602c:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d602e:	f002 ffa1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6032:	491e      	ldr	r1, [pc, #120]	; (d60ac <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6034:	4e1e      	ldr	r6, [pc, #120]	; (d60b0 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d6036:	f8df a07c 	ldr.w	sl, [pc, #124]	; d60b4 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d603a:	f8df b07c 	ldr.w	fp, [pc, #124]	; d60b8 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d603e:	f002 f9ca 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d6042:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6044:	4630      	mov	r0, r6
   d6046:	f003 fb8c 	bl	d9762 <_ZN9TCPClient6statusEv>
   d604a:	bb60      	cbnz	r0, d60a6 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d604c:	2c05      	cmp	r4, #5
   d604e:	d02a      	beq.n	d60a6 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d6050:	f898 3014 	ldrb.w	r3, [r8, #20]
   d6054:	b1c3      	cbz	r3, d6088 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d6056:	f002 ff8d 	bl	d8f74 <_Z16_fetch_usbserialv>
   d605a:	4651      	mov	r1, sl
   d605c:	f002 f9a8 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6060:	f002 ff88 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6064:	4629      	mov	r1, r5
   d6066:	f002 f9a3 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d606a:	f002 ff83 	bl	d8f74 <_Z16_fetch_usbserialv>
   d606e:	4659      	mov	r1, fp
   d6070:	f002 f99e 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6074:	f002 ff7e 	bl	d8f74 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6078:	220a      	movs	r2, #10
   d607a:	4681      	mov	r9, r0
   d607c:	4621      	mov	r1, r4
   d607e:	f002 f9b4 	bl	d83ea <_ZN5Print11printNumberEmh>
        n += println();
   d6082:	4648      	mov	r0, r9
   d6084:	f002 f99b 	bl	d83be <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6088:	4630      	mov	r0, r6
   d608a:	f003 fb53 	bl	d9734 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d608e:	2300      	movs	r3, #0
   d6090:	b2ba      	uxth	r2, r7
   d6092:	4629      	mov	r1, r5
   d6094:	4630      	mov	r0, r6
   d6096:	f003 f9f1 	bl	d947c <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d609a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d609e:	f002 fa79 	bl	d8594 <delay>
   d60a2:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d60a4:	e7ce      	b.n	d6044 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d60a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60aa:	bf00      	nop
   d60ac:	000ddda8 	.word	0x000ddda8
   d60b0:	2003e448 	.word	0x2003e448
   d60b4:	000dddc0 	.word	0x000dddc0
   d60b8:	000dddd6 	.word	0x000dddd6

000d60bc <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d60bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d60be:	4f0e      	ldr	r7, [pc, #56]	; (d60f8 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d60c0:	4604      	mov	r4, r0
  int timeout = 0;
   d60c2:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d60c4:	4638      	mov	r0, r7
   d60c6:	f003 fadb 	bl	d9680 <_ZN9TCPClient9availableEv>
   d60ca:	4605      	mov	r5, r0
   d60cc:	b990      	cbnz	r0, d60f4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d60ce:	69a3      	ldr	r3, [r4, #24]
   d60d0:	42b3      	cmp	r3, r6
   d60d2:	dd0f      	ble.n	d60f4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d60d4:	2001      	movs	r0, #1
   d60d6:	f002 fa5d 	bl	d8594 <delay>
    if (timeout > _timeout - 1) {
   d60da:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d60dc:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d60de:	42b3      	cmp	r3, r6
   d60e0:	dcf0      	bgt.n	d60c4 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d60e2:	7d20      	ldrb	r0, [r4, #20]
   d60e4:	b128      	cbz	r0, d60f2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d60e6:	f002 ff45 	bl	d8f74 <_Z16_fetch_usbserialv>
   d60ea:	4904      	ldr	r1, [pc, #16]	; (d60fc <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d60ec:	f002 f973 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d60f0:	4628      	mov	r0, r5
}
   d60f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d60f4:	2001      	movs	r0, #1
   d60f6:	e7fc      	b.n	d60f2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d60f8:	2003e448 	.word	0x2003e448
   d60fc:	000dddea 	.word	0x000dddea

000d6100 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6104:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6106:	4606      	mov	r6, r0
   d6108:	4688      	mov	r8, r1
   d610a:	4614      	mov	r4, r2
  if (_debug) {
   d610c:	b14b      	cbz	r3, d6122 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d610e:	f002 ff31 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6112:	4926      	ldr	r1, [pc, #152]	; (d61ac <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
   d6114:	f002 f95f 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6118:	f002 ff2c 	bl	d8f74 <_Z16_fetch_usbserialv>
   d611c:	4924      	ldr	r1, [pc, #144]	; (d61b0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d611e:	f002 f95a 	bl	d83d6 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6122:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d61c4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6126:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6128:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d612c:	4648      	mov	r0, r9
   d612e:	f003 faa7 	bl	d9680 <_ZN9TCPClient9availableEv>
   d6132:	b178      	cbz	r0, d6154 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6134:	4648      	mov	r0, r9
   d6136:	f003 f95c 	bl	d93f2 <_ZN9TCPClient4readEv>
    if (_debug) {
   d613a:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d613c:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d613e:	b12b      	cbz	r3, d614c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6140:	f002 ff18 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6144:	6803      	ldr	r3, [r0, #0]
   d6146:	4639      	mov	r1, r7
   d6148:	689b      	ldr	r3, [r3, #8]
   d614a:	4798      	blx	r3
    response[j] = c;
   d614c:	5567      	strb	r7, [r4, r5]
    j++;
   d614e:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6150:	4555      	cmp	r5, sl
   d6152:	d1eb      	bne.n	d612c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6154:	7d33      	ldrb	r3, [r6, #20]
   d6156:	b123      	cbz	r3, d6162 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6158:	f002 ff0c 	bl	d8f74 <_Z16_fetch_usbserialv>
   d615c:	4915      	ldr	r1, [pc, #84]	; (d61b4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d615e:	f002 f93a 	bl	d83d6 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6162:	2300      	movs	r3, #0
   d6164:	5563      	strb	r3, [r4, r5]
  if (request_type == "POST") {
   d6166:	4b14      	ldr	r3, [pc, #80]	; (d61b8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d6168:	4598      	cmp	r8, r3
   d616a:	d10d      	bne.n	d6188 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
    char* pch = strstr(response, "OK");
   d616c:	4913      	ldr	r1, [pc, #76]	; (d61bc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d616e:	4620      	mov	r0, r4
   d6170:	f005 fe90 	bl	dbe94 <strstr>
      result = 1;
   d6174:	ed9f 0a12 	vldr	s0, [pc, #72]	; d61c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>
   d6178:	2800      	cmp	r0, #0
   d617a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d617e:	bf18      	it	ne
   d6180:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6188:	217c      	movs	r1, #124	; 0x7c
   d618a:	4620      	mov	r0, r4
   d618c:	f005 fe18 	bl	dbdc0 <strchr>
  if (pch != NULL) {
   d6190:	b148      	cbz	r0, d61a6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa6>
    result = atof(pch + 1);
   d6192:	3001      	adds	r0, #1
   d6194:	f005 fdc0 	bl	dbd18 <atof>
   d6198:	ec51 0b10 	vmov	r0, r1, d0
   d619c:	f005 fd4e 	bl	dbc3c <__aeabi_d2f>
   d61a0:	ee00 0a10 	vmov	s0, r0
   d61a4:	e7ee      	b.n	d6184 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
  float result = ERROR_VALUE;
   d61a6:	ed9f 0a06 	vldr	s0, [pc, #24]	; d61c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>
   d61aa:	e7eb      	b.n	d6184 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
   d61ac:	000dde31 	.word	0x000dde31
   d61b0:	000dde1d 	.word	0x000dde1d
   d61b4:	000dde30 	.word	0x000dde30
   d61b8:	000dde3c 	.word	0x000dde3c
   d61bc:	000dde41 	.word	0x000dde41
   d61c0:	cda2425f 	.word	0xcda2425f
   d61c4:	2003e448 	.word	0x2003e448

000d61c8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d61c8:	b570      	push	{r4, r5, r6, lr}
   d61ca:	ed2d 8b02 	vpush	{d8}
   d61ce:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d61d0:	6841      	ldr	r1, [r0, #4]
   d61d2:	4822      	ldr	r0, [pc, #136]	; (d625c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d61d4:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d61d8:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d61da:	2300      	movs	r3, #0
   d61dc:	f003 f94e 	bl	d947c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d61e0:	4620      	mov	r0, r4
   d61e2:	6861      	ldr	r1, [r4, #4]
   d61e4:	f242 3234 	movw	r2, #9012	; 0x2334
   d61e8:	f7ff ff1c 	bl	d6024 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d61ec:	481b      	ldr	r0, [pc, #108]	; (d625c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d61ee:	f003 f864 	bl	d92ba <_ZN9TCPClient9connectedEv>
   d61f2:	b348      	cbz	r0, d6248 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d61f4:	4629      	mov	r1, r5
   d61f6:	4819      	ldr	r0, [pc, #100]	; (d625c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d61f8:	f002 f8da 	bl	d83b0 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff ff5d 	bl	d60bc <_ZN6UbiTCP16waitServerAnswerEv>
   d6202:	4605      	mov	r5, r0
   d6204:	b938      	cbnz	r0, d6216 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d6206:	4815      	ldr	r0, [pc, #84]	; (d625c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6208:	f003 fa94 	bl	d9734 <_ZN9TCPClient4stopEv>
    return false;
   d620c:	2500      	movs	r5, #0
}
   d620e:	ecbd 8b02 	vpop	{d8}
   d6212:	4628      	mov	r0, r5
   d6214:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d6216:	2064      	movs	r0, #100	; 0x64
   d6218:	f001 fcdc 	bl	d7bd4 <malloc>
  float value = parseTCPAnswer("POST", response);
   d621c:	4910      	ldr	r1, [pc, #64]	; (d6260 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d621e:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6220:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d6222:	4620      	mov	r0, r4
   d6224:	f7ff ff6c 	bl	d6100 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6228:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d622a:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d622e:	f001 fcd9 	bl	d7be4 <free>
  if (value != ERROR_VALUE) {
   d6232:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6264 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d6236:	eeb4 8a67 	vcmp.f32	s16, s15
   d623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d623e:	d0e2      	beq.n	d6206 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6240:	4806      	ldr	r0, [pc, #24]	; (d625c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6242:	f003 fa77 	bl	d9734 <_ZN9TCPClient4stopEv>
    return true;
   d6246:	e7e2      	b.n	d620e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d6248:	7d23      	ldrb	r3, [r4, #20]
   d624a:	2b00      	cmp	r3, #0
   d624c:	d0db      	beq.n	d6206 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d624e:	f002 fe91 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6252:	4905      	ldr	r1, [pc, #20]	; (d6268 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6254:	f002 f8bf 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d6258:	e7d5      	b.n	d6206 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d625a:	bf00      	nop
   d625c:	2003e448 	.word	0x2003e448
   d6260:	000dde3c 	.word	0x000dde3c
   d6264:	cda2425f 	.word	0xcda2425f
   d6268:	000dde44 	.word	0x000dde44

000d626c <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d626c:	b570      	push	{r4, r5, r6, lr}
   d626e:	ed2d 8b02 	vpush	{d8}
   d6272:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6274:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6276:	460e      	mov	r6, r1
   d6278:	4615      	mov	r5, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d627a:	6841      	ldr	r1, [r0, #4]
   d627c:	4849      	ldr	r0, [pc, #292]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d627e:	f242 3234 	movw	r2, #9012	; 0x2334
   d6282:	f003 f8fb 	bl	d947c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6286:	4620      	mov	r0, r4
   d6288:	6861      	ldr	r1, [r4, #4]
   d628a:	f242 3234 	movw	r2, #9012	; 0x2334
   d628e:	f7ff fec9 	bl	d6024 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6292:	4844      	ldr	r0, [pc, #272]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d6294:	f003 f811 	bl	d92ba <_ZN9TCPClient9connectedEv>
   d6298:	2800      	cmp	r0, #0
   d629a:	d079      	beq.n	d6390 <_ZN6UbiTCP3getEPKcS1_+0x124>
    _client_tcp_ubi.print(_user_agent);
   d629c:	68a1      	ldr	r1, [r4, #8]
   d629e:	4841      	ldr	r0, [pc, #260]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62a0:	f002 f886 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
   d62a4:	4940      	ldr	r1, [pc, #256]	; (d63a8 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d62a6:	483f      	ldr	r0, [pc, #252]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62a8:	f002 f882 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
   d62ac:	68e1      	ldr	r1, [r4, #12]
   d62ae:	483d      	ldr	r0, [pc, #244]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62b0:	f002 f87e 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
   d62b4:	493d      	ldr	r1, [pc, #244]	; (d63ac <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d62b6:	483b      	ldr	r0, [pc, #236]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62b8:	f002 f87a 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
   d62bc:	4631      	mov	r1, r6
   d62be:	4839      	ldr	r0, [pc, #228]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62c0:	f002 f876 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
   d62c4:	493a      	ldr	r1, [pc, #232]	; (d63b0 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d62c6:	4837      	ldr	r0, [pc, #220]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62c8:	f002 f872 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
   d62cc:	4629      	mov	r1, r5
   d62ce:	4835      	ldr	r0, [pc, #212]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62d0:	f002 f86e 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
   d62d4:	4937      	ldr	r1, [pc, #220]	; (d63b4 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d62d6:	4833      	ldr	r0, [pc, #204]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d62d8:	f002 f86a 	bl	d83b0 <_ZN5Print5printEPKc>
    if (_debug) {
   d62dc:	7d23      	ldrb	r3, [r4, #20]
   d62de:	b3b3      	cbz	r3, d634e <_ZN6UbiTCP3getEPKcS1_+0xe2>
      Serial.println("----");
   d62e0:	f002 fe48 	bl	d8f74 <_Z16_fetch_usbserialv>
   d62e4:	4934      	ldr	r1, [pc, #208]	; (d63b8 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
   d62e6:	f002 f876 	bl	d83d6 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
   d62ea:	f002 fe43 	bl	d8f74 <_Z16_fetch_usbserialv>
   d62ee:	4933      	ldr	r1, [pc, #204]	; (d63bc <_ZN6UbiTCP3getEPKcS1_+0x150>)
   d62f0:	f002 f871 	bl	d83d6 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
   d62f4:	f002 fe3e 	bl	d8f74 <_Z16_fetch_usbserialv>
   d62f8:	68a1      	ldr	r1, [r4, #8]
   d62fa:	f002 f859 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
   d62fe:	f002 fe39 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6302:	4929      	ldr	r1, [pc, #164]	; (d63a8 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d6304:	f002 f854 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6308:	f002 fe34 	bl	d8f74 <_Z16_fetch_usbserialv>
   d630c:	68e1      	ldr	r1, [r4, #12]
   d630e:	f002 f84f 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("|");
   d6312:	f002 fe2f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6316:	4925      	ldr	r1, [pc, #148]	; (d63ac <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d6318:	f002 f84a 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d631c:	f002 fe2a 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6320:	4631      	mov	r1, r6
   d6322:	f002 f845 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(":");
   d6326:	f002 fe25 	bl	d8f74 <_Z16_fetch_usbserialv>
   d632a:	4921      	ldr	r1, [pc, #132]	; (d63b0 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d632c:	f002 f840 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d6330:	f002 fe20 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6334:	4629      	mov	r1, r5
   d6336:	f002 f83b 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("|end");
   d633a:	f002 fe1b 	bl	d8f74 <_Z16_fetch_usbserialv>
   d633e:	491d      	ldr	r1, [pc, #116]	; (d63b4 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d6340:	f002 f836 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.println("\n----");
   d6344:	f002 fe16 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6348:	491d      	ldr	r1, [pc, #116]	; (d63c0 <_ZN6UbiTCP3getEPKcS1_+0x154>)
   d634a:	f002 f844 	bl	d83d6 <_ZN5Print7printlnEPKc>
    if (!waitServerAnswer()) {
   d634e:	4620      	mov	r0, r4
   d6350:	f7ff feb4 	bl	d60bc <_ZN6UbiTCP16waitServerAnswerEv>
   d6354:	b948      	cbnz	r0, d636a <_ZN6UbiTCP3getEPKcS1_+0xfe>
      _client_tcp_ubi.stop();
   d6356:	4813      	ldr	r0, [pc, #76]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
      return ERROR_VALUE;
   d6358:	ed9f 8a1a 	vldr	s16, [pc, #104]	; d63c4 <_ZN6UbiTCP3getEPKcS1_+0x158>
      _client_tcp_ubi.stop();
   d635c:	f003 f9ea 	bl	d9734 <_ZN9TCPClient4stopEv>
}
   d6360:	eeb0 0a48 	vmov.f32	s0, s16
   d6364:	ecbd 8b02 	vpop	{d8}
   d6368:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d636a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d636e:	f001 fc31 	bl	d7bd4 <malloc>
    float value = parseTCPAnswer("LV", response);
   d6372:	4915      	ldr	r1, [pc, #84]	; (d63c8 <_ZN6UbiTCP3getEPKcS1_+0x15c>)
   d6374:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6376:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6378:	4620      	mov	r0, r4
   d637a:	f7ff fec1 	bl	d6100 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d637e:	4809      	ldr	r0, [pc, #36]	; (d63a4 <_ZN6UbiTCP3getEPKcS1_+0x138>)
    float value = parseTCPAnswer("LV", response);
   d6380:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d6384:	f003 f9d6 	bl	d9734 <_ZN9TCPClient4stopEv>
    free(response);
   d6388:	4628      	mov	r0, r5
   d638a:	f001 fc2b 	bl	d7be4 <free>
    return value;
   d638e:	e7e7      	b.n	d6360 <_ZN6UbiTCP3getEPKcS1_+0xf4>
  if (_debug) {
   d6390:	7d23      	ldrb	r3, [r4, #20]
   d6392:	2b00      	cmp	r3, #0
   d6394:	d0df      	beq.n	d6356 <_ZN6UbiTCP3getEPKcS1_+0xea>
    Serial.println("ERROR could not connect to the server");
   d6396:	f002 fded 	bl	d8f74 <_Z16_fetch_usbserialv>
   d639a:	490c      	ldr	r1, [pc, #48]	; (d63cc <_ZN6UbiTCP3getEPKcS1_+0x160>)
   d639c:	f002 f81b 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d63a0:	e7d9      	b.n	d6356 <_ZN6UbiTCP3getEPKcS1_+0xea>
   d63a2:	bf00      	nop
   d63a4:	2003e448 	.word	0x2003e448
   d63a8:	000dde62 	.word	0x000dde62
   d63ac:	000dde65 	.word	0x000dde65
   d63b0:	000ddf5c 	.word	0x000ddf5c
   d63b4:	000ddf9a 	.word	0x000ddf9a
   d63b8:	000dde7d 	.word	0x000dde7d
   d63bc:	000dde67 	.word	0x000dde67
   d63c0:	000dde7c 	.word	0x000dde7c
   d63c4:	cda2425f 	.word	0xcda2425f
   d63c8:	000dde82 	.word	0x000dde82
   d63cc:	000dde85 	.word	0x000dde85

000d63d0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d63d0:	b510      	push	{r4, lr}
#define _UbiTcp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d63d2:	4c05      	ldr	r4, [pc, #20]	; (d63e8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d63d4:	4620      	mov	r0, r4
   d63d6:	f003 f9fd 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d63da:	4620      	mov	r0, r4
   d63dc:	4a03      	ldr	r2, [pc, #12]	; (d63ec <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d63de:	4904      	ldr	r1, [pc, #16]	; (d63f0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d63e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d63e4:	f003 bbaa 	b.w	d9b3c <__aeabi_atexit>
   d63e8:	2003e448 	.word	0x2003e448
   d63ec:	2003e128 	.word	0x2003e128
   d63f0:	000d5fbd 	.word	0x000d5fbd

000d63f4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d63f4:	b510      	push	{r4, lr}
   d63f6:	4b06      	ldr	r3, [pc, #24]	; (d6410 <_ZN3UDPD1Ev+0x1c>)
   d63f8:	6003      	str	r3, [r0, #0]
   d63fa:	3364      	adds	r3, #100	; 0x64
   d63fc:	4604      	mov	r4, r0
   d63fe:	6103      	str	r3, [r0, #16]
   d6400:	f001 fd3c 	bl	d7e7c <_ZN3UDP4stopEv>
   d6404:	4620      	mov	r0, r4
   d6406:	f001 feff 	bl	d8208 <_ZN3UDP13releaseBufferEv>
   d640a:	4620      	mov	r0, r4
   d640c:	bd10      	pop	{r4, pc}
   d640e:	bf00      	nop
   d6410:	000de670 	.word	0x000de670

000d6414 <_ZN3UDPD0Ev>:
   d6414:	b510      	push	{r4, lr}
   d6416:	4604      	mov	r4, r0
   d6418:	f7ff ffec 	bl	d63f4 <_ZN3UDPD1Ev>
   d641c:	4620      	mov	r0, r4
   d641e:	214c      	movs	r1, #76	; 0x4c
   d6420:	f003 fb91 	bl	d9b46 <_ZdlPvj>
   d6424:	4620      	mov	r0, r4
   d6426:	bd10      	pop	{r4, pc}

000d6428 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d6428:	b510      	push	{r4, lr}
   d642a:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d642c:	6800      	ldr	r0, [r0, #0]
   d642e:	b108      	cbz	r0, d6434 <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d6430:	f7fd fe37 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d6434:	68e0      	ldr	r0, [r4, #12]
   d6436:	f001 fbd5 	bl	d7be4 <free>
  delete _ubiProtocol;
   d643a:	6860      	ldr	r0, [r4, #4]
   d643c:	b110      	cbz	r0, d6444 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d643e:	2104      	movs	r1, #4
   d6440:	f003 fb81 	bl	d9b46 <_ZdlPvj>
}
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d6448:	b538      	push	{r3, r4, r5, lr}
   d644a:	4604      	mov	r4, r0
  _dirty = true;
   d644c:	2001      	movs	r0, #1
   d644e:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d6450:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6454:	68e5      	ldr	r5, [r4, #12]
   d6456:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d645a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d645e:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6462:	68e0      	ldr	r0, [r4, #12]
   d6464:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6468:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d646c:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d6470:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6474:	68e0      	ldr	r0, [r4, #12]
   d6476:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d647a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d647e:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d6480:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d6484:	68e1      	ldr	r1, [r4, #12]
   d6486:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d648a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d648e:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d6490:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6494:	68e2      	ldr	r2, [r4, #12]
   d6496:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d649a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d649e:	9a04      	ldr	r2, [sp, #16]
   d64a0:	611a      	str	r2, [r3, #16]
  _current_value++;
   d64a2:	7c23      	ldrb	r3, [r4, #16]
   d64a4:	3301      	adds	r3, #1
   d64a6:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d64a8:	2b0a      	cmp	r3, #10
  _current_value++;
   d64aa:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d64ac:	dd08      	ble.n	d64c0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d64ae:	7ca3      	ldrb	r3, [r4, #18]
   d64b0:	b123      	cbz	r3, d64bc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d64b2:	f002 fd5f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d64b6:	4903      	ldr	r1, [pc, #12]	; (d64c4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d64b8:	f001 ff8d 	bl	d83d6 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d64bc:	230a      	movs	r3, #10
   d64be:	7423      	strb	r3, [r4, #16]
  }
}
   d64c0:	bd38      	pop	{r3, r4, r5, pc}
   d64c2:	bf00      	nop
   d64c4:	000ddec0 	.word	0x000ddec0

000d64c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d64c8:	b510      	push	{r4, lr}
   d64ca:	ee10 0a10 	vmov	r0, s0
   d64ce:	b086      	sub	sp, #24
   d64d0:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d64d2:	f005 f863 	bl	db59c <__aeabi_f2d>
   d64d6:	4602      	mov	r2, r0
   d64d8:	460b      	mov	r3, r1
   d64da:	a801      	add	r0, sp, #4
   d64dc:	490a      	ldr	r1, [pc, #40]	; (d6508 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d64de:	f001 fb89 	bl	d7bf4 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d64e2:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d64e4:	2214      	movs	r2, #20
  uint8_t k = 0;
   d64e6:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d64e8:	f810 1b01 	ldrb.w	r1, [r0], #1
   d64ec:	2920      	cmp	r1, #32
   d64ee:	d006      	beq.n	d64fe <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d64f0:	54e1      	strb	r1, [r4, r3]
      k++;
   d64f2:	3301      	adds	r3, #1
   d64f4:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d64f6:	b911      	cbnz	r1, d64fe <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d64f8:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d64fa:	b006      	add	sp, #24
   d64fc:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d64fe:	3a01      	subs	r2, #1
   d6500:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d6504:	d1f0      	bne.n	d64e8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d6506:	e7f8      	b.n	d64fa <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d6508:	000ddeff 	.word	0x000ddeff

000d650c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6510:	460c      	mov	r4, r1
   d6512:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d6514:	494c      	ldr	r1, [pc, #304]	; (d6648 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d6516:	f8df 8154 	ldr.w	r8, [pc, #340]	; d666c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d651a:	f8df 9154 	ldr.w	r9, [pc, #340]	; d6670 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d651e:	f8df a154 	ldr.w	sl, [pc, #340]	; d6674 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d6522:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d6524:	4620      	mov	r0, r4
   d6526:	f005 fc62 	bl	dbdee <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d652a:	2600      	movs	r6, #0
   d652c:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d6530:	429e      	cmp	r6, r3
   d6532:	da6a      	bge.n	d660a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6534:	68eb      	ldr	r3, [r5, #12]
   d6536:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d653a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d653e:	ed93 0a02 	vldr	s0, [r3, #8]
   d6542:	a903      	add	r1, sp, #12
   d6544:	4628      	mov	r0, r5
   d6546:	f7ff ffbf 	bl	d64c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d654a:	68eb      	ldr	r3, [r5, #12]
   d654c:	a903      	add	r1, sp, #12
   d654e:	9100      	str	r1, [sp, #0]
   d6550:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d6554:	4622      	mov	r2, r4
   d6556:	4641      	mov	r1, r8
   d6558:	4620      	mov	r0, r4
   d655a:	f001 fb4b 	bl	d7bf4 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d655e:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6560:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6564:	443b      	add	r3, r7
   d6566:	68db      	ldr	r3, [r3, #12]
   d6568:	b343      	cbz	r3, d65bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d656a:	4622      	mov	r2, r4
   d656c:	4649      	mov	r1, r9
   d656e:	4620      	mov	r0, r4
   d6570:	f001 fb40 	bl	d7bf4 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6574:	68eb      	ldr	r3, [r5, #12]
   d6576:	443b      	add	r3, r7
   d6578:	691b      	ldr	r3, [r3, #16]
   d657a:	2b00      	cmp	r3, #0
   d657c:	d038      	beq.n	d65f0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d657e:	200a      	movs	r0, #10
   d6580:	fb93 f1f0 	sdiv	r1, r3, r0
   d6584:	fb91 fcf0 	sdiv	ip, r1, r0
   d6588:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d658c:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6590:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6592:	2264      	movs	r2, #100	; 0x64
   d6594:	fb93 f2f2 	sdiv	r2, r3, r2
   d6598:	fb92 fef0 	sdiv	lr, r2, r0
   d659c:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d65a0:	9100      	str	r1, [sp, #0]
   d65a2:	fa5f f38c 	uxtb.w	r3, ip
   d65a6:	4929      	ldr	r1, [pc, #164]	; (d664c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d65a8:	b2d2      	uxtb	r2, r2
   d65aa:	a802      	add	r0, sp, #8
   d65ac:	f001 fb22 	bl	d7bf4 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d65b0:	4927      	ldr	r1, [pc, #156]	; (d6650 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d65b2:	ab02      	add	r3, sp, #8
   d65b4:	4622      	mov	r2, r4
   d65b6:	4620      	mov	r0, r4
   d65b8:	f001 fb1c 	bl	d7bf4 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d65bc:	68eb      	ldr	r3, [r5, #12]
   d65be:	441f      	add	r7, r3
   d65c0:	687b      	ldr	r3, [r7, #4]
   d65c2:	b123      	cbz	r3, d65ce <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d65c4:	4923      	ldr	r1, [pc, #140]	; (d6654 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d65c6:	4622      	mov	r2, r4
   d65c8:	4620      	mov	r0, r4
   d65ca:	f001 fb13 	bl	d7bf4 <sprintf>
    sprintf(payload, "%s}", payload);
   d65ce:	4622      	mov	r2, r4
   d65d0:	4921      	ldr	r1, [pc, #132]	; (d6658 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d65d2:	4620      	mov	r0, r4
   d65d4:	f001 fb0e 	bl	d7bf4 <sprintf>
    i++;
   d65d8:	3601      	adds	r6, #1
    if (i < _current_value) {
   d65da:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d65de:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d65e0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d65e2:	4622      	mov	r2, r4
    if (i < _current_value) {
   d65e4:	da0a      	bge.n	d65fc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d65e6:	491d      	ldr	r1, [pc, #116]	; (d665c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d65e8:	4620      	mov	r0, r4
   d65ea:	f001 fb03 	bl	d7bf4 <sprintf>
   d65ee:	e79d      	b.n	d652c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d65f0:	4622      	mov	r2, r4
   d65f2:	4651      	mov	r1, sl
   d65f4:	4620      	mov	r0, r4
   d65f6:	f001 fafd 	bl	d7bf4 <sprintf>
   d65fa:	e7df      	b.n	d65bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d65fc:	4916      	ldr	r1, [pc, #88]	; (d6658 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d65fe:	4620      	mov	r0, r4
   d6600:	f001 faf8 	bl	d7bf4 <sprintf>
      _current_value = 0;
   d6604:	2300      	movs	r3, #0
   d6606:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d6608:	e790      	b.n	d652c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d660a:	7cab      	ldrb	r3, [r5, #18]
   d660c:	b1c3      	cbz	r3, d6640 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d660e:	f002 fcb1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6612:	4913      	ldr	r1, [pc, #76]	; (d6660 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d6614:	f001 fedf 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d6618:	f002 fcac 	bl	d8f74 <_Z16_fetch_usbserialv>
   d661c:	4911      	ldr	r1, [pc, #68]	; (d6664 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d661e:	f001 feda 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6622:	f002 fca7 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6626:	4621      	mov	r1, r4
   d6628:	f001 fed5 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d662c:	f002 fca2 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6630:	490b      	ldr	r1, [pc, #44]	; (d6660 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d6632:	f001 fed0 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6636:	f002 fc9d 	bl	d8f74 <_Z16_fetch_usbserialv>
   d663a:	490b      	ldr	r1, [pc, #44]	; (d6668 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d663c:	f001 fecb 	bl	d83d6 <_ZN5Print7printlnEPKc>
}
   d6640:	b009      	add	sp, #36	; 0x24
   d6642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6646:	bf00      	nop
   d6648:	000ddf04 	.word	0x000ddf04
   d664c:	000ddf2c 	.word	0x000ddf2c
   d6650:	000ddf33 	.word	0x000ddf33
   d6654:	000ddf3e 	.word	0x000ddf3e
   d6658:	000ddf4d 	.word	0x000ddf4d
   d665c:	000ddf51 	.word	0x000ddf51
   d6660:	000dde31 	.word	0x000dde31
   d6664:	000ddf55 	.word	0x000ddf55
   d6668:	000de125 	.word	0x000de125
   d666c:	000ddf06 	.word	0x000ddf06
   d6670:	000ddf19 	.word	0x000ddf19
   d6674:	000ddf38 	.word	0x000ddf38

000d6678 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d667c:	460c      	mov	r4, r1
   d667e:	4605      	mov	r5, r0
   d6680:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d6682:	4952      	ldr	r1, [pc, #328]	; (d67cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6684:	f8df 8174 	ldr.w	r8, [pc, #372]	; d67fc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6688:	f8df 9174 	ldr.w	r9, [pc, #372]	; d6800 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d668c:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d668e:	4616      	mov	r6, r2
   d6690:	461f      	mov	r7, r3
  sprintf(payload, "");
   d6692:	f005 fbac 	bl	dbdee <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d6696:	68ab      	ldr	r3, [r5, #8]
   d6698:	4a4d      	ldr	r2, [pc, #308]	; (d67d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d669a:	494e      	ldr	r1, [pc, #312]	; (d67d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d669c:	4620      	mov	r0, r4
   d669e:	f001 faa9 	bl	d7bf4 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d66a2:	4633      	mov	r3, r6
   d66a4:	494c      	ldr	r1, [pc, #304]	; (d67d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d66a6:	9700      	str	r7, [sp, #0]
   d66a8:	4622      	mov	r2, r4
   d66aa:	4620      	mov	r0, r4
   d66ac:	f001 faa2 	bl	d7bf4 <sprintf>
  sprintf(payload, "%s=>", payload);
   d66b0:	494a      	ldr	r1, [pc, #296]	; (d67dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d66b2:	4f49      	ldr	r7, [pc, #292]	; (d67d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d66b4:	4622      	mov	r2, r4
   d66b6:	4620      	mov	r0, r4
   d66b8:	f001 fa9c 	bl	d7bf4 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d66bc:	2600      	movs	r6, #0
   d66be:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d66c2:	429e      	cmp	r6, r3
   d66c4:	da64      	bge.n	d6790 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d66c6:	68eb      	ldr	r3, [r5, #12]
   d66c8:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d66cc:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d66d0:	ed93 0a02 	vldr	s0, [r3, #8]
   d66d4:	a903      	add	r1, sp, #12
   d66d6:	4628      	mov	r0, r5
   d66d8:	f7ff fef6 	bl	d64c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d66dc:	68eb      	ldr	r3, [r5, #12]
   d66de:	a903      	add	r1, sp, #12
   d66e0:	9100      	str	r1, [sp, #0]
   d66e2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d66e6:	4622      	mov	r2, r4
   d66e8:	4639      	mov	r1, r7
   d66ea:	4620      	mov	r0, r4
   d66ec:	f001 fa82 	bl	d7bf4 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d66f0:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d66f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d66f6:	4453      	add	r3, sl
   d66f8:	685b      	ldr	r3, [r3, #4]
   d66fa:	b123      	cbz	r3, d6706 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d66fc:	4622      	mov	r2, r4
   d66fe:	4641      	mov	r1, r8
   d6700:	4620      	mov	r0, r4
   d6702:	f001 fa77 	bl	d7bf4 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6706:	68eb      	ldr	r3, [r5, #12]
   d6708:	4453      	add	r3, sl
   d670a:	68db      	ldr	r3, [r3, #12]
   d670c:	b33b      	cbz	r3, d675e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d670e:	4622      	mov	r2, r4
   d6710:	4649      	mov	r1, r9
   d6712:	4620      	mov	r0, r4
   d6714:	f001 fa6e 	bl	d7bf4 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6718:	68eb      	ldr	r3, [r5, #12]
   d671a:	4453      	add	r3, sl
   d671c:	691b      	ldr	r3, [r3, #16]
   d671e:	b353      	cbz	r3, d6776 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d6720:	200a      	movs	r0, #10
   d6722:	fb93 f1f0 	sdiv	r1, r3, r0
   d6726:	fb91 fcf0 	sdiv	ip, r1, r0
   d672a:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d672e:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6732:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6734:	2264      	movs	r2, #100	; 0x64
   d6736:	fb93 f2f2 	sdiv	r2, r3, r2
   d673a:	fb92 fef0 	sdiv	lr, r2, r0
   d673e:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6742:	9100      	str	r1, [sp, #0]
   d6744:	fa5f f38c 	uxtb.w	r3, ip
   d6748:	4925      	ldr	r1, [pc, #148]	; (d67e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d674a:	b2d2      	uxtb	r2, r2
   d674c:	a802      	add	r0, sp, #8
   d674e:	f001 fa51 	bl	d7bf4 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d6752:	4924      	ldr	r1, [pc, #144]	; (d67e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6754:	ab02      	add	r3, sp, #8
   d6756:	4622      	mov	r2, r4
   d6758:	4620      	mov	r0, r4
   d675a:	f001 fa4b 	bl	d7bf4 <sprintf>
    if (i < _current_value) {
   d675e:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d6762:	3601      	adds	r6, #1
   d6764:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6766:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6768:	4622      	mov	r2, r4
    if (i < _current_value) {
   d676a:	da0a      	bge.n	d6782 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d676c:	491e      	ldr	r1, [pc, #120]	; (d67e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d676e:	4620      	mov	r0, r4
   d6770:	f001 fa40 	bl	d7bf4 <sprintf>
   d6774:	e7a3      	b.n	d66be <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6776:	491d      	ldr	r1, [pc, #116]	; (d67ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6778:	4622      	mov	r2, r4
   d677a:	4620      	mov	r0, r4
   d677c:	f001 fa3a 	bl	d7bf4 <sprintf>
   d6780:	e7ed      	b.n	d675e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d6782:	491b      	ldr	r1, [pc, #108]	; (d67f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6784:	4620      	mov	r0, r4
   d6786:	f001 fa35 	bl	d7bf4 <sprintf>
      _current_value = 0;
   d678a:	2300      	movs	r3, #0
   d678c:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d678e:	e796      	b.n	d66be <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d6790:	7cab      	ldrb	r3, [r5, #18]
   d6792:	b1c3      	cbz	r3, d67c6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6794:	f002 fbee 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6798:	4916      	ldr	r1, [pc, #88]	; (d67f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d679a:	f001 fe1c 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d679e:	f002 fbe9 	bl	d8f74 <_Z16_fetch_usbserialv>
   d67a2:	4915      	ldr	r1, [pc, #84]	; (d67f8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d67a4:	f001 fe17 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d67a8:	f002 fbe4 	bl	d8f74 <_Z16_fetch_usbserialv>
   d67ac:	4621      	mov	r1, r4
   d67ae:	f001 fe12 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d67b2:	f002 fbdf 	bl	d8f74 <_Z16_fetch_usbserialv>
   d67b6:	490f      	ldr	r1, [pc, #60]	; (d67f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d67b8:	f001 fe0d 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d67bc:	f002 fbda 	bl	d8f74 <_Z16_fetch_usbserialv>
   d67c0:	4902      	ldr	r1, [pc, #8]	; (d67cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d67c2:	f001 fe08 	bl	d83d6 <_ZN5Print7printlnEPKc>
}
   d67c6:	b009      	add	sp, #36	; 0x24
   d67c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67cc:	000de125 	.word	0x000de125
   d67d0:	000ddf5e 	.word	0x000ddf5e
   d67d4:	000ddf72 	.word	0x000ddf72
   d67d8:	000ddf7e 	.word	0x000ddf7e
   d67dc:	000ddf86 	.word	0x000ddf86
   d67e0:	000ddf2c 	.word	0x000ddf2c
   d67e4:	000ddf33 	.word	0x000ddf33
   d67e8:	000ddf51 	.word	0x000ddf51
   d67ec:	000ddf38 	.word	0x000ddf38
   d67f0:	000ddf98 	.word	0x000ddf98
   d67f4:	000dde31 	.word	0x000dde31
   d67f8:	000ddf55 	.word	0x000ddf55
   d67fc:	000ddf8b 	.word	0x000ddf8b
   d6800:	000ddf91 	.word	0x000ddf91

000d6804 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6808:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d680a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d680e:	461e      	mov	r6, r3
   d6810:	460f      	mov	r7, r1
   d6812:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6814:	f001 f9de 	bl	d7bd4 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6818:	7ce3      	ldrb	r3, [r4, #19]
   d681a:	3b01      	subs	r3, #1
   d681c:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d681e:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6820:	d826      	bhi.n	d6870 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d6822:	4601      	mov	r1, r0
   d6824:	4643      	mov	r3, r8
   d6826:	463a      	mov	r2, r7
   d6828:	4620      	mov	r0, r4
   d682a:	f7ff ff25 	bl	d6678 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d682e:	7ca3      	ldrb	r3, [r4, #18]
   d6830:	b123      	cbz	r3, d683c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d6832:	f002 fb9f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6836:	4911      	ldr	r1, [pc, #68]	; (d687c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6838:	f001 fdcd 	bl	d83d6 <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d683c:	6860      	ldr	r0, [r4, #4]
   d683e:	6803      	ldr	r3, [r0, #0]
   d6840:	9600      	str	r6, [sp, #0]
   d6842:	f8d3 9000 	ldr.w	r9, [r3]
   d6846:	4639      	mov	r1, r7
   d6848:	462b      	mov	r3, r5
   d684a:	4642      	mov	r2, r8
   d684c:	47c8      	blx	r9
   d684e:	4607      	mov	r7, r0
  free(payload);
   d6850:	4628      	mov	r0, r5
   d6852:	f001 f9c7 	bl	d7be4 <free>
  delete flags;
   d6856:	b11e      	cbz	r6, d6860 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6858:	2101      	movs	r1, #1
   d685a:	4630      	mov	r0, r6
   d685c:	f003 f973 	bl	d9b46 <_ZdlPvj>
  if (result) {
   d6860:	2300      	movs	r3, #0
   d6862:	b107      	cbz	r7, d6866 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6864:	7463      	strb	r3, [r4, #17]
}
   d6866:	4638      	mov	r0, r7
  _current_value = 0;
   d6868:	7423      	strb	r3, [r4, #16]
}
   d686a:	b003      	add	sp, #12
   d686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d6870:	4601      	mov	r1, r0
   d6872:	4620      	mov	r0, r4
   d6874:	f7ff fe4a 	bl	d650c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6878:	e7d9      	b.n	d682e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d687a:	bf00      	nop
   d687c:	000ddf9f 	.word	0x000ddf9f

000d6880 <_ZN18UbiProtocolHandler4sendEv>:
bool UbiProtocolHandler::send() {
   d6880:	b510      	push	{r4, lr}
   d6882:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6884:	2001      	movs	r0, #1
   d6886:	f7fd fc06 	bl	d4096 <_Znwj>
   d688a:	4603      	mov	r3, r0
   d688c:	b110      	cbz	r0, d6894 <_ZN18UbiProtocolHandler4sendEv+0x14>
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d688e:	4a05      	ldr	r2, [pc, #20]	; (d68a4 <_ZN18UbiProtocolHandler4sendEv+0x24>)
   d6890:	7812      	ldrb	r2, [r2, #0]
   d6892:	7002      	strb	r2, [r0, #0]
  return send(_default_device_label, _default_device_label, flags);
   d6894:	6822      	ldr	r2, [r4, #0]
   d6896:	4620      	mov	r0, r4
   d6898:	4611      	mov	r1, r2
}
   d689a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return send(_default_device_label, _default_device_label, flags);
   d689e:	f7ff bfb1 	b.w	d6804 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
   d68a2:	bf00      	nop
   d68a4:	2003e4e8 	.word	0x2003e4e8

000d68a8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d68a8:	b570      	push	{r4, r5, r6, lr}
   d68aa:	4605      	mov	r5, r0
   d68ac:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d68ae:	b184      	cbz	r4, d68d2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
   d68b0:	68e1      	ldr	r1, [r4, #12]
   d68b2:	4628      	mov	r0, r5
   d68b4:	f7ff fff8 	bl	d68a8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d68b8:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d68ba:	68a6      	ldr	r6, [r4, #8]
   d68bc:	b123      	cbz	r3, d68c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68be:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68c2:	2203      	movs	r2, #3
   d68c4:	4608      	mov	r0, r1
   d68c6:	4798      	blx	r3
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d68c8:	4620      	mov	r0, r4
   d68ca:	f7fd fbe8 	bl	d409e <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
   d68ce:	4634      	mov	r4, r6
      }
   d68d0:	e7ed      	b.n	d68ae <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
	}
    }
   d68d2:	bd70      	pop	{r4, r5, r6, pc}

000d68d4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d68d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d68d6:	b08d      	sub	sp, #52	; 0x34
   d68d8:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d68da:	a801      	add	r0, sp, #4
   d68dc:	460d      	mov	r5, r1
   d68de:	4617      	mov	r7, r2
   d68e0:	461e      	mov	r6, r3
   d68e2:	f001 f957 	bl	d7b94 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d68e6:	9803      	ldr	r0, [sp, #12]
   d68e8:	3001      	adds	r0, #1
   d68ea:	f7fd fbd6 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d68ee:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d68f0:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d68f2:	f005 fa7c 	bl	dbdee <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d68f6:	462a      	mov	r2, r5
   d68f8:	4633      	mov	r3, r6
   d68fa:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d68fc:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d68fe:	a805      	add	r0, sp, #20
   d6900:	f000 fd48 	bl	d7394 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d6904:	20c8      	movs	r0, #200	; 0xc8
   d6906:	f001 f965 	bl	d7bd4 <malloc>
   d690a:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d690c:	a805      	add	r0, sp, #20
   d690e:	f000 fc65 	bl	d71dc <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d6912:	2300      	movs	r3, #0
  _token = token;
   d6914:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d6918:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d691a:	7423      	strb	r3, [r4, #16]
   d691c:	a806      	add	r0, sp, #24
   d691e:	f7ff ffc3 	bl	d68a8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d6922:	a801      	add	r0, sp, #4
   d6924:	f001 fcd5 	bl	d82d2 <_ZN6StringD1Ev>
}
   d6928:	b00d      	add	sp, #52	; 0x34
   d692a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d692c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d692c:	b538      	push	{r3, r4, r5, lr}
   d692e:	2500      	movs	r5, #0
   d6930:	4604      	mov	r4, r0
   d6932:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6934:	f7ff ffce 	bl	d68d4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d6938:	4620      	mov	r0, r4
   d693a:	bd38      	pop	{r3, r4, r5, pc}

000d693c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d693c:	b510      	push	{r4, lr}
        val_(val) {
   d693e:	4b10      	ldr	r3, [pc, #64]	; (d6980 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d6940:	4c10      	ldr	r4, [pc, #64]	; (d6984 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d6942:	2200      	movs	r2, #0
   d6944:	701a      	strb	r2, [r3, #0]
   d6946:	4620      	mov	r0, r4
   d6948:	f002 ff44 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d694c:	4620      	mov	r0, r4
   d694e:	4c0e      	ldr	r4, [pc, #56]	; (d6988 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d6950:	4a0e      	ldr	r2, [pc, #56]	; (d698c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6952:	490f      	ldr	r1, [pc, #60]	; (d6990 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6954:	f003 f8f2 	bl	d9b3c <__aeabi_atexit>
   d6958:	4620      	mov	r0, r4
   d695a:	f002 ff3b 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d695e:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d6960:	4c0c      	ldr	r4, [pc, #48]	; (d6994 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d6962:	4a0a      	ldr	r2, [pc, #40]	; (d698c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6964:	490a      	ldr	r1, [pc, #40]	; (d6990 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6966:	f003 f8e9 	bl	d9b3c <__aeabi_atexit>
   d696a:	4620      	mov	r0, r4
   d696c:	f001 fc2c 	bl	d81c8 <_ZN3UDPC1Ev>
   d6970:	4620      	mov	r0, r4
   d6972:	4a06      	ldr	r2, [pc, #24]	; (d698c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6974:	4908      	ldr	r1, [pc, #32]	; (d6998 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d6976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d697a:	f003 b8df 	b.w	d9b3c <__aeabi_atexit>
   d697e:	bf00      	nop
   d6980:	2003e4e8 	.word	0x2003e4e8
   d6984:	2003e4cc 	.word	0x2003e4cc
   d6988:	2003e464 	.word	0x2003e464
   d698c:	2003e128 	.word	0x2003e128
   d6990:	000d5fbd 	.word	0x000d5fbd
   d6994:	2003e480 	.word	0x2003e480
   d6998:	000d63f5 	.word	0x000d63f5

000d699c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d699c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d699e:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d69a0:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d69a2:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d69a4:	e9cd 2100 	strd	r2, r1, [sp]
   d69a8:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d69aa:	f001 f913 	bl	d7bd4 <malloc>
   d69ae:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d69b0:	2014      	movs	r0, #20
   d69b2:	f7fd fb70 	bl	d4096 <_Znwj>
   d69b6:	4605      	mov	r5, r0
   d69b8:	b120      	cbz	r0, d69c4 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d69ba:	e9dd 2100 	ldrd	r2, r1, [sp]
   d69be:	4633      	mov	r3, r6
   d69c0:	f7ff ffb4 	bl	d692c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d69c4:	6025      	str	r5, [r4, #0]
}
   d69c6:	b002      	add	sp, #8
   d69c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69cc <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d69cc:	b538      	push	{r3, r4, r5, lr}
   d69ce:	2500      	movs	r5, #0
   d69d0:	4604      	mov	r4, r0
   d69d2:	4613      	mov	r3, r2
   d69d4:	7245      	strb	r5, [r0, #9]
   d69d6:	7285      	strb	r5, [r0, #10]
   d69d8:	4a02      	ldr	r2, [pc, #8]	; (d69e4 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d69da:	f7ff ffdf 	bl	d699c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d69de:	4620      	mov	r0, r4
   d69e0:	bd38      	pop	{r3, r4, r5, pc}
   d69e2:	bf00      	nop
   d69e4:	000ddfaf 	.word	0x000ddfaf

000d69e8 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d69e8:	b538      	push	{r3, r4, r5, lr}
   d69ea:	4604      	mov	r4, r0
  free(_context);
   d69ec:	6840      	ldr	r0, [r0, #4]
   d69ee:	f001 f8f9 	bl	d7be4 <free>
  delete _cloudProtocol;
   d69f2:	6825      	ldr	r5, [r4, #0]
   d69f4:	b135      	cbz	r5, d6a04 <_ZN7UbidotsD1Ev+0x1c>
   d69f6:	4628      	mov	r0, r5
   d69f8:	f7ff fd16 	bl	d6428 <_ZN18UbiProtocolHandlerD1Ev>
   d69fc:	2114      	movs	r1, #20
   d69fe:	4628      	mov	r0, r5
   d6a00:	f003 f8a1 	bl	d9b46 <_ZdlPvj>
}
   d6a04:	4620      	mov	r0, r4
   d6a06:	bd38      	pop	{r3, r4, r5, pc}

000d6a08 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d6a08:	6800      	ldr	r0, [r0, #0]
   d6a0a:	f7ff bd1d 	b.w	d6448 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d6a0e <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d6a0e:	b507      	push	{r0, r1, r2, lr}
   d6a10:	2300      	movs	r3, #0
   d6a12:	9300      	str	r3, [sp, #0]
   d6a14:	461a      	mov	r2, r3
   d6a16:	f7ff fff7 	bl	d6a08 <_ZN7Ubidots3addEPcfS0_mj>
   d6a1a:	b003      	add	sp, #12
   d6a1c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a20 <_ZN7Ubidots4sendEv>:
 * @arg device_name [optional] Name of the device to be created (supported only
 * for TCP/UDP)
 * @arg flags [Optional] Particle publish flags for webhooks
 */

bool Ubidots::send() { return _cloudProtocol->send(); }
   d6a20:	6800      	ldr	r0, [r0, #0]
   d6a22:	f7ff bf2d 	b.w	d6880 <_ZN18UbiProtocolHandler4sendEv>

000d6a26 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d6a26:	7501      	strb	r1, [r0, #20]
   d6a28:	4770      	bx	lr
	...

000d6a2c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d6a2c:	b570      	push	{r4, r5, r6, lr}
   d6a2e:	4606      	mov	r6, r0
   d6a30:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d6a34:	2014      	movs	r0, #20
   d6a36:	f001 f8cd 	bl	d7bd4 <malloc>
   d6a3a:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d6a3c:	2014      	movs	r0, #20
   d6a3e:	f001 f8c9 	bl	d7bd4 <malloc>
   d6a42:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d6a44:	4630      	mov	r0, r6
   d6a46:	f005 f9f8 	bl	dbe3a <strlen>
    for (int i = 0; i < len - 2; i++) {
   d6a4a:	4632      	mov	r2, r6
   d6a4c:	2300      	movs	r3, #0
   d6a4e:	3802      	subs	r0, #2
   d6a50:	4298      	cmp	r0, r3
   d6a52:	dd14      	ble.n	d6a7e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d6a54:	f812 1b01 	ldrb.w	r1, [r2], #1
   d6a58:	290d      	cmp	r1, #13
   d6a5a:	d13a      	bne.n	d6ad2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6a5c:	7811      	ldrb	r1, [r2, #0]
   d6a5e:	290a      	cmp	r1, #10
   d6a60:	d137      	bne.n	d6ad2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6a62:	7851      	ldrb	r1, [r2, #1]
   d6a64:	290d      	cmp	r1, #13
   d6a66:	d134      	bne.n	d6ad2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6a68:	7891      	ldrb	r1, [r2, #2]
   d6a6a:	290a      	cmp	r1, #10
   d6a6c:	d131      	bne.n	d6ad2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d6a6e:	3304      	adds	r3, #4
   d6a70:	18f1      	adds	r1, r6, r3
   d6a72:	2214      	movs	r2, #20
   d6a74:	4628      	mov	r0, r5
   d6a76:	f005 f9fa 	bl	dbe6e <strncpy>
        parsed[20] = '\0';
   d6a7a:	2300      	movs	r3, #0
   d6a7c:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d6a7e:	210a      	movs	r1, #10
   d6a80:	4628      	mov	r0, r5
   d6a82:	f005 f99d 	bl	dbdc0 <strchr>
    if (pch == NULL) {
   d6a86:	4606      	mov	r6, r0
   d6a88:	b328      	cbz	r0, d6ad6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d6a8a:	210a      	movs	r1, #10
   d6a8c:	3001      	adds	r0, #1
   d6a8e:	f005 f997 	bl	dbdc0 <strchr>
    if (pch2 == NULL) {
   d6a92:	b300      	cbz	r0, d6ad6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d6a94:	4631      	mov	r1, r6
   d6a96:	4620      	mov	r0, r4
   d6a98:	f005 f9a9 	bl	dbdee <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	f005 f9cc 	bl	dbe3a <strlen>
   d6aa2:	4420      	add	r0, r4
   d6aa4:	2300      	movs	r3, #0
   d6aa6:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d6aaa:	4620      	mov	r0, r4
   d6aac:	f005 f934 	bl	dbd18 <atof>
   d6ab0:	ec51 0b10 	vmov	r0, r1, d0
   d6ab4:	f005 f8c2 	bl	dbc3c <__aeabi_d2f>
   d6ab8:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d6abc:	4620      	mov	r0, r4
   d6abe:	f001 f891 	bl	d7be4 <free>
    free(parsed);
   d6ac2:	4628      	mov	r0, r5
   d6ac4:	f001 f88e 	bl	d7be4 <free>
}
   d6ac8:	eeb0 0a48 	vmov.f32	s0, s16
   d6acc:	ecbd 8b02 	vpop	{d8}
   d6ad0:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d6ad2:	3301      	adds	r3, #1
   d6ad4:	e7bc      	b.n	d6a50 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d6ad6:	ed9f 8a01 	vldr	s16, [pc, #4]	; d6adc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d6ada:	e7f5      	b.n	d6ac8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d6adc:	cda2425f 	.word	0xcda2425f

000d6ae0 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6ae0:	b530      	push	{r4, r5, lr}
   d6ae2:	4d07      	ldr	r5, [pc, #28]	; (d6b00 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d6ae4:	6005      	str	r5, [r0, #0]
   d6ae6:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d6ae8:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6aec:	7505      	strb	r5, [r0, #20]
  _token = token;
   d6aee:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6af0:	f241 3588 	movw	r5, #5000	; 0x1388
   d6af4:	6185      	str	r5, [r0, #24]
   d6af6:	2505      	movs	r5, #5
  _port = port;
   d6af8:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6afc:	7705      	strb	r5, [r0, #28]
}
   d6afe:	bd30      	pop	{r4, r5, pc}
   d6b00:	000de154 	.word	0x000de154

000d6b04 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d6b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6b08:	f8df 808c 	ldr.w	r8, [pc, #140]	; d6b98 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d6b0c:	f8df a08c 	ldr.w	sl, [pc, #140]	; d6b9c <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d6b10:	f8df b08c 	ldr.w	fp, [pc, #140]	; d6ba0 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d6b14:	4604      	mov	r4, r0
   d6b16:	460d      	mov	r5, r1
   d6b18:	4617      	mov	r7, r2
   d6b1a:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6b1c:	4640      	mov	r0, r8
   d6b1e:	fa5f f986 	uxtb.w	r9, r6
   d6b22:	f002 fbca 	bl	d92ba <_ZN9TCPClient9connectedEv>
   d6b26:	bb88      	cbnz	r0, d6b8c <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d6b28:	7f23      	ldrb	r3, [r4, #28]
   d6b2a:	454b      	cmp	r3, r9
   d6b2c:	d92e      	bls.n	d6b8c <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d6b2e:	7d23      	ldrb	r3, [r4, #20]
   d6b30:	b1cb      	cbz	r3, d6b66 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d6b32:	f002 fa1f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6b36:	4651      	mov	r1, sl
   d6b38:	f001 fc3a 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6b3c:	f002 fa1a 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6b40:	4629      	mov	r1, r5
   d6b42:	f001 fc35 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6b46:	f002 fa15 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6b4a:	4659      	mov	r1, fp
   d6b4c:	f001 fc30 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6b50:	f002 fa10 	bl	d8f74 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d6b54:	220a      	movs	r2, #10
   d6b56:	4649      	mov	r1, r9
   d6b58:	9001      	str	r0, [sp, #4]
   d6b5a:	f001 fc46 	bl	d83ea <_ZN5Print11printNumberEmh>
        n += println();
   d6b5e:	9b01      	ldr	r3, [sp, #4]
   d6b60:	4618      	mov	r0, r3
   d6b62:	f001 fc2c 	bl	d83be <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d6b66:	2300      	movs	r3, #0
   d6b68:	b2ba      	uxth	r2, r7
   d6b6a:	4629      	mov	r1, r5
   d6b6c:	4640      	mov	r0, r8
   d6b6e:	f002 fc85 	bl	d947c <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d6b72:	7d23      	ldrb	r3, [r4, #20]
   d6b74:	b123      	cbz	r3, d6b80 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d6b76:	f002 f9fd 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6b7a:	4906      	ldr	r1, [pc, #24]	; (d6b94 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d6b7c:	f001 fc2b 	bl	d83d6 <_ZN5Print7printlnEPKc>
    delay(1000);
   d6b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6b84:	f001 fd06 	bl	d8594 <delay>
   d6b88:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6b8a:	e7c7      	b.n	d6b1c <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d6b8c:	b003      	add	sp, #12
   d6b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b92:	bf00      	nop
   d6b94:	000ddfca 	.word	0x000ddfca
   d6b98:	2003e4ec 	.word	0x2003e4ec
   d6b9c:	000dddc0 	.word	0x000dddc0
   d6ba0:	000dddd6 	.word	0x000dddd6

000d6ba4 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d6ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ba8:	1e4b      	subs	r3, r1, #1
   d6baa:	460c      	mov	r4, r1
   d6bac:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d6bb0:	4605      	mov	r5, r0
    response[i] = '\0';
   d6bb2:	2100      	movs	r1, #0
   d6bb4:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d6bb8:	4293      	cmp	r3, r2
   d6bba:	d1fb      	bne.n	d6bb4 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d6bbc:	7d2b      	ldrb	r3, [r5, #20]
   d6bbe:	b14b      	cbz	r3, d6bd4 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d6bc0:	f002 f9d8 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6bc4:	4914      	ldr	r1, [pc, #80]	; (d6c18 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d6bc6:	f001 fc06 	bl	d83d6 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6bca:	f002 f9d3 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6bce:	4913      	ldr	r1, [pc, #76]	; (d6c1c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d6bd0:	f001 fc01 	bl	d83d6 <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d6bd4:	4f12      	ldr	r7, [pc, #72]	; (d6c20 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d6bd6:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6bd8:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d6bdc:	4638      	mov	r0, r7
   d6bde:	f002 fd4f 	bl	d9680 <_ZN9TCPClient9availableEv>
   d6be2:	b170      	cbz	r0, d6c02 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d6be4:	4638      	mov	r0, r7
   d6be6:	f002 fc04 	bl	d93f2 <_ZN9TCPClient4readEv>
   d6bea:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d6bec:	7d2b      	ldrb	r3, [r5, #20]
   d6bee:	b12b      	cbz	r3, d6bfc <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d6bf0:	f002 f9c0 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6bf4:	6803      	ldr	r3, [r0, #0]
   d6bf6:	5da1      	ldrb	r1, [r4, r6]
   d6bf8:	689b      	ldr	r3, [r3, #8]
   d6bfa:	4798      	blx	r3
    j++;
   d6bfc:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6bfe:	4546      	cmp	r6, r8
   d6c00:	d1ec      	bne.n	d6bdc <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d6c02:	7d2b      	ldrb	r3, [r5, #20]
   d6c04:	b133      	cbz	r3, d6c14 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d6c06:	f002 f9b5 	bl	d8f74 <_Z16_fetch_usbserialv>
}
   d6c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d6c0e:	4905      	ldr	r1, [pc, #20]	; (d6c24 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d6c10:	f001 bbe1 	b.w	d83d6 <_ZN5Print7printlnEPKc>
}
   d6c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c18:	000dde31 	.word	0x000dde31
   d6c1c:	000dde1d 	.word	0x000dde1d
   d6c20:	2003e4ec 	.word	0x2003e4ec
   d6c24:	000dde30 	.word	0x000dde30

000d6c28 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d6c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6c2a:	4f0e      	ldr	r7, [pc, #56]	; (d6c64 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d6c2c:	4604      	mov	r4, r0
  int timeout = 0;
   d6c2e:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6c30:	4638      	mov	r0, r7
   d6c32:	f002 fd25 	bl	d9680 <_ZN9TCPClient9availableEv>
   d6c36:	4605      	mov	r5, r0
   d6c38:	b990      	cbnz	r0, d6c60 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d6c3a:	69a3      	ldr	r3, [r4, #24]
   d6c3c:	42b3      	cmp	r3, r6
   d6c3e:	dd0f      	ble.n	d6c60 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d6c40:	2001      	movs	r0, #1
   d6c42:	f001 fca7 	bl	d8594 <delay>
    if (timeout > _timeout - 1) {
   d6c46:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6c48:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6c4a:	42b3      	cmp	r3, r6
   d6c4c:	dcf0      	bgt.n	d6c30 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6c4e:	7d20      	ldrb	r0, [r4, #20]
   d6c50:	b128      	cbz	r0, d6c5e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6c52:	f002 f98f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6c56:	4904      	ldr	r1, [pc, #16]	; (d6c68 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d6c58:	f001 fbbd 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d6c5c:	4628      	mov	r0, r5
}
   d6c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6c60:	2001      	movs	r0, #1
   d6c62:	e7fc      	b.n	d6c5e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d6c64:	2003e4ec 	.word	0x2003e4ec
   d6c68:	000dddea 	.word	0x000dddea

000d6c6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c6e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d6c70:	6902      	ldr	r2, [r0, #16]
   d6c72:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6c74:	4604      	mov	r4, r0
   d6c76:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d6c78:	f7ff ff44 	bl	d6b04 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d6c7c:	4878      	ldr	r0, [pc, #480]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6c7e:	f002 fb1c 	bl	d92ba <_ZN9TCPClient9connectedEv>
   d6c82:	4606      	mov	r6, r0
   d6c84:	2800      	cmp	r0, #0
   d6c86:	f000 80e1 	beq.w	d6e4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d6c8a:	4976      	ldr	r1, [pc, #472]	; (d6e64 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6c8c:	4874      	ldr	r0, [pc, #464]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6c8e:	f001 fb8f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d6c92:	4639      	mov	r1, r7
   d6c94:	4872      	ldr	r0, [pc, #456]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6c96:	f001 fb8b 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d6c9a:	4973      	ldr	r1, [pc, #460]	; (d6e68 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6c9c:	4870      	ldr	r0, [pc, #448]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6c9e:	f001 fb87 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d6ca2:	4972      	ldr	r1, [pc, #456]	; (d6e6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6ca4:	486e      	ldr	r0, [pc, #440]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ca6:	f001 fb83 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d6caa:	6861      	ldr	r1, [r4, #4]
   d6cac:	486c      	ldr	r0, [pc, #432]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cae:	f001 fb7f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6cb2:	496f      	ldr	r1, [pc, #444]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6cb4:	486a      	ldr	r0, [pc, #424]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cb6:	f001 fb7b 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d6cba:	496e      	ldr	r1, [pc, #440]	; (d6e74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6cbc:	4868      	ldr	r0, [pc, #416]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cbe:	f001 fb77 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d6cc2:	68a1      	ldr	r1, [r4, #8]
   d6cc4:	4866      	ldr	r0, [pc, #408]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cc6:	f001 fb73 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6cca:	4969      	ldr	r1, [pc, #420]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6ccc:	4864      	ldr	r0, [pc, #400]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cce:	f001 fb6f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d6cd2:	4969      	ldr	r1, [pc, #420]	; (d6e78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6cd4:	4862      	ldr	r0, [pc, #392]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cd6:	f001 fb6b 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d6cda:	68e1      	ldr	r1, [r4, #12]
   d6cdc:	4860      	ldr	r0, [pc, #384]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cde:	f001 fb67 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6ce2:	4963      	ldr	r1, [pc, #396]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6ce4:	485e      	ldr	r0, [pc, #376]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ce6:	f001 fb63 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d6cea:	4964      	ldr	r1, [pc, #400]	; (d6e7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d6cec:	485c      	ldr	r0, [pc, #368]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cee:	f001 fb5f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d6cf2:	4963      	ldr	r1, [pc, #396]	; (d6e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d6cf4:	485a      	ldr	r0, [pc, #360]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6cf6:	f001 fb5b 	bl	d83b0 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d6cfa:	4628      	mov	r0, r5
   d6cfc:	f005 f89d 	bl	dbe3a <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d6d00:	4960      	ldr	r1, [pc, #384]	; (d6e84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d6d02:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d6d04:	4856      	ldr	r0, [pc, #344]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d06:	f001 fb53 	bl	d83b0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d6d0a:	220a      	movs	r2, #10
   d6d0c:	4631      	mov	r1, r6
   d6d0e:	4854      	ldr	r0, [pc, #336]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d10:	f001 fb6b 	bl	d83ea <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d6d14:	495c      	ldr	r1, [pc, #368]	; (d6e88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d6d16:	4852      	ldr	r0, [pc, #328]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d18:	f001 fb4a 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d6d1c:	4629      	mov	r1, r5
   d6d1e:	4850      	ldr	r0, [pc, #320]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d20:	f001 fb46 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6d24:	4952      	ldr	r1, [pc, #328]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6d26:	484e      	ldr	r0, [pc, #312]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d28:	f001 fb42 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d6d2c:	484c      	ldr	r0, [pc, #304]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6d2e:	f002 fac3 	bl	d92b8 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d6d32:	7d23      	ldrb	r3, [r4, #20]
   d6d34:	2b00      	cmp	r3, #0
   d6d36:	d069      	beq.n	d6e0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d6d38:	f002 f91c 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d3c:	4953      	ldr	r1, [pc, #332]	; (d6e8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d6d3e:	f001 fb4a 	bl	d83d6 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d6d42:	f002 f917 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d46:	4947      	ldr	r1, [pc, #284]	; (d6e64 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6d48:	f001 fb32 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6d4c:	f002 f912 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d50:	4639      	mov	r1, r7
   d6d52:	f001 fb2d 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6d56:	f002 f90d 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d5a:	4943      	ldr	r1, [pc, #268]	; (d6e68 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6d5c:	f001 fb28 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6d60:	f002 f908 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d64:	4941      	ldr	r1, [pc, #260]	; (d6e6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6d66:	f001 fb23 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6d6a:	f002 f903 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d6e:	6861      	ldr	r1, [r4, #4]
   d6d70:	f001 fb1e 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6d74:	f002 f8fe 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d78:	493d      	ldr	r1, [pc, #244]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6d7a:	f001 fb19 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6d7e:	f002 f8f9 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d82:	493c      	ldr	r1, [pc, #240]	; (d6e74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6d84:	f001 fb14 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6d88:	f002 f8f4 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d8c:	68a1      	ldr	r1, [r4, #8]
   d6d8e:	f001 fb0f 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6d92:	f002 f8ef 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6d96:	4936      	ldr	r1, [pc, #216]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6d98:	f001 fb0a 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6d9c:	f002 f8ea 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6da0:	4935      	ldr	r1, [pc, #212]	; (d6e78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6da2:	f001 fb05 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6da6:	f002 f8e5 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6daa:	68e1      	ldr	r1, [r4, #12]
   d6dac:	f001 fb00 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6db0:	f002 f8e0 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6db4:	492e      	ldr	r1, [pc, #184]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6db6:	f001 fafb 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d6dba:	f002 f8db 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6dbe:	492f      	ldr	r1, [pc, #188]	; (d6e7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d6dc0:	f001 faf6 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d6dc4:	f002 f8d6 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6dc8:	492d      	ldr	r1, [pc, #180]	; (d6e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d6dca:	f001 faf1 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d6dce:	f002 f8d1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6dd2:	492c      	ldr	r1, [pc, #176]	; (d6e84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d6dd4:	f001 faec 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d6dd8:	f002 f8cc 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6ddc:	220a      	movs	r2, #10
   d6dde:	4631      	mov	r1, r6
   d6de0:	f001 fb03 	bl	d83ea <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d6de4:	f002 f8c6 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6de8:	4927      	ldr	r1, [pc, #156]	; (d6e88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d6dea:	f001 fae1 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d6dee:	f002 f8c1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6df2:	4629      	mov	r1, r5
   d6df4:	f001 fadc 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6df8:	f002 f8bc 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6dfc:	491c      	ldr	r1, [pc, #112]	; (d6e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6dfe:	f001 fad7 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d6e02:	f002 f8b7 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6e06:	4922      	ldr	r1, [pc, #136]	; (d6e90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d6e08:	f001 fae5 	bl	d83d6 <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d6e0c:	4620      	mov	r0, r4
   d6e0e:	f7ff ff0b 	bl	d6c28 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d6e12:	7d23      	ldrb	r3, [r4, #20]
   d6e14:	b92b      	cbnz	r3, d6e22 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d6e16:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d6e18:	4811      	ldr	r0, [pc, #68]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6e1a:	f002 fc8b 	bl	d9734 <_ZN9TCPClient4stopEv>
}
   d6e1e:	4620      	mov	r0, r4
   d6e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d6e22:	f002 f8a7 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6e26:	491b      	ldr	r1, [pc, #108]	; (d6e94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d6e28:	4d0d      	ldr	r5, [pc, #52]	; (d6e60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d6e2a:	f001 fad4 	bl	d83d6 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d6e2e:	4628      	mov	r0, r5
   d6e30:	f002 fc26 	bl	d9680 <_ZN9TCPClient9availableEv>
   d6e34:	2800      	cmp	r0, #0
   d6e36:	d0ee      	beq.n	d6e16 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d6e38:	4628      	mov	r0, r5
   d6e3a:	f002 fada 	bl	d93f2 <_ZN9TCPClient4readEv>
   d6e3e:	4604      	mov	r4, r0
        Serial.print(c);
   d6e40:	f002 f898 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6e44:	b2e1      	uxtb	r1, r4
   d6e46:	f001 fab7 	bl	d83b8 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d6e4a:	e7f0      	b.n	d6e2e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d6e4c:	7d24      	ldrb	r4, [r4, #20]
   d6e4e:	2c00      	cmp	r4, #0
   d6e50:	d0e2      	beq.n	d6e18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d6e52:	f002 f88f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6e56:	4910      	ldr	r1, [pc, #64]	; (d6e98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d6e58:	f001 fabd 	bl	d83d6 <_ZN5Print7printlnEPKc>
  bool result = false;
   d6e5c:	4634      	mov	r4, r6
   d6e5e:	e7db      	b.n	d6e18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d6e60:	2003e4ec 	.word	0x2003e4ec
   d6e64:	000ddfdb 	.word	0x000ddfdb
   d6e68:	000ddff3 	.word	0x000ddff3
   d6e6c:	000ddfff 	.word	0x000ddfff
   d6e70:	000de123 	.word	0x000de123
   d6e74:	000de006 	.word	0x000de006
   d6e78:	000de013 	.word	0x000de013
   d6e7c:	000de022 	.word	0x000de022
   d6e80:	000de036 	.word	0x000de036
   d6e84:	000de057 	.word	0x000de057
   d6e88:	000de121 	.word	0x000de121
   d6e8c:	000de068 	.word	0x000de068
   d6e90:	000de084 	.word	0x000de084
   d6e94:	000de0a2 	.word	0x000de0a2
   d6e98:	000de0be 	.word	0x000de0be

000d6e9c <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6e9c:	b570      	push	{r4, r5, r6, lr}
   d6e9e:	ed2d 8b02 	vpush	{d8}
   d6ea2:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6ea4:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6ea6:	460e      	mov	r6, r1
   d6ea8:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6eaa:	6841      	ldr	r1, [r0, #4]
   d6eac:	4867      	ldr	r0, [pc, #412]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6eae:	2250      	movs	r2, #80	; 0x50
   d6eb0:	f002 fae4 	bl	d947c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	6861      	ldr	r1, [r4, #4]
   d6eb8:	2250      	movs	r2, #80	; 0x50
   d6eba:	f7ff fe23 	bl	d6b04 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d6ebe:	4863      	ldr	r0, [pc, #396]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ec0:	f002 f9fb 	bl	d92ba <_ZN9TCPClient9connectedEv>
   d6ec4:	2800      	cmp	r0, #0
   d6ec6:	f000 80b8 	beq.w	d703a <_ZN7UbiHTTP3getEPKcS1_+0x19e>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d6eca:	4961      	ldr	r1, [pc, #388]	; (d7050 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d6ecc:	485f      	ldr	r0, [pc, #380]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ece:	f001 fa6f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d6ed2:	4631      	mov	r1, r6
   d6ed4:	485d      	ldr	r0, [pc, #372]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ed6:	f001 fa6b 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d6eda:	495e      	ldr	r1, [pc, #376]	; (d7054 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d6edc:	485b      	ldr	r0, [pc, #364]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ede:	f001 fa67 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d6ee2:	4629      	mov	r1, r5
   d6ee4:	4859      	ldr	r0, [pc, #356]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ee6:	f001 fa63 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d6eea:	495b      	ldr	r1, [pc, #364]	; (d7058 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d6eec:	4857      	ldr	r0, [pc, #348]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6eee:	f001 fa5f 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d6ef2:	495a      	ldr	r1, [pc, #360]	; (d705c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d6ef4:	4855      	ldr	r0, [pc, #340]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6ef6:	f001 fa5b 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d6efa:	4959      	ldr	r1, [pc, #356]	; (d7060 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6efc:	4853      	ldr	r0, [pc, #332]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6efe:	f001 fa57 	bl	d83b0 <_ZN5Print5printEPKc>
   d6f02:	220a      	movs	r2, #10
   d6f04:	2150      	movs	r1, #80	; 0x50
   d6f06:	4851      	ldr	r0, [pc, #324]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f08:	f001 fa6f 	bl	d83ea <_ZN5Print11printNumberEmh>
    _client_http_ubi.print("\r\n");
   d6f0c:	4955      	ldr	r1, [pc, #340]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6f0e:	484f      	ldr	r0, [pc, #316]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f10:	f001 fa4e 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d6f14:	4954      	ldr	r1, [pc, #336]	; (d7068 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d6f16:	484d      	ldr	r0, [pc, #308]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f18:	f001 fa4a 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d6f1c:	68a1      	ldr	r1, [r4, #8]
   d6f1e:	484b      	ldr	r0, [pc, #300]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f20:	f001 fa46 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d6f24:	494f      	ldr	r1, [pc, #316]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6f26:	4849      	ldr	r0, [pc, #292]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f28:	f001 fa42 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d6f2c:	494f      	ldr	r1, [pc, #316]	; (d706c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d6f2e:	4847      	ldr	r0, [pc, #284]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f30:	f001 fa3e 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d6f34:	68e1      	ldr	r1, [r4, #12]
   d6f36:	4845      	ldr	r0, [pc, #276]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f38:	f001 fa3a 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d6f3c:	4949      	ldr	r1, [pc, #292]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6f3e:	4843      	ldr	r0, [pc, #268]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f40:	f001 fa36 	bl	d83b0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d6f44:	494a      	ldr	r1, [pc, #296]	; (d7070 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d6f46:	4841      	ldr	r0, [pc, #260]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6f48:	f001 fa32 	bl	d83b0 <_ZN5Print5printEPKc>
    if (_debug) {
   d6f4c:	7d23      	ldrb	r3, [r4, #20]
   d6f4e:	2b00      	cmp	r3, #0
   d6f50:	d050      	beq.n	d6ff4 <_ZN7UbiHTTP3getEPKcS1_+0x158>
      Serial.print("GET /api/v1.6/devices/");
   d6f52:	f002 f80f 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f56:	493e      	ldr	r1, [pc, #248]	; (d7050 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d6f58:	f001 fa2a 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6f5c:	f002 f80a 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f60:	4631      	mov	r1, r6
   d6f62:	f001 fa25 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("/");
   d6f66:	f002 f805 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f6a:	493a      	ldr	r1, [pc, #232]	; (d7054 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d6f6c:	f001 fa20 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d6f70:	f002 f800 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f74:	4629      	mov	r1, r5
   d6f76:	f001 fa1b 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d6f7a:	f001 fffb 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f7e:	4936      	ldr	r1, [pc, #216]	; (d7058 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d6f80:	f001 fa16 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6f84:	f001 fff6 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f88:	4934      	ldr	r1, [pc, #208]	; (d705c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d6f8a:	f001 fa11 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6f8e:	f001 fff1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f92:	4933      	ldr	r1, [pc, #204]	; (d7060 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6f94:	f001 fa0c 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
   d6f98:	f001 ffec 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6f9c:	220a      	movs	r2, #10
   d6f9e:	2150      	movs	r1, #80	; 0x50
   d6fa0:	f001 fa23 	bl	d83ea <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
   d6fa4:	f001 ffe6 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fa8:	492e      	ldr	r1, [pc, #184]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6faa:	f001 fa01 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6fae:	f001 ffe1 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fb2:	492d      	ldr	r1, [pc, #180]	; (d7068 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d6fb4:	f001 f9fc 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6fb8:	f001 ffdc 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fbc:	68a1      	ldr	r1, [r4, #8]
   d6fbe:	f001 f9f7 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6fc2:	f001 ffd7 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fc6:	4927      	ldr	r1, [pc, #156]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6fc8:	f001 f9f2 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6fcc:	f001 ffd2 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fd0:	4926      	ldr	r1, [pc, #152]	; (d706c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d6fd2:	f001 f9ed 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6fd6:	f001 ffcd 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fda:	68e1      	ldr	r1, [r4, #12]
   d6fdc:	f001 f9e8 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6fe0:	f001 ffc8 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fe4:	491f      	ldr	r1, [pc, #124]	; (d7064 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6fe6:	f001 f9e3 	bl	d83b0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d6fea:	f001 ffc3 	bl	d8f74 <_Z16_fetch_usbserialv>
   d6fee:	4920      	ldr	r1, [pc, #128]	; (d7070 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d6ff0:	f001 f9de 	bl	d83b0 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	f7ff fe17 	bl	d6c28 <_ZN7UbiHTTP16waitServerAnswerEv>
   d6ffa:	b948      	cbnz	r0, d7010 <_ZN7UbiHTTP3getEPKcS1_+0x174>
      _client_http_ubi.stop();
   d6ffc:	4813      	ldr	r0, [pc, #76]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
      return ERROR_VALUE;
   d6ffe:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d7074 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>
      _client_http_ubi.stop();
   d7002:	f002 fb97 	bl	d9734 <_ZN9TCPClient4stopEv>
}
   d7006:	eeb0 0a48 	vmov.f32	s0, s16
   d700a:	ecbd 8b02 	vpop	{d8}
   d700e:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d7010:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d7014:	f000 fdde 	bl	d7bd4 <malloc>
    readServerAnswer(response);
   d7018:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d701a:	4605      	mov	r5, r0
    readServerAnswer(response);
   d701c:	4620      	mov	r0, r4
   d701e:	f7ff fdc1 	bl	d6ba4 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d7022:	4628      	mov	r0, r5
   d7024:	f7ff fd02 	bl	d6a2c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d7028:	4808      	ldr	r0, [pc, #32]	; (d704c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d702a:	eeb0 8a40 	vmov.f32	s16, s0
   d702e:	f002 fb81 	bl	d9734 <_ZN9TCPClient4stopEv>
    free(response);
   d7032:	4628      	mov	r0, r5
   d7034:	f000 fdd6 	bl	d7be4 <free>
    return value;
   d7038:	e7e5      	b.n	d7006 <_ZN7UbiHTTP3getEPKcS1_+0x16a>
  if (_debug) {
   d703a:	7d23      	ldrb	r3, [r4, #20]
   d703c:	2b00      	cmp	r3, #0
   d703e:	d0dd      	beq.n	d6ffc <_ZN7UbiHTTP3getEPKcS1_+0x160>
    Serial.println("Connection Failed ubidots - Try Again");
   d7040:	f001 ff98 	bl	d8f74 <_Z16_fetch_usbserialv>
   d7044:	490c      	ldr	r1, [pc, #48]	; (d7078 <_ZN7UbiHTTP3getEPKcS1_+0x1dc>)
   d7046:	f001 f9c6 	bl	d83d6 <_ZN5Print7printlnEPKc>
   d704a:	e7d7      	b.n	d6ffc <_ZN7UbiHTTP3getEPKcS1_+0x160>
   d704c:	2003e4ec 	.word	0x2003e4ec
   d7050:	000de0e8 	.word	0x000de0e8
   d7054:	000de0fd 	.word	0x000de0fd
   d7058:	000de0ff 	.word	0x000de0ff
   d705c:	000ddff3 	.word	0x000ddff3
   d7060:	000ddfff 	.word	0x000ddfff
   d7064:	000de123 	.word	0x000de123
   d7068:	000de006 	.word	0x000de006
   d706c:	000de013 	.word	0x000de013
   d7070:	000de103 	.word	0x000de103
   d7074:	cda2425f 	.word	0xcda2425f
   d7078:	000de126 	.word	0x000de126

000d707c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d707c:	b510      	push	{r4, lr}
   d707e:	4c05      	ldr	r4, [pc, #20]	; (d7094 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d7080:	4620      	mov	r0, r4
   d7082:	f002 fba7 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d7086:	4620      	mov	r0, r4
   d7088:	4a03      	ldr	r2, [pc, #12]	; (d7098 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d708a:	4904      	ldr	r1, [pc, #16]	; (d709c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7090:	f002 bd54 	b.w	d9b3c <__aeabi_atexit>
   d7094:	2003e4ec 	.word	0x2003e4ec
   d7098:	2003e128 	.word	0x2003e128
   d709c:	000d5fbd 	.word	0x000d5fbd

000d70a0 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
	return (*_Base::_M_get_pointer(__functor))(
   d70a0:	6803      	ldr	r3, [r0, #0]
   d70a2:	4718      	bx	r3

000d70a4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d70a4:	2a01      	cmp	r2, #1
   d70a6:	d003      	beq.n	d70b0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d70a8:	2a02      	cmp	r2, #2
   d70aa:	d003      	beq.n	d70b4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d70ac:	2000      	movs	r0, #0
   d70ae:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d70b0:	6001      	str	r1, [r0, #0]
	      break;
   d70b2:	e7fb      	b.n	d70ac <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d70b4:	680b      	ldr	r3, [r1, #0]
   d70b6:	6003      	str	r3, [r0, #0]
	}
   d70b8:	e7f8      	b.n	d70ac <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d70bc <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d70bc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d70be:	201c      	movs	r0, #28
   d70c0:	f7fc ffe9 	bl	d4096 <_Znwj>
   d70c4:	4604      	mov	r4, r0
   d70c6:	b148      	cbz	r0, d70dc <_Z10builderTcpv+0x20>
   d70c8:	4b06      	ldr	r3, [pc, #24]	; (d70e4 <_Z10builderTcpv+0x28>)
   d70ca:	4907      	ldr	r1, [pc, #28]	; (d70e8 <_Z10builderTcpv+0x2c>)
   d70cc:	681b      	ldr	r3, [r3, #0]
   d70ce:	9300      	str	r3, [sp, #0]
   d70d0:	6809      	ldr	r1, [r1, #0]
   d70d2:	4b06      	ldr	r3, [pc, #24]	; (d70ec <_Z10builderTcpv+0x30>)
   d70d4:	f242 3234 	movw	r2, #9012	; 0x2334
   d70d8:	f7fe ff94 	bl	d6004 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d70dc:	4620      	mov	r0, r4
   d70de:	b002      	add	sp, #8
   d70e0:	bd10      	pop	{r4, pc}
   d70e2:	bf00      	nop
   d70e4:	2003e590 	.word	0x2003e590
   d70e8:	2003e58c 	.word	0x2003e58c
   d70ec:	000ddf5e 	.word	0x000ddf5e

000d70f0 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d70f0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d70f2:	2020      	movs	r0, #32
   d70f4:	f7fc ffcf 	bl	d4096 <_Znwj>
   d70f8:	4604      	mov	r4, r0
   d70fa:	b140      	cbz	r0, d710e <_Z11builderHttpv+0x1e>
   d70fc:	4b05      	ldr	r3, [pc, #20]	; (d7114 <_Z11builderHttpv+0x24>)
   d70fe:	4906      	ldr	r1, [pc, #24]	; (d7118 <_Z11builderHttpv+0x28>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	9300      	str	r3, [sp, #0]
   d7104:	6809      	ldr	r1, [r1, #0]
   d7106:	4b05      	ldr	r3, [pc, #20]	; (d711c <_Z11builderHttpv+0x2c>)
   d7108:	2250      	movs	r2, #80	; 0x50
   d710a:	f7ff fce9 	bl	d6ae0 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d710e:	4620      	mov	r0, r4
   d7110:	b002      	add	sp, #8
   d7112:	bd10      	pop	{r4, pc}
   d7114:	2003e590 	.word	0x2003e590
   d7118:	2003e58c 	.word	0x2003e58c
   d711c:	000ddf5e 	.word	0x000ddf5e

000d7120 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d7120:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d7122:	201c      	movs	r0, #28
   d7124:	f7fc ffb7 	bl	d4096 <_Znwj>
   d7128:	4604      	mov	r4, r0
   d712a:	b148      	cbz	r0, d7140 <_Z10builderUdpv+0x20>
   d712c:	4b06      	ldr	r3, [pc, #24]	; (d7148 <_Z10builderUdpv+0x28>)
   d712e:	4907      	ldr	r1, [pc, #28]	; (d714c <_Z10builderUdpv+0x2c>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	9300      	str	r3, [sp, #0]
   d7134:	6809      	ldr	r1, [r1, #0]
   d7136:	4b06      	ldr	r3, [pc, #24]	; (d7150 <_Z10builderUdpv+0x30>)
   d7138:	f242 3234 	movw	r2, #9012	; 0x2334
   d713c:	f000 f9ac 	bl	d7498 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d7140:	4620      	mov	r0, r4
   d7142:	b002      	add	sp, #8
   d7144:	bd10      	pop	{r4, pc}
   d7146:	bf00      	nop
   d7148:	2003e590 	.word	0x2003e590
   d714c:	2003e58c 	.word	0x2003e58c
   d7150:	000ddf5e 	.word	0x000ddf5e

000d7154 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d7154:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d7156:	2014      	movs	r0, #20
   d7158:	f7fc ff9d 	bl	d4096 <_Znwj>
   d715c:	4604      	mov	r4, r0
   d715e:	b140      	cbz	r0, d7172 <_Z15builderParticlev+0x1e>
   d7160:	4b05      	ldr	r3, [pc, #20]	; (d7178 <_Z15builderParticlev+0x24>)
   d7162:	4906      	ldr	r1, [pc, #24]	; (d717c <_Z15builderParticlev+0x28>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	9300      	str	r3, [sp, #0]
   d7168:	2300      	movs	r3, #0
   d716a:	6809      	ldr	r1, [r1, #0]
   d716c:	461a      	mov	r2, r3
   d716e:	f000 fa6d 	bl	d764c <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d7172:	4620      	mov	r0, r4
   d7174:	b002      	add	sp, #8
   d7176:	bd10      	pop	{r4, pc}
   d7178:	2003e590 	.word	0x2003e590
   d717c:	2003e58c 	.word	0x2003e58c

000d7180 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d7180:	b510      	push	{r4, lr}
      if (_M_manager)
   d7182:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7184:	4604      	mov	r4, r0
      if (_M_manager)
   d7186:	b113      	cbz	r3, d718e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7188:	2203      	movs	r2, #3
   d718a:	4601      	mov	r1, r0
   d718c:	4798      	blx	r3
    }
   d718e:	4620      	mov	r0, r4
   d7190:	bd10      	pop	{r4, pc}
	...

000d7194 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d7194:	b510      	push	{r4, lr}
   d7196:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7198:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d719a:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d719c:	4604      	mov	r4, r0
   d719e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d71a2:	466a      	mov	r2, sp
   d71a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d71ac:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d71b0:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71b4:	68a2      	ldr	r2, [r4, #8]
   d71b6:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d71b8:	4a06      	ldr	r2, [pc, #24]	; (d71d4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d71ba:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d71bc:	68e2      	ldr	r2, [r4, #12]
   d71be:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d71c0:	4a05      	ldr	r2, [pc, #20]	; (d71d8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d71c2:	60e2      	str	r2, [r4, #12]
   d71c4:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d71c8:	4618      	mov	r0, r3
   d71ca:	f7ff ffd9 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d71ce:	4620      	mov	r0, r4
   d71d0:	b006      	add	sp, #24
   d71d2:	bd10      	pop	{r4, pc}
   d71d4:	000d70a5 	.word	0x000d70a5
   d71d8:	000d70a1 	.word	0x000d70a1

000d71dc <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d71dc:	b570      	push	{r4, r5, r6, lr}
      { return &this->_M_impl._M_header; }
   d71de:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d71e2:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d71e4:	460b      	mov	r3, r1
      while (__x != 0)
   d71e6:	b13a      	cbz	r2, d71f8 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d71e8:	7c15      	ldrb	r5, [r2, #16]
   d71ea:	7804      	ldrb	r4, [r0, #0]
   d71ec:	42a5      	cmp	r5, r4
   d71ee:	bf2a      	itet	cs
   d71f0:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d71f2:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d71f4:	6892      	ldrcs	r2, [r2, #8]
   d71f6:	e7f6      	b.n	d71e6 <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d71f8:	4299      	cmp	r1, r3
   d71fa:	d004      	beq.n	d7206 <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d71fc:	7800      	ldrb	r0, [r0, #0]
   d71fe:	7c1a      	ldrb	r2, [r3, #16]
   d7200:	4290      	cmp	r0, r2
   d7202:	bf38      	it	cc
   d7204:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7206:	69da      	ldr	r2, [r3, #28]
   d7208:	b90a      	cbnz	r2, d720e <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d720a:	f002 fd52 	bl	d9cb2 <_ZSt25__throw_bad_function_callv>
}
   d720e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7212:	6a1a      	ldr	r2, [r3, #32]
   d7214:	f103 0014 	add.w	r0, r3, #20
   d7218:	4710      	bx	r2

000d721a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d721a:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d721c:	b570      	push	{r4, r5, r6, lr}
   d721e:	4616      	mov	r6, r2
   d7220:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d7222:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d7224:	2201      	movs	r2, #1
      while (__x != 0)
   d7226:	b15b      	cbz	r3, d7240 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d7228:	7830      	ldrb	r0, [r6, #0]
   d722a:	7c1a      	ldrb	r2, [r3, #16]
   d722c:	4290      	cmp	r0, r2
   d722e:	bf34      	ite	cc
   d7230:	6898      	ldrcc	r0, [r3, #8]
   d7232:	68d8      	ldrcs	r0, [r3, #12]
   d7234:	461d      	mov	r5, r3
   d7236:	bf34      	ite	cc
   d7238:	2201      	movcc	r2, #1
   d723a:	2200      	movcs	r2, #0
   d723c:	4603      	mov	r3, r0
   d723e:	e7f2      	b.n	d7226 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d7240:	b192      	cbz	r2, d7268 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d7242:	68ca      	ldr	r2, [r1, #12]
   d7244:	42aa      	cmp	r2, r5
   d7246:	d103      	bne.n	d7250 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d7248:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d724c:	4620      	mov	r0, r4
   d724e:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d7250:	4628      	mov	r0, r5
   d7252:	f002 fcd0 	bl	d9bf6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d7256:	7833      	ldrb	r3, [r6, #0]
   d7258:	7c02      	ldrb	r2, [r0, #16]
   d725a:	429a      	cmp	r2, r3
   d725c:	f04f 0300 	mov.w	r3, #0
   d7260:	d3f2      	bcc.n	d7248 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d7262:	e9c4 0300 	strd	r0, r3, [r4]
   d7266:	e7f1      	b.n	d724c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d7268:	4628      	mov	r0, r5
   d726a:	e7f4      	b.n	d7256 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d726c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d7270:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d7274:	6885      	ldr	r5, [r0, #8]
   d7276:	b085      	sub	sp, #20
   d7278:	4606      	mov	r6, r0
   d727a:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d727c:	4644      	mov	r4, r8
      while (__x != 0)
   d727e:	b155      	cbz	r5, d7296 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d7280:	f899 3000 	ldrb.w	r3, [r9]
   d7284:	7c2a      	ldrb	r2, [r5, #16]
   d7286:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d7288:	bf36      	itet	cc
   d728a:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d728c:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d728e:	4625      	movcc	r5, r4
   d7290:	462c      	mov	r4, r5
   d7292:	461d      	mov	r5, r3
   d7294:	e7f3      	b.n	d727e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d7296:	45a0      	cmp	r8, r4
   d7298:	d004      	beq.n	d72a4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d729a:	f899 2000 	ldrb.w	r2, [r9]
   d729e:	7c23      	ldrb	r3, [r4, #16]
   d72a0:	429a      	cmp	r2, r3
   d72a2:	d22e      	bcs.n	d7302 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d72a4:	2024      	movs	r0, #36	; 0x24
   d72a6:	f7fc fef6 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d72aa:	f899 9000 	ldrb.w	r9, [r9]
   d72ae:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d72b2:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d72b4:	45a0      	cmp	r8, r4
   d72b6:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d72b8:	f100 0210 	add.w	r2, r0, #16
   d72bc:	61c3      	str	r3, [r0, #28]
   d72be:	d125      	bne.n	d730c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d72c0:	6973      	ldr	r3, [r6, #20]
   d72c2:	b11b      	cbz	r3, d72cc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d72c4:	6931      	ldr	r1, [r6, #16]
   d72c6:	7c0b      	ldrb	r3, [r1, #16]
   d72c8:	454b      	cmp	r3, r9
   d72ca:	d309      	bcc.n	d72e0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d72cc:	4631      	mov	r1, r6
   d72ce:	a802      	add	r0, sp, #8
   d72d0:	f7ff ffa3 	bl	d721a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d72d4:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d72d8:	2900      	cmp	r1, #0
   d72da:	d051      	beq.n	d7380 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d72dc:	2c00      	cmp	r4, #0
   d72de:	d14d      	bne.n	d737c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d72e0:	4588      	cmp	r8, r1
   d72e2:	d04b      	beq.n	d737c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d72e4:	7c38      	ldrb	r0, [r7, #16]
   d72e6:	7c0b      	ldrb	r3, [r1, #16]
   d72e8:	4298      	cmp	r0, r3
   d72ea:	bf2c      	ite	cs
   d72ec:	2000      	movcs	r0, #0
   d72ee:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d72f0:	4643      	mov	r3, r8
   d72f2:	460a      	mov	r2, r1
   d72f4:	4639      	mov	r1, r7
   d72f6:	f002 fc80 	bl	d9bfa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d72fa:	6973      	ldr	r3, [r6, #20]
   d72fc:	3301      	adds	r3, #1
   d72fe:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d7300:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d7302:	f104 0014 	add.w	r0, r4, #20
   d7306:	b005      	add	sp, #20
   d7308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d730c:	7c23      	ldrb	r3, [r4, #16]
   d730e:	9201      	str	r2, [sp, #4]
   d7310:	454b      	cmp	r3, r9
   d7312:	d918      	bls.n	d7346 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d7314:	68f3      	ldr	r3, [r6, #12]
   d7316:	429c      	cmp	r4, r3
   d7318:	d009      	beq.n	d732e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d731a:	4620      	mov	r0, r4
   d731c:	f002 fc6b 	bl	d9bf6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d7320:	7c03      	ldrb	r3, [r0, #16]
   d7322:	9a01      	ldr	r2, [sp, #4]
   d7324:	454b      	cmp	r3, r9
   d7326:	d205      	bcs.n	d7334 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d7328:	68c3      	ldr	r3, [r0, #12]
   d732a:	b953      	cbnz	r3, d7342 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d732c:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d732e:	4621      	mov	r1, r4
   d7330:	461c      	mov	r4, r3
   d7332:	e7d1      	b.n	d72d8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d7334:	4631      	mov	r1, r6
   d7336:	a802      	add	r0, sp, #8
   d7338:	f7ff ff6f 	bl	d721a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d733c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d7340:	e7f5      	b.n	d732e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d7342:	4623      	mov	r3, r4
   d7344:	e7f3      	b.n	d732e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d7346:	d21b      	bcs.n	d7380 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d7348:	6931      	ldr	r1, [r6, #16]
   d734a:	428c      	cmp	r4, r1
   d734c:	d00b      	beq.n	d7366 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d734e:	4620      	mov	r0, r4
   d7350:	f002 fc3e 	bl	d9bd0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d7354:	7c03      	ldrb	r3, [r0, #16]
   d7356:	9a01      	ldr	r2, [sp, #4]
   d7358:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d735a:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d735c:	d905      	bls.n	d736a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d735e:	68e3      	ldr	r3, [r4, #12]
   d7360:	b953      	cbnz	r3, d7378 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d7362:	4621      	mov	r1, r4
   d7364:	461d      	mov	r5, r3
   d7366:	462c      	mov	r4, r5
   d7368:	e7b6      	b.n	d72d8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d736a:	4631      	mov	r1, r6
   d736c:	a802      	add	r0, sp, #8
   d736e:	f7ff ff54 	bl	d721a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d7372:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d7376:	e7f6      	b.n	d7366 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d7378:	4601      	mov	r1, r0
   d737a:	e7f4      	b.n	d7366 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d737c:	2001      	movs	r0, #1
   d737e:	e7b7      	b.n	d72f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d7380:	f107 0014 	add.w	r0, r7, #20
   d7384:	f7ff fefc 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
	::operator delete(__p);
   d7388:	4638      	mov	r0, r7
   d738a:	f7fc fe88 	bl	d409e <_ZdlPv>
   d738e:	4627      	mov	r7, r4
   d7390:	e7b6      	b.n	d7300 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d7394 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d7394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7398:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d739a:	2600      	movs	r6, #0
   d739c:	4617      	mov	r7, r2
	  : _Node_allocator()
   d739e:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d73a2:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d73a6:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d73aa:	4604      	mov	r4, r0
   d73ac:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d73ae:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d73b0:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d73b2:	f10d 0107 	add.w	r1, sp, #7
   d73b6:	2301      	movs	r3, #1
   d73b8:	4628      	mov	r0, r5
   d73ba:	f88d 3007 	strb.w	r3, [sp, #7]
   d73be:	f7ff ff55 	bl	d726c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d73c2:	4916      	ldr	r1, [pc, #88]	; (d741c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d73c4:	f7ff fee6 	bl	d7194 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d73c8:	f10d 0107 	add.w	r1, sp, #7
   d73cc:	4628      	mov	r0, r5
   d73ce:	f88d 6007 	strb.w	r6, [sp, #7]
   d73d2:	f7ff ff4b 	bl	d726c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d73d6:	4912      	ldr	r1, [pc, #72]	; (d7420 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d73d8:	f7ff fedc 	bl	d7194 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d73dc:	2302      	movs	r3, #2
   d73de:	f10d 0107 	add.w	r1, sp, #7
   d73e2:	4628      	mov	r0, r5
   d73e4:	f88d 3007 	strb.w	r3, [sp, #7]
   d73e8:	f7ff ff40 	bl	d726c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d73ec:	490d      	ldr	r1, [pc, #52]	; (d7424 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d73ee:	f7ff fed1 	bl	d7194 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d73f2:	2303      	movs	r3, #3
   d73f4:	f10d 0107 	add.w	r1, sp, #7
   d73f8:	4628      	mov	r0, r5
   d73fa:	f88d 3007 	strb.w	r3, [sp, #7]
   d73fe:	f7ff ff35 	bl	d726c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d7402:	4909      	ldr	r1, [pc, #36]	; (d7428 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d7404:	f7ff fec6 	bl	d7194 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d7408:	4b08      	ldr	r3, [pc, #32]	; (d742c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d740a:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d740e:	4b08      	ldr	r3, [pc, #32]	; (d7430 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d7410:	4620      	mov	r0, r4
  _token = token;
   d7412:	601f      	str	r7, [r3, #0]
}
   d7414:	b002      	add	sp, #8
   d7416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d741a:	bf00      	nop
   d741c:	000d70bd 	.word	0x000d70bd
   d7420:	000d70f1 	.word	0x000d70f1
   d7424:	000d7121 	.word	0x000d7121
   d7428:	000d7155 	.word	0x000d7155
   d742c:	2003e58c 	.word	0x2003e58c
   d7430:	2003e590 	.word	0x2003e590

000d7434 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d7434:	b510      	push	{r4, lr}
   d7436:	4c0e      	ldr	r4, [pc, #56]	; (d7470 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d7438:	4620      	mov	r0, r4
   d743a:	f002 f9cb 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d743e:	4620      	mov	r0, r4
   d7440:	4c0c      	ldr	r4, [pc, #48]	; (d7474 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d7442:	4a0d      	ldr	r2, [pc, #52]	; (d7478 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d7444:	490d      	ldr	r1, [pc, #52]	; (d747c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d7446:	f002 fb79 	bl	d9b3c <__aeabi_atexit>
   d744a:	4620      	mov	r0, r4
   d744c:	f002 f9c2 	bl	d97d4 <_ZN9TCPClientC1Ev>
   d7450:	4620      	mov	r0, r4
   d7452:	4c0b      	ldr	r4, [pc, #44]	; (d7480 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d7454:	4a08      	ldr	r2, [pc, #32]	; (d7478 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d7456:	4909      	ldr	r1, [pc, #36]	; (d747c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d7458:	f002 fb70 	bl	d9b3c <__aeabi_atexit>
   d745c:	4620      	mov	r0, r4
   d745e:	f000 feb3 	bl	d81c8 <_ZN3UDPC1Ev>
   d7462:	4620      	mov	r0, r4
   d7464:	4a04      	ldr	r2, [pc, #16]	; (d7478 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d7466:	4907      	ldr	r1, [pc, #28]	; (d7484 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d7468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d746c:	f002 bb66 	b.w	d9b3c <__aeabi_atexit>
   d7470:	2003e570 	.word	0x2003e570
   d7474:	2003e508 	.word	0x2003e508
   d7478:	2003e128 	.word	0x2003e128
   d747c:	000d5fbd 	.word	0x000d5fbd
   d7480:	2003e524 	.word	0x2003e524
   d7484:	000d63f5 	.word	0x000d63f5

000d7488 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d7488:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7490 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d748c:	4770      	bx	lr
   d748e:	bf00      	nop
   d7490:	cda2425f 	.word	0xcda2425f

000d7494 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d7494:	7501      	strb	r1, [r0, #20]
   d7496:	4770      	bx	lr

000d7498 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7498:	b530      	push	{r4, r5, lr}
   d749a:	4d06      	ldr	r5, [pc, #24]	; (d74b4 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d749c:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d749e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d74a2:	2500      	movs	r5, #0
  _token = token;
   d74a4:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d74a6:	7505      	strb	r5, [r0, #20]
   d74a8:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d74ac:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d74b0:	6185      	str	r5, [r0, #24]
}
   d74b2:	bd30      	pop	{r4, r5, pc}
   d74b4:	000de214 	.word	0x000de214

000d74b8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169, 55, 61, 243);
  }
#endif

  return IPAddress(169, 55, 61, 243);
}
   d74b8:	b510      	push	{r4, lr}
   d74ba:	4c05      	ldr	r4, [pc, #20]	; (d74d0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d74bc:	4620      	mov	r0, r4
   d74be:	f000 fe83 	bl	d81c8 <_ZN3UDPC1Ev>
   d74c2:	4620      	mov	r0, r4
   d74c4:	4a03      	ldr	r2, [pc, #12]	; (d74d4 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d74c6:	4904      	ldr	r1, [pc, #16]	; (d74d8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d74c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d74cc:	f002 bb36 	b.w	d9b3c <__aeabi_atexit>
   d74d0:	2003e594 	.word	0x2003e594
   d74d4:	2003e128 	.word	0x2003e128
   d74d8:	000d63f5 	.word	0x000d63f5

000d74dc <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d74dc:	b510      	push	{r4, lr}
   d74de:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d74e0:	684a      	ldr	r2, [r1, #4]
   d74e2:	4902      	ldr	r1, [pc, #8]	; (d74ec <_ZN6UbiUDP11getServerIpEv+0x10>)
   d74e4:	f002 f9be 	bl	d9864 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d74e8:	4620      	mov	r0, r4
   d74ea:	bd10      	pop	{r4, pc}
   d74ec:	2003e670 	.word	0x2003e670

000d74f0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d74f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74f2:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d74f4:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d74f6:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d74f8:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d74fa:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d74fc:	f7ff ffee 	bl	d74dc <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7500:	a802      	add	r0, sp, #8
   d7502:	f001 fc99 	bl	d8e38 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d7506:	b9a0      	cbnz	r0, d7532 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d7508:	7d33      	ldrb	r3, [r6, #20]
   d750a:	b123      	cbz	r3, d7516 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d750c:	f001 fd32 	bl	d8f74 <_Z16_fetch_usbserialv>
   d7510:	4927      	ldr	r1, [pc, #156]	; (d75b0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d7512:	f000 ff60 	bl	d83d6 <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d7516:	23f3      	movs	r3, #243	; 0xf3
   d7518:	9300      	str	r3, [sp, #0]
   d751a:	2237      	movs	r2, #55	; 0x37
   d751c:	233d      	movs	r3, #61	; 0x3d
   d751e:	21a9      	movs	r1, #169	; 0xa9
   d7520:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d7522:	ad09      	add	r5, sp, #36	; 0x24
   d7524:	f001 fcac 	bl	d8e80 <_ZN9IPAddressC1Ehhhh>
   d7528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d752a:	ac03      	add	r4, sp, #12
   d752c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d752e:	682b      	ldr	r3, [r5, #0]
   d7530:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d7532:	2200      	movs	r2, #0
   d7534:	f240 21bd 	movw	r1, #701	; 0x2bd
   d7538:	481e      	ldr	r0, [pc, #120]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d753a:	f000 fe77 	bl	d822c <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d753e:	2200      	movs	r2, #0
   d7540:	f242 3134 	movw	r1, #9012	; 0x2334
   d7544:	481b      	ldr	r0, [pc, #108]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7546:	f000 fc4d 	bl	d7de4 <_ZN3UDP5beginEtm>
   d754a:	ad03      	add	r5, sp, #12
   d754c:	4b1a      	ldr	r3, [pc, #104]	; (d75b8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d754e:	9308      	str	r3, [sp, #32]
   d7550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7552:	ac09      	add	r4, sp, #36	; 0x24
   d7554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7556:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7558:	4816      	ldr	r0, [pc, #88]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d755a:	7023      	strb	r3, [r4, #0]
   d755c:	f242 3234 	movw	r2, #9012	; 0x2334
   d7560:	a908      	add	r1, sp, #32
   d7562:	f000 fe7f 	bl	d8264 <_ZN3UDP11beginPacketE9IPAddresst>
   d7566:	b958      	cbnz	r0, d7580 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d7568:	7d33      	ldrb	r3, [r6, #20]
   d756a:	b123      	cbz	r3, d7576 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d756c:	f001 fd02 	bl	d8f74 <_Z16_fetch_usbserialv>
   d7570:	4912      	ldr	r1, [pc, #72]	; (d75bc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d7572:	f000 ff30 	bl	d83d6 <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d7576:	480f      	ldr	r0, [pc, #60]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7578:	f000 fc80 	bl	d7e7c <_ZN3UDP4stopEv>
    return false;
   d757c:	2000      	movs	r0, #0
   d757e:	e014      	b.n	d75aa <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d7580:	2f00      	cmp	r7, #0
   d7582:	d0f1      	beq.n	d7568 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d7584:	4638      	mov	r0, r7
   d7586:	f004 fc58 	bl	dbe3a <strlen>
   d758a:	4639      	mov	r1, r7
   d758c:	4602      	mov	r2, r0
   d758e:	4809      	ldr	r0, [pc, #36]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7590:	f000 fc82 	bl	d7e98 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7594:	2800      	cmp	r0, #0
   d7596:	d0e7      	beq.n	d7568 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d7598:	4806      	ldr	r0, [pc, #24]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d759a:	f000 fcdd 	bl	d7f58 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d759e:	2800      	cmp	r0, #0
   d75a0:	d0e2      	beq.n	d7568 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d75a2:	4804      	ldr	r0, [pc, #16]	; (d75b4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d75a4:	f000 fc6a 	bl	d7e7c <_ZN3UDP4stopEv>
  return true;
   d75a8:	2001      	movs	r0, #1
}
   d75aa:	b00f      	add	sp, #60	; 0x3c
   d75ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d75ae:	bf00      	nop
   d75b0:	000de160 	.word	0x000de160
   d75b4:	2003e594 	.word	0x2003e594
   d75b8:	000de758 	.word	0x000de758
   d75bc:	000de1ec 	.word	0x000de1ec

000d75c0 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d75c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d75c8 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d75c4:	4770      	bx	lr
   d75c6:	bf00      	nop
   d75c8:	cda2425f 	.word	0xcda2425f

000d75cc <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d75cc:	7401      	strb	r1, [r0, #16]
   d75ce:	4770      	bx	lr

000d75d0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d75d0:	b530      	push	{r4, r5, lr}
   d75d2:	b085      	sub	sp, #20
   d75d4:	461a      	mov	r2, r3
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d75d6:	9b08      	ldr	r3, [sp, #32]
   d75d8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d75da:	f88d 3000 	strb.w	r3, [sp]
   d75de:	a802      	add	r0, sp, #8
   d75e0:	233c      	movs	r3, #60	; 0x3c
   d75e2:	f001 fa59 	bl	d8a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d75e6:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d75e8:	9c02      	ldr	r4, [sp, #8]
   d75ea:	f000 fa47 	bl	d7a7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d75ee:	b120      	cbz	r0, d75fa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d75f0:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d75f2:	b913      	cbnz	r3, d75fa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d75f4:	f000 fabe 	bl	d7b74 <spark_process>
    }
   d75f8:	e7fa      	b.n	d75f0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d75fa:	7863      	ldrb	r3, [r4, #1]
   d75fc:	f3bf 8f5b 	dmb	ish
   d7600:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d7602:	b9ab      	cbnz	r3, d7630 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d7604:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d7606:	9c03      	ldr	r4, [sp, #12]
   d7608:	b17c      	cbz	r4, d762a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d760a:	6863      	ldr	r3, [r4, #4]
   d760c:	3b01      	subs	r3, #1
   d760e:	6063      	str	r3, [r4, #4]
   d7610:	b95b      	cbnz	r3, d762a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d7612:	6823      	ldr	r3, [r4, #0]
   d7614:	4620      	mov	r0, r4
   d7616:	689b      	ldr	r3, [r3, #8]
   d7618:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d761a:	68a3      	ldr	r3, [r4, #8]
   d761c:	3b01      	subs	r3, #1
   d761e:	60a3      	str	r3, [r4, #8]
   d7620:	b91b      	cbnz	r3, d762a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d7622:	6823      	ldr	r3, [r4, #0]
   d7624:	4620      	mov	r0, r4
   d7626:	68db      	ldr	r3, [r3, #12]
   d7628:	4798      	blx	r3
}
   d762a:	4628      	mov	r0, r5
   d762c:	b005      	add	sp, #20
   d762e:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d7630:	2000      	movs	r0, #0
   d7632:	f000 fa23 	bl	d7a7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7636:	b120      	cbz	r0, d7642 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d7638:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d763a:	b913      	cbnz	r3, d7642 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d763c:	f000 fa9a 	bl	d7b74 <spark_process>
    }
   d7640:	e7fa      	b.n	d7638 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7642:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d7644:	2b01      	cmp	r3, #1
   d7646:	d1dd      	bne.n	d7604 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d7648:	7b25      	ldrb	r5, [r4, #12]
   d764a:	e7dc      	b.n	d7606 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d764c <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d764c:	b510      	push	{r4, lr}
   d764e:	4c04      	ldr	r4, [pc, #16]	; (d7660 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d7650:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d7652:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d7656:	2400      	movs	r4, #0
  _token = token;
   d7658:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d765a:	7404      	strb	r4, [r0, #16]
  _token = token;
   d765c:	60c3      	str	r3, [r0, #12]
}
   d765e:	bd10      	pop	{r4, pc}
   d7660:	000de228 	.word	0x000de228

000d7664 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d7664:	f000 bf96 	b.w	d8594 <delay>

000d7668 <_Z11BlynkMillisv>:
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7668:	f000 b888 	b.w	d777c <HAL_Timer_Get_Milli_Seconds>

000d766c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d766c:	4770      	bx	lr

000d766e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d766e:	4770      	bx	lr

000d7670 <BlynkNoOpCbk>:
{}
   d7670:	4770      	bx	lr
	...

000d7674 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d7674:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d7676:	bf5a      	itte	pl
   d7678:	4b02      	ldrpl	r3, [pc, #8]	; (d7684 <GetReadHandler+0x10>)
   d767a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d767e:	2000      	movmi	r0, #0
#endif
}
   d7680:	4770      	bx	lr
   d7682:	bf00      	nop
   d7684:	000de234 	.word	0x000de234

000d7688 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d7688:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d768a:	bf5a      	itte	pl
   d768c:	4b02      	ldrpl	r3, [pc, #8]	; (d7698 <GetWriteHandler+0x10>)
   d768e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d7692:	2000      	movmi	r0, #0
#endif
}
   d7694:	4770      	bx	lr
   d7696:	bf00      	nop
   d7698:	000de434 	.word	0x000de434

000d769c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b02      	ldr	r3, [pc, #8]	; (d76a8 <netdb_freeaddrinfo+0xc>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	689b      	ldr	r3, [r3, #8]
   d76a4:	9301      	str	r3, [sp, #4]
   d76a6:	bd08      	pop	{r3, pc}
   d76a8:	00030268 	.word	0x00030268

000d76ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d76ac:	b508      	push	{r3, lr}
   d76ae:	4b02      	ldr	r3, [pc, #8]	; (d76b8 <netdb_getaddrinfo+0xc>)
   d76b0:	681b      	ldr	r3, [r3, #0]
   d76b2:	68db      	ldr	r3, [r3, #12]
   d76b4:	9301      	str	r3, [sp, #4]
   d76b6:	bd08      	pop	{r3, pc}
   d76b8:	00030268 	.word	0x00030268

000d76bc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d76bc:	b508      	push	{r3, lr}
   d76be:	4b02      	ldr	r3, [pc, #8]	; (d76c8 <HAL_Validate_Pin_Function+0xc>)
   d76c0:	681b      	ldr	r3, [r3, #0]
   d76c2:	685b      	ldr	r3, [r3, #4]
   d76c4:	9301      	str	r3, [sp, #4]
   d76c6:	bd08      	pop	{r3, pc}
   d76c8:	0003022c 	.word	0x0003022c

000d76cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d76cc:	b508      	push	{r3, lr}
   d76ce:	4b02      	ldr	r3, [pc, #8]	; (d76d8 <HAL_Pin_Mode+0xc>)
   d76d0:	681b      	ldr	r3, [r3, #0]
   d76d2:	689b      	ldr	r3, [r3, #8]
   d76d4:	9301      	str	r3, [sp, #4]
   d76d6:	bd08      	pop	{r3, pc}
   d76d8:	0003022c 	.word	0x0003022c

000d76dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d76dc:	b508      	push	{r3, lr}
   d76de:	4b02      	ldr	r3, [pc, #8]	; (d76e8 <HAL_Get_Pin_Mode+0xc>)
   d76e0:	681b      	ldr	r3, [r3, #0]
   d76e2:	68db      	ldr	r3, [r3, #12]
   d76e4:	9301      	str	r3, [sp, #4]
   d76e6:	bd08      	pop	{r3, pc}
   d76e8:	0003022c 	.word	0x0003022c

000d76ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d76ec:	b508      	push	{r3, lr}
   d76ee:	4b02      	ldr	r3, [pc, #8]	; (d76f8 <HAL_GPIO_Write+0xc>)
   d76f0:	681b      	ldr	r3, [r3, #0]
   d76f2:	691b      	ldr	r3, [r3, #16]
   d76f4:	9301      	str	r3, [sp, #4]
   d76f6:	bd08      	pop	{r3, pc}
   d76f8:	0003022c 	.word	0x0003022c

000d76fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d76fc:	b508      	push	{r3, lr}
   d76fe:	4b02      	ldr	r3, [pc, #8]	; (d7708 <HAL_GPIO_Read+0xc>)
   d7700:	681b      	ldr	r3, [r3, #0]
   d7702:	695b      	ldr	r3, [r3, #20]
   d7704:	9301      	str	r3, [sp, #4]
   d7706:	bd08      	pop	{r3, pc}
   d7708:	0003022c 	.word	0x0003022c

000d770c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d770c:	b508      	push	{r3, lr}
   d770e:	4b02      	ldr	r3, [pc, #8]	; (d7718 <HAL_DAC_Write+0xc>)
   d7710:	681b      	ldr	r3, [r3, #0]
   d7712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7714:	9301      	str	r3, [sp, #4]
   d7716:	bd08      	pop	{r3, pc}
   d7718:	0003022c 	.word	0x0003022c

000d771c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d771c:	b508      	push	{r3, lr}
   d771e:	4b02      	ldr	r3, [pc, #8]	; (d7728 <hal_adc_read+0xc>)
   d7720:	681b      	ldr	r3, [r3, #0]
   d7722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7724:	9301      	str	r3, [sp, #4]
   d7726:	bd08      	pop	{r3, pc}
   d7728:	0003022c 	.word	0x0003022c

000d772c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d772c:	b508      	push	{r3, lr}
   d772e:	4b02      	ldr	r3, [pc, #8]	; (d7738 <hal_pwm_write_ext+0xc>)
   d7730:	681b      	ldr	r3, [r3, #0]
   d7732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7734:	9301      	str	r3, [sp, #4]
   d7736:	bd08      	pop	{r3, pc}
   d7738:	0003022c 	.word	0x0003022c

000d773c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d773c:	b508      	push	{r3, lr}
   d773e:	4b02      	ldr	r3, [pc, #8]	; (d7748 <if_index_to_name+0xc>)
   d7740:	681b      	ldr	r3, [r3, #0]
   d7742:	695b      	ldr	r3, [r3, #20]
   d7744:	9301      	str	r3, [sp, #4]
   d7746:	bd08      	pop	{r3, pc}
   d7748:	0003026c 	.word	0x0003026c

000d774c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d774c:	b508      	push	{r3, lr}
   d774e:	4b02      	ldr	r3, [pc, #8]	; (d7758 <HAL_RNG_GetRandomNumber+0xc>)
   d7750:	681b      	ldr	r3, [r3, #0]
   d7752:	685b      	ldr	r3, [r3, #4]
   d7754:	9301      	str	r3, [sp, #4]
   d7756:	bd08      	pop	{r3, pc}
   d7758:	00030218 	.word	0x00030218

000d775c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d775c:	b508      	push	{r3, lr}
   d775e:	4b02      	ldr	r3, [pc, #8]	; (d7768 <HAL_Delay_Microseconds+0xc>)
   d7760:	681b      	ldr	r3, [r3, #0]
   d7762:	68db      	ldr	r3, [r3, #12]
   d7764:	9301      	str	r3, [sp, #4]
   d7766:	bd08      	pop	{r3, pc}
   d7768:	00030218 	.word	0x00030218

000d776c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d776c:	b508      	push	{r3, lr}
   d776e:	4b02      	ldr	r3, [pc, #8]	; (d7778 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7770:	681b      	ldr	r3, [r3, #0]
   d7772:	691b      	ldr	r3, [r3, #16]
   d7774:	9301      	str	r3, [sp, #4]
   d7776:	bd08      	pop	{r3, pc}
   d7778:	00030218 	.word	0x00030218

000d777c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d777c:	b508      	push	{r3, lr}
   d777e:	4b02      	ldr	r3, [pc, #8]	; (d7788 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7780:	681b      	ldr	r3, [r3, #0]
   d7782:	695b      	ldr	r3, [r3, #20]
   d7784:	9301      	str	r3, [sp, #4]
   d7786:	bd08      	pop	{r3, pc}
   d7788:	00030218 	.word	0x00030218

000d778c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d778c:	b508      	push	{r3, lr}
   d778e:	4b02      	ldr	r3, [pc, #8]	; (d7798 <hal_rtc_time_is_valid+0xc>)
   d7790:	681b      	ldr	r3, [r3, #0]
   d7792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7794:	9301      	str	r3, [sp, #4]
   d7796:	bd08      	pop	{r3, pc}
   d7798:	00030218 	.word	0x00030218

000d779c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d779c:	b508      	push	{r3, lr}
   d779e:	4b02      	ldr	r3, [pc, #8]	; (d77a8 <hal_rtc_get_time+0xc>)
   d77a0:	681b      	ldr	r3, [r3, #0]
   d77a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d77a4:	9301      	str	r3, [sp, #4]
   d77a6:	bd08      	pop	{r3, pc}
   d77a8:	00030218 	.word	0x00030218

000d77ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d77ac:	b508      	push	{r3, lr}
   d77ae:	4b02      	ldr	r3, [pc, #8]	; (d77b8 <os_mutex_recursive_create+0xc>)
   d77b0:	681b      	ldr	r3, [r3, #0]
   d77b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d77b4:	9301      	str	r3, [sp, #4]
   d77b6:	bd08      	pop	{r3, pc}
   d77b8:	00030248 	.word	0x00030248

000d77bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d77bc:	b508      	push	{r3, lr}
   d77be:	4b02      	ldr	r3, [pc, #8]	; (d77c8 <os_mutex_recursive_destroy+0xc>)
   d77c0:	681b      	ldr	r3, [r3, #0]
   d77c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d77c4:	9301      	str	r3, [sp, #4]
   d77c6:	bd08      	pop	{r3, pc}
   d77c8:	00030248 	.word	0x00030248

000d77cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d77cc:	b508      	push	{r3, lr}
   d77ce:	4b02      	ldr	r3, [pc, #8]	; (d77d8 <inet_inet_ntop+0xc>)
   d77d0:	681b      	ldr	r3, [r3, #0]
   d77d2:	695b      	ldr	r3, [r3, #20]
   d77d4:	9301      	str	r3, [sp, #4]
   d77d6:	bd08      	pop	{r3, pc}
   d77d8:	00030264 	.word	0x00030264

000d77dc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d77dc:	b508      	push	{r3, lr}
   d77de:	4b02      	ldr	r3, [pc, #8]	; (d77e8 <inet_htonl+0xc>)
   d77e0:	681b      	ldr	r3, [r3, #0]
   d77e2:	6a1b      	ldr	r3, [r3, #32]
   d77e4:	9301      	str	r3, [sp, #4]
   d77e6:	bd08      	pop	{r3, pc}
   d77e8:	00030264 	.word	0x00030264

000d77ec <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d77ec:	b508      	push	{r3, lr}
   d77ee:	4b02      	ldr	r3, [pc, #8]	; (d77f8 <inet_ntohs+0xc>)
   d77f0:	681b      	ldr	r3, [r3, #0]
   d77f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d77f4:	9301      	str	r3, [sp, #4]
   d77f6:	bd08      	pop	{r3, pc}
   d77f8:	00030264 	.word	0x00030264

000d77fc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d77fc:	b508      	push	{r3, lr}
   d77fe:	4b02      	ldr	r3, [pc, #8]	; (d7808 <inet_htons+0xc>)
   d7800:	681b      	ldr	r3, [r3, #0]
   d7802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7804:	9301      	str	r3, [sp, #4]
   d7806:	bd08      	pop	{r3, pc}
   d7808:	00030264 	.word	0x00030264

000d780c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d780c:	b508      	push	{r3, lr}
   d780e:	4b02      	ldr	r3, [pc, #8]	; (d7818 <hal_usart_init+0xc>)
   d7810:	681b      	ldr	r3, [r3, #0]
   d7812:	681b      	ldr	r3, [r3, #0]
   d7814:	9301      	str	r3, [sp, #4]
   d7816:	bd08      	pop	{r3, pc}
   d7818:	0003023c 	.word	0x0003023c

000d781c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d781c:	b508      	push	{r3, lr}
   d781e:	4b02      	ldr	r3, [pc, #8]	; (d7828 <hal_usart_write+0xc>)
   d7820:	681b      	ldr	r3, [r3, #0]
   d7822:	68db      	ldr	r3, [r3, #12]
   d7824:	9301      	str	r3, [sp, #4]
   d7826:	bd08      	pop	{r3, pc}
   d7828:	0003023c 	.word	0x0003023c

000d782c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d782c:	b508      	push	{r3, lr}
   d782e:	4b02      	ldr	r3, [pc, #8]	; (d7838 <hal_usart_available+0xc>)
   d7830:	681b      	ldr	r3, [r3, #0]
   d7832:	691b      	ldr	r3, [r3, #16]
   d7834:	9301      	str	r3, [sp, #4]
   d7836:	bd08      	pop	{r3, pc}
   d7838:	0003023c 	.word	0x0003023c

000d783c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d783c:	b508      	push	{r3, lr}
   d783e:	4b02      	ldr	r3, [pc, #8]	; (d7848 <hal_usart_read+0xc>)
   d7840:	681b      	ldr	r3, [r3, #0]
   d7842:	695b      	ldr	r3, [r3, #20]
   d7844:	9301      	str	r3, [sp, #4]
   d7846:	bd08      	pop	{r3, pc}
   d7848:	0003023c 	.word	0x0003023c

000d784c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d784c:	b508      	push	{r3, lr}
   d784e:	4b02      	ldr	r3, [pc, #8]	; (d7858 <hal_usart_peek+0xc>)
   d7850:	681b      	ldr	r3, [r3, #0]
   d7852:	699b      	ldr	r3, [r3, #24]
   d7854:	9301      	str	r3, [sp, #4]
   d7856:	bd08      	pop	{r3, pc}
   d7858:	0003023c 	.word	0x0003023c

000d785c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d785c:	b508      	push	{r3, lr}
   d785e:	4b02      	ldr	r3, [pc, #8]	; (d7868 <hal_usart_flush+0xc>)
   d7860:	681b      	ldr	r3, [r3, #0]
   d7862:	69db      	ldr	r3, [r3, #28]
   d7864:	9301      	str	r3, [sp, #4]
   d7866:	bd08      	pop	{r3, pc}
   d7868:	0003023c 	.word	0x0003023c

000d786c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d786c:	b508      	push	{r3, lr}
   d786e:	4b02      	ldr	r3, [pc, #8]	; (d7878 <hal_usart_is_enabled+0xc>)
   d7870:	681b      	ldr	r3, [r3, #0]
   d7872:	6a1b      	ldr	r3, [r3, #32]
   d7874:	9301      	str	r3, [sp, #4]
   d7876:	bd08      	pop	{r3, pc}
   d7878:	0003023c 	.word	0x0003023c

000d787c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d787c:	b508      	push	{r3, lr}
   d787e:	4b02      	ldr	r3, [pc, #8]	; (d7888 <hal_usart_available_data_for_write+0xc>)
   d7880:	681b      	ldr	r3, [r3, #0]
   d7882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7884:	9301      	str	r3, [sp, #4]
   d7886:	bd08      	pop	{r3, pc}
   d7888:	0003023c 	.word	0x0003023c

000d788c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d788c:	b508      	push	{r3, lr}
   d788e:	4b02      	ldr	r3, [pc, #8]	; (d7898 <hal_i2c_write+0xc>)
   d7890:	681b      	ldr	r3, [r3, #0]
   d7892:	6a1b      	ldr	r3, [r3, #32]
   d7894:	9301      	str	r3, [sp, #4]
   d7896:	bd08      	pop	{r3, pc}
   d7898:	00030228 	.word	0x00030228

000d789c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d789c:	b508      	push	{r3, lr}
   d789e:	4b02      	ldr	r3, [pc, #8]	; (d78a8 <hal_i2c_available+0xc>)
   d78a0:	681b      	ldr	r3, [r3, #0]
   d78a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d78a4:	9301      	str	r3, [sp, #4]
   d78a6:	bd08      	pop	{r3, pc}
   d78a8:	00030228 	.word	0x00030228

000d78ac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d78ac:	b508      	push	{r3, lr}
   d78ae:	4b02      	ldr	r3, [pc, #8]	; (d78b8 <hal_i2c_read+0xc>)
   d78b0:	681b      	ldr	r3, [r3, #0]
   d78b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d78b4:	9301      	str	r3, [sp, #4]
   d78b6:	bd08      	pop	{r3, pc}
   d78b8:	00030228 	.word	0x00030228

000d78bc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d78bc:	b508      	push	{r3, lr}
   d78be:	4b02      	ldr	r3, [pc, #8]	; (d78c8 <hal_i2c_peek+0xc>)
   d78c0:	681b      	ldr	r3, [r3, #0]
   d78c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d78c4:	9301      	str	r3, [sp, #4]
   d78c6:	bd08      	pop	{r3, pc}
   d78c8:	00030228 	.word	0x00030228

000d78cc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d78cc:	b508      	push	{r3, lr}
   d78ce:	4b02      	ldr	r3, [pc, #8]	; (d78d8 <hal_i2c_flush+0xc>)
   d78d0:	681b      	ldr	r3, [r3, #0]
   d78d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d78d4:	9301      	str	r3, [sp, #4]
   d78d6:	bd08      	pop	{r3, pc}
   d78d8:	00030228 	.word	0x00030228

000d78dc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d78dc:	b508      	push	{r3, lr}
   d78de:	4b02      	ldr	r3, [pc, #8]	; (d78e8 <hal_i2c_is_enabled+0xc>)
   d78e0:	681b      	ldr	r3, [r3, #0]
   d78e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d78e4:	9301      	str	r3, [sp, #4]
   d78e6:	bd08      	pop	{r3, pc}
   d78e8:	00030228 	.word	0x00030228

000d78ec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d78ec:	b508      	push	{r3, lr}
   d78ee:	4b02      	ldr	r3, [pc, #8]	; (d78f8 <hal_i2c_init+0xc>)
   d78f0:	681b      	ldr	r3, [r3, #0]
   d78f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d78f4:	9301      	str	r3, [sp, #4]
   d78f6:	bd08      	pop	{r3, pc}
   d78f8:	00030228 	.word	0x00030228

000d78fc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d78fc:	b508      	push	{r3, lr}
   d78fe:	4b02      	ldr	r3, [pc, #8]	; (d7908 <sock_bind+0xc>)
   d7900:	681b      	ldr	r3, [r3, #0]
   d7902:	685b      	ldr	r3, [r3, #4]
   d7904:	9301      	str	r3, [sp, #4]
   d7906:	bd08      	pop	{r3, pc}
   d7908:	00030238 	.word	0x00030238

000d790c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d790c:	b508      	push	{r3, lr}
   d790e:	4b02      	ldr	r3, [pc, #8]	; (d7918 <sock_setsockopt+0xc>)
   d7910:	681b      	ldr	r3, [r3, #0]
   d7912:	699b      	ldr	r3, [r3, #24]
   d7914:	9301      	str	r3, [sp, #4]
   d7916:	bd08      	pop	{r3, pc}
   d7918:	00030238 	.word	0x00030238

000d791c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d791c:	b508      	push	{r3, lr}
   d791e:	4b02      	ldr	r3, [pc, #8]	; (d7928 <sock_close+0xc>)
   d7920:	681b      	ldr	r3, [r3, #0]
   d7922:	69db      	ldr	r3, [r3, #28]
   d7924:	9301      	str	r3, [sp, #4]
   d7926:	bd08      	pop	{r3, pc}
   d7928:	00030238 	.word	0x00030238

000d792c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d792c:	b508      	push	{r3, lr}
   d792e:	4b02      	ldr	r3, [pc, #8]	; (d7938 <sock_connect+0xc>)
   d7930:	681b      	ldr	r3, [r3, #0]
   d7932:	6a1b      	ldr	r3, [r3, #32]
   d7934:	9301      	str	r3, [sp, #4]
   d7936:	bd08      	pop	{r3, pc}
   d7938:	00030238 	.word	0x00030238

000d793c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d793c:	b508      	push	{r3, lr}
   d793e:	4b02      	ldr	r3, [pc, #8]	; (d7948 <sock_recv+0xc>)
   d7940:	681b      	ldr	r3, [r3, #0]
   d7942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7944:	9301      	str	r3, [sp, #4]
   d7946:	bd08      	pop	{r3, pc}
   d7948:	00030238 	.word	0x00030238

000d794c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d794c:	b508      	push	{r3, lr}
   d794e:	4b02      	ldr	r3, [pc, #8]	; (d7958 <sock_recvfrom+0xc>)
   d7950:	681b      	ldr	r3, [r3, #0]
   d7952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7954:	9301      	str	r3, [sp, #4]
   d7956:	bd08      	pop	{r3, pc}
   d7958:	00030238 	.word	0x00030238

000d795c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d795c:	b508      	push	{r3, lr}
   d795e:	4b02      	ldr	r3, [pc, #8]	; (d7968 <sock_send+0xc>)
   d7960:	681b      	ldr	r3, [r3, #0]
   d7962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7964:	9301      	str	r3, [sp, #4]
   d7966:	bd08      	pop	{r3, pc}
   d7968:	00030238 	.word	0x00030238

000d796c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d796c:	b508      	push	{r3, lr}
   d796e:	4b02      	ldr	r3, [pc, #8]	; (d7978 <sock_sendto+0xc>)
   d7970:	681b      	ldr	r3, [r3, #0]
   d7972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7974:	9301      	str	r3, [sp, #4]
   d7976:	bd08      	pop	{r3, pc}
   d7978:	00030238 	.word	0x00030238

000d797c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d797c:	b508      	push	{r3, lr}
   d797e:	4b02      	ldr	r3, [pc, #8]	; (d7988 <sock_socket+0xc>)
   d7980:	681b      	ldr	r3, [r3, #0]
   d7982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7984:	9301      	str	r3, [sp, #4]
   d7986:	bd08      	pop	{r3, pc}
   d7988:	00030238 	.word	0x00030238

000d798c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d798c:	b508      	push	{r3, lr}
   d798e:	4b02      	ldr	r3, [pc, #8]	; (d7998 <hal_spi_init+0xc>)
   d7990:	681b      	ldr	r3, [r3, #0]
   d7992:	69db      	ldr	r3, [r3, #28]
   d7994:	9301      	str	r3, [sp, #4]
   d7996:	bd08      	pop	{r3, pc}
   d7998:	00030230 	.word	0x00030230

000d799c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b02      	ldr	r3, [pc, #8]	; (d79a8 <hal_spi_is_enabled+0xc>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	6a1b      	ldr	r3, [r3, #32]
   d79a4:	9301      	str	r3, [sp, #4]
   d79a6:	bd08      	pop	{r3, pc}
   d79a8:	00030230 	.word	0x00030230

000d79ac <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d79ac:	b508      	push	{r3, lr}
   d79ae:	4b02      	ldr	r3, [pc, #8]	; (d79b8 <cellular_signal+0xc>)
   d79b0:	681b      	ldr	r3, [r3, #0]
   d79b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d79b4:	9301      	str	r3, [sp, #4]
   d79b6:	bd08      	pop	{r3, pc}
   d79b8:	00030274 	.word	0x00030274

000d79bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d79bc:	b508      	push	{r3, lr}
   d79be:	4b02      	ldr	r3, [pc, #8]	; (d79c8 <HAL_USB_USART_Init+0xc>)
   d79c0:	681b      	ldr	r3, [r3, #0]
   d79c2:	681b      	ldr	r3, [r3, #0]
   d79c4:	9301      	str	r3, [sp, #4]
   d79c6:	bd08      	pop	{r3, pc}
   d79c8:	0003024c 	.word	0x0003024c

000d79cc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d79cc:	b508      	push	{r3, lr}
   d79ce:	4b02      	ldr	r3, [pc, #8]	; (d79d8 <HAL_USB_USART_Begin+0xc>)
   d79d0:	681b      	ldr	r3, [r3, #0]
   d79d2:	685b      	ldr	r3, [r3, #4]
   d79d4:	9301      	str	r3, [sp, #4]
   d79d6:	bd08      	pop	{r3, pc}
   d79d8:	0003024c 	.word	0x0003024c

000d79dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d79dc:	b508      	push	{r3, lr}
   d79de:	4b02      	ldr	r3, [pc, #8]	; (d79e8 <HAL_USB_USART_Available_Data+0xc>)
   d79e0:	681b      	ldr	r3, [r3, #0]
   d79e2:	691b      	ldr	r3, [r3, #16]
   d79e4:	9301      	str	r3, [sp, #4]
   d79e6:	bd08      	pop	{r3, pc}
   d79e8:	0003024c 	.word	0x0003024c

000d79ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d79ec:	b508      	push	{r3, lr}
   d79ee:	4b02      	ldr	r3, [pc, #8]	; (d79f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d79f0:	681b      	ldr	r3, [r3, #0]
   d79f2:	695b      	ldr	r3, [r3, #20]
   d79f4:	9301      	str	r3, [sp, #4]
   d79f6:	bd08      	pop	{r3, pc}
   d79f8:	0003024c 	.word	0x0003024c

000d79fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d79fc:	b508      	push	{r3, lr}
   d79fe:	4b02      	ldr	r3, [pc, #8]	; (d7a08 <HAL_USB_USART_Receive_Data+0xc>)
   d7a00:	681b      	ldr	r3, [r3, #0]
   d7a02:	699b      	ldr	r3, [r3, #24]
   d7a04:	9301      	str	r3, [sp, #4]
   d7a06:	bd08      	pop	{r3, pc}
   d7a08:	0003024c 	.word	0x0003024c

000d7a0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7a0c:	b508      	push	{r3, lr}
   d7a0e:	4b02      	ldr	r3, [pc, #8]	; (d7a18 <HAL_USB_USART_Send_Data+0xc>)
   d7a10:	681b      	ldr	r3, [r3, #0]
   d7a12:	69db      	ldr	r3, [r3, #28]
   d7a14:	9301      	str	r3, [sp, #4]
   d7a16:	bd08      	pop	{r3, pc}
   d7a18:	0003024c 	.word	0x0003024c

000d7a1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7a1c:	b508      	push	{r3, lr}
   d7a1e:	4b02      	ldr	r3, [pc, #8]	; (d7a28 <HAL_USB_USART_Flush_Data+0xc>)
   d7a20:	681b      	ldr	r3, [r3, #0]
   d7a22:	6a1b      	ldr	r3, [r3, #32]
   d7a24:	9301      	str	r3, [sp, #4]
   d7a26:	bd08      	pop	{r3, pc}
   d7a28:	0003024c 	.word	0x0003024c

000d7a2c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7a2c:	b508      	push	{r3, lr}
   d7a2e:	4b02      	ldr	r3, [pc, #8]	; (d7a38 <HAL_USB_USART_Is_Enabled+0xc>)
   d7a30:	681b      	ldr	r3, [r3, #0]
   d7a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a34:	9301      	str	r3, [sp, #4]
   d7a36:	bd08      	pop	{r3, pc}
   d7a38:	0003024c 	.word	0x0003024c

000d7a3c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7a3c:	b508      	push	{r3, lr}
   d7a3e:	4b02      	ldr	r3, [pc, #8]	; (d7a48 <log_message+0xc>)
   d7a40:	681b      	ldr	r3, [r3, #0]
   d7a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7a44:	9301      	str	r3, [sp, #4]
   d7a46:	bd08      	pop	{r3, pc}
   d7a48:	00030260 	.word	0x00030260

000d7a4c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7a4c:	b508      	push	{r3, lr}
   d7a4e:	4b02      	ldr	r3, [pc, #8]	; (d7a58 <system_mode+0xc>)
   d7a50:	681b      	ldr	r3, [r3, #0]
   d7a52:	681b      	ldr	r3, [r3, #0]
   d7a54:	9301      	str	r3, [sp, #4]
   d7a56:	bd08      	pop	{r3, pc}
   d7a58:	00030220 	.word	0x00030220

000d7a5c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7a5c:	b508      	push	{r3, lr}
   d7a5e:	4b02      	ldr	r3, [pc, #8]	; (d7a68 <set_system_mode+0xc>)
   d7a60:	681b      	ldr	r3, [r3, #0]
   d7a62:	685b      	ldr	r3, [r3, #4]
   d7a64:	9301      	str	r3, [sp, #4]
   d7a66:	bd08      	pop	{r3, pc}
   d7a68:	00030220 	.word	0x00030220

000d7a6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7a6c:	b508      	push	{r3, lr}
   d7a6e:	4b02      	ldr	r3, [pc, #8]	; (d7a78 <system_delay_ms+0xc>)
   d7a70:	681b      	ldr	r3, [r3, #0]
   d7a72:	695b      	ldr	r3, [r3, #20]
   d7a74:	9301      	str	r3, [sp, #4]
   d7a76:	bd08      	pop	{r3, pc}
   d7a78:	00030220 	.word	0x00030220

000d7a7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7a7c:	b508      	push	{r3, lr}
   d7a7e:	4b02      	ldr	r3, [pc, #8]	; (d7a88 <application_thread_current+0xc>)
   d7a80:	681b      	ldr	r3, [r3, #0]
   d7a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7a84:	9301      	str	r3, [sp, #4]
   d7a86:	bd08      	pop	{r3, pc}
   d7a88:	00030220 	.word	0x00030220

000d7a8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7a8c:	b508      	push	{r3, lr}
   d7a8e:	4b02      	ldr	r3, [pc, #8]	; (d7a98 <application_thread_invoke+0xc>)
   d7a90:	681b      	ldr	r3, [r3, #0]
   d7a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7a94:	9301      	str	r3, [sp, #4]
   d7a96:	bd08      	pop	{r3, pc}
   d7a98:	00030220 	.word	0x00030220

000d7a9c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7a9c:	b508      	push	{r3, lr}
   d7a9e:	4b02      	ldr	r3, [pc, #8]	; (d7aa8 <system_thread_get_state+0xc>)
   d7aa0:	681b      	ldr	r3, [r3, #0]
   d7aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7aa4:	9301      	str	r3, [sp, #4]
   d7aa6:	bd08      	pop	{r3, pc}
   d7aa8:	00030220 	.word	0x00030220

000d7aac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7aac:	b508      	push	{r3, lr}
   d7aae:	4b03      	ldr	r3, [pc, #12]	; (d7abc <system_ctrl_set_app_request_handler+0x10>)
   d7ab0:	681b      	ldr	r3, [r3, #0]
   d7ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7ab6:	9301      	str	r3, [sp, #4]
   d7ab8:	bd08      	pop	{r3, pc}
   d7aba:	0000      	.short	0x0000
   d7abc:	00030220 	.word	0x00030220

000d7ac0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7ac0:	b508      	push	{r3, lr}
   d7ac2:	4b03      	ldr	r3, [pc, #12]	; (d7ad0 <system_ctrl_set_result+0x10>)
   d7ac4:	681b      	ldr	r3, [r3, #0]
   d7ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7aca:	9301      	str	r3, [sp, #4]
   d7acc:	bd08      	pop	{r3, pc}
   d7ace:	0000      	.short	0x0000
   d7ad0:	00030220 	.word	0x00030220

000d7ad4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7ad4:	b508      	push	{r3, lr}
   d7ad6:	4b02      	ldr	r3, [pc, #8]	; (d7ae0 <network_connect+0xc>)
   d7ad8:	681b      	ldr	r3, [r3, #0]
   d7ada:	685b      	ldr	r3, [r3, #4]
   d7adc:	9301      	str	r3, [sp, #4]
   d7ade:	bd08      	pop	{r3, pc}
   d7ae0:	00030240 	.word	0x00030240

000d7ae4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7ae4:	b508      	push	{r3, lr}
   d7ae6:	4b02      	ldr	r3, [pc, #8]	; (d7af0 <network_connecting+0xc>)
   d7ae8:	681b      	ldr	r3, [r3, #0]
   d7aea:	689b      	ldr	r3, [r3, #8]
   d7aec:	9301      	str	r3, [sp, #4]
   d7aee:	bd08      	pop	{r3, pc}
   d7af0:	00030240 	.word	0x00030240

000d7af4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7af4:	b508      	push	{r3, lr}
   d7af6:	4b02      	ldr	r3, [pc, #8]	; (d7b00 <network_disconnect+0xc>)
   d7af8:	681b      	ldr	r3, [r3, #0]
   d7afa:	68db      	ldr	r3, [r3, #12]
   d7afc:	9301      	str	r3, [sp, #4]
   d7afe:	bd08      	pop	{r3, pc}
   d7b00:	00030240 	.word	0x00030240

000d7b04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7b04:	b508      	push	{r3, lr}
   d7b06:	4b02      	ldr	r3, [pc, #8]	; (d7b10 <network_ready+0xc>)
   d7b08:	681b      	ldr	r3, [r3, #0]
   d7b0a:	691b      	ldr	r3, [r3, #16]
   d7b0c:	9301      	str	r3, [sp, #4]
   d7b0e:	bd08      	pop	{r3, pc}
   d7b10:	00030240 	.word	0x00030240

000d7b14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7b14:	b508      	push	{r3, lr}
   d7b16:	4b02      	ldr	r3, [pc, #8]	; (d7b20 <network_on+0xc>)
   d7b18:	681b      	ldr	r3, [r3, #0]
   d7b1a:	695b      	ldr	r3, [r3, #20]
   d7b1c:	9301      	str	r3, [sp, #4]
   d7b1e:	bd08      	pop	{r3, pc}
   d7b20:	00030240 	.word	0x00030240

000d7b24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7b24:	b508      	push	{r3, lr}
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <network_off+0xc>)
   d7b28:	681b      	ldr	r3, [r3, #0]
   d7b2a:	699b      	ldr	r3, [r3, #24]
   d7b2c:	9301      	str	r3, [sp, #4]
   d7b2e:	bd08      	pop	{r3, pc}
   d7b30:	00030240 	.word	0x00030240

000d7b34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7b34:	b508      	push	{r3, lr}
   d7b36:	4b02      	ldr	r3, [pc, #8]	; (d7b40 <network_listen+0xc>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	69db      	ldr	r3, [r3, #28]
   d7b3c:	9301      	str	r3, [sp, #4]
   d7b3e:	bd08      	pop	{r3, pc}
   d7b40:	00030240 	.word	0x00030240

000d7b44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7b44:	b508      	push	{r3, lr}
   d7b46:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <network_listening+0xc>)
   d7b48:	681b      	ldr	r3, [r3, #0]
   d7b4a:	6a1b      	ldr	r3, [r3, #32]
   d7b4c:	9301      	str	r3, [sp, #4]
   d7b4e:	bd08      	pop	{r3, pc}
   d7b50:	00030240 	.word	0x00030240

000d7b54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7b54:	b508      	push	{r3, lr}
   d7b56:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <network_set_listen_timeout+0xc>)
   d7b58:	681b      	ldr	r3, [r3, #0]
   d7b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b5c:	9301      	str	r3, [sp, #4]
   d7b5e:	bd08      	pop	{r3, pc}
   d7b60:	00030240 	.word	0x00030240

000d7b64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7b64:	b508      	push	{r3, lr}
   d7b66:	4b02      	ldr	r3, [pc, #8]	; (d7b70 <network_get_listen_timeout+0xc>)
   d7b68:	681b      	ldr	r3, [r3, #0]
   d7b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b6c:	9301      	str	r3, [sp, #4]
   d7b6e:	bd08      	pop	{r3, pc}
   d7b70:	00030240 	.word	0x00030240

000d7b74 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7b74:	b508      	push	{r3, lr}
   d7b76:	4b02      	ldr	r3, [pc, #8]	; (d7b80 <spark_process+0xc>)
   d7b78:	681b      	ldr	r3, [r3, #0]
   d7b7a:	689b      	ldr	r3, [r3, #8]
   d7b7c:	9301      	str	r3, [sp, #4]
   d7b7e:	bd08      	pop	{r3, pc}
   d7b80:	00030244 	.word	0x00030244

000d7b84 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7b84:	b508      	push	{r3, lr}
   d7b86:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <spark_cloud_flag_connected+0xc>)
   d7b88:	681b      	ldr	r3, [r3, #0]
   d7b8a:	695b      	ldr	r3, [r3, #20]
   d7b8c:	9301      	str	r3, [sp, #4]
   d7b8e:	bd08      	pop	{r3, pc}
   d7b90:	00030244 	.word	0x00030244

000d7b94 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7b94:	b508      	push	{r3, lr}
   d7b96:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <spark_deviceID+0xc>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	69db      	ldr	r3, [r3, #28]
   d7b9c:	9301      	str	r3, [sp, #4]
   d7b9e:	bd08      	pop	{r3, pc}
   d7ba0:	00030244 	.word	0x00030244

000d7ba4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7ba4:	b508      	push	{r3, lr}
   d7ba6:	4b02      	ldr	r3, [pc, #8]	; (d7bb0 <spark_send_event+0xc>)
   d7ba8:	681b      	ldr	r3, [r3, #0]
   d7baa:	6a1b      	ldr	r3, [r3, #32]
   d7bac:	9301      	str	r3, [sp, #4]
   d7bae:	bd08      	pop	{r3, pc}
   d7bb0:	00030244 	.word	0x00030244

000d7bb4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <spark_sync_time_pending+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	00030244 	.word	0x00030244

000d7bc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	00030244 	.word	0x00030244

000d7bd4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <malloc+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	681b      	ldr	r3, [r3, #0]
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	0003021c 	.word	0x0003021c

000d7be4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <free+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	685b      	ldr	r3, [r3, #4]
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	0003021c 	.word	0x0003021c

000d7bf4 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <sprintf+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	68db      	ldr	r3, [r3, #12]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	0003021c 	.word	0x0003021c

000d7c04 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <snprintf+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	69db      	ldr	r3, [r3, #28]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	0003021c 	.word	0x0003021c

000d7c14 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <abort+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	0003021c 	.word	0x0003021c

000d7c24 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <_malloc_r+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	0003021c 	.word	0x0003021c

000d7c34 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <__errno+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	0003021c 	.word	0x0003021c

000d7c44 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <newlib_impure_ptr_callback+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	0003021c 	.word	0x0003021c

000d7c54 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <localtime_r+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	0003021c 	.word	0x0003021c

000d7c64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c64:	2200      	movs	r2, #0
   d7c66:	6840      	ldr	r0, [r0, #4]
   d7c68:	4611      	mov	r1, r2
   d7c6a:	f7ff bf6b 	b.w	d7b44 <network_listening>

000d7c6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7c6e:	2200      	movs	r2, #0
   d7c70:	6840      	ldr	r0, [r0, #4]
   d7c72:	4611      	mov	r1, r2
   d7c74:	f7ff bf76 	b.w	d7b64 <network_get_listen_timeout>

000d7c78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7c78:	6840      	ldr	r0, [r0, #4]
   d7c7a:	2200      	movs	r2, #0
   d7c7c:	f7ff bf6a 	b.w	d7b54 <network_set_listen_timeout>

000d7c80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c80:	6840      	ldr	r0, [r0, #4]
   d7c82:	2200      	movs	r2, #0
   d7c84:	f081 0101 	eor.w	r1, r1, #1
   d7c88:	f7ff bf54 	b.w	d7b34 <network_listen>

000d7c8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7c8c:	2300      	movs	r3, #0
   d7c8e:	6840      	ldr	r0, [r0, #4]
   d7c90:	461a      	mov	r2, r3
   d7c92:	4619      	mov	r1, r3
   d7c94:	f7ff bf46 	b.w	d7b24 <network_off>

000d7c98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7c98:	2300      	movs	r3, #0
   d7c9a:	6840      	ldr	r0, [r0, #4]
   d7c9c:	461a      	mov	r2, r3
   d7c9e:	4619      	mov	r1, r3
   d7ca0:	f7ff bf38 	b.w	d7b14 <network_on>

000d7ca4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7ca4:	2200      	movs	r2, #0
   d7ca6:	6840      	ldr	r0, [r0, #4]
   d7ca8:	4611      	mov	r1, r2
   d7caa:	f7ff bf2b 	b.w	d7b04 <network_ready>

000d7cae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7cae:	2200      	movs	r2, #0
   d7cb0:	6840      	ldr	r0, [r0, #4]
   d7cb2:	4611      	mov	r1, r2
   d7cb4:	f7ff bf16 	b.w	d7ae4 <network_connecting>

000d7cb8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7cb8:	6840      	ldr	r0, [r0, #4]
   d7cba:	2200      	movs	r2, #0
   d7cbc:	2102      	movs	r1, #2
   d7cbe:	f7ff bf19 	b.w	d7af4 <network_disconnect>

000d7cc2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7cc2:	2300      	movs	r3, #0
   d7cc4:	6840      	ldr	r0, [r0, #4]
   d7cc6:	461a      	mov	r2, r3
   d7cc8:	f7ff bf04 	b.w	d7ad4 <network_connect>

000d7ccc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7ccc:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7cce:	2203      	movs	r2, #3
   d7cd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7cd2:	4a02      	ldr	r2, [pc, #8]	; (d7cdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7cd4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7cd6:	4770      	bx	lr
   d7cd8:	2003e5e0 	.word	0x2003e5e0
   d7cdc:	000de63c 	.word	0x000de63c

000d7ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	4604      	mov	r4, r0
   d7ce4:	4608      	mov	r0, r1
{
    _spi = spi;
   d7ce6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7ce8:	f7ff fe50 	bl	d798c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7cec:	2300      	movs	r3, #0
   d7cee:	6063      	str	r3, [r4, #4]
}
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	bd10      	pop	{r4, pc}

000d7cf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7cf4:	b510      	push	{r4, lr}
   d7cf6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7cf8:	6800      	ldr	r0, [r0, #0]
   d7cfa:	b118      	cbz	r0, d7d04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7cfc:	f7ff ff72 	bl	d7be4 <free>
            wakeupSource_ = nullptr;
   d7d00:	2300      	movs	r3, #0
   d7d02:	6023      	str	r3, [r4, #0]
        }
    }
   d7d04:	bd10      	pop	{r4, pc}

000d7d06 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7d06:	b510      	push	{r4, lr}
   d7d08:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7d0a:	f7ff fff3 	bl	d7cf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d7d0e:	4620      	mov	r0, r4
   d7d10:	bd10      	pop	{r4, pc}
	...

000d7d14 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7d14:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7d16:	4b09      	ldr	r3, [pc, #36]	; (d7d3c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7d18:	4c09      	ldr	r4, [pc, #36]	; (d7d40 <_GLOBAL__sub_I_System+0x2c>)
   d7d1a:	2202      	movs	r2, #2
   d7d1c:	2000      	movs	r0, #0
   d7d1e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7d20:	4b08      	ldr	r3, [pc, #32]	; (d7d44 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7d22:	6020      	str	r0, [r4, #0]
   d7d24:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7d26:	71a0      	strb	r0, [r4, #6]
   d7d28:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7d2a:	f7ff fe97 	bl	d7a5c <set_system_mode>
SystemClass System;
   d7d2e:	4620      	mov	r0, r4
   d7d30:	4a05      	ldr	r2, [pc, #20]	; (d7d48 <_GLOBAL__sub_I_System+0x34>)
   d7d32:	4906      	ldr	r1, [pc, #24]	; (d7d4c <_GLOBAL__sub_I_System+0x38>)
   d7d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7d38:	f001 bf00 	b.w	d9b3c <__aeabi_atexit>
   d7d3c:	2003e5f4 	.word	0x2003e5f4
   d7d40:	2003e5e8 	.word	0x2003e5e8
   d7d44:	ffff0000 	.word	0xffff0000
   d7d48:	2003e128 	.word	0x2003e128
   d7d4c:	000d7d07 	.word	0x000d7d07

000d7d50 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7d50:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7d52:	6804      	ldr	r4, [r0, #0]
   d7d54:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7d56:	46a4      	mov	ip, r4
    }
   d7d58:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7d5c:	4760      	bx	ip

000d7d5e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d7d5e:	6803      	ldr	r3, [r0, #0]
   d7d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d62:	4718      	bx	r3

000d7d64 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7d64:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7d66:	4770      	bx	lr

000d7d68 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7d68:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d7d6a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d7d6c:	1a10      	subs	r0, r2, r0
   d7d6e:	4770      	bx	lr

000d7d70 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7d70:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d7d72:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d7d74:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d7d78:	68db      	ldr	r3, [r3, #12]
   d7d7a:	2201      	movs	r2, #1
   d7d7c:	f10d 0107 	add.w	r1, sp, #7
   d7d80:	4798      	blx	r3
}
   d7d82:	b003      	add	sp, #12
   d7d84:	f85d fb04 	ldr.w	pc, [sp], #4

000d7d88 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7d88:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7d8a:	6803      	ldr	r3, [r0, #0]
   d7d8c:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d7d8e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d7d90:	4798      	blx	r3
   d7d92:	b128      	cbz	r0, d7da0 <_ZN3UDP4readEv+0x18>
   d7d94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7d96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7d98:	1c59      	adds	r1, r3, #1
   d7d9a:	86e1      	strh	r1, [r4, #54]	; 0x36
   d7d9c:	5cd0      	ldrb	r0, [r2, r3]
}
   d7d9e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d7da0:	f04f 30ff 	mov.w	r0, #4294967295
   d7da4:	e7fb      	b.n	d7d9e <_ZN3UDP4readEv+0x16>

000d7da6 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7da6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d7da8:	6803      	ldr	r3, [r0, #0]
   d7daa:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d7dac:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d7dae:	4798      	blx	r3
   d7db0:	b118      	cbz	r0, d7dba <_ZN3UDP4peekEv+0x14>
   d7db2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7db4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7db6:	5cd0      	ldrb	r0, [r2, r3]
}
   d7db8:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d7dba:	f04f 30ff 	mov.w	r0, #4294967295
   d7dbe:	e7fb      	b.n	d7db8 <_ZN3UDP4peekEv+0x12>

000d7dc0 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d7dc0:	4770      	bx	lr

000d7dc2 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d7dc2:	b410      	push	{r4}
   d7dc4:	4603      	mov	r3, r0
   d7dc6:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7dc8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d7dca:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d7dcc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d7dce:	6803      	ldr	r3, [r0, #0]
   d7dd0:	1a52      	subs	r2, r2, r1
   d7dd2:	68db      	ldr	r3, [r3, #12]
   d7dd4:	4421      	add	r1, r4
}
   d7dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d7dda:	4718      	bx	r3

000d7ddc <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d7ddc:	f1a0 0010 	sub.w	r0, r0, #16
   d7de0:	f7ff bfef 	b.w	d7dc2 <_ZNK3UDP7printToER5Print>

000d7de4 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7de4:	b570      	push	{r4, r5, r6, lr}
    stop();
   d7de6:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7de8:	b08c      	sub	sp, #48	; 0x30
    stop();
   d7dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7dec:	4604      	mov	r4, r0
   d7dee:	460e      	mov	r6, r1
   d7df0:	4615      	mov	r5, r2
    stop();
   d7df2:	4798      	blx	r3
    const int one = 1;
   d7df4:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d7df6:	221c      	movs	r2, #28
   d7df8:	2100      	movs	r1, #0
   d7dfa:	a805      	add	r0, sp, #20
    const int one = 1;
   d7dfc:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d7dfe:	f003 ffb3 	bl	dbd68 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7e02:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d7e06:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d7e08:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d7e0c:	f7ff fcf6 	bl	d77fc <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e10:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d7e12:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e16:	2102      	movs	r1, #2
   d7e18:	200a      	movs	r0, #10
   d7e1a:	f7ff fdaf 	bl	d797c <sock_socket>
    if (_sock < 0) {
   d7e1e:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e20:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d7e22:	db25      	blt.n	d7e70 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7e24:	2204      	movs	r2, #4
   d7e26:	9200      	str	r2, [sp, #0]
   d7e28:	ab02      	add	r3, sp, #8
   d7e2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e2e:	f7ff fd6d 	bl	d790c <sock_setsockopt>
   d7e32:	b9e8      	cbnz	r0, d7e70 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d7e34:	b195      	cbz	r5, d7e5c <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d7e36:	9003      	str	r0, [sp, #12]
   d7e38:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d7e3c:	a903      	add	r1, sp, #12
   d7e3e:	b2e8      	uxtb	r0, r5
   d7e40:	f7ff fc7c 	bl	d773c <if_index_to_name>
   d7e44:	b9a0      	cbnz	r0, d7e70 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7e46:	2306      	movs	r3, #6
   d7e48:	9300      	str	r3, [sp, #0]
   d7e4a:	6960      	ldr	r0, [r4, #20]
   d7e4c:	ab03      	add	r3, sp, #12
   d7e4e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7e52:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e56:	f7ff fd59 	bl	d790c <sock_setsockopt>
   d7e5a:	b948      	cbnz	r0, d7e70 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d7e5c:	6960      	ldr	r0, [r4, #20]
   d7e5e:	221c      	movs	r2, #28
   d7e60:	a905      	add	r1, sp, #20
   d7e62:	f7ff fd4b 	bl	d78fc <sock_bind>
   d7e66:	b918      	cbnz	r0, d7e70 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d7e68:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d7e6a:	2001      	movs	r0, #1
}
   d7e6c:	b00c      	add	sp, #48	; 0x30
   d7e6e:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d7e70:	6823      	ldr	r3, [r4, #0]
   d7e72:	4620      	mov	r0, r4
   d7e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e76:	4798      	blx	r3
   d7e78:	2000      	movs	r0, #0
   d7e7a:	e7f7      	b.n	d7e6c <_ZN3UDP5beginEtm+0x88>

000d7e7c <_ZN3UDP4stopEv>:
void UDP::stop() {
   d7e7c:	b510      	push	{r4, lr}
   d7e7e:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d7e80:	6940      	ldr	r0, [r0, #20]
   d7e82:	2800      	cmp	r0, #0
   d7e84:	db01      	blt.n	d7e8a <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d7e86:	f7ff fd49 	bl	d791c <sock_close>
    _sock = -1;
   d7e8a:	f04f 33ff 	mov.w	r3, #4294967295
   d7e8e:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d7e90:	2300      	movs	r3, #0
   d7e92:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7e94:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d7e96:	bd10      	pop	{r4, pc}

000d7e98 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d7e98:	b570      	push	{r4, r5, r6, lr}
   d7e9a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7e9c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d7e9e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d7ea0:	b168      	cbz	r0, d7ebe <_ZN3UDP5writeEPKhj+0x26>
   d7ea2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d7ea4:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d7ea6:	4294      	cmp	r4, r2
   d7ea8:	bf28      	it	cs
   d7eaa:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d7eac:	4622      	mov	r2, r4
   d7eae:	4430      	add	r0, r6
   d7eb0:	f003 ff4c 	bl	dbd4c <memcpy>
    _offset += size;
   d7eb4:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d7eb6:	4423      	add	r3, r4
   d7eb8:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d7eba:	4620      	mov	r0, r4
   d7ebc:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7ebe:	4604      	mov	r4, r0
   d7ec0:	e7f1      	b.n	d7ea6 <_ZN3UDP5writeEPKhj+0xe>

000d7ec2 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d7ec2:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d7ec4:	6803      	ldr	r3, [r0, #0]
   d7ec6:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d7ec8:	4604      	mov	r4, r0
   d7eca:	460f      	mov	r7, r1
   d7ecc:	4616      	mov	r6, r2
    if (available()) {
   d7ece:	4798      	blx	r3
   d7ed0:	b190      	cbz	r0, d7ef8 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d7ed2:	6823      	ldr	r3, [r4, #0]
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	691b      	ldr	r3, [r3, #16]
   d7ed8:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d7eda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7edc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7ede:	4286      	cmp	r6, r0
   d7ee0:	bfa8      	it	ge
   d7ee2:	4606      	movge	r6, r0
   d7ee4:	4419      	add	r1, r3
   d7ee6:	4632      	mov	r2, r6
   d7ee8:	4638      	mov	r0, r7
   d7eea:	f003 ff2f 	bl	dbd4c <memcpy>
        _offset += read;
   d7eee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7ef0:	4433      	add	r3, r6
   d7ef2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d7ef4:	4630      	mov	r0, r6
   d7ef6:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d7ef8:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   d7efc:	e7fa      	b.n	d7ef4 <_ZN3UDP4readEPhj+0x32>
	...

000d7f00 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d7f00:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f02:	4604      	mov	r4, r0
   d7f04:	4b05      	ldr	r3, [pc, #20]	; (d7f1c <_ZN3UDP8remoteIPEv+0x1c>)
   d7f06:	f844 3b04 	str.w	r3, [r4], #4
   d7f0a:	f101 0520 	add.w	r5, r1, #32
   d7f0e:	4606      	mov	r6, r0
   d7f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f14:	682b      	ldr	r3, [r5, #0]
   d7f16:	7023      	strb	r3, [r4, #0]
   d7f18:	4630      	mov	r0, r6
   d7f1a:	bd70      	pop	{r4, r5, r6, pc}
   d7f1c:	000de758 	.word	0x000de758

000d7f20 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f22:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f24:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f26:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f28:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d7f2a:	4a0a      	ldr	r2, [pc, #40]	; (d7f54 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d7f2c:	9202      	str	r2, [sp, #8]
   d7f2e:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f30:	468c      	mov	ip, r1
   d7f32:	4606      	mov	r6, r0
   d7f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f36:	ad03      	add	r5, sp, #12
   d7f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f3a:	6823      	ldr	r3, [r4, #0]
   d7f3c:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f3e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7f42:	9300      	str	r3, [sp, #0]
   d7f44:	4672      	mov	r2, lr
   d7f46:	ab02      	add	r3, sp, #8
   d7f48:	4661      	mov	r1, ip
   d7f4a:	4630      	mov	r0, r6
   d7f4c:	47b8      	blx	r7
    }
   d7f4e:	b009      	add	sp, #36	; 0x24
   d7f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f52:	bf00      	nop
   d7f54:	000de758 	.word	0x000de758

000d7f58 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d7f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7f5a:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d7f5c:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7f5e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7f60:	4b0c      	ldr	r3, [pc, #48]	; (d7f94 <_ZN3UDP9endPacketEv+0x3c>)
   d7f62:	9302      	str	r3, [sp, #8]
   d7f64:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d7f68:	4604      	mov	r4, r0
   d7f6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7f6c:	ad03      	add	r5, sp, #12
   d7f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f70:	6833      	ldr	r3, [r6, #0]
   d7f72:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7f74:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d7f76:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d7f78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7f7a:	9300      	str	r3, [sp, #0]
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	ab02      	add	r3, sp, #8
   d7f80:	47b8      	blx	r7
    flush(); // wait for send to complete
   d7f82:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7f84:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d7f86:	69db      	ldr	r3, [r3, #28]
   d7f88:	4620      	mov	r0, r4
   d7f8a:	4798      	blx	r3
}
   d7f8c:	4628      	mov	r0, r5
   d7f8e:	b009      	add	sp, #36	; 0x24
   d7f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f92:	bf00      	nop
   d7f94:	000de758 	.word	0x000de758

000d7f98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d7f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d7f9a:	7843      	ldrb	r3, [r0, #1]
   d7f9c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d7f9e:	b08d      	sub	sp, #52	; 0x34
   d7fa0:	4605      	mov	r5, r0
   d7fa2:	460c      	mov	r4, r1
   d7fa4:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d7fa6:	d104      	bne.n	d7fb2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7fa8:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7faa:	4620      	mov	r0, r4
   d7fac:	f000 ff74 	bl	d8e98 <_ZN9IPAddressaSEPKh>
   d7fb0:	e022      	b.n	d7ff8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d7fb2:	2b0a      	cmp	r3, #10
   d7fb4:	d125      	bne.n	d8002 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d7fb6:	2211      	movs	r2, #17
   d7fb8:	2100      	movs	r1, #0
   d7fba:	a801      	add	r0, sp, #4
   d7fbc:	f003 fed4 	bl	dbd68 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7fc0:	68ab      	ldr	r3, [r5, #8]
   d7fc2:	b303      	cbz	r3, d8006 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7fc4:	f105 0308 	add.w	r3, r5, #8
   d7fc8:	ae01      	add	r6, sp, #4
   d7fca:	f105 0c18 	add.w	ip, r5, #24
   d7fce:	6818      	ldr	r0, [r3, #0]
   d7fd0:	6859      	ldr	r1, [r3, #4]
   d7fd2:	4632      	mov	r2, r6
   d7fd4:	c203      	stmia	r2!, {r0, r1}
   d7fd6:	3308      	adds	r3, #8
   d7fd8:	4563      	cmp	r3, ip
   d7fda:	4616      	mov	r6, r2
   d7fdc:	d1f7      	bne.n	d7fce <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d7fde:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7fe0:	a901      	add	r1, sp, #4
   d7fe2:	a806      	add	r0, sp, #24
   d7fe4:	ae07      	add	r6, sp, #28
            a.v = 6;
   d7fe6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7fea:	f000 ff13 	bl	d8e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7fee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7ff0:	3404      	adds	r4, #4
   d7ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ff4:	6833      	ldr	r3, [r6, #0]
   d7ff6:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d7ff8:	b11f      	cbz	r7, d8002 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d7ffa:	8868      	ldrh	r0, [r5, #2]
   d7ffc:	f7ff fbf6 	bl	d77ec <inet_ntohs>
   d8000:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d8002:	b00d      	add	sp, #52	; 0x34
   d8004:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8006:	68eb      	ldr	r3, [r5, #12]
   d8008:	2b00      	cmp	r3, #0
   d800a:	d1db      	bne.n	d7fc4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d800c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8010:	692e      	ldr	r6, [r5, #16]
   d8012:	f7ff fbe3 	bl	d77dc <inet_htonl>
   d8016:	4286      	cmp	r6, r0
   d8018:	d1d4      	bne.n	d7fc4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d801a:	f105 0114 	add.w	r1, r5, #20
   d801e:	e7c4      	b.n	d7faa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d8020 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d8020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8024:	4617      	mov	r7, r2
   d8026:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d8028:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d802a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d802c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d802e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8030:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d8032:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8034:	f7ff fb3a 	bl	d76ac <netdb_getaddrinfo>
   d8038:	1e04      	subs	r4, r0, #0
   d803a:	db20      	blt.n	d807e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d803c:	9b01      	ldr	r3, [sp, #4]
   d803e:	b32b      	cbz	r3, d808c <_ZN3UDP11beginPacketEPKct+0x6c>
   d8040:	695b      	ldr	r3, [r3, #20]
   d8042:	b31b      	cbz	r3, d808c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d8044:	a802      	add	r0, sp, #8
   d8046:	f000 fed7 	bl	d8df8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d804a:	9b01      	ldr	r3, [sp, #4]
   d804c:	2200      	movs	r2, #0
   d804e:	6958      	ldr	r0, [r3, #20]
   d8050:	a902      	add	r1, sp, #8
   d8052:	f7ff ffa1 	bl	d7f98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8056:	a802      	add	r0, sp, #8
   d8058:	f000 feee 	bl	d8e38 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d805c:	b1b0      	cbz	r0, d808c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d805e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8060:	ad03      	add	r5, sp, #12
   d8062:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d8066:	4b0b      	ldr	r3, [pc, #44]	; (d8094 <_ZN3UDP11beginPacketEPKct+0x74>)
   d8068:	9308      	str	r3, [sp, #32]
   d806a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d806c:	ac09      	add	r4, sp, #36	; 0x24
   d806e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8070:	682b      	ldr	r3, [r5, #0]
   d8072:	7023      	strb	r3, [r4, #0]
   d8074:	463a      	mov	r2, r7
   d8076:	a908      	add	r1, sp, #32
   d8078:	4630      	mov	r0, r6
   d807a:	47c0      	blx	r8
   d807c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d807e:	9801      	ldr	r0, [sp, #4]
   d8080:	f7ff fb0c 	bl	d769c <netdb_freeaddrinfo>
}
   d8084:	4620      	mov	r0, r4
   d8086:	b00e      	add	sp, #56	; 0x38
   d8088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d808c:	f04f 34ff 	mov.w	r4, #4294967295
   d8090:	e7f5      	b.n	d807e <_ZN3UDP11beginPacketEPKct+0x5e>
   d8092:	bf00      	nop
   d8094:	000de758 	.word	0x000de758

000d8098 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d809c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d80a0:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d80a4:	b090      	sub	sp, #64	; 0x40
   d80a6:	4605      	mov	r5, r0
   d80a8:	460e      	mov	r6, r1
   d80aa:	4690      	mov	r8, r2
   d80ac:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d80ae:	db3c      	blt.n	d812a <_ZN3UDP13receivePacketEPhjm+0x92>
   d80b0:	2900      	cmp	r1, #0
   d80b2:	d03a      	beq.n	d812a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d80b4:	f04f 0a1c 	mov.w	sl, #28
   d80b8:	af09      	add	r7, sp, #36	; 0x24
   d80ba:	4652      	mov	r2, sl
   d80bc:	2100      	movs	r1, #0
   d80be:	4638      	mov	r0, r7
   d80c0:	f003 fe52 	bl	dbd68 <memset>
        socklen_t slen = sizeof(saddr);
   d80c4:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d80c8:	b1dc      	cbz	r4, d8102 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d80ca:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d80cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d80d0:	fbb4 f3f0 	udiv	r3, r4, r0
   d80d4:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d80d8:	fb00 4313 	mls	r3, r0, r3, r4
   d80dc:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d80de:	2310      	movs	r3, #16
            struct timeval tv = {};
   d80e0:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d80e2:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d80e4:	9300      	str	r3, [sp, #0]
   d80e6:	f241 0206 	movw	r2, #4102	; 0x1006
   d80ea:	446b      	add	r3, sp
   d80ec:	f640 71ff 	movw	r1, #4095	; 0xfff
   d80f0:	4648      	mov	r0, r9
   d80f2:	f7ff fc0b 	bl	d790c <sock_setsockopt>
            if (ret) {
   d80f6:	4604      	mov	r4, r0
   d80f8:	b120      	cbz	r0, d8104 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d80fa:	4620      	mov	r0, r4
   d80fc:	b010      	add	sp, #64	; 0x40
   d80fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d8102:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d8104:	ab03      	add	r3, sp, #12
   d8106:	e9cd 7300 	strd	r7, r3, [sp]
   d810a:	6968      	ldr	r0, [r5, #20]
   d810c:	4623      	mov	r3, r4
   d810e:	4642      	mov	r2, r8
   d8110:	4631      	mov	r1, r6
   d8112:	f7ff fc1b 	bl	d794c <sock_recvfrom>
        if (ret >= 0) {
   d8116:	1e04      	subs	r4, r0, #0
   d8118:	dbef      	blt.n	d80fa <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d811a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d811e:	f105 011c 	add.w	r1, r5, #28
   d8122:	4638      	mov	r0, r7
   d8124:	f7ff ff38 	bl	d7f98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d8128:	e7e7      	b.n	d80fa <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d812a:	f04f 34ff 	mov.w	r4, #4294967295
   d812e:	e7e4      	b.n	d80fa <_ZN3UDP13receivePacketEPhjm+0x62>

000d8130 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8130:	b538      	push	{r3, r4, r5, lr}
   d8132:	4605      	mov	r5, r0
   d8134:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d8136:	7d2b      	ldrb	r3, [r5, #20]
   d8138:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d813a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d813c:	d110      	bne.n	d8160 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d813e:	f640 231c 	movw	r3, #2588	; 0xa1c
   d8142:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d8144:	f7ff fb5a 	bl	d77fc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8148:	3408      	adds	r4, #8
   d814a:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d814c:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8150:	3514      	adds	r5, #20
   d8152:	f853 2b04 	ldr.w	r2, [r3], #4
   d8156:	f844 2b04 	str.w	r2, [r4], #4
   d815a:	42ab      	cmp	r3, r5
   d815c:	d1f9      	bne.n	d8152 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d815e:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d8160:	2b04      	cmp	r3, #4
   d8162:	d1fc      	bne.n	d815e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d8164:	f44f 7304 	mov.w	r3, #528	; 0x210
   d8168:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d816a:	f7ff fb47 	bl	d77fc <inet_htons>
   d816e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d8170:	6868      	ldr	r0, [r5, #4]
   d8172:	f7ff fb33 	bl	d77dc <inet_htonl>
   d8176:	6060      	str	r0, [r4, #4]
}
   d8178:	e7f1      	b.n	d815e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d817a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d817a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d817e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d8180:	af03      	add	r7, sp, #12
   d8182:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8186:	4698      	mov	r8, r3
   d8188:	4604      	mov	r4, r0
   d818a:	460d      	mov	r5, r1
   d818c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d818e:	2100      	movs	r1, #0
   d8190:	464a      	mov	r2, r9
   d8192:	4638      	mov	r0, r7
   d8194:	f003 fde8 	bl	dbd68 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8198:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d819c:	463a      	mov	r2, r7
   d819e:	4640      	mov	r0, r8
   d81a0:	f7ff ffc6 	bl	d8130 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d81a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d81a8:	b153      	cbz	r3, d81c0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d81aa:	e9cd 7900 	strd	r7, r9, [sp]
   d81ae:	6960      	ldr	r0, [r4, #20]
   d81b0:	2300      	movs	r3, #0
   d81b2:	4632      	mov	r2, r6
   d81b4:	4629      	mov	r1, r5
   d81b6:	f7ff fbd9 	bl	d796c <sock_sendto>
}
   d81ba:	b00b      	add	sp, #44	; 0x2c
   d81bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d81c0:	f04f 30ff 	mov.w	r0, #4294967295
   d81c4:	e7f9      	b.n	d81ba <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d81c8 <_ZN3UDPC1Ev>:
UDP::UDP()
   d81c8:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d81ca:	2500      	movs	r5, #0
   d81cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d81d0:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d81d4:	4b0b      	ldr	r3, [pc, #44]	; (d8204 <_ZN3UDPC1Ev+0x3c>)
   d81d6:	f103 0208 	add.w	r2, r3, #8
   d81da:	336c      	adds	r3, #108	; 0x6c
   d81dc:	6103      	str	r3, [r0, #16]
   d81de:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   d81e2:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d81e4:	6002      	str	r2, [r0, #0]
   d81e6:	6143      	str	r3, [r0, #20]
   d81e8:	301c      	adds	r0, #28
   d81ea:	f000 fe05 	bl	d8df8 <_ZN9IPAddressC1Ev>
   d81ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   d81f2:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d81f6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d81f8:	8725      	strh	r5, [r4, #56]	; 0x38
   d81fa:	63e5      	str	r5, [r4, #60]	; 0x3c
   d81fc:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d8200:	4620      	mov	r0, r4
   d8202:	bd38      	pop	{r3, r4, r5, pc}
   d8204:	000de668 	.word	0x000de668

000d8208 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d8208:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d820a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d820e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8210:	b123      	cbz	r3, d821c <_ZN3UDP13releaseBufferEv+0x14>
   d8212:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8214:	b110      	cbz	r0, d821c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8216:	2101      	movs	r1, #1
   d8218:	f001 fc95 	bl	d9b46 <_ZdlPvj>
    _buffer = NULL;
   d821c:	2300      	movs	r3, #0
   d821e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8220:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8224:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d8226:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8228:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d822a:	bd10      	pop	{r4, pc}

000d822c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d822c:	b570      	push	{r4, r5, r6, lr}
   d822e:	4604      	mov	r4, r0
   d8230:	4616      	mov	r6, r2
   d8232:	460d      	mov	r5, r1
    releaseBuffer();
   d8234:	f7ff ffe8 	bl	d8208 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d8238:	2300      	movs	r3, #0
    _buffer = buffer;
   d823a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d823c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d823e:	b12e      	cbz	r6, d824c <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d8240:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d8242:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8244:	3800      	subs	r0, #0
   d8246:	bf18      	it	ne
   d8248:	2001      	movne	r0, #1
   d824a:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d824c:	2d00      	cmp	r5, #0
   d824e:	d0f8      	beq.n	d8242 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d8250:	4628      	mov	r0, r5
   d8252:	f7fb ff22 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d8256:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d8258:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d825a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d825e:	2800      	cmp	r0, #0
   d8260:	d0ef      	beq.n	d8242 <_ZN3UDP9setBufferEjPh+0x16>
   d8262:	e7ed      	b.n	d8240 <_ZN3UDP9setBufferEjPh+0x14>

000d8264 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8266:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d8268:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d826a:	4605      	mov	r5, r0
   d826c:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d826e:	b91a      	cbnz	r2, d8278 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8270:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8272:	b109      	cbz	r1, d8278 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8274:	f7ff ffda 	bl	d822c <_ZN3UDP9setBufferEjPh>
   d8278:	3404      	adds	r4, #4
   d827a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d827c:	f105 0620 	add.w	r6, r5, #32
   d8280:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8282:	6823      	ldr	r3, [r4, #0]
   d8284:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d8286:	2300      	movs	r3, #0
}
   d8288:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d828a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d828c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d828e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d8290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8292 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d8292:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d8294:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d8296:	4604      	mov	r4, r0
   d8298:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d829a:	b92a      	cbnz	r2, d82a8 <_ZN3UDP11parsePacketEm+0x16>
   d829c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d829e:	b119      	cbz	r1, d82a8 <_ZN3UDP11parsePacketEm+0x16>
   d82a0:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d82a2:	f7ff ffc3 	bl	d822c <_ZN3UDP9setBufferEjPh>
   d82a6:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d82a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d82aa:	2200      	movs	r2, #0
   d82ac:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d82ae:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d82b0:	b141      	cbz	r1, d82c4 <_ZN3UDP11parsePacketEm+0x32>
   d82b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d82b4:	b132      	cbz	r2, d82c4 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d82b6:	6820      	ldr	r0, [r4, #0]
   d82b8:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d82ba:	4620      	mov	r0, r4
   d82bc:	47a8      	blx	r5
        if (result > 0) {
   d82be:	2800      	cmp	r0, #0
            _total = result;
   d82c0:	bfc8      	it	gt
   d82c2:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d82c4:	6823      	ldr	r3, [r4, #0]
   d82c6:	691b      	ldr	r3, [r3, #16]
   d82c8:	4620      	mov	r0, r4
}
   d82ca:	b003      	add	sp, #12
   d82cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d82d0:	4718      	bx	r3

000d82d2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d82d2:	b510      	push	{r4, lr}
   d82d4:	4604      	mov	r4, r0
{
	free(buffer);
   d82d6:	6800      	ldr	r0, [r0, #0]
   d82d8:	f7ff fc84 	bl	d7be4 <free>
}
   d82dc:	4620      	mov	r0, r4
   d82de:	bd10      	pop	{r4, pc}

000d82e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d82e0:	b510      	push	{r4, lr}
          _M_dispose();
   d82e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d82e4:	4604      	mov	r4, r0
          _M_dispose();
   d82e6:	689b      	ldr	r3, [r3, #8]
   d82e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d82ea:	68a3      	ldr	r3, [r4, #8]
   d82ec:	3b01      	subs	r3, #1
   d82ee:	60a3      	str	r3, [r4, #8]
   d82f0:	b92b      	cbnz	r3, d82fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d82f2:	6823      	ldr	r3, [r4, #0]
   d82f4:	4620      	mov	r0, r4
   d82f6:	68db      	ldr	r3, [r3, #12]
    }
   d82f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d82fc:	4718      	bx	r3
    }
   d82fe:	bd10      	pop	{r4, pc}

000d8300 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8300:	b510      	push	{r4, lr}
   d8302:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8304:	6800      	ldr	r0, [r0, #0]
   d8306:	b108      	cbz	r0, d830c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8308:	f7ff fa58 	bl	d77bc <os_mutex_recursive_destroy>
    }
   d830c:	4620      	mov	r0, r4
   d830e:	bd10      	pop	{r4, pc}

000d8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8310:	680b      	ldr	r3, [r1, #0]
   d8312:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8314:	b113      	cbz	r3, d831c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8316:	685a      	ldr	r2, [r3, #4]
   d8318:	3201      	adds	r2, #1
   d831a:	605a      	str	r2, [r3, #4]
      }
   d831c:	4770      	bx	lr

000d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d831e:	b510      	push	{r4, lr}
   d8320:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8322:	6800      	ldr	r0, [r0, #0]
   d8324:	b128      	cbz	r0, d8332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8326:	6843      	ldr	r3, [r0, #4]
   d8328:	3b01      	subs	r3, #1
   d832a:	6043      	str	r3, [r0, #4]
   d832c:	b90b      	cbnz	r3, d8332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d832e:	f7ff ffd7 	bl	d82e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8332:	4620      	mov	r0, r4
   d8334:	bd10      	pop	{r4, pc}
	...

000d8338 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8338:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d833a:	4c06      	ldr	r4, [pc, #24]	; (d8354 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d833c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d833e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8340:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8342:	f7ff fa33 	bl	d77ac <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8346:	4620      	mov	r0, r4
   d8348:	4a03      	ldr	r2, [pc, #12]	; (d8358 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d834a:	4904      	ldr	r1, [pc, #16]	; (d835c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8350:	f001 bbf4 	b.w	d9b3c <__aeabi_atexit>
   d8354:	2003e5f8 	.word	0x2003e5f8
   d8358:	2003e128 	.word	0x2003e128
   d835c:	000d8301 	.word	0x000d8301

000d8360 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8362:	4606      	mov	r6, r0
   d8364:	460d      	mov	r5, r1
  size_t n = 0;
   d8366:	188f      	adds	r7, r1, r2
   d8368:	2400      	movs	r4, #0
  while (size--) {
   d836a:	42bd      	cmp	r5, r7
   d836c:	d00c      	beq.n	d8388 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d836e:	6833      	ldr	r3, [r6, #0]
   d8370:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8374:	689b      	ldr	r3, [r3, #8]
   d8376:	4630      	mov	r0, r6
   d8378:	4798      	blx	r3
     if (chunk>=0)
   d837a:	1e03      	subs	r3, r0, #0
   d837c:	db01      	blt.n	d8382 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d837e:	441c      	add	r4, r3
  while (size--) {
   d8380:	e7f3      	b.n	d836a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8382:	2c00      	cmp	r4, #0
   d8384:	bf08      	it	eq
   d8386:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8388:	4620      	mov	r0, r4
   d838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d838c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d838c:	b513      	push	{r0, r1, r4, lr}
   d838e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8390:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8392:	b159      	cbz	r1, d83ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8394:	9101      	str	r1, [sp, #4]
   d8396:	f003 fd50 	bl	dbe3a <strlen>
   d839a:	6823      	ldr	r3, [r4, #0]
   d839c:	9901      	ldr	r1, [sp, #4]
   d839e:	68db      	ldr	r3, [r3, #12]
   d83a0:	4602      	mov	r2, r0
   d83a2:	4620      	mov	r0, r4
    }
   d83a4:	b002      	add	sp, #8
   d83a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d83aa:	4718      	bx	r3
    }
   d83ac:	b002      	add	sp, #8
   d83ae:	bd10      	pop	{r4, pc}

000d83b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d83b0:	b508      	push	{r3, lr}
  return write(str);
   d83b2:	f7ff ffeb 	bl	d838c <_ZN5Print5writeEPKc>
}
   d83b6:	bd08      	pop	{r3, pc}

000d83b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d83b8:	6803      	ldr	r3, [r0, #0]
   d83ba:	689b      	ldr	r3, [r3, #8]
   d83bc:	4718      	bx	r3

000d83be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d83be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d83c0:	210d      	movs	r1, #13
{
   d83c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d83c4:	f7ff fff8 	bl	d83b8 <_ZN5Print5printEc>
  n += print('\n');
   d83c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d83ca:	4604      	mov	r4, r0
  n += print('\n');
   d83cc:	4628      	mov	r0, r5
   d83ce:	f7ff fff3 	bl	d83b8 <_ZN5Print5printEc>
  return n;
}
   d83d2:	4420      	add	r0, r4
   d83d4:	bd38      	pop	{r3, r4, r5, pc}

000d83d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d83d6:	b538      	push	{r3, r4, r5, lr}
   d83d8:	4605      	mov	r5, r0
  return write(str);
   d83da:	f7ff ffd7 	bl	d838c <_ZN5Print5writeEPKc>
   d83de:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d83e0:	4628      	mov	r0, r5
   d83e2:	f7ff ffec 	bl	d83be <_ZN5Print7printlnEv>
  return n;
}
   d83e6:	4420      	add	r0, r4
   d83e8:	bd38      	pop	{r3, r4, r5, pc}

000d83ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d83ea:	b530      	push	{r4, r5, lr}
   d83ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d83ee:	2300      	movs	r3, #0
   d83f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d83f4:	2a01      	cmp	r2, #1
   d83f6:	bf98      	it	ls
   d83f8:	220a      	movls	r2, #10
   d83fa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d83fc:	460d      	mov	r5, r1
   d83fe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8402:	fb01 5312 	mls	r3, r1, r2, r5
   d8406:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d840a:	2b09      	cmp	r3, #9
   d840c:	bf94      	ite	ls
   d840e:	3330      	addls	r3, #48	; 0x30
   d8410:	3337      	addhi	r3, #55	; 0x37
   d8412:	b2db      	uxtb	r3, r3
  } while(n);
   d8414:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8416:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d841a:	d9ef      	bls.n	d83fc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d841c:	4621      	mov	r1, r4
   d841e:	f7ff ffb5 	bl	d838c <_ZN5Print5writeEPKc>
}
   d8422:	b00b      	add	sp, #44	; 0x2c
   d8424:	bd30      	pop	{r4, r5, pc}

000d8426 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8426:	b510      	push	{r4, lr}
   d8428:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d842a:	f7ff f9a7 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d842e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8430:	6823      	ldr	r3, [r4, #0]
   d8432:	4620      	mov	r0, r4
   d8434:	695b      	ldr	r3, [r3, #20]
   d8436:	4798      	blx	r3
    if (c >= 0) return c;
   d8438:	2800      	cmp	r0, #0
   d843a:	da08      	bge.n	d844e <_ZN6Stream9timedReadEv+0x28>
   d843c:	f7ff f99e 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d8440:	68e3      	ldr	r3, [r4, #12]
   d8442:	1ac0      	subs	r0, r0, r3
   d8444:	68a3      	ldr	r3, [r4, #8]
   d8446:	4298      	cmp	r0, r3
   d8448:	d3f2      	bcc.n	d8430 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d844a:	f04f 30ff 	mov.w	r0, #4294967295
}
   d844e:	bd10      	pop	{r4, pc}

000d8450 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   d8450:	6081      	str	r1, [r0, #8]
}
   d8452:	4770      	bx	lr

000d8454 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d8454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8456:	4606      	mov	r6, r0
   d8458:	460d      	mov	r5, r1
   d845a:	4617      	mov	r7, r2
  size_t count = 0;
   d845c:	2400      	movs	r4, #0
  while (count < length) {
   d845e:	42bc      	cmp	r4, r7
   d8460:	d007      	beq.n	d8472 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d8462:	4630      	mov	r0, r6
   d8464:	f7ff ffdf 	bl	d8426 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d8468:	1e03      	subs	r3, r0, #0
   d846a:	db02      	blt.n	d8472 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d846c:	552b      	strb	r3, [r5, r4]
    count++;
   d846e:	3401      	adds	r4, #1
  while (count < length) {
   d8470:	e7f5      	b.n	d845e <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d8472:	4620      	mov	r0, r4
   d8474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d8478 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8478:	4b01      	ldr	r3, [pc, #4]	; (d8480 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d847a:	4a02      	ldr	r2, [pc, #8]	; (d8484 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d847c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d847e:	4770      	bx	lr
   d8480:	2003e5fc 	.word	0x2003e5fc
   d8484:	000de6e0 	.word	0x000de6e0

000d8488 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d848c:	4a15      	ldr	r2, [pc, #84]	; (d84e4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d848e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d84f0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d8492:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8496:	18c0      	adds	r0, r0, r3
   d8498:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d849c:	4a12      	ldr	r2, [pc, #72]	; (d84e8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d849e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d84a2:	18c6      	adds	r6, r0, r3
   d84a4:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d84a8:	e9d8 2300 	ldrd	r2, r3, [r8]
   d84ac:	42bb      	cmp	r3, r7
   d84ae:	bf08      	it	eq
   d84b0:	42b2      	cmpeq	r2, r6
{
   d84b2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d84b4:	d013      	beq.n	d84de <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d84b6:	a903      	add	r1, sp, #12
   d84b8:	4668      	mov	r0, sp
   d84ba:	e9cd 6700 	strd	r6, r7, [sp]
   d84be:	f7ff fbc9 	bl	d7c54 <localtime_r>
	calendar_time.tm_year += 1900;
   d84c2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d84c4:	4d09      	ldr	r5, [pc, #36]	; (d84ec <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d84c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d84ca:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d84cc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d84ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d84d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d84d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d84d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d84d6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d84da:	6823      	ldr	r3, [r4, #0]
   d84dc:	602b      	str	r3, [r5, #0]
    }
}
   d84de:	b00c      	add	sp, #48	; 0x30
   d84e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84e4:	2003e630 	.word	0x2003e630
   d84e8:	2003e628 	.word	0x2003e628
   d84ec:	2003e604 	.word	0x2003e604
   d84f0:	2003e638 	.word	0x2003e638

000d84f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d84f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d84f6:	2000      	movs	r0, #0
   d84f8:	f7ff fb5c 	bl	d7bb4 <spark_sync_time_pending>
   d84fc:	b128      	cbz	r0, d850a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d84fe:	f7ff fb41 	bl	d7b84 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8502:	f080 0001 	eor.w	r0, r0, #1
   d8506:	b2c0      	uxtb	r0, r0
    }
   d8508:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d850a:	2001      	movs	r0, #1
   d850c:	e7fc      	b.n	d8508 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d850e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d850e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8510:	2000      	movs	r0, #0
   d8512:	f7ff f93b 	bl	d778c <hal_rtc_time_is_valid>
    if (rtcstate)
   d8516:	4604      	mov	r4, r0
   d8518:	b9a0      	cbnz	r0, d8544 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d851a:	f7ff fa97 	bl	d7a4c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d851e:	2801      	cmp	r0, #1
   d8520:	d110      	bne.n	d8544 <_ZN9TimeClass7isValidEv+0x36>
   d8522:	4620      	mov	r0, r4
   d8524:	f7ff faba 	bl	d7a9c <system_thread_get_state>
   d8528:	b960      	cbnz	r0, d8544 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d852a:	f7ff ffe3 	bl	d84f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d852e:	b910      	cbnz	r0, d8536 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8530:	f7ff fb20 	bl	d7b74 <spark_process>
        while (_while() && !_condition()) {
   d8534:	e7f9      	b.n	d852a <_ZN9TimeClass7isValidEv+0x1c>
   d8536:	f7ff ffdd 	bl	d84f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d853a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d853e:	2000      	movs	r0, #0
   d8540:	f7ff b924 	b.w	d778c <hal_rtc_time_is_valid>
}
   d8544:	4620      	mov	r0, r4
   d8546:	bd10      	pop	{r4, pc}

000d8548 <_ZN9TimeClass3nowEv>:
{
   d8548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d854a:	f7ff ffe0 	bl	d850e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d854e:	2210      	movs	r2, #16
   d8550:	2100      	movs	r1, #0
   d8552:	4668      	mov	r0, sp
   d8554:	f003 fc08 	bl	dbd68 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8558:	2100      	movs	r1, #0
   d855a:	4668      	mov	r0, sp
   d855c:	f7ff f91e 	bl	d779c <hal_rtc_get_time>
}
   d8560:	9800      	ldr	r0, [sp, #0]
   d8562:	b005      	add	sp, #20
   d8564:	f85d fb04 	ldr.w	pc, [sp], #4

000d8568 <_ZN9TimeClass6minuteEv>:
{
   d8568:	b508      	push	{r3, lr}
	return minute(now());
   d856a:	f7ff ffed 	bl	d8548 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d856e:	17c1      	asrs	r1, r0, #31
   d8570:	f7ff ff8a 	bl	d8488 <_ZL22Refresh_UnixTime_Cachex>
}
   d8574:	4b01      	ldr	r3, [pc, #4]	; (d857c <_ZN9TimeClass6minuteEv+0x14>)
   d8576:	6858      	ldr	r0, [r3, #4]
   d8578:	bd08      	pop	{r3, pc}
   d857a:	bf00      	nop
   d857c:	2003e604 	.word	0x2003e604

000d8580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8580:	4b02      	ldr	r3, [pc, #8]	; (d858c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8582:	681a      	ldr	r2, [r3, #0]
   d8584:	4b02      	ldr	r3, [pc, #8]	; (d8590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8586:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8588:	4770      	bx	lr
   d858a:	bf00      	nop
   d858c:	2003df4c 	.word	0x2003df4c
   d8590:	2003e600 	.word	0x2003e600

000d8594 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8594:	2100      	movs	r1, #0
   d8596:	f7ff ba69 	b.w	d7a6c <system_delay_ms>

000d859a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d859a:	b510      	push	{r4, lr}
   d859c:	4604      	mov	r4, r0
   d859e:	f7fe fdef 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
   d85a2:	4620      	mov	r0, r4
   d85a4:	bd10      	pop	{r4, pc}

000d85a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d85a6:	b513      	push	{r0, r1, r4, lr}
   d85a8:	460b      	mov	r3, r1
   d85aa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   d85b0:	466c      	mov	r4, sp
   d85b2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d85b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d85ba:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d85be:	e894 0003 	ldmia.w	r4, {r0, r1}
   d85c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d85c6:	b002      	add	sp, #8
   d85c8:	bd10      	pop	{r4, pc}
	...

000d85cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d85cc:	4803      	ldr	r0, [pc, #12]	; (d85dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d85ce:	4a04      	ldr	r2, [pc, #16]	; (d85e0 <_GLOBAL__sub_I_RGB+0x14>)
   d85d0:	4904      	ldr	r1, [pc, #16]	; (d85e4 <_GLOBAL__sub_I_RGB+0x18>)
   d85d2:	2300      	movs	r3, #0
   d85d4:	6083      	str	r3, [r0, #8]
   d85d6:	f001 bab1 	b.w	d9b3c <__aeabi_atexit>
   d85da:	bf00      	nop
   d85dc:	2003e640 	.word	0x2003e640
   d85e0:	2003e128 	.word	0x2003e128
   d85e4:	000d859b 	.word	0x000d859b

000d85e8 <_ZN14CellularSignalD1Ev>:
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d85e8:	4770      	bx	lr

000d85ea <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d85ea:	7d00      	ldrb	r0, [r0, #20]
   d85ec:	4770      	bx	lr

000d85ee <_ZN14CellularSignalD0Ev>:
   d85ee:	b510      	push	{r4, lr}
   d85f0:	2128      	movs	r1, #40	; 0x28
   d85f2:	4604      	mov	r4, r0
   d85f4:	f001 faa7 	bl	d9b46 <_ZdlPvj>
   d85f8:	4620      	mov	r0, r4
   d85fa:	bd10      	pop	{r4, pc}

000d85fc <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d85fc:	7d03      	ldrb	r3, [r0, #20]
   d85fe:	b17b      	cbz	r3, d8620 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8600:	69c3      	ldr	r3, [r0, #28]
   d8602:	2b00      	cmp	r3, #0
   d8604:	db0c      	blt.n	d8620 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8606:	ee07 3a90 	vmov	s15, r3
   d860a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8628 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d860e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8612:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8616:	eddf 7a05 	vldr	s15, [pc, #20]	; d862c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d861a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d861e:	4770      	bx	lr
    }

    return -1.0f;
   d8620:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8624:	4770      	bx	lr
   d8626:	bf00      	nop
   d8628:	477fff00 	.word	0x477fff00
   d862c:	42c80000 	.word	0x42c80000

000d8630 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8630:	7d03      	ldrb	r3, [r0, #20]
   d8632:	b163      	cbz	r3, d864e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8634:	6983      	ldr	r3, [r0, #24]
   d8636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d863a:	d008      	beq.n	d864e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d863c:	ee07 3a90 	vmov	s15, r3
   d8640:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8654 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8648:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d864c:	4770      	bx	lr
    }

    return 0.0f;
   d864e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8658 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d8652:	4770      	bx	lr
   d8654:	42c80000 	.word	0x42c80000
   d8658:	00000000 	.word	0x00000000

000d865c <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d865c:	7d03      	ldrb	r3, [r0, #20]
   d865e:	b17b      	cbz	r3, d8680 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8660:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8662:	2b00      	cmp	r3, #0
   d8664:	db0c      	blt.n	d8680 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8666:	ee07 3a90 	vmov	s15, r3
   d866a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8688 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d866e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8672:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8676:	eddf 7a05 	vldr	s15, [pc, #20]	; d868c <_ZNK14CellularSignal10getQualityEv+0x30>
   d867a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d867e:	4770      	bx	lr
    }

    return -1.0f;
   d8680:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8684:	4770      	bx	lr
   d8686:	bf00      	nop
   d8688:	477fff00 	.word	0x477fff00
   d868c:	42c80000 	.word	0x42c80000

000d8690 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8690:	7d03      	ldrb	r3, [r0, #20]
   d8692:	b163      	cbz	r3, d86ae <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8694:	6a03      	ldr	r3, [r0, #32]
   d8696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d869a:	d008      	beq.n	d86ae <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d869c:	ee07 3a90 	vmov	s15, r3
   d86a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d86b4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d86a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d86a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d86ac:	4770      	bx	lr
    }

    return 0.0f;
   d86ae:	ed9f 0a02 	vldr	s0, [pc, #8]	; d86b8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d86b2:	4770      	bx	lr
   d86b4:	42c80000 	.word	0x42c80000
   d86b8:	00000000 	.word	0x00000000

000d86bc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d86bc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d86be:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d86c0:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d86c2:	da0a      	bge.n	d86da <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d86c4:	212d      	movs	r1, #45	; 0x2d
   d86c6:	f7ff fe77 	bl	d83b8 <_ZN5Print5printEc>
            val = -n;
   d86ca:	4261      	negs	r1, r4
            t = print('-');
   d86cc:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d86ce:	220a      	movs	r2, #10
   d86d0:	4630      	mov	r0, r6
   d86d2:	f7ff fe8a 	bl	d83ea <_ZN5Print11printNumberEmh>
    }
}
   d86d6:	4428      	add	r0, r5
   d86d8:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d86da:	4621      	mov	r1, r4
        size_t t = 0;
   d86dc:	2500      	movs	r5, #0
   d86de:	e7f6      	b.n	d86ce <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d86e0 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d86e0:	b570      	push	{r4, r5, r6, lr}
   d86e2:	460c      	mov	r4, r1
   d86e4:	4605      	mov	r5, r0
   d86e6:	6881      	ldr	r1, [r0, #8]
   d86e8:	4620      	mov	r0, r4
   d86ea:	f7ff ffe7 	bl	d86bc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d86ee:	212c      	movs	r1, #44	; 0x2c
   d86f0:	4606      	mov	r6, r0
   d86f2:	4620      	mov	r0, r4
   d86f4:	f7ff fe60 	bl	d83b8 <_ZN5Print5printEc>
   d86f8:	68e9      	ldr	r1, [r5, #12]
   d86fa:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d86fc:	4620      	mov	r0, r4
   d86fe:	f7ff ffdd 	bl	d86bc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8702:	4430      	add	r0, r6
   d8704:	bd70      	pop	{r4, r5, r6, pc}

000d8706 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8706:	f1a0 0004 	sub.w	r0, r0, #4
   d870a:	f7ff bfe9 	b.w	d86e0 <_ZNK14CellularSignal7printToER5Print>

000d870e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d870e:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8710:	460d      	mov	r5, r1
   d8712:	f100 0410 	add.w	r4, r0, #16
   d8716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d871a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d871e:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8722:	2001      	movs	r0, #1
   d8724:	bd30      	pop	{r4, r5, pc}
	...

000d8728 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8728:	4b01      	ldr	r3, [pc, #4]	; (d8730 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d872a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d872c:	4770      	bx	lr
   d872e:	bf00      	nop
   d8730:	2003df54 	.word	0x2003df54

000d8734 <serialEventRun>:
{
   d8734:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8736:	4b0b      	ldr	r3, [pc, #44]	; (d8764 <serialEventRun+0x30>)
   d8738:	b143      	cbz	r3, d874c <serialEventRun+0x18>
   d873a:	f000 fc1b 	bl	d8f74 <_Z16_fetch_usbserialv>
   d873e:	6803      	ldr	r3, [r0, #0]
   d8740:	691b      	ldr	r3, [r3, #16]
   d8742:	4798      	blx	r3
   d8744:	2800      	cmp	r0, #0
   d8746:	dd01      	ble.n	d874c <serialEventRun+0x18>
        serialEvent();
   d8748:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d874c:	4b06      	ldr	r3, [pc, #24]	; (d8768 <serialEventRun+0x34>)
   d874e:	b143      	cbz	r3, d8762 <serialEventRun+0x2e>
   d8750:	f000 fd14 	bl	d917c <_Z22__fetch_global_Serial1v>
   d8754:	6803      	ldr	r3, [r0, #0]
   d8756:	691b      	ldr	r3, [r3, #16]
   d8758:	4798      	blx	r3
   d875a:	2800      	cmp	r0, #0
   d875c:	dd01      	ble.n	d8762 <serialEventRun+0x2e>
        serialEvent1();
   d875e:	f3af 8000 	nop.w
}
   d8762:	bd08      	pop	{r3, pc}
	...

000d876c <_post_loop>:
{
   d876c:	b508      	push	{r3, lr}
	serialEventRun();
   d876e:	f7ff ffe1 	bl	d8734 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8772:	f7ff f803 	bl	d777c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8776:	4b01      	ldr	r3, [pc, #4]	; (d877c <_post_loop+0x10>)
   d8778:	6018      	str	r0, [r3, #0]
}
   d877a:	bd08      	pop	{r3, pc}
   d877c:	2003e7d4 	.word	0x2003e7d4

000d8780 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8780:	4802      	ldr	r0, [pc, #8]	; (d878c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8782:	4a03      	ldr	r2, [pc, #12]	; (d8790 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8784:	4903      	ldr	r1, [pc, #12]	; (d8794 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8786:	1a12      	subs	r2, r2, r0
   d8788:	f003 bae0 	b.w	dbd4c <memcpy>
   d878c:	2003f400 	.word	0x2003f400
   d8790:	2003f404 	.word	0x2003f404
   d8794:	000deca0 	.word	0x000deca0

000d8798 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8798:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d879a:	2300      	movs	r3, #0
   d879c:	9300      	str	r3, [sp, #0]
   d879e:	461a      	mov	r2, r3
   d87a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d87a4:	f7ff f98c 	bl	d7ac0 <system_ctrl_set_result>
}
   d87a8:	b003      	add	sp, #12
   d87aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d87b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d87b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d87b2:	8843      	ldrh	r3, [r0, #2]
   d87b4:	2b0a      	cmp	r3, #10
   d87b6:	d008      	beq.n	d87ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d87b8:	2b50      	cmp	r3, #80	; 0x50
   d87ba:	d10b      	bne.n	d87d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d87bc:	4b09      	ldr	r3, [pc, #36]	; (d87e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d87be:	681b      	ldr	r3, [r3, #0]
   d87c0:	b14b      	cbz	r3, d87d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d87c2:	b003      	add	sp, #12
   d87c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d87c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d87ca:	f7ff ffe5 	bl	d8798 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d87ce:	b003      	add	sp, #12
   d87d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d87d4:	2300      	movs	r3, #0
   d87d6:	9300      	str	r3, [sp, #0]
   d87d8:	461a      	mov	r2, r3
   d87da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d87de:	f7ff f96f 	bl	d7ac0 <system_ctrl_set_result>
}
   d87e2:	e7f4      	b.n	d87ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d87e4:	2003e654 	.word	0x2003e654

000d87e8 <module_user_init_hook>:
{
   d87e8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d87ea:	4c12      	ldr	r4, [pc, #72]	; (d8834 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d87ec:	4812      	ldr	r0, [pc, #72]	; (d8838 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d87ee:	4d13      	ldr	r5, [pc, #76]	; (d883c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d87f0:	2100      	movs	r1, #0
   d87f2:	f7ff fa27 	bl	d7c44 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d87f6:	6823      	ldr	r3, [r4, #0]
   d87f8:	42ab      	cmp	r3, r5
   d87fa:	4b11      	ldr	r3, [pc, #68]	; (d8840 <module_user_init_hook+0x58>)
   d87fc:	bf0c      	ite	eq
   d87fe:	2201      	moveq	r2, #1
   d8800:	2200      	movne	r2, #0
   d8802:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8804:	d002      	beq.n	d880c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8806:	f7ff ffbb 	bl	d8780 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d880a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d880c:	f7fe ff9e 	bl	d774c <HAL_RNG_GetRandomNumber>
   d8810:	4604      	mov	r4, r0
    srand(seed);
   d8812:	f003 fab1 	bl	dbd78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8816:	4b0b      	ldr	r3, [pc, #44]	; (d8844 <module_user_init_hook+0x5c>)
   d8818:	b113      	cbz	r3, d8820 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d881a:	4620      	mov	r0, r4
   d881c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8820:	2100      	movs	r1, #0
   d8822:	4808      	ldr	r0, [pc, #32]	; (d8844 <module_user_init_hook+0x5c>)
   d8824:	f7ff f9ce 	bl	d7bc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d882c:	4806      	ldr	r0, [pc, #24]	; (d8848 <module_user_init_hook+0x60>)
   d882e:	2100      	movs	r1, #0
   d8830:	f7ff b93c 	b.w	d7aac <system_ctrl_set_app_request_handler>
   d8834:	2003f400 	.word	0x2003f400
   d8838:	000d8729 	.word	0x000d8729
   d883c:	9a271c1e 	.word	0x9a271c1e
   d8840:	2003e650 	.word	0x2003e650
   d8844:	00000000 	.word	0x00000000
   d8848:	000d87b1 	.word	0x000d87b1

000d884c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d884c:	4770      	bx	lr

000d884e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d884e:	2000      	movs	r0, #0
   d8850:	4770      	bx	lr

000d8852 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8852:	b510      	push	{r4, lr}
   d8854:	2110      	movs	r1, #16
   d8856:	4604      	mov	r4, r0
   d8858:	f001 f975 	bl	d9b46 <_ZdlPvj>
   d885c:	4620      	mov	r0, r4
   d885e:	bd10      	pop	{r4, pc}

000d8860 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8860:	b508      	push	{r3, lr}
      { delete this; }
   d8862:	f7ff fff6 	bl	d8852 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8866:	bd08      	pop	{r3, pc}

000d8868 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8868:	b530      	push	{r4, r5, lr}
        type_(type) {
   d886a:	2200      	movs	r2, #0
   d886c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8870:	6002      	str	r2, [r0, #0]
   d8872:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8874:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8876:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8878:	680c      	ldr	r4, [r1, #0]
   d887a:	8085      	strh	r5, [r0, #4]
   d887c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d887e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8880:	bd30      	pop	{r4, r5, pc}

000d8882 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8882:	b510      	push	{r4, lr}
   d8884:	4604      	mov	r4, r0
    free((void*)msg_);
   d8886:	6800      	ldr	r0, [r0, #0]
   d8888:	f7ff f9ac 	bl	d7be4 <free>
}
   d888c:	4620      	mov	r0, r4
   d888e:	bd10      	pop	{r4, pc}

000d8890 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8890:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8892:	68c4      	ldr	r4, [r0, #12]
   d8894:	b1f4      	cbz	r4, d88d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8896:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8898:	2b02      	cmp	r3, #2
   d889a:	d103      	bne.n	d88a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d889c:	f104 000c 	add.w	r0, r4, #12
   d88a0:	f7ff ffef 	bl	d8882 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d88a4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d88a6:	b135      	cbz	r5, d88b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d88a8:	4628      	mov	r0, r5
   d88aa:	f7fe fc69 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
   d88ae:	2110      	movs	r1, #16
   d88b0:	4628      	mov	r0, r5
   d88b2:	f001 f948 	bl	d9b46 <_ZdlPvj>
   d88b6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d88b8:	b135      	cbz	r5, d88c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d88ba:	4628      	mov	r0, r5
   d88bc:	f7fe fc60 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
   d88c0:	2110      	movs	r1, #16
   d88c2:	4628      	mov	r0, r5
   d88c4:	f001 f93f 	bl	d9b46 <_ZdlPvj>
   d88c8:	4620      	mov	r0, r4
   d88ca:	2114      	movs	r1, #20
   d88cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d88d0:	f001 b939 	b.w	d9b46 <_ZdlPvj>
   d88d4:	bd38      	pop	{r3, r4, r5, pc}

000d88d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d88d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d88d8:	460e      	mov	r6, r1
   d88da:	4604      	mov	r4, r0
   d88dc:	f856 3b04 	ldr.w	r3, [r6], #4
   d88e0:	9300      	str	r3, [sp, #0]
   d88e2:	460d      	mov	r5, r1
   d88e4:	a801      	add	r0, sp, #4
   d88e6:	4631      	mov	r1, r6
   d88e8:	f7ff fd12 	bl	d8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d88ec:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d88ee:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d88f0:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d88f2:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d88f4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d88f6:	2300      	movs	r3, #0
   d88f8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d88fa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d88fc:	f7ff fd0f 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8900:	4630      	mov	r0, r6
   d8902:	f7ff fd0c 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8906:	4628      	mov	r0, r5
   d8908:	2108      	movs	r1, #8
   d890a:	f001 f91c 	bl	d9b46 <_ZdlPvj>
        return p;
    }
   d890e:	4620      	mov	r0, r4
   d8910:	b002      	add	sp, #8
   d8912:	bd70      	pop	{r4, r5, r6, pc}

000d8914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8914:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8916:	b510      	push	{r4, lr}
      if (_M_empty())
   d8918:	b90a      	cbnz	r2, d891e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d891a:	f001 f9ca 	bl	d9cb2 <_ZSt25__throw_bad_function_callv>
    }
   d891e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8922:	68c3      	ldr	r3, [r0, #12]
   d8924:	4718      	bx	r3

000d8926 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8926:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8928:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d892a:	f100 0110 	add.w	r1, r0, #16
   d892e:	f7ff fff1 	bl	d8914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8932:	bd08      	pop	{r3, pc}

000d8934 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8934:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8936:	b510      	push	{r4, lr}
      if (_M_empty())
   d8938:	b90a      	cbnz	r2, d893e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d893a:	f001 f9ba 	bl	d9cb2 <_ZSt25__throw_bad_function_callv>
    }
   d893e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8942:	68c3      	ldr	r3, [r0, #12]
   d8944:	4718      	bx	r3

000d8946 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8946:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8948:	6800      	ldr	r0, [r0, #0]
   d894a:	f100 0110 	add.w	r1, r0, #16
   d894e:	f7ff fff1 	bl	d8934 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8952:	bd08      	pop	{r3, pc}

000d8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8954:	b538      	push	{r3, r4, r5, lr}
   d8956:	2300      	movs	r3, #0
   d8958:	4604      	mov	r4, r0
   d895a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d895c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d895e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8960:	f7fb fb99 	bl	d4096 <_Znwj>
   d8964:	b128      	cbz	r0, d8972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8966:	2301      	movs	r3, #1
   d8968:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d896c:	4b02      	ldr	r3, [pc, #8]	; (d8978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d896e:	6003      	str	r3, [r0, #0]
   d8970:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8972:	6020      	str	r0, [r4, #0]
	}
   d8974:	4620      	mov	r0, r4
   d8976:	bd38      	pop	{r3, r4, r5, pc}
   d8978:	000de73c 	.word	0x000de73c

000d897c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d897c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d897e:	2300      	movs	r3, #0
   d8980:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8982:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8984:	4604      	mov	r4, r0
   d8986:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8988:	b12b      	cbz	r3, d8996 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d898a:	2202      	movs	r2, #2
   d898c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d898e:	68eb      	ldr	r3, [r5, #12]
   d8990:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8992:	68ab      	ldr	r3, [r5, #8]
   d8994:	60a3      	str	r3, [r4, #8]
    }
   d8996:	4620      	mov	r0, r4
   d8998:	bd38      	pop	{r3, r4, r5, pc}
	...

000d899c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d899c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d899e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d89a0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d89a2:	4668      	mov	r0, sp
   d89a4:	f7ff ff60 	bl	d8868 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d89a8:	f04f 0302 	mov.w	r3, #2
   d89ac:	e8d4 2f4f 	ldrexb	r2, [r4]
   d89b0:	2a00      	cmp	r2, #0
   d89b2:	d103      	bne.n	d89bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d89b4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d89b8:	2900      	cmp	r1, #0
   d89ba:	d1f7      	bne.n	d89ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d89bc:	d125      	bne.n	d8a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d89be:	f104 050c 	add.w	r5, r4, #12
   d89c2:	4669      	mov	r1, sp
   d89c4:	4628      	mov	r0, r5
   d89c6:	f7ff ff4f 	bl	d8868 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d89ca:	f3bf 8f5b 	dmb	ish
   d89ce:	2301      	movs	r3, #1
   d89d0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d89d2:	2000      	movs	r0, #0
   d89d4:	f104 0308 	add.w	r3, r4, #8
   d89d8:	f3bf 8f5b 	dmb	ish
   d89dc:	e853 6f00 	ldrex	r6, [r3]
   d89e0:	e843 0200 	strex	r2, r0, [r3]
   d89e4:	2a00      	cmp	r2, #0
   d89e6:	d1f9      	bne.n	d89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d89e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d89ec:	b16e      	cbz	r6, d8a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d89ee:	f7ff f845 	bl	d7a7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d89f2:	b178      	cbz	r0, d8a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d89f4:	4629      	mov	r1, r5
   d89f6:	4630      	mov	r0, r6
   d89f8:	f7ff ff8c 	bl	d8914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d89fc:	4630      	mov	r0, r6
   d89fe:	f7fe fbbf 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8a02:	2110      	movs	r1, #16
   d8a04:	4630      	mov	r0, r6
   d8a06:	f001 f89e 	bl	d9b46 <_ZdlPvj>
        p_->setError(std::move(error));
   d8a0a:	4668      	mov	r0, sp
   d8a0c:	f7ff ff39 	bl	d8882 <_ZN8particle5ErrorD1Ev>
    }
   d8a10:	b009      	add	sp, #36	; 0x24
   d8a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8a14:	4631      	mov	r1, r6
   d8a16:	a802      	add	r0, sp, #8
   d8a18:	f7ff ffb0 	bl	d897c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8a1c:	68e0      	ldr	r0, [r4, #12]
   d8a1e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a22:	b108      	cbz	r0, d8a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8a24:	f003 f9ec 	bl	dbe00 <strdup>
        type_(type) {
   d8a28:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8a2a:	2010      	movs	r0, #16
   d8a2c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8a30:	f7fb fb31 	bl	d4096 <_Znwj>
   d8a34:	4605      	mov	r5, r0
   d8a36:	b1e8      	cbz	r0, d8a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8a38:	2700      	movs	r7, #0
   d8a3a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a3c:	2018      	movs	r0, #24
   d8a3e:	f7fb fb2a 	bl	d4096 <_Znwj>
   d8a42:	4604      	mov	r4, r0
   d8a44:	b188      	cbz	r0, d8a6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8a46:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8a48:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8a4a:	a802      	add	r0, sp, #8
   d8a4c:	f7ff fdab 	bl	d85a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a50:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8a52:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a54:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a56:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8a58:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8a5a:	a906      	add	r1, sp, #24
   d8a5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a5e:	60e3      	str	r3, [r4, #12]
   d8a60:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8a64:	9205      	str	r2, [sp, #20]
   d8a66:	f7ff feff 	bl	d8868 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8a6a:	4b08      	ldr	r3, [pc, #32]	; (d8a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8a6c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8a6e:	4b08      	ldr	r3, [pc, #32]	; (d8a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a70:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8a72:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8a74:	a806      	add	r0, sp, #24
   d8a76:	f7ff ff04 	bl	d8882 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a7a:	a802      	add	r0, sp, #8
   d8a7c:	f7fe fb80 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8a80:	2200      	movs	r2, #0
   d8a82:	4629      	mov	r1, r5
   d8a84:	4803      	ldr	r0, [pc, #12]	; (d8a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8a86:	f7ff f801 	bl	d7a8c <application_thread_invoke>
   d8a8a:	e7b7      	b.n	d89fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8a8c:	000d8927 	.word	0x000d8927
   d8a90:	000d8bbd 	.word	0x000d8bbd
   d8a94:	000d91d1 	.word	0x000d91d1

000d8a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a9c:	b08a      	sub	sp, #40	; 0x28
   d8a9e:	4605      	mov	r5, r0
   d8aa0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8aa4:	460c      	mov	r4, r1
   d8aa6:	4617      	mov	r7, r2
   d8aa8:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8aaa:	f7ff f86b 	bl	d7b84 <spark_cloud_flag_connected>
   d8aae:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8ab0:	4682      	mov	sl, r0
   d8ab2:	bb38      	cbnz	r0, d8b04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8ab4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8ab8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8aba:	a905      	add	r1, sp, #20
   d8abc:	4630      	mov	r0, r6
   d8abe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8ac2:	f7ff fed1 	bl	d8868 <_ZN8particle5ErrorC1EOS0_>
   d8ac6:	2014      	movs	r0, #20
   d8ac8:	f7fb fae5 	bl	d4096 <_Znwj>
   d8acc:	4604      	mov	r4, r0
   d8ace:	b148      	cbz	r0, d8ae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8ad0:	2302      	movs	r3, #2
   d8ad2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ad4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8ad6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ada:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8adc:	4631      	mov	r1, r6
   d8ade:	300c      	adds	r0, #12
   d8ae0:	f7ff fec2 	bl	d8868 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ae4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8ae6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ae8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8aec:	f7ff ff32 	bl	d8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8af0:	4630      	mov	r0, r6
   d8af2:	f7ff fec6 	bl	d8882 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8af6:	a805      	add	r0, sp, #20
   d8af8:	f7ff fec3 	bl	d8882 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8afc:	4628      	mov	r0, r5
   d8afe:	b00a      	add	sp, #40	; 0x28
   d8b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8b04:	230c      	movs	r3, #12
   d8b06:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8b0a:	2014      	movs	r0, #20
   d8b0c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8b10:	9307      	str	r3, [sp, #28]
   d8b12:	f7fb fac0 	bl	d4096 <_Znwj>
   d8b16:	4601      	mov	r1, r0
   d8b18:	b128      	cbz	r0, d8b26 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8b1a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8b1e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8b22:	f880 a001 	strb.w	sl, [r0, #1]
   d8b26:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8b28:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8b2a:	f7ff ff13 	bl	d8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8b2e:	4b22      	ldr	r3, [pc, #136]	; (d8bb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8b30:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8b32:	2008      	movs	r0, #8
   d8b34:	f7fb faaf 	bl	d4096 <_Znwj>
   d8b38:	4682      	mov	sl, r0
   d8b3a:	b128      	cbz	r0, d8b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b3c:	9b03      	ldr	r3, [sp, #12]
   d8b3e:	f840 3b04 	str.w	r3, [r0], #4
   d8b42:	a904      	add	r1, sp, #16
   d8b44:	f7ff fbe4 	bl	d8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b48:	9600      	str	r6, [sp, #0]
   d8b4a:	fa5f f389 	uxtb.w	r3, r9
   d8b4e:	4642      	mov	r2, r8
   d8b50:	4639      	mov	r1, r7
   d8b52:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8b54:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b58:	f7ff f824 	bl	d7ba4 <spark_send_event>
   d8b5c:	b9b8      	cbnz	r0, d8b8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8b5e:	9b03      	ldr	r3, [sp, #12]
   d8b60:	785b      	ldrb	r3, [r3, #1]
   d8b62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8b66:	b993      	cbnz	r3, d8b8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8b68:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8b6c:	a905      	add	r1, sp, #20
   d8b6e:	a803      	add	r0, sp, #12
   d8b70:	9205      	str	r2, [sp, #20]
   d8b72:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b76:	f7ff ff11 	bl	d899c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b7a:	a805      	add	r0, sp, #20
   d8b7c:	f7ff fe81 	bl	d8882 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8b80:	a805      	add	r0, sp, #20
   d8b82:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8b84:	f7ff fea7 	bl	d88d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8b88:	a806      	add	r0, sp, #24
   d8b8a:	f7ff fbc8 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b8e:	9b03      	ldr	r3, [sp, #12]
   d8b90:	9305      	str	r3, [sp, #20]
   d8b92:	a904      	add	r1, sp, #16
   d8b94:	a806      	add	r0, sp, #24
   d8b96:	f7ff fbbb 	bl	d8310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b9a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8b9c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b9e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8ba0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8ba2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8ba4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8ba6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8ba8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8baa:	f7ff fbb8 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8bae:	a804      	add	r0, sp, #16
   d8bb0:	f7ff fbb5 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8bb4:	e7a2      	b.n	d8afc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8bb6:	bf00      	nop
   d8bb8:	000d8c81 	.word	0x000d8c81

000d8bbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8bbc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bc0:	4605      	mov	r5, r0
	  switch (__op)
   d8bc2:	d007      	beq.n	d8bd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8bc4:	2a03      	cmp	r2, #3
   d8bc6:	d018      	beq.n	d8bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8bc8:	2a01      	cmp	r2, #1
   d8bca:	d101      	bne.n	d8bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8bcc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8bce:	6003      	str	r3, [r0, #0]
	}
   d8bd0:	2000      	movs	r0, #0
   d8bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8bd4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8bd6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8bd8:	f7fb fa5d 	bl	d4096 <_Znwj>
   d8bdc:	4604      	mov	r4, r0
   d8bde:	b150      	cbz	r0, d8bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8be0:	4631      	mov	r1, r6
   d8be2:	f7ff fecb 	bl	d897c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8be6:	6930      	ldr	r0, [r6, #16]
   d8be8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8bec:	b108      	cbz	r0, d8bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8bee:	f003 f907 	bl	dbe00 <strdup>
        type_(type) {
   d8bf2:	6120      	str	r0, [r4, #16]
   d8bf4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8bf6:	602c      	str	r4, [r5, #0]
	}
   d8bf8:	e7ea      	b.n	d8bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8bfa:	6804      	ldr	r4, [r0, #0]
   d8bfc:	2c00      	cmp	r4, #0
   d8bfe:	d0e7      	beq.n	d8bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8c00:	f104 0010 	add.w	r0, r4, #16
   d8c04:	f7ff fe3d 	bl	d8882 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8c08:	4620      	mov	r0, r4
   d8c0a:	f7fe fab9 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c0e:	2118      	movs	r1, #24
   d8c10:	4620      	mov	r0, r4
   d8c12:	f000 ff98 	bl	d9b46 <_ZdlPvj>
   d8c16:	e7db      	b.n	d8bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8c18 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8c18:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8c1a:	2300      	movs	r3, #0
   d8c1c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8c1e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8c20:	4604      	mov	r4, r0
   d8c22:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8c24:	b12b      	cbz	r3, d8c32 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8c26:	2202      	movs	r2, #2
   d8c28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8c2a:	68eb      	ldr	r3, [r5, #12]
   d8c2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8c2e:	68ab      	ldr	r3, [r5, #8]
   d8c30:	60a3      	str	r3, [r4, #8]
    }
   d8c32:	4620      	mov	r0, r4
   d8c34:	bd38      	pop	{r3, r4, r5, pc}

000d8c36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8c36:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8c38:	b570      	push	{r4, r5, r6, lr}
   d8c3a:	4604      	mov	r4, r0
	  switch (__op)
   d8c3c:	d007      	beq.n	d8c4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8c3e:	2a03      	cmp	r2, #3
   d8c40:	d012      	beq.n	d8c68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8c42:	2a01      	cmp	r2, #1
   d8c44:	d101      	bne.n	d8c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8c46:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c48:	6003      	str	r3, [r0, #0]
	}
   d8c4a:	2000      	movs	r0, #0
   d8c4c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c4e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8c50:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c52:	f7fb fa20 	bl	d4096 <_Znwj>
   d8c56:	4605      	mov	r5, r0
   d8c58:	b120      	cbz	r0, d8c64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8c5a:	4631      	mov	r1, r6
   d8c5c:	f7ff ffdc 	bl	d8c18 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8c60:	7c33      	ldrb	r3, [r6, #16]
   d8c62:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8c64:	6025      	str	r5, [r4, #0]
	}
   d8c66:	e7f0      	b.n	d8c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8c68:	6804      	ldr	r4, [r0, #0]
   d8c6a:	2c00      	cmp	r4, #0
   d8c6c:	d0ed      	beq.n	d8c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8c6e:	4620      	mov	r0, r4
   d8c70:	f7fe fa86 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c74:	2114      	movs	r1, #20
   d8c76:	4620      	mov	r0, r4
   d8c78:	f000 ff65 	bl	d9b46 <_ZdlPvj>
   d8c7c:	e7e5      	b.n	d8c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c82:	b089      	sub	sp, #36	; 0x24
   d8c84:	4604      	mov	r4, r0
   d8c86:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8c88:	a801      	add	r0, sp, #4
   d8c8a:	4611      	mov	r1, r2
   d8c8c:	f7ff fe23 	bl	d88d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8c90:	b1a4      	cbz	r4, d8cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8c92:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8c94:	b11d      	cbz	r5, d8c9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8c96:	4628      	mov	r0, r5
   d8c98:	f003 f8b2 	bl	dbe00 <strdup>
   d8c9c:	4605      	mov	r5, r0
   d8c9e:	a801      	add	r0, sp, #4
   d8ca0:	a903      	add	r1, sp, #12
        type_(type) {
   d8ca2:	9503      	str	r5, [sp, #12]
   d8ca4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8ca8:	f7ff fe78 	bl	d899c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8cac:	a803      	add	r0, sp, #12
   d8cae:	f7ff fde8 	bl	d8882 <_ZN8particle5ErrorD1Ev>
   d8cb2:	a802      	add	r0, sp, #8
   d8cb4:	f7ff fb33 	bl	d831e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8cb8:	b009      	add	sp, #36	; 0x24
   d8cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8cbc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8cbe:	2301      	movs	r3, #1
   d8cc0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8cc4:	2a00      	cmp	r2, #0
   d8cc6:	d103      	bne.n	d8cd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8cc8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8ccc:	2900      	cmp	r1, #0
   d8cce:	d1f7      	bne.n	d8cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8cd0:	d1ef      	bne.n	d8cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8cd2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8cd4:	f3bf 8f5b 	dmb	ish
   d8cd8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8cda:	1d2b      	adds	r3, r5, #4
   d8cdc:	f3bf 8f5b 	dmb	ish
   d8ce0:	e853 6f00 	ldrex	r6, [r3]
   d8ce4:	e843 4200 	strex	r2, r4, [r3]
   d8ce8:	2a00      	cmp	r2, #0
   d8cea:	d1f9      	bne.n	d8ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8cec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8cf0:	2e00      	cmp	r6, #0
   d8cf2:	d0de      	beq.n	d8cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8cf4:	4620      	mov	r0, r4
   d8cf6:	f7fe fec1 	bl	d7a7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8cfa:	4607      	mov	r7, r0
   d8cfc:	b160      	cbz	r0, d8d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8cfe:	f105 010c 	add.w	r1, r5, #12
   d8d02:	4630      	mov	r0, r6
   d8d04:	f7ff fe16 	bl	d8934 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8d08:	4630      	mov	r0, r6
   d8d0a:	f7fe fa39 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8d0e:	2110      	movs	r1, #16
   d8d10:	4630      	mov	r0, r6
   d8d12:	f000 ff18 	bl	d9b46 <_ZdlPvj>
   d8d16:	e7cc      	b.n	d8cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8d18:	4631      	mov	r1, r6
   d8d1a:	a803      	add	r0, sp, #12
   d8d1c:	f7ff ff7c 	bl	d8c18 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8d20:	7b2b      	ldrb	r3, [r5, #12]
   d8d22:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8d26:	2010      	movs	r0, #16
   d8d28:	f7fb f9b5 	bl	d4096 <_Znwj>
   d8d2c:	4605      	mov	r5, r0
   d8d2e:	b1d0      	cbz	r0, d8d66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8d30:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d32:	2014      	movs	r0, #20
   d8d34:	f7fb f9af 	bl	d4096 <_Znwj>
   d8d38:	4604      	mov	r4, r0
   d8d3a:	b178      	cbz	r0, d8d5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8d3c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8d3e:	4601      	mov	r1, r0
   d8d40:	a803      	add	r0, sp, #12
   d8d42:	f7ff fc30 	bl	d85a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d46:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8d48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d4a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d4c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8d4e:	9205      	str	r2, [sp, #20]
   d8d50:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d52:	60e3      	str	r3, [r4, #12]
   d8d54:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8d58:	9206      	str	r2, [sp, #24]
   d8d5a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8d5c:	4b06      	ldr	r3, [pc, #24]	; (d8d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8d5e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8d60:	4b06      	ldr	r3, [pc, #24]	; (d8d7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d62:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8d64:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8d66:	a803      	add	r0, sp, #12
   d8d68:	f7fe fa0a 	bl	d7180 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8d6c:	2200      	movs	r2, #0
   d8d6e:	4629      	mov	r1, r5
   d8d70:	4803      	ldr	r0, [pc, #12]	; (d8d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8d72:	f7fe fe8b 	bl	d7a8c <application_thread_invoke>
   d8d76:	e7c7      	b.n	d8d08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8d78:	000d8947 	.word	0x000d8947
   d8d7c:	000d8c37 	.word	0x000d8c37
   d8d80:	000d91d1 	.word	0x000d91d1

000d8d84 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d8d84:	4770      	bx	lr

000d8d86 <_ZN9IPAddressD0Ev>:
   d8d86:	b510      	push	{r4, lr}
   d8d88:	2118      	movs	r1, #24
   d8d8a:	4604      	mov	r4, r0
   d8d8c:	f000 fedb 	bl	d9b46 <_ZdlPvj>
   d8d90:	4620      	mov	r0, r4
   d8d92:	bd10      	pop	{r4, pc}

000d8d94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8d94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8d96:	7d03      	ldrb	r3, [r0, #20]
   d8d98:	2b06      	cmp	r3, #6
{
   d8d9a:	b08d      	sub	sp, #52	; 0x34
   d8d9c:	460e      	mov	r6, r1
   d8d9e:	f100 0704 	add.w	r7, r0, #4
   d8da2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8da6:	d012      	beq.n	d8dce <_ZNK9IPAddress7printToER5Print+0x3a>
   d8da8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8dac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8db0:	220a      	movs	r2, #10
   d8db2:	4630      	mov	r0, r6
   d8db4:	f7ff fb19 	bl	d83ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8db8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8dba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8dbc:	d019      	beq.n	d8df2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8dbe:	2c00      	cmp	r4, #0
   d8dc0:	d0f4      	beq.n	d8dac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8dc2:	212e      	movs	r1, #46	; 0x2e
   d8dc4:	4630      	mov	r0, r6
   d8dc6:	f7ff faf7 	bl	d83b8 <_ZN5Print5printEc>
   d8dca:	4404      	add	r4, r0
   d8dcc:	e7ee      	b.n	d8dac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dce:	232f      	movs	r3, #47	; 0x2f
   d8dd0:	466a      	mov	r2, sp
   d8dd2:	4639      	mov	r1, r7
   d8dd4:	200a      	movs	r0, #10
		buf[0] = 0;
   d8dd6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dda:	f7fe fcf7 	bl	d77cc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8dde:	4668      	mov	r0, sp
   d8de0:	f003 f82b 	bl	dbe3a <strlen>
   d8de4:	6833      	ldr	r3, [r6, #0]
   d8de6:	4602      	mov	r2, r0
   d8de8:	68db      	ldr	r3, [r3, #12]
   d8dea:	4669      	mov	r1, sp
   d8dec:	4630      	mov	r0, r6
   d8dee:	4798      	blx	r3
   d8df0:	4604      	mov	r4, r0
    }
    return n;
}
   d8df2:	4620      	mov	r0, r4
   d8df4:	b00d      	add	sp, #52	; 0x34
   d8df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8df8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8df8:	b510      	push	{r4, lr}
   d8dfa:	4b05      	ldr	r3, [pc, #20]	; (d8e10 <_ZN9IPAddressC1Ev+0x18>)
   d8dfc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8dfe:	2211      	movs	r2, #17
   d8e00:	f840 3b04 	str.w	r3, [r0], #4
   d8e04:	2100      	movs	r1, #0
   d8e06:	f002 ffaf 	bl	dbd68 <memset>
}
   d8e0a:	4620      	mov	r0, r4
   d8e0c:	bd10      	pop	{r4, pc}
   d8e0e:	bf00      	nop
   d8e10:	000de758 	.word	0x000de758

000d8e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8e14:	4603      	mov	r3, r0
   d8e16:	4a07      	ldr	r2, [pc, #28]	; (d8e34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8e18:	b510      	push	{r4, lr}
   d8e1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8e1e:	f101 0210 	add.w	r2, r1, #16
   d8e22:	f851 4b04 	ldr.w	r4, [r1], #4
   d8e26:	f843 4b04 	str.w	r4, [r3], #4
   d8e2a:	4291      	cmp	r1, r2
   d8e2c:	d1f9      	bne.n	d8e22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8e2e:	780a      	ldrb	r2, [r1, #0]
   d8e30:	701a      	strb	r2, [r3, #0]
}
   d8e32:	bd10      	pop	{r4, pc}
   d8e34:	000de758 	.word	0x000de758

000d8e38 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d8e38:	7d03      	ldrb	r3, [r0, #20]
   d8e3a:	2b04      	cmp	r3, #4
   d8e3c:	d104      	bne.n	d8e48 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d8e3e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8e40:	3800      	subs	r0, #0
   d8e42:	bf18      	it	ne
   d8e44:	2001      	movne	r0, #1
   d8e46:	4770      	bx	lr
    } else if (version() == 6) {
   d8e48:	2b06      	cmp	r3, #6
   d8e4a:	d107      	bne.n	d8e5c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8e4c:	6843      	ldr	r3, [r0, #4]
   d8e4e:	b93b      	cbnz	r3, d8e60 <_ZNK9IPAddresscvbEv+0x28>
   d8e50:	6883      	ldr	r3, [r0, #8]
   d8e52:	b92b      	cbnz	r3, d8e60 <_ZNK9IPAddresscvbEv+0x28>
   d8e54:	68c3      	ldr	r3, [r0, #12]
   d8e56:	b91b      	cbnz	r3, d8e60 <_ZNK9IPAddresscvbEv+0x28>
   d8e58:	6900      	ldr	r0, [r0, #16]
   d8e5a:	e7f1      	b.n	d8e40 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d8e5c:	2000      	movs	r0, #0
   d8e5e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8e60:	2001      	movs	r0, #1
}
   d8e62:	4770      	bx	lr

000d8e64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8e64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8e66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8e6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8e6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8e72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8e76:	2304      	movs	r3, #4
   d8e78:	6041      	str	r1, [r0, #4]
   d8e7a:	7503      	strb	r3, [r0, #20]
}
   d8e7c:	bd10      	pop	{r4, pc}
	...

000d8e80 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d8e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e82:	4d04      	ldr	r5, [pc, #16]	; (d8e94 <_ZN9IPAddressC1Ehhhh+0x14>)
   d8e84:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d8e86:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d8e8a:	9500      	str	r5, [sp, #0]
   d8e8c:	f7ff ffea 	bl	d8e64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8e90:	b003      	add	sp, #12
   d8e92:	bd30      	pop	{r4, r5, pc}
   d8e94:	000de758 	.word	0x000de758

000d8e98 <_ZN9IPAddressaSEPKh>:
{
   d8e98:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8e9a:	78cb      	ldrb	r3, [r1, #3]
   d8e9c:	9300      	str	r3, [sp, #0]
   d8e9e:	788b      	ldrb	r3, [r1, #2]
   d8ea0:	784a      	ldrb	r2, [r1, #1]
   d8ea2:	7809      	ldrb	r1, [r1, #0]
   d8ea4:	f7ff ffde 	bl	d8e64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8ea8:	b002      	add	sp, #8
   d8eaa:	bd10      	pop	{r4, pc}

000d8eac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8eac:	7441      	strb	r1, [r0, #17]
}
   d8eae:	4770      	bx	lr

000d8eb0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8eb0:	4770      	bx	lr

000d8eb2 <_ZN9USBSerial4readEv>:
{
   d8eb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8eb4:	2100      	movs	r1, #0
   d8eb6:	7c00      	ldrb	r0, [r0, #16]
   d8eb8:	f7fe fda0 	bl	d79fc <HAL_USB_USART_Receive_Data>
}
   d8ebc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8ec0:	bd08      	pop	{r3, pc}

000d8ec2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8ec2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8ec4:	2101      	movs	r1, #1
   d8ec6:	7c00      	ldrb	r0, [r0, #16]
   d8ec8:	f7fe fd98 	bl	d79fc <HAL_USB_USART_Receive_Data>
}
   d8ecc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8ed0:	bd08      	pop	{r3, pc}

000d8ed2 <_ZN9USBSerial17availableForWriteEv>:
{
   d8ed2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8ed4:	7c00      	ldrb	r0, [r0, #16]
   d8ed6:	f7fe fd89 	bl	d79ec <HAL_USB_USART_Available_Data_For_Write>
}
   d8eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ede:	bd08      	pop	{r3, pc}

000d8ee0 <_ZN9USBSerial9availableEv>:
{
   d8ee0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8ee2:	7c00      	ldrb	r0, [r0, #16]
   d8ee4:	f7fe fd7a 	bl	d79dc <HAL_USB_USART_Available_Data>
}
   d8ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8eec:	bd08      	pop	{r3, pc}

000d8eee <_ZN9USBSerial5writeEh>:
{
   d8eee:	b513      	push	{r0, r1, r4, lr}
   d8ef0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8ef2:	7c00      	ldrb	r0, [r0, #16]
{
   d8ef4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8ef6:	f7fe fd79 	bl	d79ec <HAL_USB_USART_Available_Data_For_Write>
   d8efa:	2800      	cmp	r0, #0
   d8efc:	9901      	ldr	r1, [sp, #4]
   d8efe:	dc01      	bgt.n	d8f04 <_ZN9USBSerial5writeEh+0x16>
   d8f00:	7c60      	ldrb	r0, [r4, #17]
   d8f02:	b120      	cbz	r0, d8f0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8f04:	7c20      	ldrb	r0, [r4, #16]
   d8f06:	f7fe fd81 	bl	d7a0c <HAL_USB_USART_Send_Data>
   d8f0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8f0e:	b002      	add	sp, #8
   d8f10:	bd10      	pop	{r4, pc}

000d8f12 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8f12:	7c00      	ldrb	r0, [r0, #16]
   d8f14:	f7fe bd82 	b.w	d7a1c <HAL_USB_USART_Flush_Data>

000d8f18 <_ZN9USBSerialD0Ev>:
   d8f18:	b510      	push	{r4, lr}
   d8f1a:	2114      	movs	r1, #20
   d8f1c:	4604      	mov	r4, r0
   d8f1e:	f000 fe12 	bl	d9b46 <_ZdlPvj>
   d8f22:	4620      	mov	r0, r4
   d8f24:	bd10      	pop	{r4, pc}
	...

000d8f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8f28:	b510      	push	{r4, lr}
   d8f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8f2e:	4604      	mov	r4, r0
   d8f30:	4608      	mov	r0, r1
   d8f32:	2100      	movs	r1, #0
   d8f34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8f38:	4b04      	ldr	r3, [pc, #16]	; (d8f4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8f3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8f3c:	2301      	movs	r3, #1
  _serial = serial;
   d8f3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8f40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8f42:	4611      	mov	r1, r2
   d8f44:	f7fe fd3a 	bl	d79bc <HAL_USB_USART_Init>
}
   d8f48:	4620      	mov	r0, r4
   d8f4a:	bd10      	pop	{r4, pc}
   d8f4c:	000de76c 	.word	0x000de76c

000d8f50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8f50:	7c00      	ldrb	r0, [r0, #16]
   d8f52:	2200      	movs	r2, #0
   d8f54:	f7fe bd3a 	b.w	d79cc <HAL_USB_USART_Begin>

000d8f58 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d8f58:	7c00      	ldrb	r0, [r0, #16]
   d8f5a:	f7fe bd67 	b.w	d7a2c <HAL_USB_USART_Is_Enabled>

000d8f5e <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d8f5e:	f7ff bffb 	b.w	d8f58 <_ZN9USBSerial9isEnabledEv>

000d8f62 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8f62:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8f64:	2214      	movs	r2, #20
{
   d8f66:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8f68:	2100      	movs	r1, #0
   d8f6a:	f002 fefd 	bl	dbd68 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8f6e:	4620      	mov	r0, r4
   d8f70:	bd10      	pop	{r4, pc}
	...

000d8f74 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8f74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f76:	4c10      	ldr	r4, [pc, #64]	; (d8fb8 <_Z16_fetch_usbserialv+0x44>)
{
   d8f78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8f7a:	a803      	add	r0, sp, #12
   d8f7c:	f7ff fff1 	bl	d8f62 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f80:	7821      	ldrb	r1, [r4, #0]
   d8f82:	f3bf 8f5b 	dmb	ish
   d8f86:	f011 0101 	ands.w	r1, r1, #1
   d8f8a:	d111      	bne.n	d8fb0 <_Z16_fetch_usbserialv+0x3c>
   d8f8c:	4620      	mov	r0, r4
   d8f8e:	9101      	str	r1, [sp, #4]
   d8f90:	f7fb f889 	bl	d40a6 <__cxa_guard_acquire>
   d8f94:	9901      	ldr	r1, [sp, #4]
   d8f96:	b158      	cbz	r0, d8fb0 <_Z16_fetch_usbserialv+0x3c>
   d8f98:	aa03      	add	r2, sp, #12
   d8f9a:	4808      	ldr	r0, [pc, #32]	; (d8fbc <_Z16_fetch_usbserialv+0x48>)
   d8f9c:	f7ff ffc4 	bl	d8f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	f7fb f885 	bl	d40b0 <__cxa_guard_release>
   d8fa6:	4a06      	ldr	r2, [pc, #24]	; (d8fc0 <_Z16_fetch_usbserialv+0x4c>)
   d8fa8:	4906      	ldr	r1, [pc, #24]	; (d8fc4 <_Z16_fetch_usbserialv+0x50>)
   d8faa:	4804      	ldr	r0, [pc, #16]	; (d8fbc <_Z16_fetch_usbserialv+0x48>)
   d8fac:	f000 fdc6 	bl	d9b3c <__aeabi_atexit>
	return _usbserial;
}
   d8fb0:	4802      	ldr	r0, [pc, #8]	; (d8fbc <_Z16_fetch_usbserialv+0x48>)
   d8fb2:	b008      	add	sp, #32
   d8fb4:	bd10      	pop	{r4, pc}
   d8fb6:	bf00      	nop
   d8fb8:	2003e658 	.word	0x2003e658
   d8fbc:	2003e65c 	.word	0x2003e65c
   d8fc0:	2003e128 	.word	0x2003e128
   d8fc4:	000d8eb1 	.word	0x000d8eb1

000d8fc8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8fc8:	2200      	movs	r2, #0
   d8fca:	6840      	ldr	r0, [r0, #4]
   d8fcc:	4611      	mov	r1, r2
   d8fce:	f7fe bd99 	b.w	d7b04 <network_ready>

000d8fd2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8fd2:	2200      	movs	r2, #0
   d8fd4:	6840      	ldr	r0, [r0, #4]
   d8fd6:	4611      	mov	r1, r2
   d8fd8:	f7fe bdb4 	b.w	d7b44 <network_listening>

000d8fdc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8fdc:	2200      	movs	r2, #0
   d8fde:	6840      	ldr	r0, [r0, #4]
   d8fe0:	4611      	mov	r1, r2
   d8fe2:	f7fe bdbf 	b.w	d7b64 <network_get_listen_timeout>

000d8fe6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8fe6:	6840      	ldr	r0, [r0, #4]
   d8fe8:	2200      	movs	r2, #0
   d8fea:	f7fe bdb3 	b.w	d7b54 <network_set_listen_timeout>

000d8fee <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8fee:	6840      	ldr	r0, [r0, #4]
   d8ff0:	2200      	movs	r2, #0
   d8ff2:	f081 0101 	eor.w	r1, r1, #1
   d8ff6:	f7fe bd9d 	b.w	d7b34 <network_listen>

000d8ffa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8ffa:	2300      	movs	r3, #0
   d8ffc:	6840      	ldr	r0, [r0, #4]
   d8ffe:	461a      	mov	r2, r3
   d9000:	4619      	mov	r1, r3
   d9002:	f7fe bd8f 	b.w	d7b24 <network_off>

000d9006 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9006:	2300      	movs	r3, #0
   d9008:	6840      	ldr	r0, [r0, #4]
   d900a:	461a      	mov	r2, r3
   d900c:	4619      	mov	r1, r3
   d900e:	f7fe bd81 	b.w	d7b14 <network_on>

000d9012 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9012:	2200      	movs	r2, #0
   d9014:	6840      	ldr	r0, [r0, #4]
   d9016:	4611      	mov	r1, r2
   d9018:	f7fe bd64 	b.w	d7ae4 <network_connecting>

000d901c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d901c:	6840      	ldr	r0, [r0, #4]
   d901e:	2200      	movs	r2, #0
   d9020:	2102      	movs	r1, #2
   d9022:	f7fe bd67 	b.w	d7af4 <network_disconnect>

000d9026 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9026:	2300      	movs	r3, #0
   d9028:	6840      	ldr	r0, [r0, #4]
   d902a:	461a      	mov	r2, r3
   d902c:	f7fe bd52 	b.w	d7ad4 <network_connect>

000d9030 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d9030:	b5f0      	push	{r4, r5, r6, r7, lr}
    CellularSignal() {}
   d9032:	4b1b      	ldr	r3, [pc, #108]	; (d90a0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d9034:	6003      	str	r3, [r0, #0]
   d9036:	2500      	movs	r5, #0
   d9038:	460f      	mov	r7, r1
   d903a:	3328      	adds	r3, #40	; 0x28
   d903c:	2618      	movs	r6, #24
   d903e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9042:	b089      	sub	sp, #36	; 0x24
   d9044:	6043      	str	r3, [r0, #4]
   d9046:	4632      	mov	r2, r6
   d9048:	4629      	mov	r1, r5
   d904a:	4604      	mov	r4, r0
   d904c:	3010      	adds	r0, #16
   d904e:	f002 fe8b 	bl	dbd68 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d9052:	6878      	ldr	r0, [r7, #4]
   d9054:	462a      	mov	r2, r5
   d9056:	4629      	mov	r1, r5
   d9058:	f7fe fd54 	bl	d7b04 <network_ready>
   d905c:	b918      	cbnz	r0, d9066 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d905e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d9060:	4620      	mov	r0, r4
   d9062:	b009      	add	sp, #36	; 0x24
   d9064:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d9066:	4629      	mov	r1, r5
   d9068:	4632      	mov	r2, r6
   d906a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d906c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d9070:	f002 fe7a 	bl	dbd68 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d9074:	a902      	add	r1, sp, #8
   d9076:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d9078:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d907c:	f7fe fc96 	bl	d79ac <cellular_signal>
   d9080:	b110      	cbz	r0, d9088 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d9082:	2301      	movs	r3, #1
   d9084:	60a3      	str	r3, [r4, #8]
            return sig;
   d9086:	e7eb      	b.n	d9060 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d9088:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d908a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d908c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d908e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d9090:	b90b      	cbnz	r3, d9096 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d9092:	2302      	movs	r3, #2
   d9094:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d9096:	a902      	add	r1, sp, #8
   d9098:	4620      	mov	r0, r4
   d909a:	f7ff fb38 	bl	d870e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d909e:	e7df      	b.n	d9060 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d90a0:	000de708 	.word	0x000de708

000d90a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d90a4:	4b08      	ldr	r3, [pc, #32]	; (d90c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d90a6:	b510      	push	{r4, lr}
   d90a8:	2428      	movs	r4, #40	; 0x28
   d90aa:	4622      	mov	r2, r4
   d90ac:	4618      	mov	r0, r3
   d90ae:	2100      	movs	r1, #0
   d90b0:	f002 fe5a 	bl	dbd68 <memset>
   d90b4:	4b05      	ldr	r3, [pc, #20]	; (d90cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d90b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d90b8:	f04f 32ff 	mov.w	r2, #4294967295
   d90bc:	6042      	str	r2, [r0, #4]
   d90be:	2204      	movs	r2, #4
   d90c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d90c2:	4a03      	ldr	r2, [pc, #12]	; (d90d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d90c4:	601a      	str	r2, [r3, #0]
   d90c6:	bd10      	pop	{r4, pc}
   d90c8:	2003e678 	.word	0x2003e678
   d90cc:	2003e670 	.word	0x2003e670
   d90d0:	000de79c 	.word	0x000de79c

000d90d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d90d4:	4770      	bx	lr

000d90d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d90d6:	7441      	strb	r1, [r0, #17]
}
   d90d8:	4770      	bx	lr

000d90da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d90da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d90dc:	7c00      	ldrb	r0, [r0, #16]
   d90de:	f7fe fbcd 	bl	d787c <hal_usart_available_data_for_write>
}
   d90e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d90e6:	bd08      	pop	{r3, pc}

000d90e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d90e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d90ea:	7c00      	ldrb	r0, [r0, #16]
   d90ec:	f7fe fb9e 	bl	d782c <hal_usart_available>
}
   d90f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d90f4:	bd08      	pop	{r3, pc}

000d90f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d90f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d90f8:	7c00      	ldrb	r0, [r0, #16]
   d90fa:	f7fe fba7 	bl	d784c <hal_usart_peek>
}
   d90fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9102:	bd08      	pop	{r3, pc}

000d9104 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9104:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9106:	7c00      	ldrb	r0, [r0, #16]
   d9108:	f7fe fb98 	bl	d783c <hal_usart_read>
}
   d910c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9110:	bd08      	pop	{r3, pc}

000d9112 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9112:	7c00      	ldrb	r0, [r0, #16]
   d9114:	f7fe bba2 	b.w	d785c <hal_usart_flush>

000d9118 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9118:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d911a:	7c45      	ldrb	r5, [r0, #17]
{
   d911c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d911e:	b12d      	cbz	r5, d912c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9120:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9122:	b003      	add	sp, #12
   d9124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9128:	f7fe bb78 	b.w	d781c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d912c:	7c00      	ldrb	r0, [r0, #16]
   d912e:	9101      	str	r1, [sp, #4]
   d9130:	f7fe fba4 	bl	d787c <hal_usart_available_data_for_write>
   d9134:	2800      	cmp	r0, #0
   d9136:	9901      	ldr	r1, [sp, #4]
   d9138:	dcf2      	bgt.n	d9120 <_ZN11USARTSerial5writeEh+0x8>
}
   d913a:	4628      	mov	r0, r5
   d913c:	b003      	add	sp, #12
   d913e:	bd30      	pop	{r4, r5, pc}

000d9140 <_ZN11USARTSerialD0Ev>:
   d9140:	b510      	push	{r4, lr}
   d9142:	2114      	movs	r1, #20
   d9144:	4604      	mov	r4, r0
   d9146:	f000 fcfe 	bl	d9b46 <_ZdlPvj>
   d914a:	4620      	mov	r0, r4
   d914c:	bd10      	pop	{r4, pc}
	...

000d9150 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9150:	b510      	push	{r4, lr}
   d9152:	f04f 0c00 	mov.w	ip, #0
   d9156:	4604      	mov	r4, r0
   d9158:	4608      	mov	r0, r1
   d915a:	4611      	mov	r1, r2
   d915c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9160:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9164:	4a04      	ldr	r2, [pc, #16]	; (d9178 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9166:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9168:	2201      	movs	r2, #1
  _serial = serial;
   d916a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d916c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d916e:	461a      	mov	r2, r3
   d9170:	f7fe fb4c 	bl	d780c <hal_usart_init>
}
   d9174:	4620      	mov	r0, r4
   d9176:	bd10      	pop	{r4, pc}
   d9178:	000de7d0 	.word	0x000de7d0

000d917c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d917c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d917e:	4c0e      	ldr	r4, [pc, #56]	; (d91b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d9180:	7821      	ldrb	r1, [r4, #0]
   d9182:	f3bf 8f5b 	dmb	ish
   d9186:	f011 0101 	ands.w	r1, r1, #1
   d918a:	d112      	bne.n	d91b2 <_Z22__fetch_global_Serial1v+0x36>
   d918c:	4620      	mov	r0, r4
   d918e:	9101      	str	r1, [sp, #4]
   d9190:	f7fa ff89 	bl	d40a6 <__cxa_guard_acquire>
   d9194:	9901      	ldr	r1, [sp, #4]
   d9196:	b160      	cbz	r0, d91b2 <_Z22__fetch_global_Serial1v+0x36>
   d9198:	4a08      	ldr	r2, [pc, #32]	; (d91bc <_Z22__fetch_global_Serial1v+0x40>)
   d919a:	4b09      	ldr	r3, [pc, #36]	; (d91c0 <_Z22__fetch_global_Serial1v+0x44>)
   d919c:	4809      	ldr	r0, [pc, #36]	; (d91c4 <_Z22__fetch_global_Serial1v+0x48>)
   d919e:	f7ff ffd7 	bl	d9150 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d91a2:	4620      	mov	r0, r4
   d91a4:	f7fa ff84 	bl	d40b0 <__cxa_guard_release>
   d91a8:	4a07      	ldr	r2, [pc, #28]	; (d91c8 <_Z22__fetch_global_Serial1v+0x4c>)
   d91aa:	4908      	ldr	r1, [pc, #32]	; (d91cc <_Z22__fetch_global_Serial1v+0x50>)
   d91ac:	4805      	ldr	r0, [pc, #20]	; (d91c4 <_Z22__fetch_global_Serial1v+0x48>)
   d91ae:	f000 fcc5 	bl	d9b3c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d91b2:	4804      	ldr	r0, [pc, #16]	; (d91c4 <_Z22__fetch_global_Serial1v+0x48>)
   d91b4:	b002      	add	sp, #8
   d91b6:	bd10      	pop	{r4, pc}
   d91b8:	2003e6a0 	.word	0x2003e6a0
   d91bc:	2003e6a4 	.word	0x2003e6a4
   d91c0:	2003e728 	.word	0x2003e728
   d91c4:	2003e7ac 	.word	0x2003e7ac
   d91c8:	2003e128 	.word	0x2003e128
   d91cc:	000d90d5 	.word	0x000d90d5

000d91d0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d91d0:	b510      	push	{r4, lr}
      if (_M_empty())
   d91d2:	6883      	ldr	r3, [r0, #8]
   d91d4:	4604      	mov	r4, r0
   d91d6:	b90b      	cbnz	r3, d91dc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d91d8:	f000 fd6b 	bl	d9cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d91dc:	68c3      	ldr	r3, [r0, #12]
   d91de:	4798      	blx	r3
      if (_M_manager)
   d91e0:	68a3      	ldr	r3, [r4, #8]
   d91e2:	b11b      	cbz	r3, d91ec <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d91e4:	2203      	movs	r2, #3
   d91e6:	4621      	mov	r1, r4
   d91e8:	4620      	mov	r0, r4
   d91ea:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d91ec:	4620      	mov	r0, r4
   d91ee:	2110      	movs	r1, #16
}
   d91f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d91f4:	f000 bca7 	b.w	d9b46 <_ZdlPvj>

000d91f8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d91f8:	4770      	bx	lr

000d91fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d91fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91fc:	4606      	mov	r6, r0
   d91fe:	4615      	mov	r5, r2
   d9200:	460c      	mov	r4, r1
   d9202:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9204:	42bc      	cmp	r4, r7
   d9206:	d006      	beq.n	d9216 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9208:	6833      	ldr	r3, [r6, #0]
   d920a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d920e:	689b      	ldr	r3, [r3, #8]
   d9210:	4630      	mov	r0, r6
   d9212:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9214:	e7f6      	b.n	d9204 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9216:	4628      	mov	r0, r5
   d9218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d921a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d921a:	7c00      	ldrb	r0, [r0, #16]
   d921c:	2200      	movs	r2, #0
   d921e:	f7fe bb35 	b.w	d788c <hal_i2c_write>

000d9222 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9222:	7c00      	ldrb	r0, [r0, #16]
   d9224:	2100      	movs	r1, #0
   d9226:	f7fe bb39 	b.w	d789c <hal_i2c_available>

000d922a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d922a:	7c00      	ldrb	r0, [r0, #16]
   d922c:	2100      	movs	r1, #0
   d922e:	f7fe bb3d 	b.w	d78ac <hal_i2c_read>

000d9232 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9232:	7c00      	ldrb	r0, [r0, #16]
   d9234:	2100      	movs	r1, #0
   d9236:	f7fe bb41 	b.w	d78bc <hal_i2c_peek>

000d923a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d923a:	7c00      	ldrb	r0, [r0, #16]
   d923c:	2100      	movs	r1, #0
   d923e:	f7fe bb45 	b.w	d78cc <hal_i2c_flush>

000d9242 <_ZN7TwoWireD0Ev>:
   d9242:	b510      	push	{r4, lr}
   d9244:	2114      	movs	r1, #20
   d9246:	4604      	mov	r4, r0
   d9248:	f000 fc7d 	bl	d9b46 <_ZdlPvj>
   d924c:	4620      	mov	r0, r4
   d924e:	bd10      	pop	{r4, pc}

000d9250 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9250:	b510      	push	{r4, lr}
   d9252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9256:	4604      	mov	r4, r0
   d9258:	4608      	mov	r0, r1
   d925a:	2100      	movs	r1, #0
   d925c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9260:	4b03      	ldr	r3, [pc, #12]	; (d9270 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9262:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9264:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9266:	4611      	mov	r1, r2
   d9268:	f7fe fb40 	bl	d78ec <hal_i2c_init>
}
   d926c:	4620      	mov	r0, r4
   d926e:	bd10      	pop	{r4, pc}
   d9270:	000de800 	.word	0x000de800

000d9274 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9274:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9276:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d9278:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d927c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d927e:	2201      	movs	r2, #1
   d9280:	f04f 33ff 	mov.w	r3, #4294967295
   d9284:	f10d 0107 	add.w	r1, sp, #7
   d9288:	47a0      	blx	r4
}
   d928a:	b002      	add	sp, #8
   d928c:	bd10      	pop	{r4, pc}

000d928e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d928e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d9290:	6803      	ldr	r3, [r0, #0]
   d9292:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d9294:	f04f 33ff 	mov.w	r3, #4294967295
   d9298:	46a4      	mov	ip, r4
}
   d929a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d929e:	4760      	bx	ip

000d92a0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d92a0:	b513      	push	{r0, r1, r4, lr}
   d92a2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d92a4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d92a6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d92aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d92ac:	f10d 0107 	add.w	r1, sp, #7
   d92b0:	2201      	movs	r2, #1
   d92b2:	47a0      	blx	r4
}
   d92b4:	b002      	add	sp, #8
   d92b6:	bd10      	pop	{r4, pc}

000d92b8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d92b8:	4770      	bx	lr

000d92ba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d92ba:	b538      	push	{r3, r4, r5, lr}
   d92bc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d92be:	681a      	ldr	r2, [r3, #0]
   d92c0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d92c2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d92c4:	da10      	bge.n	d92e8 <_ZN9TCPClient9connectedEv+0x2e>
   d92c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d92ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d92ce:	429a      	cmp	r2, r3
   d92d0:	d10a      	bne.n	d92e8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d92d2:	6803      	ldr	r3, [r0, #0]
   d92d4:	691b      	ldr	r3, [r3, #16]
   d92d6:	4798      	blx	r3
        if (!rv) {
   d92d8:	4604      	mov	r4, r0
   d92da:	b928      	cbnz	r0, d92e8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d92dc:	682b      	ldr	r3, [r5, #0]
   d92de:	4628      	mov	r0, r5
   d92e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d92e2:	4798      	blx	r3
        rv = available();
   d92e4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d92e6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d92e8:	2001      	movs	r0, #1
   d92ea:	e7fc      	b.n	d92e6 <_ZN9TCPClient9connectedEv+0x2c>

000d92ec <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d92ec:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d92ee:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d92f0:	43c0      	mvns	r0, r0
   d92f2:	0fc0      	lsrs	r0, r0, #31
   d92f4:	4770      	bx	lr

000d92f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d92f6:	4770      	bx	lr

000d92f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d92f8:	4b06      	ldr	r3, [pc, #24]	; (d9314 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d92fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d92fc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d92fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   d9302:	d005      	beq.n	d9310 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9304:	4608      	mov	r0, r1
   d9306:	f000 fcd7 	bl	d9cb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d930a:	2800      	cmp	r0, #0
	return nullptr;
   d930c:	bf08      	it	eq
   d930e:	2400      	moveq	r4, #0
      }
   d9310:	4620      	mov	r0, r4
   d9312:	bd10      	pop	{r4, pc}
   d9314:	000de6d8 	.word	0x000de6d8

000d9318 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9318:	b510      	push	{r4, lr}
   d931a:	21ac      	movs	r1, #172	; 0xac
   d931c:	4604      	mov	r4, r0
   d931e:	f000 fc12 	bl	d9b46 <_ZdlPvj>
   d9322:	4620      	mov	r0, r4
   d9324:	bd10      	pop	{r4, pc}

000d9326 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9326:	f7fa beba 	b.w	d409e <_ZdlPv>

000d932a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d932e:	f04f 0800 	mov.w	r8, #0
   d9332:	b086      	sub	sp, #24
   d9334:	461d      	mov	r5, r3
   d9336:	f8c0 8004 	str.w	r8, [r0, #4]
   d933a:	4604      	mov	r4, r0
   d933c:	460e      	mov	r6, r1
   d933e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d9340:	4641      	mov	r1, r8
   d9342:	2210      	movs	r2, #16
   d9344:	a802      	add	r0, sp, #8
   d9346:	f002 fd0f 	bl	dbd68 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d934a:	1c6b      	adds	r3, r5, #1
   d934c:	d009      	beq.n	d9362 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d934e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d9352:	fbb5 f3f0 	udiv	r3, r5, r0
   d9356:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d935a:	fb00 5313 	mls	r3, r0, r3, r5
   d935e:	4358      	muls	r0, r3
   d9360:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d9362:	6960      	ldr	r0, [r4, #20]
   d9364:	2310      	movs	r3, #16
   d9366:	9300      	str	r3, [sp, #0]
   d9368:	6800      	ldr	r0, [r0, #0]
   d936a:	ab02      	add	r3, sp, #8
   d936c:	f241 0205 	movw	r2, #4101	; 0x1005
   d9370:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9374:	f7fe faca 	bl	d790c <sock_setsockopt>
    if (ret < 0) {
   d9378:	2800      	cmp	r0, #0
   d937a:	da07      	bge.n	d938c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d937c:	f7fe fc5a 	bl	d7c34 <__errno>
   d9380:	6803      	ldr	r3, [r0, #0]
   d9382:	6063      	str	r3, [r4, #4]
        return 0;
   d9384:	2000      	movs	r0, #0
}
   d9386:	b006      	add	sp, #24
   d9388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d938c:	6960      	ldr	r0, [r4, #20]
   d938e:	2300      	movs	r3, #0
   d9390:	6800      	ldr	r0, [r0, #0]
   d9392:	463a      	mov	r2, r7
   d9394:	4631      	mov	r1, r6
   d9396:	f7fe fae1 	bl	d795c <sock_send>
    if (ret < 0) {
   d939a:	1e03      	subs	r3, r0, #0
   d939c:	dbee      	blt.n	d937c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d939e:	4618      	mov	r0, r3
   d93a0:	e7f1      	b.n	d9386 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d93a4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d93a4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d93a6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d93a8:	4b05      	ldr	r3, [pc, #20]	; (d93c0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d93aa:	4604      	mov	r4, r0
   d93ac:	358c      	adds	r5, #140	; 0x8c
   d93ae:	f844 3b04 	str.w	r3, [r4], #4
   d93b2:	4606      	mov	r6, r0
   d93b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d93b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d93b8:	682b      	ldr	r3, [r5, #0]
   d93ba:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d93bc:	4630      	mov	r0, r6
   d93be:	bd70      	pop	{r4, r5, r6, pc}
   d93c0:	000de758 	.word	0x000de758

000d93c4 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d93c4:	b510      	push	{r4, lr}
   d93c6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d93c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d93cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d93d0:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d93d2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d93d4:	d005      	beq.n	d93e2 <_ZN9TCPClient4peekEv+0x1e>
   d93d6:	6963      	ldr	r3, [r4, #20]
   d93d8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d93dc:	4413      	add	r3, r2
   d93de:	7918      	ldrb	r0, [r3, #4]
}
   d93e0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d93e2:	6803      	ldr	r3, [r0, #0]
   d93e4:	691b      	ldr	r3, [r3, #16]
   d93e6:	4798      	blx	r3
   d93e8:	2800      	cmp	r0, #0
   d93ea:	d1f4      	bne.n	d93d6 <_ZN9TCPClient4peekEv+0x12>
   d93ec:	f04f 30ff 	mov.w	r0, #4294967295
   d93f0:	e7f6      	b.n	d93e0 <_ZN9TCPClient4peekEv+0x1c>

000d93f2 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d93f2:	b510      	push	{r4, lr}
   d93f4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d93f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d93fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d93fe:	429a      	cmp	r2, r3
int TCPClient::read() {
   d9400:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9402:	d008      	beq.n	d9416 <_ZN9TCPClient4readEv+0x24>
   d9404:	6963      	ldr	r3, [r4, #20]
   d9406:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d940a:	1c51      	adds	r1, r2, #1
   d940c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d9410:	4413      	add	r3, r2
   d9412:	7918      	ldrb	r0, [r3, #4]
}
   d9414:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9416:	6803      	ldr	r3, [r0, #0]
   d9418:	691b      	ldr	r3, [r3, #16]
   d941a:	4798      	blx	r3
   d941c:	2800      	cmp	r0, #0
   d941e:	d1f1      	bne.n	d9404 <_ZN9TCPClient4readEv+0x12>
   d9420:	f04f 30ff 	mov.w	r0, #4294967295
   d9424:	e7f6      	b.n	d9414 <_ZN9TCPClient4readEv+0x22>

000d9426 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d9426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9428:	6943      	ldr	r3, [r0, #20]
   d942a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d942c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9430:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9434:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d9436:	4605      	mov	r5, r0
   d9438:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d943a:	d016      	beq.n	d946a <_ZN9TCPClient4readEPhj+0x44>
   d943c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d943e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d9442:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d9446:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d9448:	42bc      	cmp	r4, r7
   d944a:	bf28      	it	cs
   d944c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d944e:	3304      	adds	r3, #4
   d9450:	4622      	mov	r2, r4
   d9452:	4419      	add	r1, r3
   d9454:	4630      	mov	r0, r6
   d9456:	f002 fc79 	bl	dbd4c <memcpy>
   d945a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d945c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9460:	4423      	add	r3, r4
   d9462:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d9466:	4620      	mov	r0, r4
   d9468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d946a:	6803      	ldr	r3, [r0, #0]
   d946c:	691b      	ldr	r3, [r3, #16]
   d946e:	4798      	blx	r3
   d9470:	2800      	cmp	r0, #0
   d9472:	d1e3      	bne.n	d943c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d9474:	f04f 34ff 	mov.w	r4, #4294967295
   d9478:	e7f5      	b.n	d9466 <_ZN9TCPClient4readEPhj+0x40>
	...

000d947c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d947c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9480:	4698      	mov	r8, r3
    stop();
   d9482:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9484:	b093      	sub	sp, #76	; 0x4c
   d9486:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d9488:	2400      	movs	r4, #0
    stop();
   d948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d948c:	4606      	mov	r6, r0
   d948e:	4617      	mov	r7, r2
    stop();
   d9490:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9492:	4628      	mov	r0, r5
   d9494:	466b      	mov	r3, sp
   d9496:	4622      	mov	r2, r4
   d9498:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d949a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d949c:	f7fe f906 	bl	d76ac <netdb_getaddrinfo>
   d94a0:	4605      	mov	r5, r0
   d94a2:	2800      	cmp	r0, #0
   d94a4:	d163      	bne.n	d956e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d94a6:	9b00      	ldr	r3, [sp, #0]
   d94a8:	2b00      	cmp	r3, #0
   d94aa:	d04b      	beq.n	d9544 <_ZN9TCPClient7connectEPKctm+0xc8>
   d94ac:	695b      	ldr	r3, [r3, #20]
   d94ae:	2b00      	cmp	r3, #0
   d94b0:	d048      	beq.n	d9544 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d94b2:	a806      	add	r0, sp, #24
   d94b4:	f7ff fca0 	bl	d8df8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d94b8:	9b00      	ldr	r3, [sp, #0]
   d94ba:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   d94bc:	7863      	ldrb	r3, [r4, #1]
   d94be:	2b02      	cmp	r3, #2
   d94c0:	d104      	bne.n	d94cc <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d94c2:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   d94c4:	a806      	add	r0, sp, #24
   d94c6:	f7ff fce7 	bl	d8e98 <_ZN9IPAddressaSEPKh>
        if (port) {
   d94ca:	e026      	b.n	d951a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d94cc:	2b0a      	cmp	r3, #10
   d94ce:	d124      	bne.n	d951a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d94d0:	2211      	movs	r2, #17
   d94d2:	4629      	mov	r1, r5
   d94d4:	a801      	add	r0, sp, #4
   d94d6:	f002 fc47 	bl	dbd68 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d94da:	68a3      	ldr	r3, [r4, #8]
   d94dc:	2b00      	cmp	r3, #0
   d94de:	d038      	beq.n	d9552 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d94e0:	f104 0308 	add.w	r3, r4, #8
   d94e4:	f10d 0c04 	add.w	ip, sp, #4
   d94e8:	3418      	adds	r4, #24
   d94ea:	6818      	ldr	r0, [r3, #0]
   d94ec:	6859      	ldr	r1, [r3, #4]
   d94ee:	4662      	mov	r2, ip
   d94f0:	c203      	stmia	r2!, {r0, r1}
   d94f2:	3308      	adds	r3, #8
   d94f4:	42a3      	cmp	r3, r4
   d94f6:	4694      	mov	ip, r2
   d94f8:	d1f7      	bne.n	d94ea <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d94fa:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d94fc:	a901      	add	r1, sp, #4
   d94fe:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d9500:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d9504:	f7ff fc86 	bl	d8e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9508:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d950c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d9510:	ac07      	add	r4, sp, #28
   d9512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9514:	f8dc 3000 	ldr.w	r3, [ip]
   d9518:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d951a:	a806      	add	r0, sp, #24
   d951c:	f7ff fc8c 	bl	d8e38 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d9520:	b180      	cbz	r0, d9544 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d9522:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d9524:	ad07      	add	r5, sp, #28
   d9526:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d952a:	4b12      	ldr	r3, [pc, #72]	; (d9574 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d952c:	930c      	str	r3, [sp, #48]	; 0x30
   d952e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9530:	ac0d      	add	r4, sp, #52	; 0x34
   d9532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9534:	682b      	ldr	r3, [r5, #0]
   d9536:	7023      	strb	r3, [r4, #0]
   d9538:	463a      	mov	r2, r7
   d953a:	4643      	mov	r3, r8
   d953c:	a90c      	add	r1, sp, #48	; 0x30
   d953e:	4630      	mov	r0, r6
   d9540:	47c8      	blx	r9
   d9542:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d9544:	9800      	ldr	r0, [sp, #0]
   d9546:	f7fe f8a9 	bl	d769c <netdb_freeaddrinfo>
}
   d954a:	4628      	mov	r0, r5
   d954c:	b013      	add	sp, #76	; 0x4c
   d954e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9552:	68e3      	ldr	r3, [r4, #12]
   d9554:	2b00      	cmp	r3, #0
   d9556:	d1c3      	bne.n	d94e0 <_ZN9TCPClient7connectEPKctm+0x64>
   d9558:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d955c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9560:	f7fe f93c 	bl	d77dc <inet_htonl>
   d9564:	4581      	cmp	r9, r0
   d9566:	d1bb      	bne.n	d94e0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d9568:	f104 0114 	add.w	r1, r4, #20
   d956c:	e7aa      	b.n	d94c4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d956e:	4625      	mov	r5, r4
   d9570:	e7e8      	b.n	d9544 <_ZN9TCPClient7connectEPKctm+0xc8>
   d9572:	bf00      	nop
   d9574:	000de758 	.word	0x000de758

000d9578 <_ZN9TCPClient12flush_bufferEv>:
   d9578:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d957a:	2300      	movs	r3, #0
   d957c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d9580:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d9582:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d9586:	4770      	bx	lr

000d9588 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d958c:	461f      	mov	r7, r3
    stop();
   d958e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9590:	460c      	mov	r4, r1
    stop();
   d9592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9594:	b08a      	sub	sp, #40	; 0x28
   d9596:	4605      	mov	r5, r0
   d9598:	4616      	mov	r6, r2
    stop();
   d959a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d959c:	7d23      	ldrb	r3, [r4, #20]
   d959e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d95a2:	2b04      	cmp	r3, #4
   d95a4:	bf0c      	ite	eq
   d95a6:	2002      	moveq	r0, #2
   d95a8:	200a      	movne	r0, #10
   d95aa:	2206      	movs	r2, #6
   d95ac:	2101      	movs	r1, #1
   d95ae:	f7fe f9e5 	bl	d797c <sock_socket>
   d95b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d95b6:	696b      	ldr	r3, [r5, #20]
   d95b8:	681b      	ldr	r3, [r3, #0]
   d95ba:	2b00      	cmp	r3, #0
   d95bc:	da08      	bge.n	d95d0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d95be:	682b      	ldr	r3, [r5, #0]
   d95c0:	4628      	mov	r0, r5
   d95c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d95c4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d95c6:	4798      	blx	r3
}
   d95c8:	4620      	mov	r0, r4
   d95ca:	b00a      	add	sp, #40	; 0x28
   d95cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d95d0:	4628      	mov	r0, r5
   d95d2:	f7ff ffd1 	bl	d9578 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d95d6:	b1b7      	cbz	r7, d9606 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d95d8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d95da:	a903      	add	r1, sp, #12
   d95dc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d95de:	9303      	str	r3, [sp, #12]
   d95e0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d95e4:	f7fe f8aa 	bl	d773c <if_index_to_name>
   d95e8:	2800      	cmp	r0, #0
   d95ea:	d1e8      	bne.n	d95be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d95ec:	6968      	ldr	r0, [r5, #20]
   d95ee:	2306      	movs	r3, #6
   d95f0:	9300      	str	r3, [sp, #0]
   d95f2:	6800      	ldr	r0, [r0, #0]
   d95f4:	ab03      	add	r3, sp, #12
   d95f6:	f241 020b 	movw	r2, #4107	; 0x100b
   d95fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d95fe:	f7fe f985 	bl	d790c <sock_setsockopt>
   d9602:	2800      	cmp	r0, #0
   d9604:	d1db      	bne.n	d95be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d9606:	221c      	movs	r2, #28
   d9608:	2100      	movs	r1, #0
   d960a:	a803      	add	r0, sp, #12
   d960c:	f002 fbac 	bl	dbd68 <memset>
    if (ip.version() == 4) {
   d9610:	7d23      	ldrb	r3, [r4, #20]
   d9612:	2b04      	cmp	r3, #4
   d9614:	d11d      	bne.n	d9652 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d9616:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d961a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d961c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d9620:	f7fe f8ec 	bl	d77fc <inet_htons>
   d9624:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d9628:	6860      	ldr	r0, [r4, #4]
   d962a:	f7fe f8d7 	bl	d77dc <inet_htonl>
   d962e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d9630:	696b      	ldr	r3, [r5, #20]
   d9632:	221c      	movs	r2, #28
   d9634:	6818      	ldr	r0, [r3, #0]
   d9636:	a903      	add	r1, sp, #12
   d9638:	f7fe f978 	bl	d792c <sock_connect>
   d963c:	2800      	cmp	r0, #0
   d963e:	d1be      	bne.n	d95be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d9640:	3404      	adds	r4, #4
   d9642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9644:	696d      	ldr	r5, [r5, #20]
   d9646:	358c      	adds	r5, #140	; 0x8c
   d9648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d964a:	6823      	ldr	r3, [r4, #0]
   d964c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d964e:	2401      	movs	r4, #1
   d9650:	e7ba      	b.n	d95c8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d9652:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d9656:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d9658:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d965c:	f7fe f8ce 	bl	d77fc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9660:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d9662:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9666:	1d23      	adds	r3, r4, #4
   d9668:	f104 0714 	add.w	r7, r4, #20
   d966c:	6818      	ldr	r0, [r3, #0]
   d966e:	6859      	ldr	r1, [r3, #4]
   d9670:	4632      	mov	r2, r6
   d9672:	c203      	stmia	r2!, {r0, r1}
   d9674:	3308      	adds	r3, #8
   d9676:	42bb      	cmp	r3, r7
   d9678:	4616      	mov	r6, r2
   d967a:	d1f7      	bne.n	d966c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d967c:	e7d8      	b.n	d9630 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d9680 <_ZN9TCPClient9availableEv>:
{
   d9680:	b530      	push	{r4, r5, lr}
   d9682:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d9684:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d9688:	b08b      	sub	sp, #44	; 0x2c
   d968a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d968c:	b12b      	cbz	r3, d969a <_ZN9TCPClient9availableEv+0x1a>
   d968e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d9692:	429a      	cmp	r2, r3
   d9694:	d101      	bne.n	d969a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d9696:	f7ff ff6f 	bl	d9578 <_ZN9TCPClient12flush_bufferEv>
   d969a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d969c:	6808      	ldr	r0, [r1, #0]
   d969e:	2800      	cmp	r0, #0
   d96a0:	db18      	blt.n	d96d4 <_ZN9TCPClient9availableEv+0x54>
   d96a2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d96a6:	2d7f      	cmp	r5, #127	; 0x7f
   d96a8:	d814      	bhi.n	d96d4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d96aa:	3104      	adds	r1, #4
   d96ac:	2308      	movs	r3, #8
   d96ae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d96b2:	4429      	add	r1, r5
   d96b4:	f7fe f942 	bl	d793c <sock_recv>
            if (ret > 0) {
   d96b8:	2800      	cmp	r0, #0
   d96ba:	dd13      	ble.n	d96e4 <_ZN9TCPClient9availableEv+0x64>
   d96bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d96be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d96c2:	b90a      	cbnz	r2, d96c8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d96c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d96c8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d96ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d96ce:	4410      	add	r0, r2
   d96d0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d96d4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d96d6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d96da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d96de:	1ac0      	subs	r0, r0, r3
   d96e0:	b00b      	add	sp, #44	; 0x2c
   d96e2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d96e4:	f7fe faa6 	bl	d7c34 <__errno>
   d96e8:	6803      	ldr	r3, [r0, #0]
   d96ea:	2b0b      	cmp	r3, #11
   d96ec:	d0f2      	beq.n	d96d4 <_ZN9TCPClient9availableEv+0x54>
   d96ee:	f7fe faa1 	bl	d7c34 <__errno>
   d96f2:	6803      	ldr	r3, [r0, #0]
   d96f4:	2b0b      	cmp	r3, #11
   d96f6:	d0ed      	beq.n	d96d4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d96f8:	2320      	movs	r3, #32
   d96fa:	2500      	movs	r5, #0
   d96fc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d9700:	f7fe fa98 	bl	d7c34 <__errno>
   d9704:	6803      	ldr	r3, [r0, #0]
   d9706:	9301      	str	r3, [sp, #4]
   d9708:	4b08      	ldr	r3, [pc, #32]	; (d972c <_ZN9TCPClient9availableEv+0xac>)
   d970a:	4909      	ldr	r1, [pc, #36]	; (d9730 <_ZN9TCPClient9availableEv+0xb0>)
   d970c:	9300      	str	r3, [sp, #0]
   d970e:	aa02      	add	r2, sp, #8
   d9710:	462b      	mov	r3, r5
   d9712:	2032      	movs	r0, #50	; 0x32
   d9714:	f7fe f992 	bl	d7a3c <log_message>
                    sock_close(d_->sock);
   d9718:	6963      	ldr	r3, [r4, #20]
   d971a:	6818      	ldr	r0, [r3, #0]
   d971c:	f7fe f8fe 	bl	d791c <sock_close>
   d9720:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9722:	f04f 32ff 	mov.w	r2, #4294967295
   d9726:	601a      	str	r2, [r3, #0]
   d9728:	e7d4      	b.n	d96d4 <_ZN9TCPClient9availableEv+0x54>
   d972a:	bf00      	nop
   d972c:	000de827 	.word	0x000de827
   d9730:	000de820 	.word	0x000de820

000d9734 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d9734:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9736:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d9738:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d973a:	6818      	ldr	r0, [r3, #0]
   d973c:	2800      	cmp	r0, #0
   d973e:	db01      	blt.n	d9744 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d9740:	f7fe f8ec 	bl	d791c <sock_close>
   d9744:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d9746:	f04f 32ff 	mov.w	r2, #4294967295
   d974a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d974c:	6960      	ldr	r0, [r4, #20]
   d974e:	2211      	movs	r2, #17
   d9750:	2100      	movs	r1, #0
   d9752:	308c      	adds	r0, #140	; 0x8c
   d9754:	f002 fb08 	bl	dbd68 <memset>
    flush_buffer();
   d9758:	4620      	mov	r0, r4
}
   d975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d975e:	f7ff bf0b 	b.w	d9578 <_ZN9TCPClient12flush_bufferEv>

000d9762 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d9762:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d9764:	6818      	ldr	r0, [r3, #0]
}
   d9766:	43c0      	mvns	r0, r0
   d9768:	0fc0      	lsrs	r0, r0, #31
   d976a:	4770      	bx	lr

000d976c <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d976c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d976e:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d9770:	4604      	mov	r4, r0
          total(0) {
   d9772:	6001      	str	r1, [r0, #0]
   d9774:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d9778:	3088      	adds	r0, #136	; 0x88
   d977a:	f7ff fb3d 	bl	d8df8 <_ZN9IPAddressC1Ev>
}
   d977e:	4620      	mov	r0, r4
   d9780:	bd10      	pop	{r4, pc}
	...

000d9784 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d9784:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9786:	2300      	movs	r3, #0
   d9788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d978c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d9790:	4a0e      	ldr	r2, [pc, #56]	; (d97cc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d9792:	6103      	str	r3, [r0, #16]
   d9794:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d9796:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d9798:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d979a:	20ac      	movs	r0, #172	; 0xac
   d979c:	9101      	str	r1, [sp, #4]
   d979e:	f7fa fc7a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d97a2:	1e05      	subs	r5, r0, #0
   d97a4:	f105 060c 	add.w	r6, r5, #12
   d97a8:	d008      	beq.n	d97bc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d97aa:	2301      	movs	r3, #1
   d97ac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d97b0:	4b07      	ldr	r3, [pc, #28]	; (d97d0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d97b2:	9901      	ldr	r1, [sp, #4]
   d97b4:	602b      	str	r3, [r5, #0]
   d97b6:	4630      	mov	r0, r6
   d97b8:	f7ff ffd8 	bl	d976c <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d97bc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d97be:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d97c2:	f7ff fed9 	bl	d9578 <_ZN9TCPClient12flush_bufferEv>
}
   d97c6:	b002      	add	sp, #8
   d97c8:	bd70      	pop	{r4, r5, r6, pc}
   d97ca:	bf00      	nop
   d97cc:	000de85c 	.word	0x000de85c
   d97d0:	000de840 	.word	0x000de840

000d97d4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d97d4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d97d6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d97da:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d97dc:	f7ff ffd2 	bl	d9784 <_ZN9TCPClientC1Ei>
}
   d97e0:	4620      	mov	r0, r4
   d97e2:	bd10      	pop	{r4, pc}

000d97e4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d97e4:	b510      	push	{r4, lr}
   d97e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d97e8:	6800      	ldr	r0, [r0, #0]
   d97ea:	2800      	cmp	r0, #0
   d97ec:	db01      	blt.n	d97f2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d97ee:	f7fe f895 	bl	d791c <sock_close>
    }
}
   d97f2:	4620      	mov	r0, r4
   d97f4:	bd10      	pop	{r4, pc}

000d97f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d97f6:	300c      	adds	r0, #12
   d97f8:	f7ff bff4 	b.w	d97e4 <_ZN9TCPClient4DataD1Ev>

000d97fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d97fc:	2300      	movs	r3, #0
   d97fe:	6840      	ldr	r0, [r0, #4]
   d9800:	461a      	mov	r2, r3
   d9802:	f7fe b967 	b.w	d7ad4 <network_connect>

000d9806 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9806:	6840      	ldr	r0, [r0, #4]
   d9808:	2200      	movs	r2, #0
   d980a:	2102      	movs	r1, #2
   d980c:	f7fe b972 	b.w	d7af4 <network_disconnect>

000d9810 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9810:	2200      	movs	r2, #0
   d9812:	6840      	ldr	r0, [r0, #4]
   d9814:	4611      	mov	r1, r2
   d9816:	f7fe b965 	b.w	d7ae4 <network_connecting>

000d981a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d981a:	2200      	movs	r2, #0
   d981c:	6840      	ldr	r0, [r0, #4]
   d981e:	4611      	mov	r1, r2
   d9820:	f7fe b970 	b.w	d7b04 <network_ready>

000d9824 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9824:	2300      	movs	r3, #0
   d9826:	6840      	ldr	r0, [r0, #4]
   d9828:	461a      	mov	r2, r3
   d982a:	4619      	mov	r1, r3
   d982c:	f7fe b972 	b.w	d7b14 <network_on>

000d9830 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9830:	2300      	movs	r3, #0
   d9832:	6840      	ldr	r0, [r0, #4]
   d9834:	461a      	mov	r2, r3
   d9836:	4619      	mov	r1, r3
   d9838:	f7fe b974 	b.w	d7b24 <network_off>

000d983c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d983c:	6840      	ldr	r0, [r0, #4]
   d983e:	2200      	movs	r2, #0
   d9840:	f081 0101 	eor.w	r1, r1, #1
   d9844:	f7fe b976 	b.w	d7b34 <network_listen>

000d9848 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9848:	6840      	ldr	r0, [r0, #4]
   d984a:	2200      	movs	r2, #0
   d984c:	f7fe b982 	b.w	d7b54 <network_set_listen_timeout>

000d9850 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9850:	2200      	movs	r2, #0
   d9852:	6840      	ldr	r0, [r0, #4]
   d9854:	4611      	mov	r1, r2
   d9856:	f7fe b985 	b.w	d7b64 <network_get_listen_timeout>

000d985a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d985a:	2200      	movs	r2, #0
   d985c:	6840      	ldr	r0, [r0, #4]
   d985e:	4611      	mov	r1, r2
   d9860:	f7fe b970 	b.w	d7b44 <network_listening>

000d9864 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9868:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d986a:	b095      	sub	sp, #84	; 0x54
   d986c:	4616      	mov	r6, r2
   d986e:	460d      	mov	r5, r1
   d9870:	4607      	mov	r7, r0
    IPAddress addr;
   d9872:	f7ff fac1 	bl	d8df8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9876:	4621      	mov	r1, r4
   d9878:	2218      	movs	r2, #24
   d987a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d987c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d987e:	f002 fa73 	bl	dbd68 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9882:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9884:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9888:	4621      	mov	r1, r4
   d988a:	466b      	mov	r3, sp
   d988c:	aa0c      	add	r2, sp, #48	; 0x30
   d988e:	4630      	mov	r0, r6
   d9890:	f7fd ff0c 	bl	d76ac <netdb_getaddrinfo>
    if (!r) {
   d9894:	4604      	mov	r4, r0
   d9896:	2800      	cmp	r0, #0
   d9898:	d146      	bne.n	d9928 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d989a:	4602      	mov	r2, r0
   d989c:	2101      	movs	r1, #1
   d989e:	6868      	ldr	r0, [r5, #4]
   d98a0:	f7fe f930 	bl	d7b04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d98a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98a8:	4622      	mov	r2, r4
   d98aa:	6868      	ldr	r0, [r5, #4]
   d98ac:	f7fe f92a 	bl	d7b04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98b2:	4681      	mov	r9, r0
        bool ok = false;
   d98b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98b6:	2e00      	cmp	r6, #0
   d98b8:	d036      	beq.n	d9928 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d98ba:	2900      	cmp	r1, #0
   d98bc:	d134      	bne.n	d9928 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d98be:	6873      	ldr	r3, [r6, #4]
   d98c0:	2b02      	cmp	r3, #2
   d98c2:	d003      	beq.n	d98cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d98c4:	2b0a      	cmp	r3, #10
   d98c6:	d00b      	beq.n	d98e0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98c8:	69f6      	ldr	r6, [r6, #28]
   d98ca:	e7f4      	b.n	d98b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d98cc:	f1b8 0f00 	cmp.w	r8, #0
   d98d0:	d004      	beq.n	d98dc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d98d2:	6971      	ldr	r1, [r6, #20]
   d98d4:	4638      	mov	r0, r7
   d98d6:	3104      	adds	r1, #4
   d98d8:	f7ff fade 	bl	d8e98 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d98dc:	4641      	mov	r1, r8
   d98de:	e7f3      	b.n	d98c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d98e0:	f1b9 0f00 	cmp.w	r9, #0
   d98e4:	d101      	bne.n	d98ea <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d98e6:	4649      	mov	r1, r9
   d98e8:	e7ee      	b.n	d98c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d98ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d98ec:	2210      	movs	r2, #16
   d98ee:	a801      	add	r0, sp, #4
   d98f0:	f002 fa3a 	bl	dbd68 <memset>
                    a.v = 6;
   d98f4:	2306      	movs	r3, #6
   d98f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d98fa:	ad01      	add	r5, sp, #4
   d98fc:	f104 0308 	add.w	r3, r4, #8
   d9900:	3418      	adds	r4, #24
   d9902:	6818      	ldr	r0, [r3, #0]
   d9904:	6859      	ldr	r1, [r3, #4]
   d9906:	462a      	mov	r2, r5
   d9908:	c203      	stmia	r2!, {r0, r1}
   d990a:	3308      	adds	r3, #8
   d990c:	42a3      	cmp	r3, r4
   d990e:	4615      	mov	r5, r2
   d9910:	d1f7      	bne.n	d9902 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9912:	a901      	add	r1, sp, #4
   d9914:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9916:	ad07      	add	r5, sp, #28
   d9918:	f7ff fa7c 	bl	d8e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d991c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d991e:	1d3c      	adds	r4, r7, #4
   d9920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9922:	682b      	ldr	r3, [r5, #0]
   d9924:	7023      	strb	r3, [r4, #0]
   d9926:	e7de      	b.n	d98e6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9928:	9800      	ldr	r0, [sp, #0]
   d992a:	f7fd feb7 	bl	d769c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d992e:	4638      	mov	r0, r7
   d9930:	b015      	add	sp, #84	; 0x54
   d9932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9938 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9938:	4b02      	ldr	r3, [pc, #8]	; (d9944 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d993a:	4a03      	ldr	r2, [pc, #12]	; (d9948 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d993c:	601a      	str	r2, [r3, #0]
   d993e:	2200      	movs	r2, #0
   d9940:	605a      	str	r2, [r3, #4]

} // spark
   d9942:	4770      	bx	lr
   d9944:	2003e7c0 	.word	0x2003e7c0
   d9948:	000de8a8 	.word	0x000de8a8

000d994c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d994c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d994e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9950:	d902      	bls.n	d9958 <pinAvailable+0xc>
    return false;
   d9952:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9954:	b002      	add	sp, #8
   d9956:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9958:	f1a0 030b 	sub.w	r3, r0, #11
   d995c:	2b02      	cmp	r3, #2
   d995e:	d81a      	bhi.n	d9996 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9960:	4c17      	ldr	r4, [pc, #92]	; (d99c0 <pinAvailable+0x74>)
   d9962:	7821      	ldrb	r1, [r4, #0]
   d9964:	f3bf 8f5b 	dmb	ish
   d9968:	f011 0101 	ands.w	r1, r1, #1
   d996c:	d10b      	bne.n	d9986 <pinAvailable+0x3a>
   d996e:	4620      	mov	r0, r4
   d9970:	9101      	str	r1, [sp, #4]
   d9972:	f7fa fb98 	bl	d40a6 <__cxa_guard_acquire>
   d9976:	9901      	ldr	r1, [sp, #4]
   d9978:	b128      	cbz	r0, d9986 <pinAvailable+0x3a>
   d997a:	4812      	ldr	r0, [pc, #72]	; (d99c4 <pinAvailable+0x78>)
   d997c:	f7fe f9b0 	bl	d7ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9980:	4620      	mov	r0, r4
   d9982:	f7fa fb95 	bl	d40b0 <__cxa_guard_release>
   d9986:	4b0f      	ldr	r3, [pc, #60]	; (d99c4 <pinAvailable+0x78>)
   d9988:	7818      	ldrb	r0, [r3, #0]
   d998a:	f7fe f807 	bl	d799c <hal_spi_is_enabled>
   d998e:	2800      	cmp	r0, #0
   d9990:	d1df      	bne.n	d9952 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9992:	2001      	movs	r0, #1
   d9994:	e7de      	b.n	d9954 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9996:	2801      	cmp	r0, #1
   d9998:	d809      	bhi.n	d99ae <pinAvailable+0x62>
   d999a:	f000 f8a7 	bl	d9aec <_Z19__fetch_global_Wirev>
   d999e:	2100      	movs	r1, #0
   d99a0:	7c00      	ldrb	r0, [r0, #16]
   d99a2:	f7fd ff9b 	bl	d78dc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d99a6:	f080 0001 	eor.w	r0, r0, #1
   d99aa:	b2c0      	uxtb	r0, r0
   d99ac:	e7d2      	b.n	d9954 <pinAvailable+0x8>
   d99ae:	3809      	subs	r0, #9
   d99b0:	2801      	cmp	r0, #1
   d99b2:	d8ee      	bhi.n	d9992 <pinAvailable+0x46>
   d99b4:	f7ff fbe2 	bl	d917c <_Z22__fetch_global_Serial1v>
   d99b8:	7c00      	ldrb	r0, [r0, #16]
   d99ba:	f7fd ff57 	bl	d786c <hal_usart_is_enabled>
   d99be:	e7f2      	b.n	d99a6 <pinAvailable+0x5a>
   d99c0:	2003e7c8 	.word	0x2003e7c8
   d99c4:	2003e7cc 	.word	0x2003e7cc

000d99c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d99c8:	2823      	cmp	r0, #35	; 0x23
{
   d99ca:	b538      	push	{r3, r4, r5, lr}
   d99cc:	4604      	mov	r4, r0
   d99ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d99d0:	d80a      	bhi.n	d99e8 <pinMode+0x20>
   d99d2:	29ff      	cmp	r1, #255	; 0xff
   d99d4:	d008      	beq.n	d99e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d99d6:	f7ff ffb9 	bl	d994c <pinAvailable>
   d99da:	b128      	cbz	r0, d99e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d99dc:	4629      	mov	r1, r5
   d99de:	4620      	mov	r0, r4
}
   d99e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d99e4:	f7fd be72 	b.w	d76cc <HAL_Pin_Mode>
}
   d99e8:	bd38      	pop	{r3, r4, r5, pc}

000d99ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d99ea:	b538      	push	{r3, r4, r5, lr}
   d99ec:	4604      	mov	r4, r0
   d99ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d99f0:	f7fd fe74 	bl	d76dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d99f4:	28ff      	cmp	r0, #255	; 0xff
   d99f6:	d010      	beq.n	d9a1a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d99f8:	2806      	cmp	r0, #6
   d99fa:	d804      	bhi.n	d9a06 <digitalWrite+0x1c>
   d99fc:	234d      	movs	r3, #77	; 0x4d
   d99fe:	fa23 f000 	lsr.w	r0, r3, r0
   d9a02:	07c3      	lsls	r3, r0, #31
   d9a04:	d409      	bmi.n	d9a1a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9a06:	4620      	mov	r0, r4
   d9a08:	f7ff ffa0 	bl	d994c <pinAvailable>
   d9a0c:	b128      	cbz	r0, d9a1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9a0e:	4629      	mov	r1, r5
   d9a10:	4620      	mov	r0, r4
}
   d9a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9a16:	f7fd be69 	b.w	d76ec <HAL_GPIO_Write>
}
   d9a1a:	bd38      	pop	{r3, r4, r5, pc}

000d9a1c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9a1c:	b510      	push	{r4, lr}
   d9a1e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9a20:	f7fd fe5c 	bl	d76dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9a24:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9a26:	b2db      	uxtb	r3, r3
   d9a28:	2b01      	cmp	r3, #1
   d9a2a:	d908      	bls.n	d9a3e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9a2c:	4620      	mov	r0, r4
   d9a2e:	f7ff ff8d 	bl	d994c <pinAvailable>
   d9a32:	b120      	cbz	r0, d9a3e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9a34:	4620      	mov	r0, r4
}
   d9a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9a3a:	f7fd be5f 	b.w	d76fc <HAL_GPIO_Read>
}
   d9a3e:	2000      	movs	r0, #0
   d9a40:	bd10      	pop	{r4, pc}

000d9a42 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9a42:	280d      	cmp	r0, #13
{
   d9a44:	b510      	push	{r4, lr}
   d9a46:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9a48:	bf9c      	itt	ls
   d9a4a:	340e      	addls	r4, #14
   d9a4c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9a4e:	4620      	mov	r0, r4
   d9a50:	f7ff ff7c 	bl	d994c <pinAvailable>
   d9a54:	b150      	cbz	r0, d9a6c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9a56:	2103      	movs	r1, #3
   d9a58:	4620      	mov	r0, r4
   d9a5a:	f7fd fe2f 	bl	d76bc <HAL_Validate_Pin_Function>
   d9a5e:	2803      	cmp	r0, #3
   d9a60:	d104      	bne.n	d9a6c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9a62:	4620      	mov	r0, r4
}
   d9a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9a68:	f7fd be58 	b.w	d771c <hal_adc_read>
}
   d9a6c:	2000      	movs	r0, #0
   d9a6e:	bd10      	pop	{r4, pc}

000d9a70 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d9a70:	b538      	push	{r3, r4, r5, lr}
   d9a72:	4604      	mov	r4, r0
   d9a74:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d9a76:	f7ff ff69 	bl	d994c <pinAvailable>
   d9a7a:	b1f0      	cbz	r0, d9aba <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d9a7c:	2104      	movs	r1, #4
   d9a7e:	4620      	mov	r0, r4
   d9a80:	f7fd fe1c 	bl	d76bc <HAL_Validate_Pin_Function>
   d9a84:	2804      	cmp	r0, #4
   d9a86:	d105      	bne.n	d9a94 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d9a88:	b2a9      	uxth	r1, r5
   d9a8a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d9a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d9a90:	f7fd be3c 	b.w	d770c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d9a94:	2102      	movs	r1, #2
   d9a96:	4620      	mov	r0, r4
   d9a98:	f7fd fe10 	bl	d76bc <HAL_Validate_Pin_Function>
   d9a9c:	2802      	cmp	r0, #2
   d9a9e:	d10c      	bne.n	d9aba <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d9aa0:	4620      	mov	r0, r4
   d9aa2:	f7fd fe1b 	bl	d76dc <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d9aa6:	2801      	cmp	r0, #1
   d9aa8:	d001      	beq.n	d9aae <_Z11analogWritetm+0x3e>
   d9aaa:	2804      	cmp	r0, #4
   d9aac:	d105      	bne.n	d9aba <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d9aae:	4629      	mov	r1, r5
   d9ab0:	4620      	mov	r0, r4
}
   d9ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d9ab6:	f7fd be39 	b.w	d772c <hal_pwm_write_ext>
}
   d9aba:	bd38      	pop	{r3, r4, r5, pc}

000d9abc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9abc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9abe:	2300      	movs	r3, #0
   d9ac0:	2520      	movs	r5, #32
   d9ac2:	8043      	strh	r3, [r0, #2]
   d9ac4:	2314      	movs	r3, #20
{
   d9ac6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9ac8:	8003      	strh	r3, [r0, #0]
   d9aca:	6085      	str	r5, [r0, #8]
   d9acc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ace:	4906      	ldr	r1, [pc, #24]	; (d9ae8 <_Z17acquireWireBufferv+0x2c>)
   d9ad0:	4628      	mov	r0, r5
   d9ad2:	f000 f83a 	bl	d9b4a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ad6:	4904      	ldr	r1, [pc, #16]	; (d9ae8 <_Z17acquireWireBufferv+0x2c>)
	};
   d9ad8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ada:	4628      	mov	r0, r5
   d9adc:	f000 f835 	bl	d9b4a <_ZnajRKSt9nothrow_t>
	};
   d9ae0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9ae2:	4620      	mov	r0, r4
   d9ae4:	bd38      	pop	{r3, r4, r5, pc}
   d9ae6:	bf00      	nop
   d9ae8:	000de8d4 	.word	0x000de8d4

000d9aec <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9aec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9aee:	4d0f      	ldr	r5, [pc, #60]	; (d9b2c <_Z19__fetch_global_Wirev+0x40>)
   d9af0:	7829      	ldrb	r1, [r5, #0]
   d9af2:	f3bf 8f5b 	dmb	ish
   d9af6:	f011 0401 	ands.w	r4, r1, #1
{
   d9afa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9afc:	d113      	bne.n	d9b26 <_Z19__fetch_global_Wirev+0x3a>
   d9afe:	4628      	mov	r0, r5
   d9b00:	f7fa fad1 	bl	d40a6 <__cxa_guard_acquire>
   d9b04:	b178      	cbz	r0, d9b26 <_Z19__fetch_global_Wirev+0x3a>
   d9b06:	a801      	add	r0, sp, #4
   d9b08:	f7ff ffd8 	bl	d9abc <_Z17acquireWireBufferv>
   d9b0c:	aa01      	add	r2, sp, #4
   d9b0e:	4621      	mov	r1, r4
   d9b10:	4807      	ldr	r0, [pc, #28]	; (d9b30 <_Z19__fetch_global_Wirev+0x44>)
   d9b12:	f7ff fb9d 	bl	d9250 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9b16:	4628      	mov	r0, r5
   d9b18:	f7fa faca 	bl	d40b0 <__cxa_guard_release>
   d9b1c:	4a05      	ldr	r2, [pc, #20]	; (d9b34 <_Z19__fetch_global_Wirev+0x48>)
   d9b1e:	4906      	ldr	r1, [pc, #24]	; (d9b38 <_Z19__fetch_global_Wirev+0x4c>)
   d9b20:	4803      	ldr	r0, [pc, #12]	; (d9b30 <_Z19__fetch_global_Wirev+0x44>)
   d9b22:	f000 f80b 	bl	d9b3c <__aeabi_atexit>
	return wire;
}
   d9b26:	4802      	ldr	r0, [pc, #8]	; (d9b30 <_Z19__fetch_global_Wirev+0x44>)
   d9b28:	b007      	add	sp, #28
   d9b2a:	bd30      	pop	{r4, r5, pc}
   d9b2c:	2003e7d8 	.word	0x2003e7d8
   d9b30:	2003e7dc 	.word	0x2003e7dc
   d9b34:	2003e128 	.word	0x2003e128
   d9b38:	000d91f9 	.word	0x000d91f9

000d9b3c <__aeabi_atexit>:
   d9b3c:	460b      	mov	r3, r1
   d9b3e:	4601      	mov	r1, r0
   d9b40:	4618      	mov	r0, r3
   d9b42:	f002 b8f5 	b.w	dbd30 <__cxa_atexit>

000d9b46 <_ZdlPvj>:
   d9b46:	f7fa baaa 	b.w	d409e <_ZdlPv>

000d9b4a <_ZnajRKSt9nothrow_t>:
   d9b4a:	f7fa baa6 	b.w	d409a <_Znaj>

000d9b4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d9b4e:	68c3      	ldr	r3, [r0, #12]
   d9b50:	689a      	ldr	r2, [r3, #8]
   d9b52:	60c2      	str	r2, [r0, #12]
   d9b54:	b510      	push	{r4, lr}
   d9b56:	b102      	cbz	r2, d9b5a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d9b58:	6050      	str	r0, [r2, #4]
   d9b5a:	6842      	ldr	r2, [r0, #4]
   d9b5c:	605a      	str	r2, [r3, #4]
   d9b5e:	680c      	ldr	r4, [r1, #0]
   d9b60:	4284      	cmp	r4, r0
   d9b62:	d103      	bne.n	d9b6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9b64:	600b      	str	r3, [r1, #0]
   d9b66:	6098      	str	r0, [r3, #8]
   d9b68:	6043      	str	r3, [r0, #4]
   d9b6a:	bd10      	pop	{r4, pc}
   d9b6c:	6891      	ldr	r1, [r2, #8]
   d9b6e:	4281      	cmp	r1, r0
   d9b70:	bf0c      	ite	eq
   d9b72:	6093      	streq	r3, [r2, #8]
   d9b74:	60d3      	strne	r3, [r2, #12]
   d9b76:	e7f6      	b.n	d9b66 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d9b78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d9b78:	6883      	ldr	r3, [r0, #8]
   d9b7a:	68da      	ldr	r2, [r3, #12]
   d9b7c:	6082      	str	r2, [r0, #8]
   d9b7e:	b510      	push	{r4, lr}
   d9b80:	b102      	cbz	r2, d9b84 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d9b82:	6050      	str	r0, [r2, #4]
   d9b84:	6842      	ldr	r2, [r0, #4]
   d9b86:	605a      	str	r2, [r3, #4]
   d9b88:	680c      	ldr	r4, [r1, #0]
   d9b8a:	4284      	cmp	r4, r0
   d9b8c:	d103      	bne.n	d9b96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9b8e:	600b      	str	r3, [r1, #0]
   d9b90:	60d8      	str	r0, [r3, #12]
   d9b92:	6043      	str	r3, [r0, #4]
   d9b94:	bd10      	pop	{r4, pc}
   d9b96:	68d1      	ldr	r1, [r2, #12]
   d9b98:	4281      	cmp	r1, r0
   d9b9a:	bf0c      	ite	eq
   d9b9c:	60d3      	streq	r3, [r2, #12]
   d9b9e:	6093      	strne	r3, [r2, #8]
   d9ba0:	e7f6      	b.n	d9b90 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000d9ba2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d9ba2:	7803      	ldrb	r3, [r0, #0]
   d9ba4:	b933      	cbnz	r3, d9bb4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d9ba6:	6843      	ldr	r3, [r0, #4]
   d9ba8:	685b      	ldr	r3, [r3, #4]
   d9baa:	4283      	cmp	r3, r0
   d9bac:	d102      	bne.n	d9bb4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d9bae:	68db      	ldr	r3, [r3, #12]
   d9bb0:	4618      	mov	r0, r3
   d9bb2:	4770      	bx	lr
   d9bb4:	6882      	ldr	r2, [r0, #8]
   d9bb6:	b122      	cbz	r2, d9bc2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   d9bb8:	4613      	mov	r3, r2
   d9bba:	68d2      	ldr	r2, [r2, #12]
   d9bbc:	2a00      	cmp	r2, #0
   d9bbe:	d1fb      	bne.n	d9bb8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   d9bc0:	e7f6      	b.n	d9bb0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d9bc2:	6843      	ldr	r3, [r0, #4]
   d9bc4:	689a      	ldr	r2, [r3, #8]
   d9bc6:	4282      	cmp	r2, r0
   d9bc8:	d1f2      	bne.n	d9bb0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d9bca:	4618      	mov	r0, r3
   d9bcc:	685b      	ldr	r3, [r3, #4]
   d9bce:	e7f9      	b.n	d9bc4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000d9bd0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d9bd0:	68c3      	ldr	r3, [r0, #12]
   d9bd2:	b123      	cbz	r3, d9bde <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d9bd4:	4618      	mov	r0, r3
   d9bd6:	689b      	ldr	r3, [r3, #8]
   d9bd8:	2b00      	cmp	r3, #0
   d9bda:	d1fb      	bne.n	d9bd4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d9bdc:	4770      	bx	lr
   d9bde:	6843      	ldr	r3, [r0, #4]
   d9be0:	68da      	ldr	r2, [r3, #12]
   d9be2:	4282      	cmp	r2, r0
   d9be4:	d102      	bne.n	d9bec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d9be6:	4618      	mov	r0, r3
   d9be8:	685b      	ldr	r3, [r3, #4]
   d9bea:	e7f9      	b.n	d9be0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d9bec:	68c2      	ldr	r2, [r0, #12]
   d9bee:	4293      	cmp	r3, r2
   d9bf0:	bf18      	it	ne
   d9bf2:	4618      	movne	r0, r3
   d9bf4:	4770      	bx	lr

000d9bf6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d9bf6:	f7ff bfd4 	b.w	d9ba2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d9bfa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d9bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9bfe:	461e      	mov	r6, r3
   d9c00:	f103 0804 	add.w	r8, r3, #4
   d9c04:	2300      	movs	r3, #0
   d9c06:	e9c1 3302 	strd	r3, r3, [r1, #8]
   d9c0a:	460c      	mov	r4, r1
   d9c0c:	604a      	str	r2, [r1, #4]
   d9c0e:	700b      	strb	r3, [r1, #0]
   d9c10:	b300      	cbz	r0, d9c54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   d9c12:	4296      	cmp	r6, r2
   d9c14:	6091      	str	r1, [r2, #8]
   d9c16:	d118      	bne.n	d9c4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   d9c18:	6071      	str	r1, [r6, #4]
   d9c1a:	60f4      	str	r4, [r6, #12]
   d9c1c:	2701      	movs	r7, #1
   d9c1e:	f04f 0900 	mov.w	r9, #0
   d9c22:	6873      	ldr	r3, [r6, #4]
   d9c24:	42a3      	cmp	r3, r4
   d9c26:	d03f      	beq.n	d9ca8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   d9c28:	6860      	ldr	r0, [r4, #4]
   d9c2a:	7802      	ldrb	r2, [r0, #0]
   d9c2c:	2a00      	cmp	r2, #0
   d9c2e:	d13c      	bne.n	d9caa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   d9c30:	6845      	ldr	r5, [r0, #4]
   d9c32:	68ab      	ldr	r3, [r5, #8]
   d9c34:	4298      	cmp	r0, r3
   d9c36:	d123      	bne.n	d9c80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   d9c38:	68eb      	ldr	r3, [r5, #12]
   d9c3a:	b183      	cbz	r3, d9c5e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d9c3c:	781a      	ldrb	r2, [r3, #0]
   d9c3e:	b972      	cbnz	r2, d9c5e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d9c40:	7007      	strb	r7, [r0, #0]
   d9c42:	701f      	strb	r7, [r3, #0]
   d9c44:	702a      	strb	r2, [r5, #0]
   d9c46:	462c      	mov	r4, r5
   d9c48:	e7eb      	b.n	d9c22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   d9c4a:	68b3      	ldr	r3, [r6, #8]
   d9c4c:	4293      	cmp	r3, r2
   d9c4e:	d1e5      	bne.n	d9c1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9c50:	60b1      	str	r1, [r6, #8]
   d9c52:	e7e3      	b.n	d9c1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9c54:	60d1      	str	r1, [r2, #12]
   d9c56:	68f3      	ldr	r3, [r6, #12]
   d9c58:	4293      	cmp	r3, r2
   d9c5a:	d1df      	bne.n	d9c1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9c5c:	e7dd      	b.n	d9c1a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   d9c5e:	68c3      	ldr	r3, [r0, #12]
   d9c60:	42a3      	cmp	r3, r4
   d9c62:	d103      	bne.n	d9c6c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   d9c64:	4641      	mov	r1, r8
   d9c66:	f7ff ff72 	bl	d9b4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d9c6a:	4604      	mov	r4, r0
   d9c6c:	6863      	ldr	r3, [r4, #4]
   d9c6e:	4641      	mov	r1, r8
   d9c70:	701f      	strb	r7, [r3, #0]
   d9c72:	4628      	mov	r0, r5
   d9c74:	f885 9000 	strb.w	r9, [r5]
   d9c78:	f7ff ff7e 	bl	d9b78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d9c7c:	4625      	mov	r5, r4
   d9c7e:	e7e2      	b.n	d9c46 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   d9c80:	b113      	cbz	r3, d9c88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   d9c82:	781a      	ldrb	r2, [r3, #0]
   d9c84:	2a00      	cmp	r2, #0
   d9c86:	d0db      	beq.n	d9c40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   d9c88:	6883      	ldr	r3, [r0, #8]
   d9c8a:	42a3      	cmp	r3, r4
   d9c8c:	d103      	bne.n	d9c96 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   d9c8e:	4641      	mov	r1, r8
   d9c90:	f7ff ff72 	bl	d9b78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d9c94:	4604      	mov	r4, r0
   d9c96:	6863      	ldr	r3, [r4, #4]
   d9c98:	4641      	mov	r1, r8
   d9c9a:	701f      	strb	r7, [r3, #0]
   d9c9c:	4628      	mov	r0, r5
   d9c9e:	f885 9000 	strb.w	r9, [r5]
   d9ca2:	f7ff ff54 	bl	d9b4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d9ca6:	e7e9      	b.n	d9c7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   d9ca8:	4623      	mov	r3, r4
   d9caa:	2201      	movs	r2, #1
   d9cac:	701a      	strb	r2, [r3, #0]
   d9cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9cb2 <_ZSt25__throw_bad_function_callv>:
   d9cb2:	b508      	push	{r3, lr}
   d9cb4:	f7fd ffae 	bl	d7c14 <abort>

000d9cb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d9cb8:	4901      	ldr	r1, [pc, #4]	; (d9cc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d9cba:	f000 b8f9 	b.w	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9cbe:	bf00      	nop
   d9cc0:	000de8f0 	.word	0x000de8f0

000d9cc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d9cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d9cc6:	2400      	movs	r4, #0
   d9cc8:	2310      	movs	r3, #16
   d9cca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d9cce:	6803      	ldr	r3, [r0, #0]
   d9cd0:	9400      	str	r4, [sp, #0]
   d9cd2:	699e      	ldr	r6, [r3, #24]
   d9cd4:	f88d 4004 	strb.w	r4, [sp, #4]
   d9cd8:	4615      	mov	r5, r2
   d9cda:	466b      	mov	r3, sp
   d9cdc:	6812      	ldr	r2, [r2, #0]
   d9cde:	47b0      	blx	r6
   d9ce0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d9ce4:	f003 0306 	and.w	r3, r3, #6
   d9ce8:	2b06      	cmp	r3, #6
   d9cea:	bf03      	ittte	eq
   d9cec:	9b00      	ldreq	r3, [sp, #0]
   d9cee:	602b      	streq	r3, [r5, #0]
   d9cf0:	2001      	moveq	r0, #1
   d9cf2:	4620      	movne	r0, r4
   d9cf4:	b004      	add	sp, #16
   d9cf6:	bd70      	pop	{r4, r5, r6, pc}

000d9cf8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d9cf8:	9800      	ldr	r0, [sp, #0]
   d9cfa:	4290      	cmp	r0, r2
   d9cfc:	bf14      	ite	ne
   d9cfe:	2001      	movne	r0, #1
   d9d00:	2006      	moveq	r0, #6
   d9d02:	4770      	bx	lr

000d9d04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d9d04:	b510      	push	{r4, lr}
   d9d06:	4b03      	ldr	r3, [pc, #12]	; (d9d14 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d9d08:	6003      	str	r3, [r0, #0]
   d9d0a:	4604      	mov	r4, r0
   d9d0c:	f000 f8cd 	bl	d9eaa <_ZNSt9type_infoD1Ev>
   d9d10:	4620      	mov	r0, r4
   d9d12:	bd10      	pop	{r4, pc}
   d9d14:	000de930 	.word	0x000de930

000d9d18 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d9d18:	b510      	push	{r4, lr}
   d9d1a:	4604      	mov	r4, r0
   d9d1c:	f7ff fff2 	bl	d9d04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9d20:	4620      	mov	r0, r4
   d9d22:	2108      	movs	r1, #8
   d9d24:	f7ff ff0f 	bl	d9b46 <_ZdlPvj>
   d9d28:	4620      	mov	r0, r4
   d9d2a:	bd10      	pop	{r4, pc}

000d9d2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d9d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9d30:	461f      	mov	r7, r3
   d9d32:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d9d36:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d9d3a:	4598      	cmp	r8, r3
   d9d3c:	4606      	mov	r6, r0
   d9d3e:	4615      	mov	r5, r2
   d9d40:	d107      	bne.n	d9d52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9d42:	9907      	ldr	r1, [sp, #28]
   d9d44:	f000 f8b4 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9d48:	b118      	cbz	r0, d9d52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9d4a:	7165      	strb	r5, [r4, #5]
   d9d4c:	2000      	movs	r0, #0
   d9d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9d52:	4639      	mov	r1, r7
   d9d54:	4630      	mov	r0, r6
   d9d56:	f000 f8ab 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9d5a:	2800      	cmp	r0, #0
   d9d5c:	d0f6      	beq.n	d9d4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d9d5e:	2301      	movs	r3, #1
   d9d60:	f8c4 8000 	str.w	r8, [r4]
   d9d64:	7125      	strb	r5, [r4, #4]
   d9d66:	71a3      	strb	r3, [r4, #6]
   d9d68:	e7f0      	b.n	d9d4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d9d6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d9d6a:	b538      	push	{r3, r4, r5, lr}
   d9d6c:	4615      	mov	r5, r2
   d9d6e:	461c      	mov	r4, r3
   d9d70:	f000 f89e 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9d74:	b120      	cbz	r0, d9d80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d9d76:	2308      	movs	r3, #8
   d9d78:	60e3      	str	r3, [r4, #12]
   d9d7a:	2306      	movs	r3, #6
   d9d7c:	6025      	str	r5, [r4, #0]
   d9d7e:	7123      	strb	r3, [r4, #4]
   d9d80:	bd38      	pop	{r3, r4, r5, pc}

000d9d82 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d9d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9d84:	4605      	mov	r5, r0
   d9d86:	460c      	mov	r4, r1
   d9d88:	9201      	str	r2, [sp, #4]
   d9d8a:	461e      	mov	r6, r3
   d9d8c:	f000 f890 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9d90:	b950      	cbnz	r0, d9da8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9d92:	2e03      	cmp	r6, #3
   d9d94:	d808      	bhi.n	d9da8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9d96:	6823      	ldr	r3, [r4, #0]
   d9d98:	9a01      	ldr	r2, [sp, #4]
   d9d9a:	695b      	ldr	r3, [r3, #20]
   d9d9c:	4629      	mov	r1, r5
   d9d9e:	4620      	mov	r0, r4
   d9da0:	b002      	add	sp, #8
   d9da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9da6:	4718      	bx	r3
   d9da8:	b002      	add	sp, #8
   d9daa:	bd70      	pop	{r4, r5, r6, pc}

000d9dac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d9dac:	b510      	push	{r4, lr}
   d9dae:	4b03      	ldr	r3, [pc, #12]	; (d9dbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d9db0:	6003      	str	r3, [r0, #0]
   d9db2:	4604      	mov	r4, r0
   d9db4:	f7ff ffa6 	bl	d9d04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9db8:	4620      	mov	r0, r4
   d9dba:	bd10      	pop	{r4, pc}
   d9dbc:	000de990 	.word	0x000de990

000d9dc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d9dc0:	b510      	push	{r4, lr}
   d9dc2:	4604      	mov	r4, r0
   d9dc4:	f7ff fff2 	bl	d9dac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d9dc8:	4620      	mov	r0, r4
   d9dca:	210c      	movs	r1, #12
   d9dcc:	f7ff febb 	bl	d9b46 <_ZdlPvj>
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	bd10      	pop	{r4, pc}

000d9dd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d9dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9dd6:	9f08      	ldr	r7, [sp, #32]
   d9dd8:	4297      	cmp	r7, r2
   d9dda:	4605      	mov	r5, r0
   d9ddc:	460e      	mov	r6, r1
   d9dde:	4614      	mov	r4, r2
   d9de0:	d00a      	beq.n	d9df8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d9de2:	68a8      	ldr	r0, [r5, #8]
   d9de4:	6802      	ldr	r2, [r0, #0]
   d9de6:	9708      	str	r7, [sp, #32]
   d9de8:	6a15      	ldr	r5, [r2, #32]
   d9dea:	4631      	mov	r1, r6
   d9dec:	4622      	mov	r2, r4
   d9dee:	46ac      	mov	ip, r5
   d9df0:	b003      	add	sp, #12
   d9df2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9df6:	4760      	bx	ip
   d9df8:	4619      	mov	r1, r3
   d9dfa:	9301      	str	r3, [sp, #4]
   d9dfc:	f000 f858 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9e00:	9b01      	ldr	r3, [sp, #4]
   d9e02:	2800      	cmp	r0, #0
   d9e04:	d0ed      	beq.n	d9de2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d9e06:	2006      	movs	r0, #6
   d9e08:	b003      	add	sp, #12
   d9e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9e0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d9e0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e10:	460d      	mov	r5, r1
   d9e12:	4619      	mov	r1, r3
   d9e14:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d9e18:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d9e1c:	4681      	mov	r9, r0
   d9e1e:	4617      	mov	r7, r2
   d9e20:	4698      	mov	r8, r3
   d9e22:	f000 f845 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9e26:	b190      	cbz	r0, d9e4e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d9e28:	2d00      	cmp	r5, #0
   d9e2a:	6034      	str	r4, [r6, #0]
   d9e2c:	7137      	strb	r7, [r6, #4]
   d9e2e:	db09      	blt.n	d9e44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d9e30:	1961      	adds	r1, r4, r5
   d9e32:	458a      	cmp	sl, r1
   d9e34:	bf0c      	ite	eq
   d9e36:	2106      	moveq	r1, #6
   d9e38:	2101      	movne	r1, #1
   d9e3a:	71b1      	strb	r1, [r6, #6]
   d9e3c:	2000      	movs	r0, #0
   d9e3e:	b001      	add	sp, #4
   d9e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e44:	3502      	adds	r5, #2
   d9e46:	d1f9      	bne.n	d9e3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9e48:	2301      	movs	r3, #1
   d9e4a:	71b3      	strb	r3, [r6, #6]
   d9e4c:	e7f6      	b.n	d9e3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9e4e:	4554      	cmp	r4, sl
   d9e50:	d106      	bne.n	d9e60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9e52:	4659      	mov	r1, fp
   d9e54:	4648      	mov	r0, r9
   d9e56:	f000 f82b 	bl	d9eb0 <_ZNKSt9type_infoeqERKS_>
   d9e5a:	b108      	cbz	r0, d9e60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9e5c:	7177      	strb	r7, [r6, #5]
   d9e5e:	e7ed      	b.n	d9e3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9e60:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d9e64:	6803      	ldr	r3, [r0, #0]
   d9e66:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d9e6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d9e6e:	69dc      	ldr	r4, [r3, #28]
   d9e70:	463a      	mov	r2, r7
   d9e72:	4643      	mov	r3, r8
   d9e74:	4629      	mov	r1, r5
   d9e76:	46a4      	mov	ip, r4
   d9e78:	b001      	add	sp, #4
   d9e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e7e:	4760      	bx	ip

000d9e80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d9e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9e84:	4607      	mov	r7, r0
   d9e86:	460c      	mov	r4, r1
   d9e88:	4615      	mov	r5, r2
   d9e8a:	461e      	mov	r6, r3
   d9e8c:	f7ff ff6d 	bl	d9d6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d9e90:	b948      	cbnz	r0, d9ea6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d9e92:	68b8      	ldr	r0, [r7, #8]
   d9e94:	6803      	ldr	r3, [r0, #0]
   d9e96:	699f      	ldr	r7, [r3, #24]
   d9e98:	462a      	mov	r2, r5
   d9e9a:	4633      	mov	r3, r6
   d9e9c:	4621      	mov	r1, r4
   d9e9e:	46bc      	mov	ip, r7
   d9ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9ea4:	4760      	bx	ip
   d9ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9eaa <_ZNSt9type_infoD1Ev>:
   d9eaa:	4770      	bx	lr

000d9eac <_ZNKSt9type_info14__is_pointer_pEv>:
   d9eac:	2000      	movs	r0, #0
   d9eae:	4770      	bx	lr

000d9eb0 <_ZNKSt9type_infoeqERKS_>:
   d9eb0:	4281      	cmp	r1, r0
   d9eb2:	b508      	push	{r3, lr}
   d9eb4:	d00e      	beq.n	d9ed4 <_ZNKSt9type_infoeqERKS_+0x24>
   d9eb6:	6840      	ldr	r0, [r0, #4]
   d9eb8:	7803      	ldrb	r3, [r0, #0]
   d9eba:	2b2a      	cmp	r3, #42	; 0x2a
   d9ebc:	d00c      	beq.n	d9ed8 <_ZNKSt9type_infoeqERKS_+0x28>
   d9ebe:	6849      	ldr	r1, [r1, #4]
   d9ec0:	780b      	ldrb	r3, [r1, #0]
   d9ec2:	2b2a      	cmp	r3, #42	; 0x2a
   d9ec4:	bf08      	it	eq
   d9ec6:	3101      	addeq	r1, #1
   d9ec8:	f001 ff87 	bl	dbdda <strcmp>
   d9ecc:	fab0 f080 	clz	r0, r0
   d9ed0:	0940      	lsrs	r0, r0, #5
   d9ed2:	bd08      	pop	{r3, pc}
   d9ed4:	2001      	movs	r0, #1
   d9ed6:	e7fc      	b.n	d9ed2 <_ZNKSt9type_infoeqERKS_+0x22>
   d9ed8:	2000      	movs	r0, #0
   d9eda:	e7fa      	b.n	d9ed2 <_ZNKSt9type_infoeqERKS_+0x22>
   d9edc:	0000      	movs	r0, r0
	...

000d9ee0 <pow>:
   d9ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ee4:	ed2d 8b02 	vpush	{d8}
   d9ee8:	b08d      	sub	sp, #52	; 0x34
   d9eea:	ec57 6b10 	vmov	r6, r7, d0
   d9eee:	ec55 4b11 	vmov	r4, r5, d1
   d9ef2:	f000 fa09 	bl	da308 <__ieee754_pow>
   d9ef6:	4bae      	ldr	r3, [pc, #696]	; (da1b0 <pow+0x2d0>)
   d9ef8:	eeb0 8a40 	vmov.f32	s16, s0
   d9efc:	eef0 8a60 	vmov.f32	s17, s1
   d9f00:	f993 9000 	ldrsb.w	r9, [r3]
   d9f04:	f1b9 3fff 	cmp.w	r9, #4294967295
   d9f08:	d037      	beq.n	d9f7a <pow+0x9a>
   d9f0a:	4622      	mov	r2, r4
   d9f0c:	462b      	mov	r3, r5
   d9f0e:	4620      	mov	r0, r4
   d9f10:	4629      	mov	r1, r5
   d9f12:	f001 fe35 	bl	dbb80 <__aeabi_dcmpun>
   d9f16:	4683      	mov	fp, r0
   d9f18:	bb78      	cbnz	r0, d9f7a <pow+0x9a>
   d9f1a:	4632      	mov	r2, r6
   d9f1c:	463b      	mov	r3, r7
   d9f1e:	4630      	mov	r0, r6
   d9f20:	4639      	mov	r1, r7
   d9f22:	f001 fe2d 	bl	dbb80 <__aeabi_dcmpun>
   d9f26:	4680      	mov	r8, r0
   d9f28:	2800      	cmp	r0, #0
   d9f2a:	f040 8093 	bne.w	da054 <pow+0x174>
   d9f2e:	f04f 0a00 	mov.w	sl, #0
   d9f32:	f04f 0b00 	mov.w	fp, #0
   d9f36:	4630      	mov	r0, r6
   d9f38:	4639      	mov	r1, r7
   d9f3a:	4652      	mov	r2, sl
   d9f3c:	465b      	mov	r3, fp
   d9f3e:	f001 fded 	bl	dbb1c <__aeabi_dcmpeq>
   d9f42:	b318      	cbz	r0, d9f8c <pow+0xac>
   d9f44:	4652      	mov	r2, sl
   d9f46:	465b      	mov	r3, fp
   d9f48:	4620      	mov	r0, r4
   d9f4a:	4629      	mov	r1, r5
   d9f4c:	f001 fde6 	bl	dbb1c <__aeabi_dcmpeq>
   d9f50:	9000      	str	r0, [sp, #0]
   d9f52:	2800      	cmp	r0, #0
   d9f54:	d057      	beq.n	da006 <pow+0x126>
   d9f56:	4b97      	ldr	r3, [pc, #604]	; (da1b4 <pow+0x2d4>)
   d9f58:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d9f5c:	2201      	movs	r2, #1
   d9f5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9f62:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9f66:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9f6a:	9202      	str	r2, [sp, #8]
   d9f6c:	9303      	str	r3, [sp, #12]
   d9f6e:	f1b9 0f00 	cmp.w	r9, #0
   d9f72:	f000 8089 	beq.w	da088 <pow+0x1a8>
   d9f76:	ed9f 8b8a 	vldr	d8, [pc, #552]	; da1a0 <pow+0x2c0>
   d9f7a:	eeb0 0a48 	vmov.f32	s0, s16
   d9f7e:	eef0 0a68 	vmov.f32	s1, s17
   d9f82:	b00d      	add	sp, #52	; 0x34
   d9f84:	ecbd 8b02 	vpop	{d8}
   d9f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9f8c:	eeb0 0a48 	vmov.f32	s0, s16
   d9f90:	eef0 0a68 	vmov.f32	s1, s17
   d9f94:	f001 f860 	bl	db058 <finite>
   d9f98:	4680      	mov	r8, r0
   d9f9a:	2800      	cmp	r0, #0
   d9f9c:	f000 8082 	beq.w	da0a4 <pow+0x1c4>
   d9fa0:	f04f 0800 	mov.w	r8, #0
   d9fa4:	f04f 0900 	mov.w	r9, #0
   d9fa8:	ec51 0b18 	vmov	r0, r1, d8
   d9fac:	4642      	mov	r2, r8
   d9fae:	464b      	mov	r3, r9
   d9fb0:	f001 fdb4 	bl	dbb1c <__aeabi_dcmpeq>
   d9fb4:	2800      	cmp	r0, #0
   d9fb6:	d0e0      	beq.n	d9f7a <pow+0x9a>
   d9fb8:	ec47 6b10 	vmov	d0, r6, r7
   d9fbc:	f001 f84c 	bl	db058 <finite>
   d9fc0:	2800      	cmp	r0, #0
   d9fc2:	d0da      	beq.n	d9f7a <pow+0x9a>
   d9fc4:	ec45 4b10 	vmov	d0, r4, r5
   d9fc8:	f001 f846 	bl	db058 <finite>
   d9fcc:	2800      	cmp	r0, #0
   d9fce:	d0d4      	beq.n	d9f7a <pow+0x9a>
   d9fd0:	4b77      	ldr	r3, [pc, #476]	; (da1b0 <pow+0x2d0>)
   d9fd2:	4a78      	ldr	r2, [pc, #480]	; (da1b4 <pow+0x2d4>)
   d9fd4:	f993 3000 	ldrsb.w	r3, [r3]
   d9fd8:	9203      	str	r2, [sp, #12]
   d9fda:	2104      	movs	r1, #4
   d9fdc:	2200      	movs	r2, #0
   d9fde:	2b02      	cmp	r3, #2
   d9fe0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d9fe4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d9fe8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d9fec:	9102      	str	r1, [sp, #8]
   d9fee:	920a      	str	r2, [sp, #40]	; 0x28
   d9ff0:	d004      	beq.n	d9ffc <pow+0x11c>
   d9ff2:	a802      	add	r0, sp, #8
   d9ff4:	f001 f83c 	bl	db070 <matherr>
   d9ff8:	2800      	cmp	r0, #0
   d9ffa:	d14a      	bne.n	da092 <pow+0x1b2>
   d9ffc:	f7fd fe1a 	bl	d7c34 <__errno>
   da000:	2322      	movs	r3, #34	; 0x22
   da002:	6003      	str	r3, [r0, #0]
   da004:	e045      	b.n	da092 <pow+0x1b2>
   da006:	ec45 4b10 	vmov	d0, r4, r5
   da00a:	f001 f825 	bl	db058 <finite>
   da00e:	2800      	cmp	r0, #0
   da010:	d0b3      	beq.n	d9f7a <pow+0x9a>
   da012:	4652      	mov	r2, sl
   da014:	465b      	mov	r3, fp
   da016:	4620      	mov	r0, r4
   da018:	4629      	mov	r1, r5
   da01a:	f001 fd89 	bl	dbb30 <__aeabi_dcmplt>
   da01e:	2800      	cmp	r0, #0
   da020:	d0ab      	beq.n	d9f7a <pow+0x9a>
   da022:	4b63      	ldr	r3, [pc, #396]	; (da1b0 <pow+0x2d0>)
   da024:	9900      	ldr	r1, [sp, #0]
   da026:	4a63      	ldr	r2, [pc, #396]	; (da1b4 <pow+0x2d4>)
   da028:	f993 3000 	ldrsb.w	r3, [r3]
   da02c:	910a      	str	r1, [sp, #40]	; 0x28
   da02e:	2101      	movs	r1, #1
   da030:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da034:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da038:	e9cd 1202 	strd	r1, r2, [sp, #8]
   da03c:	2b00      	cmp	r3, #0
   da03e:	d16f      	bne.n	da120 <pow+0x240>
   da040:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da044:	a802      	add	r0, sp, #8
   da046:	f001 f813 	bl	db070 <matherr>
   da04a:	2800      	cmp	r0, #0
   da04c:	d06e      	beq.n	da12c <pow+0x24c>
   da04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da050:	b32b      	cbz	r3, da09e <pow+0x1be>
   da052:	e020      	b.n	da096 <pow+0x1b6>
   da054:	2200      	movs	r2, #0
   da056:	2300      	movs	r3, #0
   da058:	4620      	mov	r0, r4
   da05a:	4629      	mov	r1, r5
   da05c:	f001 fd5e 	bl	dbb1c <__aeabi_dcmpeq>
   da060:	2800      	cmp	r0, #0
   da062:	d08a      	beq.n	d9f7a <pow+0x9a>
   da064:	ed9f 8b4e 	vldr	d8, [pc, #312]	; da1a0 <pow+0x2c0>
   da068:	4b52      	ldr	r3, [pc, #328]	; (da1b4 <pow+0x2d4>)
   da06a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   da06e:	2201      	movs	r2, #1
   da070:	f1b9 0f02 	cmp.w	r9, #2
   da074:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da078:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da07c:	ed8d 8b08 	vstr	d8, [sp, #32]
   da080:	9202      	str	r2, [sp, #8]
   da082:	9303      	str	r3, [sp, #12]
   da084:	f43f af79 	beq.w	d9f7a <pow+0x9a>
   da088:	a802      	add	r0, sp, #8
   da08a:	f000 fff1 	bl	db070 <matherr>
   da08e:	2800      	cmp	r0, #0
   da090:	d051      	beq.n	da136 <pow+0x256>
   da092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da094:	b11b      	cbz	r3, da09e <pow+0x1be>
   da096:	f7fd fdcd 	bl	d7c34 <__errno>
   da09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da09c:	6003      	str	r3, [r0, #0]
   da09e:	ed9d 8b08 	vldr	d8, [sp, #32]
   da0a2:	e76a      	b.n	d9f7a <pow+0x9a>
   da0a4:	ec47 6b10 	vmov	d0, r6, r7
   da0a8:	f000 ffd6 	bl	db058 <finite>
   da0ac:	2800      	cmp	r0, #0
   da0ae:	f43f af77 	beq.w	d9fa0 <pow+0xc0>
   da0b2:	ec45 4b10 	vmov	d0, r4, r5
   da0b6:	f000 ffcf 	bl	db058 <finite>
   da0ba:	2800      	cmp	r0, #0
   da0bc:	f43f af70 	beq.w	d9fa0 <pow+0xc0>
   da0c0:	ec53 2b18 	vmov	r2, r3, d8
   da0c4:	ee18 0a10 	vmov	r0, s16
   da0c8:	4619      	mov	r1, r3
   da0ca:	f001 fd59 	bl	dbb80 <__aeabi_dcmpun>
   da0ce:	4b38      	ldr	r3, [pc, #224]	; (da1b0 <pow+0x2d0>)
   da0d0:	2800      	cmp	r0, #0
   da0d2:	f040 8096 	bne.w	da202 <pow+0x322>
   da0d6:	f993 8000 	ldrsb.w	r8, [r3]
   da0da:	900a      	str	r0, [sp, #40]	; 0x28
   da0dc:	2303      	movs	r3, #3
   da0de:	9302      	str	r3, [sp, #8]
   da0e0:	4b34      	ldr	r3, [pc, #208]	; (da1b4 <pow+0x2d4>)
   da0e2:	9303      	str	r3, [sp, #12]
   da0e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da0e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da0ec:	f1b8 0f00 	cmp.w	r8, #0
   da0f0:	d126      	bne.n	da140 <pow+0x260>
   da0f2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; da1c4 <pow+0x2e4>
   da0f6:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   da0fa:	4652      	mov	r2, sl
   da0fc:	465b      	mov	r3, fp
   da0fe:	4630      	mov	r0, r6
   da100:	4639      	mov	r1, r7
   da102:	e9cd 8908 	strd	r8, r9, [sp, #32]
   da106:	f001 fd13 	bl	dbb30 <__aeabi_dcmplt>
   da10a:	bb48      	cbnz	r0, da160 <pow+0x280>
   da10c:	a802      	add	r0, sp, #8
   da10e:	f000 ffaf 	bl	db070 <matherr>
   da112:	2800      	cmp	r0, #0
   da114:	d19b      	bne.n	da04e <pow+0x16e>
   da116:	f7fd fd8d 	bl	d7c34 <__errno>
   da11a:	2322      	movs	r3, #34	; 0x22
   da11c:	6003      	str	r3, [r0, #0]
   da11e:	e796      	b.n	da04e <pow+0x16e>
   da120:	4925      	ldr	r1, [pc, #148]	; (da1b8 <pow+0x2d8>)
   da122:	2000      	movs	r0, #0
   da124:	2b02      	cmp	r3, #2
   da126:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da12a:	d18b      	bne.n	da044 <pow+0x164>
   da12c:	f7fd fd82 	bl	d7c34 <__errno>
   da130:	2321      	movs	r3, #33	; 0x21
   da132:	6003      	str	r3, [r0, #0]
   da134:	e78b      	b.n	da04e <pow+0x16e>
   da136:	f7fd fd7d 	bl	d7c34 <__errno>
   da13a:	2321      	movs	r3, #33	; 0x21
   da13c:	6003      	str	r3, [r0, #0]
   da13e:	e7a8      	b.n	da092 <pow+0x1b2>
   da140:	ed9f 7b19 	vldr	d7, [pc, #100]	; da1a8 <pow+0x2c8>
   da144:	4652      	mov	r2, sl
   da146:	465b      	mov	r3, fp
   da148:	4630      	mov	r0, r6
   da14a:	4639      	mov	r1, r7
   da14c:	ed8d 7b08 	vstr	d7, [sp, #32]
   da150:	f001 fcee 	bl	dbb30 <__aeabi_dcmplt>
   da154:	2800      	cmp	r0, #0
   da156:	d137      	bne.n	da1c8 <pow+0x2e8>
   da158:	f1b8 0f02 	cmp.w	r8, #2
   da15c:	d0db      	beq.n	da116 <pow+0x236>
   da15e:	e7d5      	b.n	da10c <pow+0x22c>
   da160:	4b16      	ldr	r3, [pc, #88]	; (da1bc <pow+0x2dc>)
   da162:	2200      	movs	r2, #0
   da164:	4620      	mov	r0, r4
   da166:	4629      	mov	r1, r5
   da168:	f001 fa70 	bl	db64c <__aeabi_dmul>
   da16c:	4602      	mov	r2, r0
   da16e:	460b      	mov	r3, r1
   da170:	ec43 2b10 	vmov	d0, r2, r3
   da174:	e9cd 2300 	strd	r2, r3, [sp]
   da178:	f000 ff86 	bl	db088 <rint>
   da17c:	e9dd 2300 	ldrd	r2, r3, [sp]
   da180:	ec51 0b10 	vmov	r0, r1, d0
   da184:	f001 fcca 	bl	dbb1c <__aeabi_dcmpeq>
   da188:	2800      	cmp	r0, #0
   da18a:	d136      	bne.n	da1fa <pow+0x31a>
   da18c:	4b0c      	ldr	r3, [pc, #48]	; (da1c0 <pow+0x2e0>)
   da18e:	4908      	ldr	r1, [pc, #32]	; (da1b0 <pow+0x2d0>)
   da190:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da194:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da198:	f991 8000 	ldrsb.w	r8, [r1]
   da19c:	e7dc      	b.n	da158 <pow+0x278>
   da19e:	bf00      	nop
   da1a0:	00000000 	.word	0x00000000
   da1a4:	3ff00000 	.word	0x3ff00000
   da1a8:	00000000 	.word	0x00000000
   da1ac:	7ff00000 	.word	0x7ff00000
   da1b0:	2003df50 	.word	0x2003df50
   da1b4:	000de9cc 	.word	0x000de9cc
   da1b8:	fff00000 	.word	0xfff00000
   da1bc:	3fe00000 	.word	0x3fe00000
   da1c0:	c7efffff 	.word	0xc7efffff
   da1c4:	47efffff 	.word	0x47efffff
   da1c8:	4b1c      	ldr	r3, [pc, #112]	; (da23c <pow+0x35c>)
   da1ca:	2200      	movs	r2, #0
   da1cc:	4620      	mov	r0, r4
   da1ce:	4629      	mov	r1, r5
   da1d0:	f001 fa3c 	bl	db64c <__aeabi_dmul>
   da1d4:	4602      	mov	r2, r0
   da1d6:	460b      	mov	r3, r1
   da1d8:	ec43 2b10 	vmov	d0, r2, r3
   da1dc:	e9cd 2300 	strd	r2, r3, [sp]
   da1e0:	f000 ff52 	bl	db088 <rint>
   da1e4:	e9dd 2300 	ldrd	r2, r3, [sp]
   da1e8:	ec51 0b10 	vmov	r0, r1, d0
   da1ec:	f001 fc96 	bl	dbb1c <__aeabi_dcmpeq>
   da1f0:	b918      	cbnz	r0, da1fa <pow+0x31a>
   da1f2:	4b13      	ldr	r3, [pc, #76]	; (da240 <pow+0x360>)
   da1f4:	2200      	movs	r2, #0
   da1f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da1fa:	4b12      	ldr	r3, [pc, #72]	; (da244 <pow+0x364>)
   da1fc:	f993 8000 	ldrsb.w	r8, [r3]
   da200:	e7aa      	b.n	da158 <pow+0x278>
   da202:	f993 9000 	ldrsb.w	r9, [r3]
   da206:	4b10      	ldr	r3, [pc, #64]	; (da248 <pow+0x368>)
   da208:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da20c:	2201      	movs	r2, #1
   da20e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da212:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da216:	e9cd 2302 	strd	r2, r3, [sp, #8]
   da21a:	f1b9 0f00 	cmp.w	r9, #0
   da21e:	f43f af0f 	beq.w	da040 <pow+0x160>
   da222:	4652      	mov	r2, sl
   da224:	465b      	mov	r3, fp
   da226:	4650      	mov	r0, sl
   da228:	4659      	mov	r1, fp
   da22a:	f001 fb39 	bl	db8a0 <__aeabi_ddiv>
   da22e:	f1b9 0f02 	cmp.w	r9, #2
   da232:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da236:	f43f af79 	beq.w	da12c <pow+0x24c>
   da23a:	e703      	b.n	da044 <pow+0x164>
   da23c:	3fe00000 	.word	0x3fe00000
   da240:	fff00000 	.word	0xfff00000
   da244:	2003df50 	.word	0x2003df50
   da248:	000de9cc 	.word	0x000de9cc

000da24c <sqrt>:
   da24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da250:	ed2d 8b02 	vpush	{d8}
   da254:	b08b      	sub	sp, #44	; 0x2c
   da256:	ec55 4b10 	vmov	r4, r5, d0
   da25a:	f000 fe2f 	bl	daebc <__ieee754_sqrt>
   da25e:	4b28      	ldr	r3, [pc, #160]	; (da300 <sqrt+0xb4>)
   da260:	eeb0 8a40 	vmov.f32	s16, s0
   da264:	eef0 8a60 	vmov.f32	s17, s1
   da268:	f993 7000 	ldrsb.w	r7, [r3]
   da26c:	1c7b      	adds	r3, r7, #1
   da26e:	d012      	beq.n	da296 <sqrt+0x4a>
   da270:	4622      	mov	r2, r4
   da272:	462b      	mov	r3, r5
   da274:	4620      	mov	r0, r4
   da276:	4629      	mov	r1, r5
   da278:	f001 fc82 	bl	dbb80 <__aeabi_dcmpun>
   da27c:	4606      	mov	r6, r0
   da27e:	b950      	cbnz	r0, da296 <sqrt+0x4a>
   da280:	f04f 0800 	mov.w	r8, #0
   da284:	f04f 0900 	mov.w	r9, #0
   da288:	4620      	mov	r0, r4
   da28a:	4629      	mov	r1, r5
   da28c:	4642      	mov	r2, r8
   da28e:	464b      	mov	r3, r9
   da290:	f001 fc4e 	bl	dbb30 <__aeabi_dcmplt>
   da294:	b940      	cbnz	r0, da2a8 <sqrt+0x5c>
   da296:	eeb0 0a48 	vmov.f32	s0, s16
   da29a:	eef0 0a68 	vmov.f32	s1, s17
   da29e:	b00b      	add	sp, #44	; 0x2c
   da2a0:	ecbd 8b02 	vpop	{d8}
   da2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da2a8:	4b16      	ldr	r3, [pc, #88]	; (da304 <sqrt+0xb8>)
   da2aa:	9608      	str	r6, [sp, #32]
   da2ac:	2201      	movs	r2, #1
   da2ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da2b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da2b6:	9200      	str	r2, [sp, #0]
   da2b8:	9301      	str	r3, [sp, #4]
   da2ba:	b197      	cbz	r7, da2e2 <sqrt+0x96>
   da2bc:	4642      	mov	r2, r8
   da2be:	464b      	mov	r3, r9
   da2c0:	4640      	mov	r0, r8
   da2c2:	4649      	mov	r1, r9
   da2c4:	f001 faec 	bl	db8a0 <__aeabi_ddiv>
   da2c8:	2f02      	cmp	r7, #2
   da2ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da2ce:	d10a      	bne.n	da2e6 <sqrt+0x9a>
   da2d0:	f7fd fcb0 	bl	d7c34 <__errno>
   da2d4:	2321      	movs	r3, #33	; 0x21
   da2d6:	6003      	str	r3, [r0, #0]
   da2d8:	9b08      	ldr	r3, [sp, #32]
   da2da:	b963      	cbnz	r3, da2f6 <sqrt+0xaa>
   da2dc:	ed9d 8b06 	vldr	d8, [sp, #24]
   da2e0:	e7d9      	b.n	da296 <sqrt+0x4a>
   da2e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da2e6:	4668      	mov	r0, sp
   da2e8:	f000 fec2 	bl	db070 <matherr>
   da2ec:	2800      	cmp	r0, #0
   da2ee:	d0ef      	beq.n	da2d0 <sqrt+0x84>
   da2f0:	9b08      	ldr	r3, [sp, #32]
   da2f2:	2b00      	cmp	r3, #0
   da2f4:	d0f2      	beq.n	da2dc <sqrt+0x90>
   da2f6:	f7fd fc9d 	bl	d7c34 <__errno>
   da2fa:	9b08      	ldr	r3, [sp, #32]
   da2fc:	6003      	str	r3, [r0, #0]
   da2fe:	e7ed      	b.n	da2dc <sqrt+0x90>
   da300:	2003df50 	.word	0x2003df50
   da304:	000de9d0 	.word	0x000de9d0

000da308 <__ieee754_pow>:
   da308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da30c:	ec57 6b11 	vmov	r6, r7, d1
   da310:	ed2d 8b0a 	vpush	{d8-d12}
   da314:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   da318:	ea5a 0206 	orrs.w	r2, sl, r6
   da31c:	b089      	sub	sp, #36	; 0x24
   da31e:	d03d      	beq.n	da39c <__ieee754_pow+0x94>
   da320:	ec55 4b10 	vmov	r4, r5, d0
   da324:	4976      	ldr	r1, [pc, #472]	; (da500 <__ieee754_pow+0x1f8>)
   da326:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   da32a:	4588      	cmp	r8, r1
   da32c:	ee10 2a10 	vmov	r2, s0
   da330:	46a9      	mov	r9, r5
   da332:	dc2c      	bgt.n	da38e <__ieee754_pow+0x86>
   da334:	ee11 3a10 	vmov	r3, s2
   da338:	46bb      	mov	fp, r7
   da33a:	d03a      	beq.n	da3b2 <__ieee754_pow+0xaa>
   da33c:	458a      	cmp	sl, r1
   da33e:	dc26      	bgt.n	da38e <__ieee754_pow+0x86>
   da340:	496f      	ldr	r1, [pc, #444]	; (da500 <__ieee754_pow+0x1f8>)
   da342:	458a      	cmp	sl, r1
   da344:	d021      	beq.n	da38a <__ieee754_pow+0x82>
   da346:	f1b9 0f00 	cmp.w	r9, #0
   da34a:	db3d      	blt.n	da3c8 <__ieee754_pow+0xc0>
   da34c:	2100      	movs	r1, #0
   da34e:	9103      	str	r1, [sp, #12]
   da350:	2b00      	cmp	r3, #0
   da352:	d155      	bne.n	da400 <__ieee754_pow+0xf8>
   da354:	4b6a      	ldr	r3, [pc, #424]	; (da500 <__ieee754_pow+0x1f8>)
   da356:	459a      	cmp	sl, r3
   da358:	f000 80a8 	beq.w	da4ac <__ieee754_pow+0x1a4>
   da35c:	4b69      	ldr	r3, [pc, #420]	; (da504 <__ieee754_pow+0x1fc>)
   da35e:	459a      	cmp	sl, r3
   da360:	f000 80b6 	beq.w	da4d0 <__ieee754_pow+0x1c8>
   da364:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   da368:	f000 8501 	beq.w	dad6e <__ieee754_pow+0xa66>
   da36c:	4b66      	ldr	r3, [pc, #408]	; (da508 <__ieee754_pow+0x200>)
   da36e:	459b      	cmp	fp, r3
   da370:	d146      	bne.n	da400 <__ieee754_pow+0xf8>
   da372:	f1b9 0f00 	cmp.w	r9, #0
   da376:	db43      	blt.n	da400 <__ieee754_pow+0xf8>
   da378:	ec45 4b10 	vmov	d0, r4, r5
   da37c:	b009      	add	sp, #36	; 0x24
   da37e:	ecbd 8b0a 	vpop	{d8-d12}
   da382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da386:	f000 bd99 	b.w	daebc <__ieee754_sqrt>
   da38a:	2b00      	cmp	r3, #0
   da38c:	d0db      	beq.n	da346 <__ieee754_pow+0x3e>
   da38e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da392:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da396:	ea58 0302 	orrs.w	r3, r8, r2
   da39a:	d10d      	bne.n	da3b8 <__ieee754_pow+0xb0>
   da39c:	ed9f 7b54 	vldr	d7, [pc, #336]	; da4f0 <__ieee754_pow+0x1e8>
   da3a0:	ed8d 7b00 	vstr	d7, [sp]
   da3a4:	ed9d 0b00 	vldr	d0, [sp]
   da3a8:	b009      	add	sp, #36	; 0x24
   da3aa:	ecbd 8b0a 	vpop	{d8-d12}
   da3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3b2:	b90c      	cbnz	r4, da3b8 <__ieee754_pow+0xb0>
   da3b4:	45c2      	cmp	sl, r8
   da3b6:	ddc3      	ble.n	da340 <__ieee754_pow+0x38>
   da3b8:	4854      	ldr	r0, [pc, #336]	; (da50c <__ieee754_pow+0x204>)
   da3ba:	b009      	add	sp, #36	; 0x24
   da3bc:	ecbd 8b0a 	vpop	{d8-d12}
   da3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da3c4:	f000 be58 	b.w	db078 <nan>
   da3c8:	4951      	ldr	r1, [pc, #324]	; (da510 <__ieee754_pow+0x208>)
   da3ca:	458a      	cmp	sl, r1
   da3cc:	f300 8087 	bgt.w	da4de <__ieee754_pow+0x1d6>
   da3d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da3d4:	458a      	cmp	sl, r1
   da3d6:	dd0f      	ble.n	da3f8 <__ieee754_pow+0xf0>
   da3d8:	ea4f 512a 	mov.w	r1, sl, asr #20
   da3dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da3e0:	2914      	cmp	r1, #20
   da3e2:	f340 84ce 	ble.w	dad82 <__ieee754_pow+0xa7a>
   da3e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da3ea:	fa23 f001 	lsr.w	r0, r3, r1
   da3ee:	fa00 f101 	lsl.w	r1, r0, r1
   da3f2:	4299      	cmp	r1, r3
   da3f4:	f000 8520 	beq.w	dae38 <__ieee754_pow+0xb30>
   da3f8:	2100      	movs	r1, #0
   da3fa:	9103      	str	r1, [sp, #12]
   da3fc:	2b00      	cmp	r3, #0
   da3fe:	d0ad      	beq.n	da35c <__ieee754_pow+0x54>
   da400:	ec45 4b10 	vmov	d0, r4, r5
   da404:	9206      	str	r2, [sp, #24]
   da406:	f000 fe1d 	bl	db044 <fabs>
   da40a:	9a06      	ldr	r2, [sp, #24]
   da40c:	ed8d 0b00 	vstr	d0, [sp]
   da410:	bb5a      	cbnz	r2, da46a <__ieee754_pow+0x162>
   da412:	f1b8 0f00 	cmp.w	r8, #0
   da416:	d004      	beq.n	da422 <__ieee754_pow+0x11a>
   da418:	4b3a      	ldr	r3, [pc, #232]	; (da504 <__ieee754_pow+0x1fc>)
   da41a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da41e:	429a      	cmp	r2, r3
   da420:	d123      	bne.n	da46a <__ieee754_pow+0x162>
   da422:	f1bb 0f00 	cmp.w	fp, #0
   da426:	da07      	bge.n	da438 <__ieee754_pow+0x130>
   da428:	e9dd 2300 	ldrd	r2, r3, [sp]
   da42c:	4935      	ldr	r1, [pc, #212]	; (da504 <__ieee754_pow+0x1fc>)
   da42e:	2000      	movs	r0, #0
   da430:	f001 fa36 	bl	db8a0 <__aeabi_ddiv>
   da434:	e9cd 0100 	strd	r0, r1, [sp]
   da438:	f1b9 0f00 	cmp.w	r9, #0
   da43c:	dab2      	bge.n	da3a4 <__ieee754_pow+0x9c>
   da43e:	9b03      	ldr	r3, [sp, #12]
   da440:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da444:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da448:	ea58 0303 	orrs.w	r3, r8, r3
   da44c:	f040 84be 	bne.w	dadcc <__ieee754_pow+0xac4>
   da450:	e9dd 2300 	ldrd	r2, r3, [sp]
   da454:	4610      	mov	r0, r2
   da456:	4619      	mov	r1, r3
   da458:	f000 ff40 	bl	db2dc <__aeabi_dsub>
   da45c:	4602      	mov	r2, r0
   da45e:	460b      	mov	r3, r1
   da460:	f001 fa1e 	bl	db8a0 <__aeabi_ddiv>
   da464:	e9cd 0100 	strd	r0, r1, [sp]
   da468:	e79c      	b.n	da3a4 <__ieee754_pow+0x9c>
   da46a:	9a03      	ldr	r2, [sp, #12]
   da46c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da470:	3b01      	subs	r3, #1
   da472:	9306      	str	r3, [sp, #24]
   da474:	4313      	orrs	r3, r2
   da476:	d035      	beq.n	da4e4 <__ieee754_pow+0x1dc>
   da478:	4b26      	ldr	r3, [pc, #152]	; (da514 <__ieee754_pow+0x20c>)
   da47a:	459a      	cmp	sl, r3
   da47c:	dd4e      	ble.n	da51c <__ieee754_pow+0x214>
   da47e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da482:	459a      	cmp	sl, r3
   da484:	4b24      	ldr	r3, [pc, #144]	; (da518 <__ieee754_pow+0x210>)
   da486:	f340 83ed 	ble.w	dac64 <__ieee754_pow+0x95c>
   da48a:	4598      	cmp	r8, r3
   da48c:	f340 836b 	ble.w	dab66 <__ieee754_pow+0x85e>
   da490:	f1bb 0f00 	cmp.w	fp, #0
   da494:	f340 836b 	ble.w	dab6e <__ieee754_pow+0x866>
   da498:	a317      	add	r3, pc, #92	; (adr r3, da4f8 <__ieee754_pow+0x1f0>)
   da49a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da49e:	4610      	mov	r0, r2
   da4a0:	4619      	mov	r1, r3
   da4a2:	f001 f8d3 	bl	db64c <__aeabi_dmul>
   da4a6:	e9cd 0100 	strd	r0, r1, [sp]
   da4aa:	e77b      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4ac:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da4b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da4b4:	4313      	orrs	r3, r2
   da4b6:	f43f af71 	beq.w	da39c <__ieee754_pow+0x94>
   da4ba:	4b17      	ldr	r3, [pc, #92]	; (da518 <__ieee754_pow+0x210>)
   da4bc:	4598      	cmp	r8, r3
   da4be:	f340 8388 	ble.w	dabd2 <__ieee754_pow+0x8ca>
   da4c2:	f1bb 0f00 	cmp.w	fp, #0
   da4c6:	f2c0 8352 	blt.w	dab6e <__ieee754_pow+0x866>
   da4ca:	e9cd 6700 	strd	r6, r7, [sp]
   da4ce:	e769      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4d0:	f1bb 0f00 	cmp.w	fp, #0
   da4d4:	f2c0 8441 	blt.w	dad5a <__ieee754_pow+0xa52>
   da4d8:	e9cd 4500 	strd	r4, r5, [sp]
   da4dc:	e762      	b.n	da3a4 <__ieee754_pow+0x9c>
   da4de:	2102      	movs	r1, #2
   da4e0:	9103      	str	r1, [sp, #12]
   da4e2:	e735      	b.n	da350 <__ieee754_pow+0x48>
   da4e4:	4622      	mov	r2, r4
   da4e6:	462b      	mov	r3, r5
   da4e8:	e7b4      	b.n	da454 <__ieee754_pow+0x14c>
   da4ea:	bf00      	nop
   da4ec:	f3af 8000 	nop.w
   da4f0:	00000000 	.word	0x00000000
   da4f4:	3ff00000 	.word	0x3ff00000
   da4f8:	8800759c 	.word	0x8800759c
   da4fc:	7e37e43c 	.word	0x7e37e43c
   da500:	7ff00000 	.word	0x7ff00000
   da504:	3ff00000 	.word	0x3ff00000
   da508:	3fe00000 	.word	0x3fe00000
   da50c:	000de9d4 	.word	0x000de9d4
   da510:	433fffff 	.word	0x433fffff
   da514:	41e00000 	.word	0x41e00000
   da518:	3fefffff 	.word	0x3fefffff
   da51c:	4be4      	ldr	r3, [pc, #912]	; (da8b0 <__ieee754_pow+0x5a8>)
   da51e:	ea09 0303 	and.w	r3, r9, r3
   da522:	2b00      	cmp	r3, #0
   da524:	f040 8416 	bne.w	dad54 <__ieee754_pow+0xa4c>
   da528:	e9dd 0100 	ldrd	r0, r1, [sp]
   da52c:	4be1      	ldr	r3, [pc, #900]	; (da8b4 <__ieee754_pow+0x5ac>)
   da52e:	2200      	movs	r2, #0
   da530:	f001 f88c 	bl	db64c <__aeabi_dmul>
   da534:	e9cd 0100 	strd	r0, r1, [sp]
   da538:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da53c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da540:	ea4f 5328 	mov.w	r3, r8, asr #20
   da544:	49dc      	ldr	r1, [pc, #880]	; (da8b8 <__ieee754_pow+0x5b0>)
   da546:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da54a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da54e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da552:	1818      	adds	r0, r3, r0
   da554:	428a      	cmp	r2, r1
   da556:	9007      	str	r0, [sp, #28]
   da558:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da55c:	f340 83e9 	ble.w	dad32 <__ieee754_pow+0xa2a>
   da560:	4bd6      	ldr	r3, [pc, #856]	; (da8bc <__ieee754_pow+0x5b4>)
   da562:	429a      	cmp	r2, r3
   da564:	f340 843e 	ble.w	dade4 <__ieee754_pow+0xadc>
   da568:	ed9f 7bbb 	vldr	d7, [pc, #748]	; da858 <__ieee754_pow+0x550>
   da56c:	eeb0 ba47 	vmov.f32	s22, s14
   da570:	eef0 ba67 	vmov.f32	s23, s15
   da574:	eeb0 ca47 	vmov.f32	s24, s14
   da578:	eef0 ca67 	vmov.f32	s25, s15
   da57c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; da860 <__ieee754_pow+0x558>
   da580:	3001      	adds	r0, #1
   da582:	ec54 3b17 	vmov	r3, r4, d7
   da586:	9007      	str	r0, [sp, #28]
   da588:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da58c:	f04f 0900 	mov.w	r9, #0
   da590:	e9dd ab00 	ldrd	sl, fp, [sp]
   da594:	ec44 3b18 	vmov	d8, r3, r4
   da598:	461a      	mov	r2, r3
   da59a:	4650      	mov	r0, sl
   da59c:	4623      	mov	r3, r4
   da59e:	4641      	mov	r1, r8
   da5a0:	f000 fe9c 	bl	db2dc <__aeabi_dsub>
   da5a4:	ec53 2b18 	vmov	r2, r3, d8
   da5a8:	4604      	mov	r4, r0
   da5aa:	460d      	mov	r5, r1
   da5ac:	4650      	mov	r0, sl
   da5ae:	4641      	mov	r1, r8
   da5b0:	f000 fe96 	bl	db2e0 <__adddf3>
   da5b4:	4602      	mov	r2, r0
   da5b6:	460b      	mov	r3, r1
   da5b8:	2000      	movs	r0, #0
   da5ba:	49c1      	ldr	r1, [pc, #772]	; (da8c0 <__ieee754_pow+0x5b8>)
   da5bc:	f001 f970 	bl	db8a0 <__aeabi_ddiv>
   da5c0:	ec45 4b1a 	vmov	d10, r4, r5
   da5c4:	ec41 0b19 	vmov	d9, r0, r1
   da5c8:	ec51 0b1a 	vmov	r0, r1, d10
   da5cc:	ec53 2b19 	vmov	r2, r3, d9
   da5d0:	f001 f83c 	bl	db64c <__aeabi_dmul>
   da5d4:	46c3      	mov	fp, r8
   da5d6:	ea4f 0868 	mov.w	r8, r8, asr #1
   da5da:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   da5de:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   da5e2:	eb03 0509 	add.w	r5, r3, r9
   da5e6:	460a      	mov	r2, r1
   da5e8:	2300      	movs	r3, #0
   da5ea:	4601      	mov	r1, r0
   da5ec:	e9cd 1200 	strd	r1, r2, [sp]
   da5f0:	9300      	str	r3, [sp, #0]
   da5f2:	e9dd 8900 	ldrd	r8, r9, [sp]
   da5f6:	2400      	movs	r4, #0
   da5f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   da5fc:	462b      	mov	r3, r5
   da5fe:	4622      	mov	r2, r4
   da600:	4640      	mov	r0, r8
   da602:	4649      	mov	r1, r9
   da604:	f001 f822 	bl	db64c <__aeabi_dmul>
   da608:	4602      	mov	r2, r0
   da60a:	460b      	mov	r3, r1
   da60c:	ec51 0b1a 	vmov	r0, r1, d10
   da610:	f000 fe64 	bl	db2dc <__aeabi_dsub>
   da614:	ec41 0b17 	vmov	d7, r0, r1
   da618:	ec53 2b18 	vmov	r2, r3, d8
   da61c:	4620      	mov	r0, r4
   da61e:	4629      	mov	r1, r5
   da620:	ec55 4b17 	vmov	r4, r5, d7
   da624:	f000 fe5a 	bl	db2dc <__aeabi_dsub>
   da628:	4602      	mov	r2, r0
   da62a:	460b      	mov	r3, r1
   da62c:	4650      	mov	r0, sl
   da62e:	4659      	mov	r1, fp
   da630:	f000 fe54 	bl	db2dc <__aeabi_dsub>
   da634:	4642      	mov	r2, r8
   da636:	464b      	mov	r3, r9
   da638:	f001 f808 	bl	db64c <__aeabi_dmul>
   da63c:	4602      	mov	r2, r0
   da63e:	460b      	mov	r3, r1
   da640:	4620      	mov	r0, r4
   da642:	4629      	mov	r1, r5
   da644:	f000 fe4a 	bl	db2dc <__aeabi_dsub>
   da648:	ec53 2b19 	vmov	r2, r3, d9
   da64c:	f000 fffe 	bl	db64c <__aeabi_dmul>
   da650:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da654:	4604      	mov	r4, r0
   da656:	460d      	mov	r5, r1
   da658:	4652      	mov	r2, sl
   da65a:	465b      	mov	r3, fp
   da65c:	4650      	mov	r0, sl
   da65e:	4659      	mov	r1, fp
   da660:	f000 fff4 	bl	db64c <__aeabi_dmul>
   da664:	a380      	add	r3, pc, #512	; (adr r3, da868 <__ieee754_pow+0x560>)
   da666:	e9d3 2300 	ldrd	r2, r3, [r3]
   da66a:	ec45 4b1a 	vmov	d10, r4, r5
   da66e:	4604      	mov	r4, r0
   da670:	460d      	mov	r5, r1
   da672:	f000 ffeb 	bl	db64c <__aeabi_dmul>
   da676:	a37e      	add	r3, pc, #504	; (adr r3, da870 <__ieee754_pow+0x568>)
   da678:	e9d3 2300 	ldrd	r2, r3, [r3]
   da67c:	f000 fe30 	bl	db2e0 <__adddf3>
   da680:	4622      	mov	r2, r4
   da682:	462b      	mov	r3, r5
   da684:	f000 ffe2 	bl	db64c <__aeabi_dmul>
   da688:	a37b      	add	r3, pc, #492	; (adr r3, da878 <__ieee754_pow+0x570>)
   da68a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da68e:	f000 fe27 	bl	db2e0 <__adddf3>
   da692:	4622      	mov	r2, r4
   da694:	462b      	mov	r3, r5
   da696:	f000 ffd9 	bl	db64c <__aeabi_dmul>
   da69a:	a379      	add	r3, pc, #484	; (adr r3, da880 <__ieee754_pow+0x578>)
   da69c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6a0:	f000 fe1e 	bl	db2e0 <__adddf3>
   da6a4:	4622      	mov	r2, r4
   da6a6:	462b      	mov	r3, r5
   da6a8:	f000 ffd0 	bl	db64c <__aeabi_dmul>
   da6ac:	a376      	add	r3, pc, #472	; (adr r3, da888 <__ieee754_pow+0x580>)
   da6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6b2:	f000 fe15 	bl	db2e0 <__adddf3>
   da6b6:	4622      	mov	r2, r4
   da6b8:	462b      	mov	r3, r5
   da6ba:	f000 ffc7 	bl	db64c <__aeabi_dmul>
   da6be:	a374      	add	r3, pc, #464	; (adr r3, da890 <__ieee754_pow+0x588>)
   da6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6c4:	f000 fe0c 	bl	db2e0 <__adddf3>
   da6c8:	4622      	mov	r2, r4
   da6ca:	462b      	mov	r3, r5
   da6cc:	4604      	mov	r4, r0
   da6ce:	460d      	mov	r5, r1
   da6d0:	4610      	mov	r0, r2
   da6d2:	4619      	mov	r1, r3
   da6d4:	f000 ffba 	bl	db64c <__aeabi_dmul>
   da6d8:	4602      	mov	r2, r0
   da6da:	460b      	mov	r3, r1
   da6dc:	4620      	mov	r0, r4
   da6de:	4629      	mov	r1, r5
   da6e0:	f000 ffb4 	bl	db64c <__aeabi_dmul>
   da6e4:	4642      	mov	r2, r8
   da6e6:	4604      	mov	r4, r0
   da6e8:	460d      	mov	r5, r1
   da6ea:	464b      	mov	r3, r9
   da6ec:	4650      	mov	r0, sl
   da6ee:	4659      	mov	r1, fp
   da6f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   da6f4:	f000 fdf4 	bl	db2e0 <__adddf3>
   da6f8:	ec53 2b1a 	vmov	r2, r3, d10
   da6fc:	f000 ffa6 	bl	db64c <__aeabi_dmul>
   da700:	4622      	mov	r2, r4
   da702:	462b      	mov	r3, r5
   da704:	f000 fdec 	bl	db2e0 <__adddf3>
   da708:	4642      	mov	r2, r8
   da70a:	4604      	mov	r4, r0
   da70c:	460d      	mov	r5, r1
   da70e:	464b      	mov	r3, r9
   da710:	4640      	mov	r0, r8
   da712:	4649      	mov	r1, r9
   da714:	f000 ff9a 	bl	db64c <__aeabi_dmul>
   da718:	ec45 4b19 	vmov	d9, r4, r5
   da71c:	4b69      	ldr	r3, [pc, #420]	; (da8c4 <__ieee754_pow+0x5bc>)
   da71e:	2200      	movs	r2, #0
   da720:	4682      	mov	sl, r0
   da722:	468b      	mov	fp, r1
   da724:	f000 fddc 	bl	db2e0 <__adddf3>
   da728:	ec53 2b19 	vmov	r2, r3, d9
   da72c:	f000 fdd8 	bl	db2e0 <__adddf3>
   da730:	9c00      	ldr	r4, [sp, #0]
   da732:	460d      	mov	r5, r1
   da734:	4622      	mov	r2, r4
   da736:	462b      	mov	r3, r5
   da738:	4640      	mov	r0, r8
   da73a:	4649      	mov	r1, r9
   da73c:	f000 ff86 	bl	db64c <__aeabi_dmul>
   da740:	4b60      	ldr	r3, [pc, #384]	; (da8c4 <__ieee754_pow+0x5bc>)
   da742:	4680      	mov	r8, r0
   da744:	4689      	mov	r9, r1
   da746:	2200      	movs	r2, #0
   da748:	4620      	mov	r0, r4
   da74a:	4629      	mov	r1, r5
   da74c:	f000 fdc6 	bl	db2dc <__aeabi_dsub>
   da750:	4652      	mov	r2, sl
   da752:	465b      	mov	r3, fp
   da754:	f000 fdc2 	bl	db2dc <__aeabi_dsub>
   da758:	4602      	mov	r2, r0
   da75a:	460b      	mov	r3, r1
   da75c:	ec51 0b19 	vmov	r0, r1, d9
   da760:	f000 fdbc 	bl	db2dc <__aeabi_dsub>
   da764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da768:	f000 ff70 	bl	db64c <__aeabi_dmul>
   da76c:	ec49 8b18 	vmov	d8, r8, r9
   da770:	4622      	mov	r2, r4
   da772:	4680      	mov	r8, r0
   da774:	4689      	mov	r9, r1
   da776:	462b      	mov	r3, r5
   da778:	ec51 0b1a 	vmov	r0, r1, d10
   da77c:	f000 ff66 	bl	db64c <__aeabi_dmul>
   da780:	4602      	mov	r2, r0
   da782:	460b      	mov	r3, r1
   da784:	4640      	mov	r0, r8
   da786:	4649      	mov	r1, r9
   da788:	f000 fdaa 	bl	db2e0 <__adddf3>
   da78c:	4682      	mov	sl, r0
   da78e:	468b      	mov	fp, r1
   da790:	4652      	mov	r2, sl
   da792:	465b      	mov	r3, fp
   da794:	ec51 0b18 	vmov	r0, r1, d8
   da798:	f000 fda2 	bl	db2e0 <__adddf3>
   da79c:	9c00      	ldr	r4, [sp, #0]
   da79e:	a33e      	add	r3, pc, #248	; (adr r3, da898 <__ieee754_pow+0x590>)
   da7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7a4:	4620      	mov	r0, r4
   da7a6:	460d      	mov	r5, r1
   da7a8:	f000 ff50 	bl	db64c <__aeabi_dmul>
   da7ac:	ec53 2b18 	vmov	r2, r3, d8
   da7b0:	4680      	mov	r8, r0
   da7b2:	4689      	mov	r9, r1
   da7b4:	4620      	mov	r0, r4
   da7b6:	4629      	mov	r1, r5
   da7b8:	f000 fd90 	bl	db2dc <__aeabi_dsub>
   da7bc:	4602      	mov	r2, r0
   da7be:	460b      	mov	r3, r1
   da7c0:	4650      	mov	r0, sl
   da7c2:	4659      	mov	r1, fp
   da7c4:	f000 fd8a 	bl	db2dc <__aeabi_dsub>
   da7c8:	a335      	add	r3, pc, #212	; (adr r3, da8a0 <__ieee754_pow+0x598>)
   da7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7ce:	f000 ff3d 	bl	db64c <__aeabi_dmul>
   da7d2:	ec49 8b19 	vmov	d9, r8, r9
   da7d6:	a334      	add	r3, pc, #208	; (adr r3, da8a8 <__ieee754_pow+0x5a0>)
   da7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7dc:	4680      	mov	r8, r0
   da7de:	4689      	mov	r9, r1
   da7e0:	4620      	mov	r0, r4
   da7e2:	4629      	mov	r1, r5
   da7e4:	f000 ff32 	bl	db64c <__aeabi_dmul>
   da7e8:	4602      	mov	r2, r0
   da7ea:	460b      	mov	r3, r1
   da7ec:	4640      	mov	r0, r8
   da7ee:	4649      	mov	r1, r9
   da7f0:	f000 fd76 	bl	db2e0 <__adddf3>
   da7f4:	ec53 2b1c 	vmov	r2, r3, d12
   da7f8:	f000 fd72 	bl	db2e0 <__adddf3>
   da7fc:	4682      	mov	sl, r0
   da7fe:	9807      	ldr	r0, [sp, #28]
   da800:	468b      	mov	fp, r1
   da802:	f000 feb9 	bl	db578 <__aeabi_i2d>
   da806:	4652      	mov	r2, sl
   da808:	4680      	mov	r8, r0
   da80a:	4689      	mov	r9, r1
   da80c:	465b      	mov	r3, fp
   da80e:	ec51 0b19 	vmov	r0, r1, d9
   da812:	f000 fd65 	bl	db2e0 <__adddf3>
   da816:	ec53 2b1b 	vmov	r2, r3, d11
   da81a:	f000 fd61 	bl	db2e0 <__adddf3>
   da81e:	4642      	mov	r2, r8
   da820:	464b      	mov	r3, r9
   da822:	f000 fd5d 	bl	db2e0 <__adddf3>
   da826:	9c00      	ldr	r4, [sp, #0]
   da828:	4642      	mov	r2, r8
   da82a:	464b      	mov	r3, r9
   da82c:	4620      	mov	r0, r4
   da82e:	460d      	mov	r5, r1
   da830:	f000 fd54 	bl	db2dc <__aeabi_dsub>
   da834:	ec53 2b1b 	vmov	r2, r3, d11
   da838:	f000 fd50 	bl	db2dc <__aeabi_dsub>
   da83c:	ec53 2b19 	vmov	r2, r3, d9
   da840:	f000 fd4c 	bl	db2dc <__aeabi_dsub>
   da844:	4602      	mov	r2, r0
   da846:	460b      	mov	r3, r1
   da848:	4650      	mov	r0, sl
   da84a:	4659      	mov	r1, fp
   da84c:	f000 fd46 	bl	db2dc <__aeabi_dsub>
   da850:	4682      	mov	sl, r0
   da852:	468b      	mov	fp, r1
   da854:	e038      	b.n	da8c8 <__ieee754_pow+0x5c0>
   da856:	bf00      	nop
	...
   da864:	3ff00000 	.word	0x3ff00000
   da868:	4a454eef 	.word	0x4a454eef
   da86c:	3fca7e28 	.word	0x3fca7e28
   da870:	93c9db65 	.word	0x93c9db65
   da874:	3fcd864a 	.word	0x3fcd864a
   da878:	a91d4101 	.word	0xa91d4101
   da87c:	3fd17460 	.word	0x3fd17460
   da880:	518f264d 	.word	0x518f264d
   da884:	3fd55555 	.word	0x3fd55555
   da888:	db6fabff 	.word	0xdb6fabff
   da88c:	3fdb6db6 	.word	0x3fdb6db6
   da890:	33333303 	.word	0x33333303
   da894:	3fe33333 	.word	0x3fe33333
   da898:	e0000000 	.word	0xe0000000
   da89c:	3feec709 	.word	0x3feec709
   da8a0:	dc3a03fd 	.word	0xdc3a03fd
   da8a4:	3feec709 	.word	0x3feec709
   da8a8:	145b01f5 	.word	0x145b01f5
   da8ac:	be3e2fe0 	.word	0xbe3e2fe0
   da8b0:	7ff00000 	.word	0x7ff00000
   da8b4:	43400000 	.word	0x43400000
   da8b8:	0003988e 	.word	0x0003988e
   da8bc:	000bb679 	.word	0x000bb679
   da8c0:	3ff00000 	.word	0x3ff00000
   da8c4:	40080000 	.word	0x40080000
   da8c8:	9b03      	ldr	r3, [sp, #12]
   da8ca:	9a06      	ldr	r2, [sp, #24]
   da8cc:	3b01      	subs	r3, #1
   da8ce:	4313      	orrs	r3, r2
   da8d0:	f040 8178 	bne.w	dabc4 <__ieee754_pow+0x8bc>
   da8d4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; dabe8 <__ieee754_pow+0x8e0>
   da8d8:	eeb0 9a47 	vmov.f32	s18, s14
   da8dc:	eef0 9a67 	vmov.f32	s19, s15
   da8e0:	2300      	movs	r3, #0
   da8e2:	e9cd 6700 	strd	r6, r7, [sp]
   da8e6:	9300      	str	r3, [sp, #0]
   da8e8:	e9dd 8900 	ldrd	r8, r9, [sp]
   da8ec:	4630      	mov	r0, r6
   da8ee:	4642      	mov	r2, r8
   da8f0:	4639      	mov	r1, r7
   da8f2:	464b      	mov	r3, r9
   da8f4:	f000 fcf2 	bl	db2dc <__aeabi_dsub>
   da8f8:	4622      	mov	r2, r4
   da8fa:	462b      	mov	r3, r5
   da8fc:	f000 fea6 	bl	db64c <__aeabi_dmul>
   da900:	4632      	mov	r2, r6
   da902:	463b      	mov	r3, r7
   da904:	4606      	mov	r6, r0
   da906:	460f      	mov	r7, r1
   da908:	4650      	mov	r0, sl
   da90a:	4659      	mov	r1, fp
   da90c:	f000 fe9e 	bl	db64c <__aeabi_dmul>
   da910:	4602      	mov	r2, r0
   da912:	460b      	mov	r3, r1
   da914:	4630      	mov	r0, r6
   da916:	4639      	mov	r1, r7
   da918:	f000 fce2 	bl	db2e0 <__adddf3>
   da91c:	4642      	mov	r2, r8
   da91e:	4682      	mov	sl, r0
   da920:	468b      	mov	fp, r1
   da922:	464b      	mov	r3, r9
   da924:	4620      	mov	r0, r4
   da926:	4629      	mov	r1, r5
   da928:	f000 fe90 	bl	db64c <__aeabi_dmul>
   da92c:	4606      	mov	r6, r0
   da92e:	460f      	mov	r7, r1
   da930:	463b      	mov	r3, r7
   da932:	4650      	mov	r0, sl
   da934:	4659      	mov	r1, fp
   da936:	4632      	mov	r2, r6
   da938:	f000 fcd2 	bl	db2e0 <__adddf3>
   da93c:	4bc4      	ldr	r3, [pc, #784]	; (dac50 <__ieee754_pow+0x948>)
   da93e:	4299      	cmp	r1, r3
   da940:	4604      	mov	r4, r0
   da942:	460d      	mov	r5, r1
   da944:	4688      	mov	r8, r1
   da946:	f340 8117 	ble.w	dab78 <__ieee754_pow+0x870>
   da94a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   da94e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   da952:	4303      	orrs	r3, r0
   da954:	f040 822a 	bne.w	dadac <__ieee754_pow+0xaa4>
   da958:	a3a5      	add	r3, pc, #660	; (adr r3, dabf0 <__ieee754_pow+0x8e8>)
   da95a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da95e:	4650      	mov	r0, sl
   da960:	4659      	mov	r1, fp
   da962:	f000 fcbd 	bl	db2e0 <__adddf3>
   da966:	4632      	mov	r2, r6
   da968:	ec41 0b18 	vmov	d8, r0, r1
   da96c:	463b      	mov	r3, r7
   da96e:	4620      	mov	r0, r4
   da970:	4629      	mov	r1, r5
   da972:	f000 fcb3 	bl	db2dc <__aeabi_dsub>
   da976:	4602      	mov	r2, r0
   da978:	460b      	mov	r3, r1
   da97a:	ec51 0b18 	vmov	r0, r1, d8
   da97e:	f001 f8f5 	bl	dbb6c <__aeabi_dcmpgt>
   da982:	2800      	cmp	r0, #0
   da984:	f040 8212 	bne.w	dadac <__ieee754_pow+0xaa4>
   da988:	f3c8 530a 	ubfx	r3, r8, #20, #11
   da98c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   da990:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   da994:	fa42 f303 	asr.w	r3, r2, r3
   da998:	4443      	add	r3, r8
   da99a:	49ae      	ldr	r1, [pc, #696]	; (dac54 <__ieee754_pow+0x94c>)
   da99c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   da9a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   da9a4:	fa41 fc02 	asr.w	ip, r1, r2
   da9a8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   da9ac:	ea23 010c 	bic.w	r1, r3, ip
   da9b0:	f1c2 0414 	rsb	r4, r2, #20
   da9b4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   da9b8:	f1b8 0f00 	cmp.w	r8, #0
   da9bc:	460b      	mov	r3, r1
   da9be:	fa45 f104 	asr.w	r1, r5, r4
   da9c2:	9103      	str	r1, [sp, #12]
   da9c4:	f04f 0000 	mov.w	r0, #0
   da9c8:	bfb8      	it	lt
   da9ca:	4249      	neglt	r1, r1
   da9cc:	4602      	mov	r2, r0
   da9ce:	bfb8      	it	lt
   da9d0:	9103      	strlt	r1, [sp, #12]
   da9d2:	4630      	mov	r0, r6
   da9d4:	4639      	mov	r1, r7
   da9d6:	f000 fc81 	bl	db2dc <__aeabi_dsub>
   da9da:	4606      	mov	r6, r0
   da9dc:	460f      	mov	r7, r1
   da9de:	463b      	mov	r3, r7
   da9e0:	4650      	mov	r0, sl
   da9e2:	4659      	mov	r1, fp
   da9e4:	4632      	mov	r2, r6
   da9e6:	f000 fc7b 	bl	db2e0 <__adddf3>
   da9ea:	9b03      	ldr	r3, [sp, #12]
   da9ec:	051b      	lsls	r3, r3, #20
   da9ee:	9300      	str	r3, [sp, #0]
   da9f0:	460d      	mov	r5, r1
   da9f2:	2400      	movs	r4, #0
   da9f4:	a380      	add	r3, pc, #512	; (adr r3, dabf8 <__ieee754_pow+0x8f0>)
   da9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da9fa:	4620      	mov	r0, r4
   da9fc:	4629      	mov	r1, r5
   da9fe:	f000 fe25 	bl	db64c <__aeabi_dmul>
   daa02:	4632      	mov	r2, r6
   daa04:	4680      	mov	r8, r0
   daa06:	4689      	mov	r9, r1
   daa08:	463b      	mov	r3, r7
   daa0a:	4620      	mov	r0, r4
   daa0c:	4629      	mov	r1, r5
   daa0e:	f000 fc65 	bl	db2dc <__aeabi_dsub>
   daa12:	4602      	mov	r2, r0
   daa14:	460b      	mov	r3, r1
   daa16:	4650      	mov	r0, sl
   daa18:	4659      	mov	r1, fp
   daa1a:	f000 fc5f 	bl	db2dc <__aeabi_dsub>
   daa1e:	a378      	add	r3, pc, #480	; (adr r3, dac00 <__ieee754_pow+0x8f8>)
   daa20:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa24:	f000 fe12 	bl	db64c <__aeabi_dmul>
   daa28:	a377      	add	r3, pc, #476	; (adr r3, dac08 <__ieee754_pow+0x900>)
   daa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa2e:	4606      	mov	r6, r0
   daa30:	460f      	mov	r7, r1
   daa32:	4620      	mov	r0, r4
   daa34:	4629      	mov	r1, r5
   daa36:	f000 fe09 	bl	db64c <__aeabi_dmul>
   daa3a:	4602      	mov	r2, r0
   daa3c:	460b      	mov	r3, r1
   daa3e:	4630      	mov	r0, r6
   daa40:	4639      	mov	r1, r7
   daa42:	f000 fc4d 	bl	db2e0 <__adddf3>
   daa46:	4606      	mov	r6, r0
   daa48:	460f      	mov	r7, r1
   daa4a:	4632      	mov	r2, r6
   daa4c:	463b      	mov	r3, r7
   daa4e:	4640      	mov	r0, r8
   daa50:	4649      	mov	r1, r9
   daa52:	f000 fc45 	bl	db2e0 <__adddf3>
   daa56:	4642      	mov	r2, r8
   daa58:	464b      	mov	r3, r9
   daa5a:	4604      	mov	r4, r0
   daa5c:	460d      	mov	r5, r1
   daa5e:	f000 fc3d 	bl	db2dc <__aeabi_dsub>
   daa62:	4602      	mov	r2, r0
   daa64:	460b      	mov	r3, r1
   daa66:	4630      	mov	r0, r6
   daa68:	4639      	mov	r1, r7
   daa6a:	f000 fc37 	bl	db2dc <__aeabi_dsub>
   daa6e:	4622      	mov	r2, r4
   daa70:	4682      	mov	sl, r0
   daa72:	468b      	mov	fp, r1
   daa74:	462b      	mov	r3, r5
   daa76:	4620      	mov	r0, r4
   daa78:	4629      	mov	r1, r5
   daa7a:	f000 fde7 	bl	db64c <__aeabi_dmul>
   daa7e:	a364      	add	r3, pc, #400	; (adr r3, dac10 <__ieee754_pow+0x908>)
   daa80:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa84:	4606      	mov	r6, r0
   daa86:	460f      	mov	r7, r1
   daa88:	f000 fde0 	bl	db64c <__aeabi_dmul>
   daa8c:	a362      	add	r3, pc, #392	; (adr r3, dac18 <__ieee754_pow+0x910>)
   daa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   daa92:	f000 fc23 	bl	db2dc <__aeabi_dsub>
   daa96:	4632      	mov	r2, r6
   daa98:	463b      	mov	r3, r7
   daa9a:	f000 fdd7 	bl	db64c <__aeabi_dmul>
   daa9e:	a360      	add	r3, pc, #384	; (adr r3, dac20 <__ieee754_pow+0x918>)
   daaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   daaa4:	f000 fc1c 	bl	db2e0 <__adddf3>
   daaa8:	4632      	mov	r2, r6
   daaaa:	463b      	mov	r3, r7
   daaac:	f000 fdce 	bl	db64c <__aeabi_dmul>
   daab0:	a35d      	add	r3, pc, #372	; (adr r3, dac28 <__ieee754_pow+0x920>)
   daab2:	e9d3 2300 	ldrd	r2, r3, [r3]
   daab6:	f000 fc11 	bl	db2dc <__aeabi_dsub>
   daaba:	4632      	mov	r2, r6
   daabc:	463b      	mov	r3, r7
   daabe:	f000 fdc5 	bl	db64c <__aeabi_dmul>
   daac2:	a35b      	add	r3, pc, #364	; (adr r3, dac30 <__ieee754_pow+0x928>)
   daac4:	e9d3 2300 	ldrd	r2, r3, [r3]
   daac8:	f000 fc0a 	bl	db2e0 <__adddf3>
   daacc:	4632      	mov	r2, r6
   daace:	463b      	mov	r3, r7
   daad0:	f000 fdbc 	bl	db64c <__aeabi_dmul>
   daad4:	4602      	mov	r2, r0
   daad6:	460b      	mov	r3, r1
   daad8:	4620      	mov	r0, r4
   daada:	4629      	mov	r1, r5
   daadc:	f000 fbfe 	bl	db2dc <__aeabi_dsub>
   daae0:	4606      	mov	r6, r0
   daae2:	460f      	mov	r7, r1
   daae4:	4632      	mov	r2, r6
   daae6:	463b      	mov	r3, r7
   daae8:	4620      	mov	r0, r4
   daaea:	4629      	mov	r1, r5
   daaec:	f000 fdae 	bl	db64c <__aeabi_dmul>
   daaf0:	2200      	movs	r2, #0
   daaf2:	4680      	mov	r8, r0
   daaf4:	4689      	mov	r9, r1
   daaf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daafa:	4630      	mov	r0, r6
   daafc:	4639      	mov	r1, r7
   daafe:	f000 fbed 	bl	db2dc <__aeabi_dsub>
   dab02:	4602      	mov	r2, r0
   dab04:	460b      	mov	r3, r1
   dab06:	4640      	mov	r0, r8
   dab08:	4649      	mov	r1, r9
   dab0a:	f000 fec9 	bl	db8a0 <__aeabi_ddiv>
   dab0e:	4652      	mov	r2, sl
   dab10:	4606      	mov	r6, r0
   dab12:	460f      	mov	r7, r1
   dab14:	465b      	mov	r3, fp
   dab16:	4620      	mov	r0, r4
   dab18:	4629      	mov	r1, r5
   dab1a:	f000 fd97 	bl	db64c <__aeabi_dmul>
   dab1e:	4652      	mov	r2, sl
   dab20:	465b      	mov	r3, fp
   dab22:	f000 fbdd 	bl	db2e0 <__adddf3>
   dab26:	4602      	mov	r2, r0
   dab28:	460b      	mov	r3, r1
   dab2a:	4630      	mov	r0, r6
   dab2c:	4639      	mov	r1, r7
   dab2e:	f000 fbd5 	bl	db2dc <__aeabi_dsub>
   dab32:	4622      	mov	r2, r4
   dab34:	462b      	mov	r3, r5
   dab36:	f000 fbd1 	bl	db2dc <__aeabi_dsub>
   dab3a:	4602      	mov	r2, r0
   dab3c:	460b      	mov	r3, r1
   dab3e:	2000      	movs	r0, #0
   dab40:	4945      	ldr	r1, [pc, #276]	; (dac58 <__ieee754_pow+0x950>)
   dab42:	f000 fbcb 	bl	db2dc <__aeabi_dsub>
   dab46:	460b      	mov	r3, r1
   dab48:	9900      	ldr	r1, [sp, #0]
   dab4a:	4419      	add	r1, r3
   dab4c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dab50:	4602      	mov	r2, r0
   dab52:	f2c0 8169 	blt.w	dae28 <__ieee754_pow+0xb20>
   dab56:	4610      	mov	r0, r2
   dab58:	ec53 2b19 	vmov	r2, r3, d9
   dab5c:	f000 fd76 	bl	db64c <__aeabi_dmul>
   dab60:	e9cd 0100 	strd	r0, r1, [sp]
   dab64:	e41e      	b.n	da3a4 <__ieee754_pow+0x9c>
   dab66:	f1bb 0f00 	cmp.w	fp, #0
   dab6a:	f6ff ac95 	blt.w	da498 <__ieee754_pow+0x190>
   dab6e:	ed9f 7b32 	vldr	d7, [pc, #200]	; dac38 <__ieee754_pow+0x930>
   dab72:	ed8d 7b00 	vstr	d7, [sp]
   dab76:	e415      	b.n	da3a4 <__ieee754_pow+0x9c>
   dab78:	f8df c0e4 	ldr.w	ip, [pc, #228]	; dac60 <__ieee754_pow+0x958>
   dab7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dab80:	4563      	cmp	r3, ip
   dab82:	f340 810b 	ble.w	dad9c <__ieee754_pow+0xa94>
   dab86:	4b35      	ldr	r3, [pc, #212]	; (dac5c <__ieee754_pow+0x954>)
   dab88:	440b      	add	r3, r1
   dab8a:	4303      	orrs	r3, r0
   dab8c:	d10a      	bne.n	daba4 <__ieee754_pow+0x89c>
   dab8e:	4632      	mov	r2, r6
   dab90:	463b      	mov	r3, r7
   dab92:	f000 fba3 	bl	db2dc <__aeabi_dsub>
   dab96:	4652      	mov	r2, sl
   dab98:	465b      	mov	r3, fp
   dab9a:	f000 ffdd 	bl	dbb58 <__aeabi_dcmpge>
   dab9e:	2800      	cmp	r0, #0
   daba0:	f43f aef2 	beq.w	da988 <__ieee754_pow+0x680>
   daba4:	a326      	add	r3, pc, #152	; (adr r3, dac40 <__ieee754_pow+0x938>)
   daba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabaa:	ec51 0b19 	vmov	r0, r1, d9
   dabae:	f000 fd4d 	bl	db64c <__aeabi_dmul>
   dabb2:	a323      	add	r3, pc, #140	; (adr r3, dac40 <__ieee754_pow+0x938>)
   dabb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabb8:	f000 fd48 	bl	db64c <__aeabi_dmul>
   dabbc:	e9cd 0100 	strd	r0, r1, [sp]
   dabc0:	f7ff bbf0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dabc4:	ed9f 7b20 	vldr	d7, [pc, #128]	; dac48 <__ieee754_pow+0x940>
   dabc8:	eeb0 9a47 	vmov.f32	s18, s14
   dabcc:	eef0 9a67 	vmov.f32	s19, s15
   dabd0:	e686      	b.n	da8e0 <__ieee754_pow+0x5d8>
   dabd2:	f1bb 0f00 	cmp.w	fp, #0
   dabd6:	daca      	bge.n	dab6e <__ieee754_pow+0x866>
   dabd8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dabdc:	9600      	str	r6, [sp, #0]
   dabde:	9301      	str	r3, [sp, #4]
   dabe0:	f7ff bbe0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dabe4:	f3af 8000 	nop.w
   dabe8:	00000000 	.word	0x00000000
   dabec:	bff00000 	.word	0xbff00000
   dabf0:	652b82fe 	.word	0x652b82fe
   dabf4:	3c971547 	.word	0x3c971547
   dabf8:	00000000 	.word	0x00000000
   dabfc:	3fe62e43 	.word	0x3fe62e43
   dac00:	fefa39ef 	.word	0xfefa39ef
   dac04:	3fe62e42 	.word	0x3fe62e42
   dac08:	0ca86c39 	.word	0x0ca86c39
   dac0c:	be205c61 	.word	0xbe205c61
   dac10:	72bea4d0 	.word	0x72bea4d0
   dac14:	3e663769 	.word	0x3e663769
   dac18:	c5d26bf1 	.word	0xc5d26bf1
   dac1c:	3ebbbd41 	.word	0x3ebbbd41
   dac20:	af25de2c 	.word	0xaf25de2c
   dac24:	3f11566a 	.word	0x3f11566a
   dac28:	16bebd93 	.word	0x16bebd93
   dac2c:	3f66c16c 	.word	0x3f66c16c
   dac30:	5555553e 	.word	0x5555553e
   dac34:	3fc55555 	.word	0x3fc55555
	...
   dac40:	c2f8f359 	.word	0xc2f8f359
   dac44:	01a56e1f 	.word	0x01a56e1f
   dac48:	00000000 	.word	0x00000000
   dac4c:	3ff00000 	.word	0x3ff00000
   dac50:	408fffff 	.word	0x408fffff
   dac54:	000fffff 	.word	0x000fffff
   dac58:	3ff00000 	.word	0x3ff00000
   dac5c:	3f6f3400 	.word	0x3f6f3400
   dac60:	4090cbff 	.word	0x4090cbff
   dac64:	4598      	cmp	r8, r3
   dac66:	f6ff af7e 	blt.w	dab66 <__ieee754_pow+0x85e>
   dac6a:	4b91      	ldr	r3, [pc, #580]	; (daeb0 <__ieee754_pow+0xba8>)
   dac6c:	4598      	cmp	r8, r3
   dac6e:	f73f ac0f 	bgt.w	da490 <__ieee754_pow+0x188>
   dac72:	4b8f      	ldr	r3, [pc, #572]	; (daeb0 <__ieee754_pow+0xba8>)
   dac74:	2200      	movs	r2, #0
   dac76:	e9dd 0100 	ldrd	r0, r1, [sp]
   dac7a:	f000 fb2f 	bl	db2dc <__aeabi_dsub>
   dac7e:	a378      	add	r3, pc, #480	; (adr r3, dae60 <__ieee754_pow+0xb58>)
   dac80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac84:	4604      	mov	r4, r0
   dac86:	460d      	mov	r5, r1
   dac88:	f000 fce0 	bl	db64c <__aeabi_dmul>
   dac8c:	a376      	add	r3, pc, #472	; (adr r3, dae68 <__ieee754_pow+0xb60>)
   dac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac92:	4682      	mov	sl, r0
   dac94:	468b      	mov	fp, r1
   dac96:	4620      	mov	r0, r4
   dac98:	4629      	mov	r1, r5
   dac9a:	f000 fcd7 	bl	db64c <__aeabi_dmul>
   dac9e:	4b85      	ldr	r3, [pc, #532]	; (daeb4 <__ieee754_pow+0xbac>)
   daca0:	4680      	mov	r8, r0
   daca2:	4689      	mov	r9, r1
   daca4:	2200      	movs	r2, #0
   daca6:	4620      	mov	r0, r4
   daca8:	4629      	mov	r1, r5
   dacaa:	f000 fccf 	bl	db64c <__aeabi_dmul>
   dacae:	4602      	mov	r2, r0
   dacb0:	460b      	mov	r3, r1
   dacb2:	a16f      	add	r1, pc, #444	; (adr r1, dae70 <__ieee754_pow+0xb68>)
   dacb4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dacb8:	f000 fb10 	bl	db2dc <__aeabi_dsub>
   dacbc:	4622      	mov	r2, r4
   dacbe:	462b      	mov	r3, r5
   dacc0:	f000 fcc4 	bl	db64c <__aeabi_dmul>
   dacc4:	4602      	mov	r2, r0
   dacc6:	460b      	mov	r3, r1
   dacc8:	2000      	movs	r0, #0
   dacca:	497b      	ldr	r1, [pc, #492]	; (daeb8 <__ieee754_pow+0xbb0>)
   daccc:	f000 fb06 	bl	db2dc <__aeabi_dsub>
   dacd0:	4622      	mov	r2, r4
   dacd2:	462b      	mov	r3, r5
   dacd4:	4604      	mov	r4, r0
   dacd6:	460d      	mov	r5, r1
   dacd8:	4610      	mov	r0, r2
   dacda:	4619      	mov	r1, r3
   dacdc:	f000 fcb6 	bl	db64c <__aeabi_dmul>
   dace0:	4602      	mov	r2, r0
   dace2:	460b      	mov	r3, r1
   dace4:	4620      	mov	r0, r4
   dace6:	4629      	mov	r1, r5
   dace8:	f000 fcb0 	bl	db64c <__aeabi_dmul>
   dacec:	a362      	add	r3, pc, #392	; (adr r3, dae78 <__ieee754_pow+0xb70>)
   dacee:	e9d3 2300 	ldrd	r2, r3, [r3]
   dacf2:	f000 fcab 	bl	db64c <__aeabi_dmul>
   dacf6:	4602      	mov	r2, r0
   dacf8:	460b      	mov	r3, r1
   dacfa:	4640      	mov	r0, r8
   dacfc:	4649      	mov	r1, r9
   dacfe:	f000 faed 	bl	db2dc <__aeabi_dsub>
   dad02:	4680      	mov	r8, r0
   dad04:	4689      	mov	r9, r1
   dad06:	4650      	mov	r0, sl
   dad08:	4659      	mov	r1, fp
   dad0a:	4642      	mov	r2, r8
   dad0c:	464b      	mov	r3, r9
   dad0e:	f000 fae7 	bl	db2e0 <__adddf3>
   dad12:	2400      	movs	r4, #0
   dad14:	4652      	mov	r2, sl
   dad16:	465b      	mov	r3, fp
   dad18:	4620      	mov	r0, r4
   dad1a:	460d      	mov	r5, r1
   dad1c:	f000 fade 	bl	db2dc <__aeabi_dsub>
   dad20:	4602      	mov	r2, r0
   dad22:	460b      	mov	r3, r1
   dad24:	4640      	mov	r0, r8
   dad26:	4649      	mov	r1, r9
   dad28:	f000 fad8 	bl	db2dc <__aeabi_dsub>
   dad2c:	4682      	mov	sl, r0
   dad2e:	468b      	mov	fp, r1
   dad30:	e5ca      	b.n	da8c8 <__ieee754_pow+0x5c0>
   dad32:	ed9f 7b53 	vldr	d7, [pc, #332]	; dae80 <__ieee754_pow+0xb78>
   dad36:	eeb0 ba47 	vmov.f32	s22, s14
   dad3a:	eef0 ba67 	vmov.f32	s23, s15
   dad3e:	eeb0 ca47 	vmov.f32	s24, s14
   dad42:	eef0 ca67 	vmov.f32	s25, s15
   dad46:	ed9f 7b50 	vldr	d7, [pc, #320]	; dae88 <__ieee754_pow+0xb80>
   dad4a:	f04f 0900 	mov.w	r9, #0
   dad4e:	ec54 3b17 	vmov	r3, r4, d7
   dad52:	e41d      	b.n	da590 <__ieee754_pow+0x288>
   dad54:	2000      	movs	r0, #0
   dad56:	f7ff bbf3 	b.w	da540 <__ieee754_pow+0x238>
   dad5a:	4955      	ldr	r1, [pc, #340]	; (daeb0 <__ieee754_pow+0xba8>)
   dad5c:	4622      	mov	r2, r4
   dad5e:	462b      	mov	r3, r5
   dad60:	2000      	movs	r0, #0
   dad62:	f000 fd9d 	bl	db8a0 <__aeabi_ddiv>
   dad66:	e9cd 0100 	strd	r0, r1, [sp]
   dad6a:	f7ff bb1b 	b.w	da3a4 <__ieee754_pow+0x9c>
   dad6e:	4622      	mov	r2, r4
   dad70:	462b      	mov	r3, r5
   dad72:	4620      	mov	r0, r4
   dad74:	4629      	mov	r1, r5
   dad76:	f000 fc69 	bl	db64c <__aeabi_dmul>
   dad7a:	e9cd 0100 	strd	r0, r1, [sp]
   dad7e:	f7ff bb11 	b.w	da3a4 <__ieee754_pow+0x9c>
   dad82:	2b00      	cmp	r3, #0
   dad84:	d142      	bne.n	dae0c <__ieee754_pow+0xb04>
   dad86:	f1c1 0114 	rsb	r1, r1, #20
   dad8a:	fa4a f001 	asr.w	r0, sl, r1
   dad8e:	fa00 f101 	lsl.w	r1, r0, r1
   dad92:	4551      	cmp	r1, sl
   dad94:	d05a      	beq.n	dae4c <__ieee754_pow+0xb44>
   dad96:	9303      	str	r3, [sp, #12]
   dad98:	f7ff bae0 	b.w	da35c <__ieee754_pow+0x54>
   dad9c:	4a46      	ldr	r2, [pc, #280]	; (daeb8 <__ieee754_pow+0xbb0>)
   dad9e:	4293      	cmp	r3, r2
   dada0:	dc5b      	bgt.n	dae5a <__ieee754_pow+0xb52>
   dada2:	e9dd 1200 	ldrd	r1, r2, [sp]
   dada6:	9100      	str	r1, [sp, #0]
   dada8:	9103      	str	r1, [sp, #12]
   dadaa:	e622      	b.n	da9f2 <__ieee754_pow+0x6ea>
   dadac:	a338      	add	r3, pc, #224	; (adr r3, dae90 <__ieee754_pow+0xb88>)
   dadae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dadb2:	ec51 0b19 	vmov	r0, r1, d9
   dadb6:	f000 fc49 	bl	db64c <__aeabi_dmul>
   dadba:	a335      	add	r3, pc, #212	; (adr r3, dae90 <__ieee754_pow+0xb88>)
   dadbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dadc0:	f000 fc44 	bl	db64c <__aeabi_dmul>
   dadc4:	e9cd 0100 	strd	r0, r1, [sp]
   dadc8:	f7ff baec 	b.w	da3a4 <__ieee754_pow+0x9c>
   dadcc:	9b03      	ldr	r3, [sp, #12]
   dadce:	2b01      	cmp	r3, #1
   dadd0:	f47f aae8 	bne.w	da3a4 <__ieee754_pow+0x9c>
   dadd4:	e9dd 2100 	ldrd	r2, r1, [sp]
   dadd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   daddc:	e9cd 2300 	strd	r2, r3, [sp]
   dade0:	f7ff bae0 	b.w	da3a4 <__ieee754_pow+0x9c>
   dade4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; dae98 <__ieee754_pow+0xb90>
   dade8:	eeb0 ba47 	vmov.f32	s22, s14
   dadec:	eef0 ba67 	vmov.f32	s23, s15
   dadf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; daea0 <__ieee754_pow+0xb98>
   dadf4:	eeb0 ca47 	vmov.f32	s24, s14
   dadf8:	eef0 ca67 	vmov.f32	s25, s15
   dadfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; daea8 <__ieee754_pow+0xba0>
   dae00:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   dae04:	ec54 3b17 	vmov	r3, r4, d7
   dae08:	f7ff bbc2 	b.w	da590 <__ieee754_pow+0x288>
   dae0c:	ec45 4b10 	vmov	d0, r4, r5
   dae10:	9203      	str	r2, [sp, #12]
   dae12:	f000 f917 	bl	db044 <fabs>
   dae16:	9a03      	ldr	r2, [sp, #12]
   dae18:	ed8d 0b00 	vstr	d0, [sp]
   dae1c:	2a00      	cmp	r2, #0
   dae1e:	f47f ab61 	bne.w	da4e4 <__ieee754_pow+0x1dc>
   dae22:	9203      	str	r2, [sp, #12]
   dae24:	f7ff baf5 	b.w	da412 <__ieee754_pow+0x10a>
   dae28:	9803      	ldr	r0, [sp, #12]
   dae2a:	ec43 2b10 	vmov	d0, r2, r3
   dae2e:	f000 f9bf 	bl	db1b0 <scalbn>
   dae32:	ec51 0b10 	vmov	r0, r1, d0
   dae36:	e68f      	b.n	dab58 <__ieee754_pow+0x850>
   dae38:	f000 0001 	and.w	r0, r0, #1
   dae3c:	f1c0 0102 	rsb	r1, r0, #2
   dae40:	9103      	str	r1, [sp, #12]
   dae42:	2b00      	cmp	r3, #0
   dae44:	f43f aa8a 	beq.w	da35c <__ieee754_pow+0x54>
   dae48:	f7ff bada 	b.w	da400 <__ieee754_pow+0xf8>
   dae4c:	f000 0001 	and.w	r0, r0, #1
   dae50:	f1c0 0302 	rsb	r3, r0, #2
   dae54:	9303      	str	r3, [sp, #12]
   dae56:	f7ff ba81 	b.w	da35c <__ieee754_pow+0x54>
   dae5a:	151b      	asrs	r3, r3, #20
   dae5c:	e596      	b.n	da98c <__ieee754_pow+0x684>
   dae5e:	bf00      	nop
   dae60:	60000000 	.word	0x60000000
   dae64:	3ff71547 	.word	0x3ff71547
   dae68:	f85ddf44 	.word	0xf85ddf44
   dae6c:	3e54ae0b 	.word	0x3e54ae0b
   dae70:	55555555 	.word	0x55555555
   dae74:	3fd55555 	.word	0x3fd55555
   dae78:	652b82fe 	.word	0x652b82fe
   dae7c:	3ff71547 	.word	0x3ff71547
	...
   dae8c:	3ff00000 	.word	0x3ff00000
   dae90:	8800759c 	.word	0x8800759c
   dae94:	7e37e43c 	.word	0x7e37e43c
   dae98:	40000000 	.word	0x40000000
   dae9c:	3fe2b803 	.word	0x3fe2b803
   daea0:	43cfd006 	.word	0x43cfd006
   daea4:	3e4cfdeb 	.word	0x3e4cfdeb
   daea8:	00000000 	.word	0x00000000
   daeac:	3ff80000 	.word	0x3ff80000
   daeb0:	3ff00000 	.word	0x3ff00000
   daeb4:	3fd00000 	.word	0x3fd00000
   daeb8:	3fe00000 	.word	0x3fe00000

000daebc <__ieee754_sqrt>:
   daebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daec0:	4a5f      	ldr	r2, [pc, #380]	; (db040 <__ieee754_sqrt+0x184>)
   daec2:	ec57 6b10 	vmov	r6, r7, d0
   daec6:	43ba      	bics	r2, r7
   daec8:	f000 8098 	beq.w	daffc <__ieee754_sqrt+0x140>
   daecc:	2f00      	cmp	r7, #0
   daece:	ee10 4a10 	vmov	r4, s0
   daed2:	463b      	mov	r3, r7
   daed4:	dd4e      	ble.n	daf74 <__ieee754_sqrt+0xb8>
   daed6:	1539      	asrs	r1, r7, #20
   daed8:	d05b      	beq.n	daf92 <__ieee754_sqrt+0xd6>
   daeda:	f3c3 0313 	ubfx	r3, r3, #0, #20
   daede:	07ca      	lsls	r2, r1, #31
   daee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daee4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   daee8:	d403      	bmi.n	daef2 <__ieee754_sqrt+0x36>
   daeea:	005b      	lsls	r3, r3, #1
   daeec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daef0:	0064      	lsls	r4, r4, #1
   daef2:	0fe2      	lsrs	r2, r4, #31
   daef4:	f04f 0c00 	mov.w	ip, #0
   daef8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   daefc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   daf00:	0064      	lsls	r4, r4, #1
   daf02:	4666      	mov	r6, ip
   daf04:	2516      	movs	r5, #22
   daf06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   daf0a:	18b1      	adds	r1, r6, r2
   daf0c:	4299      	cmp	r1, r3
   daf0e:	dc02      	bgt.n	daf16 <__ieee754_sqrt+0x5a>
   daf10:	1a5b      	subs	r3, r3, r1
   daf12:	188e      	adds	r6, r1, r2
   daf14:	4494      	add	ip, r2
   daf16:	005b      	lsls	r3, r3, #1
   daf18:	3d01      	subs	r5, #1
   daf1a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daf1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf22:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf26:	d1f0      	bne.n	daf0a <__ieee754_sqrt+0x4e>
   daf28:	462f      	mov	r7, r5
   daf2a:	2020      	movs	r0, #32
   daf2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   daf30:	e009      	b.n	daf46 <__ieee754_sqrt+0x8a>
   daf32:	d03e      	beq.n	dafb2 <__ieee754_sqrt+0xf6>
   daf34:	0fe1      	lsrs	r1, r4, #31
   daf36:	3801      	subs	r0, #1
   daf38:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   daf40:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf44:	d03e      	beq.n	dafc4 <__ieee754_sqrt+0x108>
   daf46:	42b3      	cmp	r3, r6
   daf48:	eb02 0105 	add.w	r1, r2, r5
   daf4c:	ddf1      	ble.n	daf32 <__ieee754_sqrt+0x76>
   daf4e:	2900      	cmp	r1, #0
   daf50:	eb01 0502 	add.w	r5, r1, r2
   daf54:	db09      	blt.n	daf6a <__ieee754_sqrt+0xae>
   daf56:	46b0      	mov	r8, r6
   daf58:	1b9b      	subs	r3, r3, r6
   daf5a:	42a1      	cmp	r1, r4
   daf5c:	bf88      	it	hi
   daf5e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   daf62:	1a64      	subs	r4, r4, r1
   daf64:	4417      	add	r7, r2
   daf66:	4646      	mov	r6, r8
   daf68:	e7e4      	b.n	daf34 <__ieee754_sqrt+0x78>
   daf6a:	2d00      	cmp	r5, #0
   daf6c:	dbf3      	blt.n	daf56 <__ieee754_sqrt+0x9a>
   daf6e:	f106 0801 	add.w	r8, r6, #1
   daf72:	e7f1      	b.n	daf58 <__ieee754_sqrt+0x9c>
   daf74:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   daf78:	4332      	orrs	r2, r6
   daf7a:	d036      	beq.n	dafea <__ieee754_sqrt+0x12e>
   daf7c:	2f00      	cmp	r7, #0
   daf7e:	d14d      	bne.n	db01c <__ieee754_sqrt+0x160>
   daf80:	4639      	mov	r1, r7
   daf82:	0ae2      	lsrs	r2, r4, #11
   daf84:	3915      	subs	r1, #21
   daf86:	0564      	lsls	r4, r4, #21
   daf88:	4613      	mov	r3, r2
   daf8a:	2a00      	cmp	r2, #0
   daf8c:	d0f9      	beq.n	daf82 <__ieee754_sqrt+0xc6>
   daf8e:	02d7      	lsls	r7, r2, #11
   daf90:	d451      	bmi.n	db036 <__ieee754_sqrt+0x17a>
   daf92:	2000      	movs	r0, #0
   daf94:	005b      	lsls	r3, r3, #1
   daf96:	02de      	lsls	r6, r3, #11
   daf98:	4605      	mov	r5, r0
   daf9a:	f100 0001 	add.w	r0, r0, #1
   daf9e:	d5f9      	bpl.n	daf94 <__ieee754_sqrt+0xd8>
   dafa0:	461a      	mov	r2, r3
   dafa2:	4623      	mov	r3, r4
   dafa4:	4084      	lsls	r4, r0
   dafa6:	f1c0 0020 	rsb	r0, r0, #32
   dafaa:	40c3      	lsrs	r3, r0
   dafac:	4313      	orrs	r3, r2
   dafae:	1b49      	subs	r1, r1, r5
   dafb0:	e793      	b.n	daeda <__ieee754_sqrt+0x1e>
   dafb2:	42a1      	cmp	r1, r4
   dafb4:	d8be      	bhi.n	daf34 <__ieee754_sqrt+0x78>
   dafb6:	2900      	cmp	r1, #0
   dafb8:	eb01 0502 	add.w	r5, r1, r2
   dafbc:	dbd5      	blt.n	daf6a <__ieee754_sqrt+0xae>
   dafbe:	4698      	mov	r8, r3
   dafc0:	2300      	movs	r3, #0
   dafc2:	e7ce      	b.n	daf62 <__ieee754_sqrt+0xa6>
   dafc4:	4323      	orrs	r3, r4
   dafc6:	d112      	bne.n	dafee <__ieee754_sqrt+0x132>
   dafc8:	0878      	lsrs	r0, r7, #1
   dafca:	ea4f 016c 	mov.w	r1, ip, asr #1
   dafce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dafd2:	f01c 0f01 	tst.w	ip, #1
   dafd6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dafda:	bf18      	it	ne
   dafdc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   dafe0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   dafe4:	4602      	mov	r2, r0
   dafe6:	ec43 2b10 	vmov	d0, r2, r3
   dafea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dafee:	1c7b      	adds	r3, r7, #1
   daff0:	bf16      	itet	ne
   daff2:	1c78      	addne	r0, r7, #1
   daff4:	f10c 0c01 	addeq.w	ip, ip, #1
   daff8:	0840      	lsrne	r0, r0, #1
   daffa:	e7e6      	b.n	dafca <__ieee754_sqrt+0x10e>
   daffc:	ee10 2a10 	vmov	r2, s0
   db000:	ee10 0a10 	vmov	r0, s0
   db004:	463b      	mov	r3, r7
   db006:	4639      	mov	r1, r7
   db008:	f000 fb20 	bl	db64c <__aeabi_dmul>
   db00c:	4632      	mov	r2, r6
   db00e:	463b      	mov	r3, r7
   db010:	f000 f966 	bl	db2e0 <__adddf3>
   db014:	ec41 0b10 	vmov	d0, r0, r1
   db018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db01c:	ee10 2a10 	vmov	r2, s0
   db020:	4630      	mov	r0, r6
   db022:	4639      	mov	r1, r7
   db024:	f000 f95a 	bl	db2dc <__aeabi_dsub>
   db028:	4602      	mov	r2, r0
   db02a:	460b      	mov	r3, r1
   db02c:	f000 fc38 	bl	db8a0 <__aeabi_ddiv>
   db030:	ec41 0b10 	vmov	d0, r0, r1
   db034:	e7d9      	b.n	dafea <__ieee754_sqrt+0x12e>
   db036:	4623      	mov	r3, r4
   db038:	2020      	movs	r0, #32
   db03a:	f04f 35ff 	mov.w	r5, #4294967295
   db03e:	e7b4      	b.n	dafaa <__ieee754_sqrt+0xee>
   db040:	7ff00000 	.word	0x7ff00000

000db044 <fabs>:
   db044:	ec51 0b10 	vmov	r0, r1, d0
   db048:	ee10 2a10 	vmov	r2, s0
   db04c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db050:	ec43 2b10 	vmov	d0, r2, r3
   db054:	4770      	bx	lr
   db056:	bf00      	nop

000db058 <finite>:
   db058:	b082      	sub	sp, #8
   db05a:	ed8d 0b00 	vstr	d0, [sp]
   db05e:	9801      	ldr	r0, [sp, #4]
   db060:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   db064:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   db068:	0fc0      	lsrs	r0, r0, #31
   db06a:	b002      	add	sp, #8
   db06c:	4770      	bx	lr
   db06e:	bf00      	nop

000db070 <matherr>:
   db070:	2000      	movs	r0, #0
   db072:	4770      	bx	lr
   db074:	0000      	movs	r0, r0
	...

000db078 <nan>:
   db078:	ed9f 0b01 	vldr	d0, [pc, #4]	; db080 <nan+0x8>
   db07c:	4770      	bx	lr
   db07e:	bf00      	nop
   db080:	00000000 	.word	0x00000000
   db084:	7ff80000 	.word	0x7ff80000

000db088 <rint>:
   db088:	b5f0      	push	{r4, r5, r6, r7, lr}
   db08a:	ec53 2b10 	vmov	r2, r3, d0
   db08e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   db092:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   db096:	2813      	cmp	r0, #19
   db098:	ee10 5a10 	vmov	r5, s0
   db09c:	b083      	sub	sp, #12
   db09e:	4619      	mov	r1, r3
   db0a0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   db0a4:	dc31      	bgt.n	db10a <rint+0x82>
   db0a6:	2800      	cmp	r0, #0
   db0a8:	db4c      	blt.n	db144 <rint+0xbc>
   db0aa:	4e3e      	ldr	r6, [pc, #248]	; (db1a4 <rint+0x11c>)
   db0ac:	4106      	asrs	r6, r0
   db0ae:	ea03 0706 	and.w	r7, r3, r6
   db0b2:	4317      	orrs	r7, r2
   db0b4:	d02e      	beq.n	db114 <rint+0x8c>
   db0b6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   db0ba:	431d      	orrs	r5, r3
   db0bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   db0c0:	d00c      	beq.n	db0dc <rint+0x54>
   db0c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   db0c6:	2813      	cmp	r0, #19
   db0c8:	ea21 0606 	bic.w	r6, r1, r6
   db0cc:	fa43 f100 	asr.w	r1, r3, r0
   db0d0:	ea41 0106 	orr.w	r1, r1, r6
   db0d4:	bf0c      	ite	eq
   db0d6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   db0da:	2500      	movne	r5, #0
   db0dc:	4832      	ldr	r0, [pc, #200]	; (db1a8 <rint+0x120>)
   db0de:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   db0e2:	462a      	mov	r2, r5
   db0e4:	e9d4 4500 	ldrd	r4, r5, [r4]
   db0e8:	460b      	mov	r3, r1
   db0ea:	4620      	mov	r0, r4
   db0ec:	4629      	mov	r1, r5
   db0ee:	f000 f8f7 	bl	db2e0 <__adddf3>
   db0f2:	e9cd 0100 	strd	r0, r1, [sp]
   db0f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   db0fa:	4622      	mov	r2, r4
   db0fc:	462b      	mov	r3, r5
   db0fe:	f000 f8ed 	bl	db2dc <__aeabi_dsub>
   db102:	ec41 0b10 	vmov	d0, r0, r1
   db106:	b003      	add	sp, #12
   db108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db10a:	2833      	cmp	r0, #51	; 0x33
   db10c:	dd06      	ble.n	db11c <rint+0x94>
   db10e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   db112:	d040      	beq.n	db196 <rint+0x10e>
   db114:	ec43 2b10 	vmov	d0, r2, r3
   db118:	b003      	add	sp, #12
   db11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db11c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   db120:	f04f 30ff 	mov.w	r0, #4294967295
   db124:	40f0      	lsrs	r0, r6
   db126:	4202      	tst	r2, r0
   db128:	d0f4      	beq.n	db114 <rint+0x8c>
   db12a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   db12e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   db132:	d0d3      	beq.n	db0dc <rint+0x54>
   db134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   db138:	ea25 0503 	bic.w	r5, r5, r3
   db13c:	fa42 f606 	asr.w	r6, r2, r6
   db140:	4335      	orrs	r5, r6
   db142:	e7cb      	b.n	db0dc <rint+0x54>
   db144:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   db148:	4310      	orrs	r0, r2
   db14a:	d0e3      	beq.n	db114 <rint+0x8c>
   db14c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   db150:	4310      	orrs	r0, r2
   db152:	4245      	negs	r5, r0
   db154:	4305      	orrs	r5, r0
   db156:	4814      	ldr	r0, [pc, #80]	; (db1a8 <rint+0x120>)
   db158:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   db15c:	e9d0 6700 	ldrd	r6, r7, [r0]
   db160:	0c59      	lsrs	r1, r3, #17
   db162:	0b2d      	lsrs	r5, r5, #12
   db164:	0449      	lsls	r1, r1, #17
   db166:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   db16a:	ea45 0301 	orr.w	r3, r5, r1
   db16e:	4630      	mov	r0, r6
   db170:	4639      	mov	r1, r7
   db172:	f000 f8b5 	bl	db2e0 <__adddf3>
   db176:	e9cd 0100 	strd	r0, r1, [sp]
   db17a:	463b      	mov	r3, r7
   db17c:	e9dd 0100 	ldrd	r0, r1, [sp]
   db180:	4632      	mov	r2, r6
   db182:	f000 f8ab 	bl	db2dc <__aeabi_dsub>
   db186:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db18a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   db18e:	ec41 0b10 	vmov	d0, r0, r1
   db192:	b003      	add	sp, #12
   db194:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db196:	ee10 0a10 	vmov	r0, s0
   db19a:	f000 f8a1 	bl	db2e0 <__adddf3>
   db19e:	ec41 0b10 	vmov	d0, r0, r1
   db1a2:	e7b9      	b.n	db118 <rint+0x90>
   db1a4:	000fffff 	.word	0x000fffff
   db1a8:	000de9d8 	.word	0x000de9d8
   db1ac:	00000000 	.word	0x00000000

000db1b0 <scalbn>:
   db1b0:	b538      	push	{r3, r4, r5, lr}
   db1b2:	ec53 2b10 	vmov	r2, r3, d0
   db1b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   db1ba:	461c      	mov	r4, r3
   db1bc:	4605      	mov	r5, r0
   db1be:	bb81      	cbnz	r1, db222 <scalbn+0x72>
   db1c0:	ee10 1a10 	vmov	r1, s0
   db1c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db1c8:	4321      	orrs	r1, r4
   db1ca:	d029      	beq.n	db220 <scalbn+0x70>
   db1cc:	4619      	mov	r1, r3
   db1ce:	2200      	movs	r2, #0
   db1d0:	4b3d      	ldr	r3, [pc, #244]	; (db2c8 <scalbn+0x118>)
   db1d2:	4c3e      	ldr	r4, [pc, #248]	; (db2cc <scalbn+0x11c>)
   db1d4:	ee10 0a10 	vmov	r0, s0
   db1d8:	f000 fa38 	bl	db64c <__aeabi_dmul>
   db1dc:	42a5      	cmp	r5, r4
   db1de:	4602      	mov	r2, r0
   db1e0:	460b      	mov	r3, r1
   db1e2:	db16      	blt.n	db212 <scalbn+0x62>
   db1e4:	460c      	mov	r4, r1
   db1e6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   db1ea:	3936      	subs	r1, #54	; 0x36
   db1ec:	4429      	add	r1, r5
   db1ee:	f240 70fe 	movw	r0, #2046	; 0x7fe
   db1f2:	4281      	cmp	r1, r0
   db1f4:	dc21      	bgt.n	db23a <scalbn+0x8a>
   db1f6:	2900      	cmp	r1, #0
   db1f8:	dc47      	bgt.n	db28a <scalbn+0xda>
   db1fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
   db1fe:	da34      	bge.n	db26a <scalbn+0xba>
   db200:	f24c 3150 	movw	r1, #50000	; 0xc350
   db204:	428d      	cmp	r5, r1
   db206:	dc18      	bgt.n	db23a <scalbn+0x8a>
   db208:	2b00      	cmp	r3, #0
   db20a:	a127      	add	r1, pc, #156	; (adr r1, db2a8 <scalbn+0xf8>)
   db20c:	e9d1 0100 	ldrd	r0, r1, [r1]
   db210:	db44      	blt.n	db29c <scalbn+0xec>
   db212:	a325      	add	r3, pc, #148	; (adr r3, db2a8 <scalbn+0xf8>)
   db214:	e9d3 2300 	ldrd	r2, r3, [r3]
   db218:	f000 fa18 	bl	db64c <__aeabi_dmul>
   db21c:	ec41 0b10 	vmov	d0, r0, r1
   db220:	bd38      	pop	{r3, r4, r5, pc}
   db222:	f240 70ff 	movw	r0, #2047	; 0x7ff
   db226:	4281      	cmp	r1, r0
   db228:	d1e0      	bne.n	db1ec <scalbn+0x3c>
   db22a:	ee10 0a10 	vmov	r0, s0
   db22e:	4619      	mov	r1, r3
   db230:	f000 f856 	bl	db2e0 <__adddf3>
   db234:	ec41 0b10 	vmov	d0, r0, r1
   db238:	bd38      	pop	{r3, r4, r5, pc}
   db23a:	2b00      	cmp	r3, #0
   db23c:	a11c      	add	r1, pc, #112	; (adr r1, db2b0 <scalbn+0x100>)
   db23e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db242:	db07      	blt.n	db254 <scalbn+0xa4>
   db244:	a31a      	add	r3, pc, #104	; (adr r3, db2b0 <scalbn+0x100>)
   db246:	e9d3 2300 	ldrd	r2, r3, [r3]
   db24a:	f000 f9ff 	bl	db64c <__aeabi_dmul>
   db24e:	ec41 0b10 	vmov	d0, r0, r1
   db252:	bd38      	pop	{r3, r4, r5, pc}
   db254:	a118      	add	r1, pc, #96	; (adr r1, db2b8 <scalbn+0x108>)
   db256:	e9d1 0100 	ldrd	r0, r1, [r1]
   db25a:	a315      	add	r3, pc, #84	; (adr r3, db2b0 <scalbn+0x100>)
   db25c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db260:	f000 f9f4 	bl	db64c <__aeabi_dmul>
   db264:	ec41 0b10 	vmov	d0, r0, r1
   db268:	e7f3      	b.n	db252 <scalbn+0xa2>
   db26a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db26e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db272:	3136      	adds	r1, #54	; 0x36
   db274:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db278:	4610      	mov	r0, r2
   db27a:	4619      	mov	r1, r3
   db27c:	2200      	movs	r2, #0
   db27e:	4b14      	ldr	r3, [pc, #80]	; (db2d0 <scalbn+0x120>)
   db280:	f000 f9e4 	bl	db64c <__aeabi_dmul>
   db284:	ec41 0b10 	vmov	d0, r0, r1
   db288:	bd38      	pop	{r3, r4, r5, pc}
   db28a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db28e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db292:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db296:	ec43 2b10 	vmov	d0, r2, r3
   db29a:	bd38      	pop	{r3, r4, r5, pc}
   db29c:	a108      	add	r1, pc, #32	; (adr r1, db2c0 <scalbn+0x110>)
   db29e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db2a2:	e7b6      	b.n	db212 <scalbn+0x62>
   db2a4:	f3af 8000 	nop.w
   db2a8:	c2f8f359 	.word	0xc2f8f359
   db2ac:	01a56e1f 	.word	0x01a56e1f
   db2b0:	8800759c 	.word	0x8800759c
   db2b4:	7e37e43c 	.word	0x7e37e43c
   db2b8:	8800759c 	.word	0x8800759c
   db2bc:	fe37e43c 	.word	0xfe37e43c
   db2c0:	c2f8f359 	.word	0xc2f8f359
   db2c4:	81a56e1f 	.word	0x81a56e1f
   db2c8:	43500000 	.word	0x43500000
   db2cc:	ffff3cb0 	.word	0xffff3cb0
   db2d0:	3c900000 	.word	0x3c900000

000db2d4 <__aeabi_drsub>:
   db2d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db2d8:	e002      	b.n	db2e0 <__adddf3>
   db2da:	bf00      	nop

000db2dc <__aeabi_dsub>:
   db2dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db2e0 <__adddf3>:
   db2e0:	b530      	push	{r4, r5, lr}
   db2e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db2e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db2ea:	ea94 0f05 	teq	r4, r5
   db2ee:	bf08      	it	eq
   db2f0:	ea90 0f02 	teqeq	r0, r2
   db2f4:	bf1f      	itttt	ne
   db2f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   db2fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   db2fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db306:	f000 80e2 	beq.w	db4ce <__adddf3+0x1ee>
   db30a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db30e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db312:	bfb8      	it	lt
   db314:	426d      	neglt	r5, r5
   db316:	dd0c      	ble.n	db332 <__adddf3+0x52>
   db318:	442c      	add	r4, r5
   db31a:	ea80 0202 	eor.w	r2, r0, r2
   db31e:	ea81 0303 	eor.w	r3, r1, r3
   db322:	ea82 0000 	eor.w	r0, r2, r0
   db326:	ea83 0101 	eor.w	r1, r3, r1
   db32a:	ea80 0202 	eor.w	r2, r0, r2
   db32e:	ea81 0303 	eor.w	r3, r1, r3
   db332:	2d36      	cmp	r5, #54	; 0x36
   db334:	bf88      	it	hi
   db336:	bd30      	pophi	{r4, r5, pc}
   db338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db33c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db348:	d002      	beq.n	db350 <__adddf3+0x70>
   db34a:	4240      	negs	r0, r0
   db34c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db354:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db35c:	d002      	beq.n	db364 <__adddf3+0x84>
   db35e:	4252      	negs	r2, r2
   db360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db364:	ea94 0f05 	teq	r4, r5
   db368:	f000 80a7 	beq.w	db4ba <__adddf3+0x1da>
   db36c:	f1a4 0401 	sub.w	r4, r4, #1
   db370:	f1d5 0e20 	rsbs	lr, r5, #32
   db374:	db0d      	blt.n	db392 <__adddf3+0xb2>
   db376:	fa02 fc0e 	lsl.w	ip, r2, lr
   db37a:	fa22 f205 	lsr.w	r2, r2, r5
   db37e:	1880      	adds	r0, r0, r2
   db380:	f141 0100 	adc.w	r1, r1, #0
   db384:	fa03 f20e 	lsl.w	r2, r3, lr
   db388:	1880      	adds	r0, r0, r2
   db38a:	fa43 f305 	asr.w	r3, r3, r5
   db38e:	4159      	adcs	r1, r3
   db390:	e00e      	b.n	db3b0 <__adddf3+0xd0>
   db392:	f1a5 0520 	sub.w	r5, r5, #32
   db396:	f10e 0e20 	add.w	lr, lr, #32
   db39a:	2a01      	cmp	r2, #1
   db39c:	fa03 fc0e 	lsl.w	ip, r3, lr
   db3a0:	bf28      	it	cs
   db3a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   db3a6:	fa43 f305 	asr.w	r3, r3, r5
   db3aa:	18c0      	adds	r0, r0, r3
   db3ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db3b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db3b4:	d507      	bpl.n	db3c6 <__adddf3+0xe6>
   db3b6:	f04f 0e00 	mov.w	lr, #0
   db3ba:	f1dc 0c00 	rsbs	ip, ip, #0
   db3be:	eb7e 0000 	sbcs.w	r0, lr, r0
   db3c2:	eb6e 0101 	sbc.w	r1, lr, r1
   db3c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db3ca:	d31b      	bcc.n	db404 <__adddf3+0x124>
   db3cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db3d0:	d30c      	bcc.n	db3ec <__adddf3+0x10c>
   db3d2:	0849      	lsrs	r1, r1, #1
   db3d4:	ea5f 0030 	movs.w	r0, r0, rrx
   db3d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db3dc:	f104 0401 	add.w	r4, r4, #1
   db3e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db3e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db3e8:	f080 809a 	bcs.w	db520 <__adddf3+0x240>
   db3ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db3f0:	bf08      	it	eq
   db3f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db3f6:	f150 0000 	adcs.w	r0, r0, #0
   db3fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db3fe:	ea41 0105 	orr.w	r1, r1, r5
   db402:	bd30      	pop	{r4, r5, pc}
   db404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db408:	4140      	adcs	r0, r0
   db40a:	eb41 0101 	adc.w	r1, r1, r1
   db40e:	3c01      	subs	r4, #1
   db410:	bf28      	it	cs
   db412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db416:	d2e9      	bcs.n	db3ec <__adddf3+0x10c>
   db418:	f091 0f00 	teq	r1, #0
   db41c:	bf04      	itt	eq
   db41e:	4601      	moveq	r1, r0
   db420:	2000      	moveq	r0, #0
   db422:	fab1 f381 	clz	r3, r1
   db426:	bf08      	it	eq
   db428:	3320      	addeq	r3, #32
   db42a:	f1a3 030b 	sub.w	r3, r3, #11
   db42e:	f1b3 0220 	subs.w	r2, r3, #32
   db432:	da0c      	bge.n	db44e <__adddf3+0x16e>
   db434:	320c      	adds	r2, #12
   db436:	dd08      	ble.n	db44a <__adddf3+0x16a>
   db438:	f102 0c14 	add.w	ip, r2, #20
   db43c:	f1c2 020c 	rsb	r2, r2, #12
   db440:	fa01 f00c 	lsl.w	r0, r1, ip
   db444:	fa21 f102 	lsr.w	r1, r1, r2
   db448:	e00c      	b.n	db464 <__adddf3+0x184>
   db44a:	f102 0214 	add.w	r2, r2, #20
   db44e:	bfd8      	it	le
   db450:	f1c2 0c20 	rsble	ip, r2, #32
   db454:	fa01 f102 	lsl.w	r1, r1, r2
   db458:	fa20 fc0c 	lsr.w	ip, r0, ip
   db45c:	bfdc      	itt	le
   db45e:	ea41 010c 	orrle.w	r1, r1, ip
   db462:	4090      	lslle	r0, r2
   db464:	1ae4      	subs	r4, r4, r3
   db466:	bfa2      	ittt	ge
   db468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db46c:	4329      	orrge	r1, r5
   db46e:	bd30      	popge	{r4, r5, pc}
   db470:	ea6f 0404 	mvn.w	r4, r4
   db474:	3c1f      	subs	r4, #31
   db476:	da1c      	bge.n	db4b2 <__adddf3+0x1d2>
   db478:	340c      	adds	r4, #12
   db47a:	dc0e      	bgt.n	db49a <__adddf3+0x1ba>
   db47c:	f104 0414 	add.w	r4, r4, #20
   db480:	f1c4 0220 	rsb	r2, r4, #32
   db484:	fa20 f004 	lsr.w	r0, r0, r4
   db488:	fa01 f302 	lsl.w	r3, r1, r2
   db48c:	ea40 0003 	orr.w	r0, r0, r3
   db490:	fa21 f304 	lsr.w	r3, r1, r4
   db494:	ea45 0103 	orr.w	r1, r5, r3
   db498:	bd30      	pop	{r4, r5, pc}
   db49a:	f1c4 040c 	rsb	r4, r4, #12
   db49e:	f1c4 0220 	rsb	r2, r4, #32
   db4a2:	fa20 f002 	lsr.w	r0, r0, r2
   db4a6:	fa01 f304 	lsl.w	r3, r1, r4
   db4aa:	ea40 0003 	orr.w	r0, r0, r3
   db4ae:	4629      	mov	r1, r5
   db4b0:	bd30      	pop	{r4, r5, pc}
   db4b2:	fa21 f004 	lsr.w	r0, r1, r4
   db4b6:	4629      	mov	r1, r5
   db4b8:	bd30      	pop	{r4, r5, pc}
   db4ba:	f094 0f00 	teq	r4, #0
   db4be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db4c2:	bf06      	itte	eq
   db4c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db4c8:	3401      	addeq	r4, #1
   db4ca:	3d01      	subne	r5, #1
   db4cc:	e74e      	b.n	db36c <__adddf3+0x8c>
   db4ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db4d2:	bf18      	it	ne
   db4d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db4d8:	d029      	beq.n	db52e <__adddf3+0x24e>
   db4da:	ea94 0f05 	teq	r4, r5
   db4de:	bf08      	it	eq
   db4e0:	ea90 0f02 	teqeq	r0, r2
   db4e4:	d005      	beq.n	db4f2 <__adddf3+0x212>
   db4e6:	ea54 0c00 	orrs.w	ip, r4, r0
   db4ea:	bf04      	itt	eq
   db4ec:	4619      	moveq	r1, r3
   db4ee:	4610      	moveq	r0, r2
   db4f0:	bd30      	pop	{r4, r5, pc}
   db4f2:	ea91 0f03 	teq	r1, r3
   db4f6:	bf1e      	ittt	ne
   db4f8:	2100      	movne	r1, #0
   db4fa:	2000      	movne	r0, #0
   db4fc:	bd30      	popne	{r4, r5, pc}
   db4fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db502:	d105      	bne.n	db510 <__adddf3+0x230>
   db504:	0040      	lsls	r0, r0, #1
   db506:	4149      	adcs	r1, r1
   db508:	bf28      	it	cs
   db50a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db50e:	bd30      	pop	{r4, r5, pc}
   db510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db514:	bf3c      	itt	cc
   db516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db51a:	bd30      	popcc	{r4, r5, pc}
   db51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db528:	f04f 0000 	mov.w	r0, #0
   db52c:	bd30      	pop	{r4, r5, pc}
   db52e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db532:	bf1a      	itte	ne
   db534:	4619      	movne	r1, r3
   db536:	4610      	movne	r0, r2
   db538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db53c:	bf1c      	itt	ne
   db53e:	460b      	movne	r3, r1
   db540:	4602      	movne	r2, r0
   db542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db546:	bf06      	itte	eq
   db548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db54c:	ea91 0f03 	teqeq	r1, r3
   db550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db554:	bd30      	pop	{r4, r5, pc}
   db556:	bf00      	nop

000db558 <__aeabi_ui2d>:
   db558:	f090 0f00 	teq	r0, #0
   db55c:	bf04      	itt	eq
   db55e:	2100      	moveq	r1, #0
   db560:	4770      	bxeq	lr
   db562:	b530      	push	{r4, r5, lr}
   db564:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db568:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db56c:	f04f 0500 	mov.w	r5, #0
   db570:	f04f 0100 	mov.w	r1, #0
   db574:	e750      	b.n	db418 <__adddf3+0x138>
   db576:	bf00      	nop

000db578 <__aeabi_i2d>:
   db578:	f090 0f00 	teq	r0, #0
   db57c:	bf04      	itt	eq
   db57e:	2100      	moveq	r1, #0
   db580:	4770      	bxeq	lr
   db582:	b530      	push	{r4, r5, lr}
   db584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db58c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db590:	bf48      	it	mi
   db592:	4240      	negmi	r0, r0
   db594:	f04f 0100 	mov.w	r1, #0
   db598:	e73e      	b.n	db418 <__adddf3+0x138>
   db59a:	bf00      	nop

000db59c <__aeabi_f2d>:
   db59c:	0042      	lsls	r2, r0, #1
   db59e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db5a2:	ea4f 0131 	mov.w	r1, r1, rrx
   db5a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db5aa:	bf1f      	itttt	ne
   db5ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db5b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db5b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db5b8:	4770      	bxne	lr
   db5ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db5be:	bf08      	it	eq
   db5c0:	4770      	bxeq	lr
   db5c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db5c6:	bf04      	itt	eq
   db5c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db5cc:	4770      	bxeq	lr
   db5ce:	b530      	push	{r4, r5, lr}
   db5d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   db5d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db5dc:	e71c      	b.n	db418 <__adddf3+0x138>
   db5de:	bf00      	nop

000db5e0 <__aeabi_ul2d>:
   db5e0:	ea50 0201 	orrs.w	r2, r0, r1
   db5e4:	bf08      	it	eq
   db5e6:	4770      	bxeq	lr
   db5e8:	b530      	push	{r4, r5, lr}
   db5ea:	f04f 0500 	mov.w	r5, #0
   db5ee:	e00a      	b.n	db606 <__aeabi_l2d+0x16>

000db5f0 <__aeabi_l2d>:
   db5f0:	ea50 0201 	orrs.w	r2, r0, r1
   db5f4:	bf08      	it	eq
   db5f6:	4770      	bxeq	lr
   db5f8:	b530      	push	{r4, r5, lr}
   db5fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db5fe:	d502      	bpl.n	db606 <__aeabi_l2d+0x16>
   db600:	4240      	negs	r0, r0
   db602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db606:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db60a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db60e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db612:	f43f aed8 	beq.w	db3c6 <__adddf3+0xe6>
   db616:	f04f 0203 	mov.w	r2, #3
   db61a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db61e:	bf18      	it	ne
   db620:	3203      	addne	r2, #3
   db622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db626:	bf18      	it	ne
   db628:	3203      	addne	r2, #3
   db62a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db62e:	f1c2 0320 	rsb	r3, r2, #32
   db632:	fa00 fc03 	lsl.w	ip, r0, r3
   db636:	fa20 f002 	lsr.w	r0, r0, r2
   db63a:	fa01 fe03 	lsl.w	lr, r1, r3
   db63e:	ea40 000e 	orr.w	r0, r0, lr
   db642:	fa21 f102 	lsr.w	r1, r1, r2
   db646:	4414      	add	r4, r2
   db648:	e6bd      	b.n	db3c6 <__adddf3+0xe6>
   db64a:	bf00      	nop

000db64c <__aeabi_dmul>:
   db64c:	b570      	push	{r4, r5, r6, lr}
   db64e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db65a:	bf1d      	ittte	ne
   db65c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db660:	ea94 0f0c 	teqne	r4, ip
   db664:	ea95 0f0c 	teqne	r5, ip
   db668:	f000 f8de 	bleq	db828 <__aeabi_dmul+0x1dc>
   db66c:	442c      	add	r4, r5
   db66e:	ea81 0603 	eor.w	r6, r1, r3
   db672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db67a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db67e:	bf18      	it	ne
   db680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db68c:	d038      	beq.n	db700 <__aeabi_dmul+0xb4>
   db68e:	fba0 ce02 	umull	ip, lr, r0, r2
   db692:	f04f 0500 	mov.w	r5, #0
   db696:	fbe1 e502 	umlal	lr, r5, r1, r2
   db69a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db69e:	fbe0 e503 	umlal	lr, r5, r0, r3
   db6a2:	f04f 0600 	mov.w	r6, #0
   db6a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   db6aa:	f09c 0f00 	teq	ip, #0
   db6ae:	bf18      	it	ne
   db6b0:	f04e 0e01 	orrne.w	lr, lr, #1
   db6b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db6b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db6bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db6c0:	d204      	bcs.n	db6cc <__aeabi_dmul+0x80>
   db6c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db6c6:	416d      	adcs	r5, r5
   db6c8:	eb46 0606 	adc.w	r6, r6, r6
   db6cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db6d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db6d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db6d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db6dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db6e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db6e4:	bf88      	it	hi
   db6e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db6ea:	d81e      	bhi.n	db72a <__aeabi_dmul+0xde>
   db6ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db6f0:	bf08      	it	eq
   db6f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db6f6:	f150 0000 	adcs.w	r0, r0, #0
   db6fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db6fe:	bd70      	pop	{r4, r5, r6, pc}
   db700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db704:	ea46 0101 	orr.w	r1, r6, r1
   db708:	ea40 0002 	orr.w	r0, r0, r2
   db70c:	ea81 0103 	eor.w	r1, r1, r3
   db710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db714:	bfc2      	ittt	gt
   db716:	ebd4 050c 	rsbsgt	r5, r4, ip
   db71a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db71e:	bd70      	popgt	{r4, r5, r6, pc}
   db720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db724:	f04f 0e00 	mov.w	lr, #0
   db728:	3c01      	subs	r4, #1
   db72a:	f300 80ab 	bgt.w	db884 <__aeabi_dmul+0x238>
   db72e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db732:	bfde      	ittt	le
   db734:	2000      	movle	r0, #0
   db736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db73a:	bd70      	pople	{r4, r5, r6, pc}
   db73c:	f1c4 0400 	rsb	r4, r4, #0
   db740:	3c20      	subs	r4, #32
   db742:	da35      	bge.n	db7b0 <__aeabi_dmul+0x164>
   db744:	340c      	adds	r4, #12
   db746:	dc1b      	bgt.n	db780 <__aeabi_dmul+0x134>
   db748:	f104 0414 	add.w	r4, r4, #20
   db74c:	f1c4 0520 	rsb	r5, r4, #32
   db750:	fa00 f305 	lsl.w	r3, r0, r5
   db754:	fa20 f004 	lsr.w	r0, r0, r4
   db758:	fa01 f205 	lsl.w	r2, r1, r5
   db75c:	ea40 0002 	orr.w	r0, r0, r2
   db760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db76c:	fa21 f604 	lsr.w	r6, r1, r4
   db770:	eb42 0106 	adc.w	r1, r2, r6
   db774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db778:	bf08      	it	eq
   db77a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db77e:	bd70      	pop	{r4, r5, r6, pc}
   db780:	f1c4 040c 	rsb	r4, r4, #12
   db784:	f1c4 0520 	rsb	r5, r4, #32
   db788:	fa00 f304 	lsl.w	r3, r0, r4
   db78c:	fa20 f005 	lsr.w	r0, r0, r5
   db790:	fa01 f204 	lsl.w	r2, r1, r4
   db794:	ea40 0002 	orr.w	r0, r0, r2
   db798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db79c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db7a0:	f141 0100 	adc.w	r1, r1, #0
   db7a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db7a8:	bf08      	it	eq
   db7aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db7ae:	bd70      	pop	{r4, r5, r6, pc}
   db7b0:	f1c4 0520 	rsb	r5, r4, #32
   db7b4:	fa00 f205 	lsl.w	r2, r0, r5
   db7b8:	ea4e 0e02 	orr.w	lr, lr, r2
   db7bc:	fa20 f304 	lsr.w	r3, r0, r4
   db7c0:	fa01 f205 	lsl.w	r2, r1, r5
   db7c4:	ea43 0302 	orr.w	r3, r3, r2
   db7c8:	fa21 f004 	lsr.w	r0, r1, r4
   db7cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db7d0:	fa21 f204 	lsr.w	r2, r1, r4
   db7d4:	ea20 0002 	bic.w	r0, r0, r2
   db7d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db7dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db7e0:	bf08      	it	eq
   db7e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db7e6:	bd70      	pop	{r4, r5, r6, pc}
   db7e8:	f094 0f00 	teq	r4, #0
   db7ec:	d10f      	bne.n	db80e <__aeabi_dmul+0x1c2>
   db7ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db7f2:	0040      	lsls	r0, r0, #1
   db7f4:	eb41 0101 	adc.w	r1, r1, r1
   db7f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db7fc:	bf08      	it	eq
   db7fe:	3c01      	subeq	r4, #1
   db800:	d0f7      	beq.n	db7f2 <__aeabi_dmul+0x1a6>
   db802:	ea41 0106 	orr.w	r1, r1, r6
   db806:	f095 0f00 	teq	r5, #0
   db80a:	bf18      	it	ne
   db80c:	4770      	bxne	lr
   db80e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db812:	0052      	lsls	r2, r2, #1
   db814:	eb43 0303 	adc.w	r3, r3, r3
   db818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db81c:	bf08      	it	eq
   db81e:	3d01      	subeq	r5, #1
   db820:	d0f7      	beq.n	db812 <__aeabi_dmul+0x1c6>
   db822:	ea43 0306 	orr.w	r3, r3, r6
   db826:	4770      	bx	lr
   db828:	ea94 0f0c 	teq	r4, ip
   db82c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db830:	bf18      	it	ne
   db832:	ea95 0f0c 	teqne	r5, ip
   db836:	d00c      	beq.n	db852 <__aeabi_dmul+0x206>
   db838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db83c:	bf18      	it	ne
   db83e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db842:	d1d1      	bne.n	db7e8 <__aeabi_dmul+0x19c>
   db844:	ea81 0103 	eor.w	r1, r1, r3
   db848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db84c:	f04f 0000 	mov.w	r0, #0
   db850:	bd70      	pop	{r4, r5, r6, pc}
   db852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db856:	bf06      	itte	eq
   db858:	4610      	moveq	r0, r2
   db85a:	4619      	moveq	r1, r3
   db85c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db860:	d019      	beq.n	db896 <__aeabi_dmul+0x24a>
   db862:	ea94 0f0c 	teq	r4, ip
   db866:	d102      	bne.n	db86e <__aeabi_dmul+0x222>
   db868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db86c:	d113      	bne.n	db896 <__aeabi_dmul+0x24a>
   db86e:	ea95 0f0c 	teq	r5, ip
   db872:	d105      	bne.n	db880 <__aeabi_dmul+0x234>
   db874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db878:	bf1c      	itt	ne
   db87a:	4610      	movne	r0, r2
   db87c:	4619      	movne	r1, r3
   db87e:	d10a      	bne.n	db896 <__aeabi_dmul+0x24a>
   db880:	ea81 0103 	eor.w	r1, r1, r3
   db884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db88c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db890:	f04f 0000 	mov.w	r0, #0
   db894:	bd70      	pop	{r4, r5, r6, pc}
   db896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db89a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db89e:	bd70      	pop	{r4, r5, r6, pc}

000db8a0 <__aeabi_ddiv>:
   db8a0:	b570      	push	{r4, r5, r6, lr}
   db8a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db8a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db8aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db8ae:	bf1d      	ittte	ne
   db8b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db8b4:	ea94 0f0c 	teqne	r4, ip
   db8b8:	ea95 0f0c 	teqne	r5, ip
   db8bc:	f000 f8a7 	bleq	dba0e <__aeabi_ddiv+0x16e>
   db8c0:	eba4 0405 	sub.w	r4, r4, r5
   db8c4:	ea81 0e03 	eor.w	lr, r1, r3
   db8c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db8cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db8d0:	f000 8088 	beq.w	db9e4 <__aeabi_ddiv+0x144>
   db8d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db8d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db8dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db8e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db8e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db8e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db8ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db8f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db8f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db8f8:	429d      	cmp	r5, r3
   db8fa:	bf08      	it	eq
   db8fc:	4296      	cmpeq	r6, r2
   db8fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db902:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db906:	d202      	bcs.n	db90e <__aeabi_ddiv+0x6e>
   db908:	085b      	lsrs	r3, r3, #1
   db90a:	ea4f 0232 	mov.w	r2, r2, rrx
   db90e:	1ab6      	subs	r6, r6, r2
   db910:	eb65 0503 	sbc.w	r5, r5, r3
   db914:	085b      	lsrs	r3, r3, #1
   db916:	ea4f 0232 	mov.w	r2, r2, rrx
   db91a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db91e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db922:	ebb6 0e02 	subs.w	lr, r6, r2
   db926:	eb75 0e03 	sbcs.w	lr, r5, r3
   db92a:	bf22      	ittt	cs
   db92c:	1ab6      	subcs	r6, r6, r2
   db92e:	4675      	movcs	r5, lr
   db930:	ea40 000c 	orrcs.w	r0, r0, ip
   db934:	085b      	lsrs	r3, r3, #1
   db936:	ea4f 0232 	mov.w	r2, r2, rrx
   db93a:	ebb6 0e02 	subs.w	lr, r6, r2
   db93e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db942:	bf22      	ittt	cs
   db944:	1ab6      	subcs	r6, r6, r2
   db946:	4675      	movcs	r5, lr
   db948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db94c:	085b      	lsrs	r3, r3, #1
   db94e:	ea4f 0232 	mov.w	r2, r2, rrx
   db952:	ebb6 0e02 	subs.w	lr, r6, r2
   db956:	eb75 0e03 	sbcs.w	lr, r5, r3
   db95a:	bf22      	ittt	cs
   db95c:	1ab6      	subcs	r6, r6, r2
   db95e:	4675      	movcs	r5, lr
   db960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db964:	085b      	lsrs	r3, r3, #1
   db966:	ea4f 0232 	mov.w	r2, r2, rrx
   db96a:	ebb6 0e02 	subs.w	lr, r6, r2
   db96e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db972:	bf22      	ittt	cs
   db974:	1ab6      	subcs	r6, r6, r2
   db976:	4675      	movcs	r5, lr
   db978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db97c:	ea55 0e06 	orrs.w	lr, r5, r6
   db980:	d018      	beq.n	db9b4 <__aeabi_ddiv+0x114>
   db982:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db98a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db98e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db99a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db99e:	d1c0      	bne.n	db922 <__aeabi_ddiv+0x82>
   db9a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db9a4:	d10b      	bne.n	db9be <__aeabi_ddiv+0x11e>
   db9a6:	ea41 0100 	orr.w	r1, r1, r0
   db9aa:	f04f 0000 	mov.w	r0, #0
   db9ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db9b2:	e7b6      	b.n	db922 <__aeabi_ddiv+0x82>
   db9b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db9b8:	bf04      	itt	eq
   db9ba:	4301      	orreq	r1, r0
   db9bc:	2000      	moveq	r0, #0
   db9be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db9c2:	bf88      	it	hi
   db9c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db9c8:	f63f aeaf 	bhi.w	db72a <__aeabi_dmul+0xde>
   db9cc:	ebb5 0c03 	subs.w	ip, r5, r3
   db9d0:	bf04      	itt	eq
   db9d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   db9d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db9da:	f150 0000 	adcs.w	r0, r0, #0
   db9de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db9e2:	bd70      	pop	{r4, r5, r6, pc}
   db9e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db9e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db9ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db9f0:	bfc2      	ittt	gt
   db9f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   db9f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db9fa:	bd70      	popgt	{r4, r5, r6, pc}
   db9fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dba00:	f04f 0e00 	mov.w	lr, #0
   dba04:	3c01      	subs	r4, #1
   dba06:	e690      	b.n	db72a <__aeabi_dmul+0xde>
   dba08:	ea45 0e06 	orr.w	lr, r5, r6
   dba0c:	e68d      	b.n	db72a <__aeabi_dmul+0xde>
   dba0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dba12:	ea94 0f0c 	teq	r4, ip
   dba16:	bf08      	it	eq
   dba18:	ea95 0f0c 	teqeq	r5, ip
   dba1c:	f43f af3b 	beq.w	db896 <__aeabi_dmul+0x24a>
   dba20:	ea94 0f0c 	teq	r4, ip
   dba24:	d10a      	bne.n	dba3c <__aeabi_ddiv+0x19c>
   dba26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dba2a:	f47f af34 	bne.w	db896 <__aeabi_dmul+0x24a>
   dba2e:	ea95 0f0c 	teq	r5, ip
   dba32:	f47f af25 	bne.w	db880 <__aeabi_dmul+0x234>
   dba36:	4610      	mov	r0, r2
   dba38:	4619      	mov	r1, r3
   dba3a:	e72c      	b.n	db896 <__aeabi_dmul+0x24a>
   dba3c:	ea95 0f0c 	teq	r5, ip
   dba40:	d106      	bne.n	dba50 <__aeabi_ddiv+0x1b0>
   dba42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dba46:	f43f aefd 	beq.w	db844 <__aeabi_dmul+0x1f8>
   dba4a:	4610      	mov	r0, r2
   dba4c:	4619      	mov	r1, r3
   dba4e:	e722      	b.n	db896 <__aeabi_dmul+0x24a>
   dba50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dba54:	bf18      	it	ne
   dba56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dba5a:	f47f aec5 	bne.w	db7e8 <__aeabi_dmul+0x19c>
   dba5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dba62:	f47f af0d 	bne.w	db880 <__aeabi_dmul+0x234>
   dba66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dba6a:	f47f aeeb 	bne.w	db844 <__aeabi_dmul+0x1f8>
   dba6e:	e712      	b.n	db896 <__aeabi_dmul+0x24a>

000dba70 <__gedf2>:
   dba70:	f04f 3cff 	mov.w	ip, #4294967295
   dba74:	e006      	b.n	dba84 <__cmpdf2+0x4>
   dba76:	bf00      	nop

000dba78 <__ledf2>:
   dba78:	f04f 0c01 	mov.w	ip, #1
   dba7c:	e002      	b.n	dba84 <__cmpdf2+0x4>
   dba7e:	bf00      	nop

000dba80 <__cmpdf2>:
   dba80:	f04f 0c01 	mov.w	ip, #1
   dba84:	f84d cd04 	str.w	ip, [sp, #-4]!
   dba88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dba8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dba90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dba94:	bf18      	it	ne
   dba96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dba9a:	d01b      	beq.n	dbad4 <__cmpdf2+0x54>
   dba9c:	b001      	add	sp, #4
   dba9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dbaa2:	bf0c      	ite	eq
   dbaa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dbaa8:	ea91 0f03 	teqne	r1, r3
   dbaac:	bf02      	ittt	eq
   dbaae:	ea90 0f02 	teqeq	r0, r2
   dbab2:	2000      	moveq	r0, #0
   dbab4:	4770      	bxeq	lr
   dbab6:	f110 0f00 	cmn.w	r0, #0
   dbaba:	ea91 0f03 	teq	r1, r3
   dbabe:	bf58      	it	pl
   dbac0:	4299      	cmppl	r1, r3
   dbac2:	bf08      	it	eq
   dbac4:	4290      	cmpeq	r0, r2
   dbac6:	bf2c      	ite	cs
   dbac8:	17d8      	asrcs	r0, r3, #31
   dbaca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dbace:	f040 0001 	orr.w	r0, r0, #1
   dbad2:	4770      	bx	lr
   dbad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbadc:	d102      	bne.n	dbae4 <__cmpdf2+0x64>
   dbade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dbae2:	d107      	bne.n	dbaf4 <__cmpdf2+0x74>
   dbae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbaec:	d1d6      	bne.n	dba9c <__cmpdf2+0x1c>
   dbaee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dbaf2:	d0d3      	beq.n	dba9c <__cmpdf2+0x1c>
   dbaf4:	f85d 0b04 	ldr.w	r0, [sp], #4
   dbaf8:	4770      	bx	lr
   dbafa:	bf00      	nop

000dbafc <__aeabi_cdrcmple>:
   dbafc:	4684      	mov	ip, r0
   dbafe:	4610      	mov	r0, r2
   dbb00:	4662      	mov	r2, ip
   dbb02:	468c      	mov	ip, r1
   dbb04:	4619      	mov	r1, r3
   dbb06:	4663      	mov	r3, ip
   dbb08:	e000      	b.n	dbb0c <__aeabi_cdcmpeq>
   dbb0a:	bf00      	nop

000dbb0c <__aeabi_cdcmpeq>:
   dbb0c:	b501      	push	{r0, lr}
   dbb0e:	f7ff ffb7 	bl	dba80 <__cmpdf2>
   dbb12:	2800      	cmp	r0, #0
   dbb14:	bf48      	it	mi
   dbb16:	f110 0f00 	cmnmi.w	r0, #0
   dbb1a:	bd01      	pop	{r0, pc}

000dbb1c <__aeabi_dcmpeq>:
   dbb1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbb20:	f7ff fff4 	bl	dbb0c <__aeabi_cdcmpeq>
   dbb24:	bf0c      	ite	eq
   dbb26:	2001      	moveq	r0, #1
   dbb28:	2000      	movne	r0, #0
   dbb2a:	f85d fb08 	ldr.w	pc, [sp], #8
   dbb2e:	bf00      	nop

000dbb30 <__aeabi_dcmplt>:
   dbb30:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbb34:	f7ff ffea 	bl	dbb0c <__aeabi_cdcmpeq>
   dbb38:	bf34      	ite	cc
   dbb3a:	2001      	movcc	r0, #1
   dbb3c:	2000      	movcs	r0, #0
   dbb3e:	f85d fb08 	ldr.w	pc, [sp], #8
   dbb42:	bf00      	nop

000dbb44 <__aeabi_dcmple>:
   dbb44:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbb48:	f7ff ffe0 	bl	dbb0c <__aeabi_cdcmpeq>
   dbb4c:	bf94      	ite	ls
   dbb4e:	2001      	movls	r0, #1
   dbb50:	2000      	movhi	r0, #0
   dbb52:	f85d fb08 	ldr.w	pc, [sp], #8
   dbb56:	bf00      	nop

000dbb58 <__aeabi_dcmpge>:
   dbb58:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbb5c:	f7ff ffce 	bl	dbafc <__aeabi_cdrcmple>
   dbb60:	bf94      	ite	ls
   dbb62:	2001      	movls	r0, #1
   dbb64:	2000      	movhi	r0, #0
   dbb66:	f85d fb08 	ldr.w	pc, [sp], #8
   dbb6a:	bf00      	nop

000dbb6c <__aeabi_dcmpgt>:
   dbb6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbb70:	f7ff ffc4 	bl	dbafc <__aeabi_cdrcmple>
   dbb74:	bf34      	ite	cc
   dbb76:	2001      	movcc	r0, #1
   dbb78:	2000      	movcs	r0, #0
   dbb7a:	f85d fb08 	ldr.w	pc, [sp], #8
   dbb7e:	bf00      	nop

000dbb80 <__aeabi_dcmpun>:
   dbb80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbb84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbb88:	d102      	bne.n	dbb90 <__aeabi_dcmpun+0x10>
   dbb8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dbb8e:	d10a      	bne.n	dbba6 <__aeabi_dcmpun+0x26>
   dbb90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbb94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbb98:	d102      	bne.n	dbba0 <__aeabi_dcmpun+0x20>
   dbb9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dbb9e:	d102      	bne.n	dbba6 <__aeabi_dcmpun+0x26>
   dbba0:	f04f 0000 	mov.w	r0, #0
   dbba4:	4770      	bx	lr
   dbba6:	f04f 0001 	mov.w	r0, #1
   dbbaa:	4770      	bx	lr

000dbbac <__aeabi_d2iz>:
   dbbac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbbb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbbb4:	d215      	bcs.n	dbbe2 <__aeabi_d2iz+0x36>
   dbbb6:	d511      	bpl.n	dbbdc <__aeabi_d2iz+0x30>
   dbbb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbbbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbbc0:	d912      	bls.n	dbbe8 <__aeabi_d2iz+0x3c>
   dbbc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbbc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbbca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbbce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbbd2:	fa23 f002 	lsr.w	r0, r3, r2
   dbbd6:	bf18      	it	ne
   dbbd8:	4240      	negne	r0, r0
   dbbda:	4770      	bx	lr
   dbbdc:	f04f 0000 	mov.w	r0, #0
   dbbe0:	4770      	bx	lr
   dbbe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbbe6:	d105      	bne.n	dbbf4 <__aeabi_d2iz+0x48>
   dbbe8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbbec:	bf08      	it	eq
   dbbee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbbf2:	4770      	bx	lr
   dbbf4:	f04f 0000 	mov.w	r0, #0
   dbbf8:	4770      	bx	lr
   dbbfa:	bf00      	nop

000dbbfc <__aeabi_d2uiz>:
   dbbfc:	004a      	lsls	r2, r1, #1
   dbbfe:	d211      	bcs.n	dbc24 <__aeabi_d2uiz+0x28>
   dbc00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbc04:	d211      	bcs.n	dbc2a <__aeabi_d2uiz+0x2e>
   dbc06:	d50d      	bpl.n	dbc24 <__aeabi_d2uiz+0x28>
   dbc08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbc0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbc10:	d40e      	bmi.n	dbc30 <__aeabi_d2uiz+0x34>
   dbc12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbc16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbc1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbc1e:	fa23 f002 	lsr.w	r0, r3, r2
   dbc22:	4770      	bx	lr
   dbc24:	f04f 0000 	mov.w	r0, #0
   dbc28:	4770      	bx	lr
   dbc2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbc2e:	d102      	bne.n	dbc36 <__aeabi_d2uiz+0x3a>
   dbc30:	f04f 30ff 	mov.w	r0, #4294967295
   dbc34:	4770      	bx	lr
   dbc36:	f04f 0000 	mov.w	r0, #0
   dbc3a:	4770      	bx	lr

000dbc3c <__aeabi_d2f>:
   dbc3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbc40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbc44:	bf24      	itt	cs
   dbc46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbc4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbc4e:	d90d      	bls.n	dbc6c <__aeabi_d2f+0x30>
   dbc50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbc54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbc58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbc5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbc60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbc64:	bf08      	it	eq
   dbc66:	f020 0001 	biceq.w	r0, r0, #1
   dbc6a:	4770      	bx	lr
   dbc6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbc70:	d121      	bne.n	dbcb6 <__aeabi_d2f+0x7a>
   dbc72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbc76:	bfbc      	itt	lt
   dbc78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbc7c:	4770      	bxlt	lr
   dbc7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbc82:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbc86:	f1c2 0218 	rsb	r2, r2, #24
   dbc8a:	f1c2 0c20 	rsb	ip, r2, #32
   dbc8e:	fa10 f30c 	lsls.w	r3, r0, ip
   dbc92:	fa20 f002 	lsr.w	r0, r0, r2
   dbc96:	bf18      	it	ne
   dbc98:	f040 0001 	orrne.w	r0, r0, #1
   dbc9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbca4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbca8:	ea40 000c 	orr.w	r0, r0, ip
   dbcac:	fa23 f302 	lsr.w	r3, r3, r2
   dbcb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbcb4:	e7cc      	b.n	dbc50 <__aeabi_d2f+0x14>
   dbcb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbcba:	d107      	bne.n	dbccc <__aeabi_d2f+0x90>
   dbcbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbcc0:	bf1e      	ittt	ne
   dbcc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbcc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbcca:	4770      	bxne	lr
   dbccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbcd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbcd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbcd8:	4770      	bx	lr
   dbcda:	bf00      	nop

000dbcdc <__aeabi_d2ulz>:
   dbcdc:	b5d0      	push	{r4, r6, r7, lr}
   dbcde:	4b0c      	ldr	r3, [pc, #48]	; (dbd10 <__aeabi_d2ulz+0x34>)
   dbce0:	2200      	movs	r2, #0
   dbce2:	4606      	mov	r6, r0
   dbce4:	460f      	mov	r7, r1
   dbce6:	f7ff fcb1 	bl	db64c <__aeabi_dmul>
   dbcea:	f7ff ff87 	bl	dbbfc <__aeabi_d2uiz>
   dbcee:	4604      	mov	r4, r0
   dbcf0:	f7ff fc32 	bl	db558 <__aeabi_ui2d>
   dbcf4:	4b07      	ldr	r3, [pc, #28]	; (dbd14 <__aeabi_d2ulz+0x38>)
   dbcf6:	2200      	movs	r2, #0
   dbcf8:	f7ff fca8 	bl	db64c <__aeabi_dmul>
   dbcfc:	4602      	mov	r2, r0
   dbcfe:	460b      	mov	r3, r1
   dbd00:	4630      	mov	r0, r6
   dbd02:	4639      	mov	r1, r7
   dbd04:	f7ff faea 	bl	db2dc <__aeabi_dsub>
   dbd08:	f7ff ff78 	bl	dbbfc <__aeabi_d2uiz>
   dbd0c:	4621      	mov	r1, r4
   dbd0e:	bdd0      	pop	{r4, r6, r7, pc}
   dbd10:	3df00000 	.word	0x3df00000
   dbd14:	41f00000 	.word	0x41f00000

000dbd18 <atof>:
   dbd18:	2100      	movs	r1, #0
   dbd1a:	f000 befb 	b.w	dcb14 <strtod>

000dbd1e <atoi>:
   dbd1e:	220a      	movs	r2, #10
   dbd20:	2100      	movs	r1, #0
   dbd22:	f000 bf7d 	b.w	dcc20 <strtol>

000dbd26 <atol>:
   dbd26:	220a      	movs	r2, #10
   dbd28:	2100      	movs	r1, #0
   dbd2a:	f000 bf79 	b.w	dcc20 <strtol>
	...

000dbd30 <__cxa_atexit>:
   dbd30:	b510      	push	{r4, lr}
   dbd32:	4c05      	ldr	r4, [pc, #20]	; (dbd48 <__cxa_atexit+0x18>)
   dbd34:	4613      	mov	r3, r2
   dbd36:	b12c      	cbz	r4, dbd44 <__cxa_atexit+0x14>
   dbd38:	460a      	mov	r2, r1
   dbd3a:	4601      	mov	r1, r0
   dbd3c:	2002      	movs	r0, #2
   dbd3e:	f3af 8000 	nop.w
   dbd42:	bd10      	pop	{r4, pc}
   dbd44:	4620      	mov	r0, r4
   dbd46:	e7fc      	b.n	dbd42 <__cxa_atexit+0x12>
   dbd48:	00000000 	.word	0x00000000

000dbd4c <memcpy>:
   dbd4c:	440a      	add	r2, r1
   dbd4e:	4291      	cmp	r1, r2
   dbd50:	f100 33ff 	add.w	r3, r0, #4294967295
   dbd54:	d100      	bne.n	dbd58 <memcpy+0xc>
   dbd56:	4770      	bx	lr
   dbd58:	b510      	push	{r4, lr}
   dbd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbd62:	4291      	cmp	r1, r2
   dbd64:	d1f9      	bne.n	dbd5a <memcpy+0xe>
   dbd66:	bd10      	pop	{r4, pc}

000dbd68 <memset>:
   dbd68:	4402      	add	r2, r0
   dbd6a:	4603      	mov	r3, r0
   dbd6c:	4293      	cmp	r3, r2
   dbd6e:	d100      	bne.n	dbd72 <memset+0xa>
   dbd70:	4770      	bx	lr
   dbd72:	f803 1b01 	strb.w	r1, [r3], #1
   dbd76:	e7f9      	b.n	dbd6c <memset+0x4>

000dbd78 <srand>:
   dbd78:	b538      	push	{r3, r4, r5, lr}
   dbd7a:	4b0d      	ldr	r3, [pc, #52]	; (dbdb0 <srand+0x38>)
   dbd7c:	681d      	ldr	r5, [r3, #0]
   dbd7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbd80:	4604      	mov	r4, r0
   dbd82:	b97b      	cbnz	r3, dbda4 <srand+0x2c>
   dbd84:	2018      	movs	r0, #24
   dbd86:	f7fb ff25 	bl	d7bd4 <malloc>
   dbd8a:	4a0a      	ldr	r2, [pc, #40]	; (dbdb4 <srand+0x3c>)
   dbd8c:	4b0a      	ldr	r3, [pc, #40]	; (dbdb8 <srand+0x40>)
   dbd8e:	63a8      	str	r0, [r5, #56]	; 0x38
   dbd90:	e9c0 2300 	strd	r2, r3, [r0]
   dbd94:	4b09      	ldr	r3, [pc, #36]	; (dbdbc <srand+0x44>)
   dbd96:	6083      	str	r3, [r0, #8]
   dbd98:	230b      	movs	r3, #11
   dbd9a:	8183      	strh	r3, [r0, #12]
   dbd9c:	2201      	movs	r2, #1
   dbd9e:	2300      	movs	r3, #0
   dbda0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbda4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbda6:	2200      	movs	r2, #0
   dbda8:	611c      	str	r4, [r3, #16]
   dbdaa:	615a      	str	r2, [r3, #20]
   dbdac:	bd38      	pop	{r3, r4, r5, pc}
   dbdae:	bf00      	nop
   dbdb0:	2003df54 	.word	0x2003df54
   dbdb4:	abcd330e 	.word	0xabcd330e
   dbdb8:	e66d1234 	.word	0xe66d1234
   dbdbc:	0005deec 	.word	0x0005deec

000dbdc0 <strchr>:
   dbdc0:	b2c9      	uxtb	r1, r1
   dbdc2:	4603      	mov	r3, r0
   dbdc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbdc8:	b11a      	cbz	r2, dbdd2 <strchr+0x12>
   dbdca:	428a      	cmp	r2, r1
   dbdcc:	d1f9      	bne.n	dbdc2 <strchr+0x2>
   dbdce:	4618      	mov	r0, r3
   dbdd0:	4770      	bx	lr
   dbdd2:	2900      	cmp	r1, #0
   dbdd4:	bf18      	it	ne
   dbdd6:	2300      	movne	r3, #0
   dbdd8:	e7f9      	b.n	dbdce <strchr+0xe>

000dbdda <strcmp>:
   dbdda:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbdde:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbde2:	2a01      	cmp	r2, #1
   dbde4:	bf28      	it	cs
   dbde6:	429a      	cmpcs	r2, r3
   dbde8:	d0f7      	beq.n	dbdda <strcmp>
   dbdea:	1ad0      	subs	r0, r2, r3
   dbdec:	4770      	bx	lr

000dbdee <strcpy>:
   dbdee:	4603      	mov	r3, r0
   dbdf0:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbdf4:	f803 2b01 	strb.w	r2, [r3], #1
   dbdf8:	2a00      	cmp	r2, #0
   dbdfa:	d1f9      	bne.n	dbdf0 <strcpy+0x2>
   dbdfc:	4770      	bx	lr
	...

000dbe00 <strdup>:
   dbe00:	4b02      	ldr	r3, [pc, #8]	; (dbe0c <strdup+0xc>)
   dbe02:	4601      	mov	r1, r0
   dbe04:	6818      	ldr	r0, [r3, #0]
   dbe06:	f000 b803 	b.w	dbe10 <_strdup_r>
   dbe0a:	bf00      	nop
   dbe0c:	2003df54 	.word	0x2003df54

000dbe10 <_strdup_r>:
   dbe10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbe12:	4604      	mov	r4, r0
   dbe14:	4608      	mov	r0, r1
   dbe16:	460d      	mov	r5, r1
   dbe18:	f000 f80f 	bl	dbe3a <strlen>
   dbe1c:	1c42      	adds	r2, r0, #1
   dbe1e:	4611      	mov	r1, r2
   dbe20:	4620      	mov	r0, r4
   dbe22:	9201      	str	r2, [sp, #4]
   dbe24:	f7fb fefe 	bl	d7c24 <_malloc_r>
   dbe28:	4604      	mov	r4, r0
   dbe2a:	b118      	cbz	r0, dbe34 <_strdup_r+0x24>
   dbe2c:	9a01      	ldr	r2, [sp, #4]
   dbe2e:	4629      	mov	r1, r5
   dbe30:	f7ff ff8c 	bl	dbd4c <memcpy>
   dbe34:	4620      	mov	r0, r4
   dbe36:	b003      	add	sp, #12
   dbe38:	bd30      	pop	{r4, r5, pc}

000dbe3a <strlen>:
   dbe3a:	4603      	mov	r3, r0
   dbe3c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbe40:	2a00      	cmp	r2, #0
   dbe42:	d1fb      	bne.n	dbe3c <strlen+0x2>
   dbe44:	1a18      	subs	r0, r3, r0
   dbe46:	3801      	subs	r0, #1
   dbe48:	4770      	bx	lr

000dbe4a <strncmp>:
   dbe4a:	b510      	push	{r4, lr}
   dbe4c:	b16a      	cbz	r2, dbe6a <strncmp+0x20>
   dbe4e:	3901      	subs	r1, #1
   dbe50:	1884      	adds	r4, r0, r2
   dbe52:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbe56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbe5a:	4293      	cmp	r3, r2
   dbe5c:	d103      	bne.n	dbe66 <strncmp+0x1c>
   dbe5e:	42a0      	cmp	r0, r4
   dbe60:	d001      	beq.n	dbe66 <strncmp+0x1c>
   dbe62:	2b00      	cmp	r3, #0
   dbe64:	d1f5      	bne.n	dbe52 <strncmp+0x8>
   dbe66:	1a98      	subs	r0, r3, r2
   dbe68:	bd10      	pop	{r4, pc}
   dbe6a:	4610      	mov	r0, r2
   dbe6c:	e7fc      	b.n	dbe68 <strncmp+0x1e>

000dbe6e <strncpy>:
   dbe6e:	b510      	push	{r4, lr}
   dbe70:	3901      	subs	r1, #1
   dbe72:	4603      	mov	r3, r0
   dbe74:	b132      	cbz	r2, dbe84 <strncpy+0x16>
   dbe76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbe7a:	f803 4b01 	strb.w	r4, [r3], #1
   dbe7e:	3a01      	subs	r2, #1
   dbe80:	2c00      	cmp	r4, #0
   dbe82:	d1f7      	bne.n	dbe74 <strncpy+0x6>
   dbe84:	441a      	add	r2, r3
   dbe86:	2100      	movs	r1, #0
   dbe88:	4293      	cmp	r3, r2
   dbe8a:	d100      	bne.n	dbe8e <strncpy+0x20>
   dbe8c:	bd10      	pop	{r4, pc}
   dbe8e:	f803 1b01 	strb.w	r1, [r3], #1
   dbe92:	e7f9      	b.n	dbe88 <strncpy+0x1a>

000dbe94 <strstr>:
   dbe94:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbe96:	780c      	ldrb	r4, [r1, #0]
   dbe98:	b164      	cbz	r4, dbeb4 <strstr+0x20>
   dbe9a:	4603      	mov	r3, r0
   dbe9c:	781a      	ldrb	r2, [r3, #0]
   dbe9e:	4618      	mov	r0, r3
   dbea0:	1c5e      	adds	r6, r3, #1
   dbea2:	b90a      	cbnz	r2, dbea8 <strstr+0x14>
   dbea4:	4610      	mov	r0, r2
   dbea6:	e005      	b.n	dbeb4 <strstr+0x20>
   dbea8:	4294      	cmp	r4, r2
   dbeaa:	d108      	bne.n	dbebe <strstr+0x2a>
   dbeac:	460d      	mov	r5, r1
   dbeae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dbeb2:	b902      	cbnz	r2, dbeb6 <strstr+0x22>
   dbeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbeb6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dbeba:	4297      	cmp	r7, r2
   dbebc:	d0f7      	beq.n	dbeae <strstr+0x1a>
   dbebe:	4633      	mov	r3, r6
   dbec0:	e7ec      	b.n	dbe9c <strstr+0x8>

000dbec2 <sulp>:
   dbec2:	b570      	push	{r4, r5, r6, lr}
   dbec4:	4604      	mov	r4, r0
   dbec6:	460d      	mov	r5, r1
   dbec8:	ec45 4b10 	vmov	d0, r4, r5
   dbecc:	4616      	mov	r6, r2
   dbece:	f001 fd1d 	bl	dd90c <__ulp>
   dbed2:	ec51 0b10 	vmov	r0, r1, d0
   dbed6:	b17e      	cbz	r6, dbef8 <sulp+0x36>
   dbed8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dbedc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbee0:	2b00      	cmp	r3, #0
   dbee2:	dd09      	ble.n	dbef8 <sulp+0x36>
   dbee4:	051b      	lsls	r3, r3, #20
   dbee6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dbeea:	2400      	movs	r4, #0
   dbeec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dbef0:	4622      	mov	r2, r4
   dbef2:	462b      	mov	r3, r5
   dbef4:	f7ff fbaa 	bl	db64c <__aeabi_dmul>
   dbef8:	bd70      	pop	{r4, r5, r6, pc}
   dbefa:	0000      	movs	r0, r0
   dbefc:	0000      	movs	r0, r0
	...

000dbf00 <_strtod_l>:
   dbf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf04:	b0a3      	sub	sp, #140	; 0x8c
   dbf06:	461f      	mov	r7, r3
   dbf08:	2300      	movs	r3, #0
   dbf0a:	931e      	str	r3, [sp, #120]	; 0x78
   dbf0c:	4ba4      	ldr	r3, [pc, #656]	; (dc1a0 <_strtod_l+0x2a0>)
   dbf0e:	9219      	str	r2, [sp, #100]	; 0x64
   dbf10:	681b      	ldr	r3, [r3, #0]
   dbf12:	9307      	str	r3, [sp, #28]
   dbf14:	4604      	mov	r4, r0
   dbf16:	4618      	mov	r0, r3
   dbf18:	4688      	mov	r8, r1
   dbf1a:	f7ff ff8e 	bl	dbe3a <strlen>
   dbf1e:	f04f 0a00 	mov.w	sl, #0
   dbf22:	4605      	mov	r5, r0
   dbf24:	f04f 0b00 	mov.w	fp, #0
   dbf28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbf2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbf2e:	781a      	ldrb	r2, [r3, #0]
   dbf30:	2a2b      	cmp	r2, #43	; 0x2b
   dbf32:	d04c      	beq.n	dbfce <_strtod_l+0xce>
   dbf34:	d839      	bhi.n	dbfaa <_strtod_l+0xaa>
   dbf36:	2a0d      	cmp	r2, #13
   dbf38:	d832      	bhi.n	dbfa0 <_strtod_l+0xa0>
   dbf3a:	2a08      	cmp	r2, #8
   dbf3c:	d832      	bhi.n	dbfa4 <_strtod_l+0xa4>
   dbf3e:	2a00      	cmp	r2, #0
   dbf40:	d03c      	beq.n	dbfbc <_strtod_l+0xbc>
   dbf42:	2300      	movs	r3, #0
   dbf44:	930e      	str	r3, [sp, #56]	; 0x38
   dbf46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dbf48:	7833      	ldrb	r3, [r6, #0]
   dbf4a:	2b30      	cmp	r3, #48	; 0x30
   dbf4c:	f040 80b4 	bne.w	dc0b8 <_strtod_l+0x1b8>
   dbf50:	7873      	ldrb	r3, [r6, #1]
   dbf52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dbf56:	2b58      	cmp	r3, #88	; 0x58
   dbf58:	d16c      	bne.n	dc034 <_strtod_l+0x134>
   dbf5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbf5c:	9301      	str	r3, [sp, #4]
   dbf5e:	ab1e      	add	r3, sp, #120	; 0x78
   dbf60:	9702      	str	r7, [sp, #8]
   dbf62:	9300      	str	r3, [sp, #0]
   dbf64:	4a8f      	ldr	r2, [pc, #572]	; (dc1a4 <_strtod_l+0x2a4>)
   dbf66:	ab1f      	add	r3, sp, #124	; 0x7c
   dbf68:	a91d      	add	r1, sp, #116	; 0x74
   dbf6a:	4620      	mov	r0, r4
   dbf6c:	f000 feca 	bl	dcd04 <__gethex>
   dbf70:	f010 0707 	ands.w	r7, r0, #7
   dbf74:	4605      	mov	r5, r0
   dbf76:	d005      	beq.n	dbf84 <_strtod_l+0x84>
   dbf78:	2f06      	cmp	r7, #6
   dbf7a:	d12a      	bne.n	dbfd2 <_strtod_l+0xd2>
   dbf7c:	3601      	adds	r6, #1
   dbf7e:	2300      	movs	r3, #0
   dbf80:	961d      	str	r6, [sp, #116]	; 0x74
   dbf82:	930e      	str	r3, [sp, #56]	; 0x38
   dbf84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbf86:	2b00      	cmp	r3, #0
   dbf88:	f040 8596 	bne.w	dcab8 <_strtod_l+0xbb8>
   dbf8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbf8e:	b1db      	cbz	r3, dbfc8 <_strtod_l+0xc8>
   dbf90:	4652      	mov	r2, sl
   dbf92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dbf96:	ec43 2b10 	vmov	d0, r2, r3
   dbf9a:	b023      	add	sp, #140	; 0x8c
   dbf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfa0:	2a20      	cmp	r2, #32
   dbfa2:	d1ce      	bne.n	dbf42 <_strtod_l+0x42>
   dbfa4:	3301      	adds	r3, #1
   dbfa6:	931d      	str	r3, [sp, #116]	; 0x74
   dbfa8:	e7c0      	b.n	dbf2c <_strtod_l+0x2c>
   dbfaa:	2a2d      	cmp	r2, #45	; 0x2d
   dbfac:	d1c9      	bne.n	dbf42 <_strtod_l+0x42>
   dbfae:	2201      	movs	r2, #1
   dbfb0:	920e      	str	r2, [sp, #56]	; 0x38
   dbfb2:	1c5a      	adds	r2, r3, #1
   dbfb4:	921d      	str	r2, [sp, #116]	; 0x74
   dbfb6:	785b      	ldrb	r3, [r3, #1]
   dbfb8:	2b00      	cmp	r3, #0
   dbfba:	d1c4      	bne.n	dbf46 <_strtod_l+0x46>
   dbfbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbfbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbfc2:	2b00      	cmp	r3, #0
   dbfc4:	f040 8576 	bne.w	dcab4 <_strtod_l+0xbb4>
   dbfc8:	4652      	mov	r2, sl
   dbfca:	465b      	mov	r3, fp
   dbfcc:	e7e3      	b.n	dbf96 <_strtod_l+0x96>
   dbfce:	2200      	movs	r2, #0
   dbfd0:	e7ee      	b.n	dbfb0 <_strtod_l+0xb0>
   dbfd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbfd4:	b13a      	cbz	r2, dbfe6 <_strtod_l+0xe6>
   dbfd6:	2135      	movs	r1, #53	; 0x35
   dbfd8:	a820      	add	r0, sp, #128	; 0x80
   dbfda:	f001 fd96 	bl	ddb0a <__copybits>
   dbfde:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbfe0:	4620      	mov	r0, r4
   dbfe2:	f001 f9cb 	bl	dd37c <_Bfree>
   dbfe6:	3f01      	subs	r7, #1
   dbfe8:	2f05      	cmp	r7, #5
   dbfea:	d807      	bhi.n	dbffc <_strtod_l+0xfc>
   dbfec:	e8df f007 	tbb	[pc, r7]
   dbff0:	1d180b0e 	.word	0x1d180b0e
   dbff4:	030e      	.short	0x030e
   dbff6:	f04f 0b00 	mov.w	fp, #0
   dbffa:	46da      	mov	sl, fp
   dbffc:	0728      	lsls	r0, r5, #28
   dbffe:	d5c1      	bpl.n	dbf84 <_strtod_l+0x84>
   dc000:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dc004:	e7be      	b.n	dbf84 <_strtod_l+0x84>
   dc006:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dc00a:	e7f7      	b.n	dbffc <_strtod_l+0xfc>
   dc00c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dc010:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dc012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dc016:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dc01a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dc01e:	e7ed      	b.n	dbffc <_strtod_l+0xfc>
   dc020:	f8df b184 	ldr.w	fp, [pc, #388]	; dc1a8 <_strtod_l+0x2a8>
   dc024:	f04f 0a00 	mov.w	sl, #0
   dc028:	e7e8      	b.n	dbffc <_strtod_l+0xfc>
   dc02a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dc02e:	f04f 3aff 	mov.w	sl, #4294967295
   dc032:	e7e3      	b.n	dbffc <_strtod_l+0xfc>
   dc034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc036:	1c5a      	adds	r2, r3, #1
   dc038:	921d      	str	r2, [sp, #116]	; 0x74
   dc03a:	785b      	ldrb	r3, [r3, #1]
   dc03c:	2b30      	cmp	r3, #48	; 0x30
   dc03e:	d0f9      	beq.n	dc034 <_strtod_l+0x134>
   dc040:	2b00      	cmp	r3, #0
   dc042:	d09f      	beq.n	dbf84 <_strtod_l+0x84>
   dc044:	2301      	movs	r3, #1
   dc046:	f04f 0900 	mov.w	r9, #0
   dc04a:	9304      	str	r3, [sp, #16]
   dc04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc04e:	930a      	str	r3, [sp, #40]	; 0x28
   dc050:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dc054:	464f      	mov	r7, r9
   dc056:	220a      	movs	r2, #10
   dc058:	981d      	ldr	r0, [sp, #116]	; 0x74
   dc05a:	7806      	ldrb	r6, [r0, #0]
   dc05c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dc060:	b2d9      	uxtb	r1, r3
   dc062:	2909      	cmp	r1, #9
   dc064:	d92a      	bls.n	dc0bc <_strtod_l+0x1bc>
   dc066:	9907      	ldr	r1, [sp, #28]
   dc068:	462a      	mov	r2, r5
   dc06a:	f7ff feee 	bl	dbe4a <strncmp>
   dc06e:	b398      	cbz	r0, dc0d8 <_strtod_l+0x1d8>
   dc070:	2000      	movs	r0, #0
   dc072:	4633      	mov	r3, r6
   dc074:	463d      	mov	r5, r7
   dc076:	9007      	str	r0, [sp, #28]
   dc078:	4602      	mov	r2, r0
   dc07a:	2b65      	cmp	r3, #101	; 0x65
   dc07c:	d001      	beq.n	dc082 <_strtod_l+0x182>
   dc07e:	2b45      	cmp	r3, #69	; 0x45
   dc080:	d118      	bne.n	dc0b4 <_strtod_l+0x1b4>
   dc082:	b91d      	cbnz	r5, dc08c <_strtod_l+0x18c>
   dc084:	9b04      	ldr	r3, [sp, #16]
   dc086:	4303      	orrs	r3, r0
   dc088:	d098      	beq.n	dbfbc <_strtod_l+0xbc>
   dc08a:	2500      	movs	r5, #0
   dc08c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dc090:	f108 0301 	add.w	r3, r8, #1
   dc094:	931d      	str	r3, [sp, #116]	; 0x74
   dc096:	f898 3001 	ldrb.w	r3, [r8, #1]
   dc09a:	2b2b      	cmp	r3, #43	; 0x2b
   dc09c:	d075      	beq.n	dc18a <_strtod_l+0x28a>
   dc09e:	2b2d      	cmp	r3, #45	; 0x2d
   dc0a0:	d07b      	beq.n	dc19a <_strtod_l+0x29a>
   dc0a2:	f04f 0c00 	mov.w	ip, #0
   dc0a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dc0aa:	2909      	cmp	r1, #9
   dc0ac:	f240 8082 	bls.w	dc1b4 <_strtod_l+0x2b4>
   dc0b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc0b4:	2600      	movs	r6, #0
   dc0b6:	e09d      	b.n	dc1f4 <_strtod_l+0x2f4>
   dc0b8:	2300      	movs	r3, #0
   dc0ba:	e7c4      	b.n	dc046 <_strtod_l+0x146>
   dc0bc:	2f08      	cmp	r7, #8
   dc0be:	bfd8      	it	le
   dc0c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dc0c2:	f100 0001 	add.w	r0, r0, #1
   dc0c6:	bfda      	itte	le
   dc0c8:	fb02 3301 	mlale	r3, r2, r1, r3
   dc0cc:	9309      	strle	r3, [sp, #36]	; 0x24
   dc0ce:	fb02 3909 	mlagt	r9, r2, r9, r3
   dc0d2:	3701      	adds	r7, #1
   dc0d4:	901d      	str	r0, [sp, #116]	; 0x74
   dc0d6:	e7bf      	b.n	dc058 <_strtod_l+0x158>
   dc0d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc0da:	195a      	adds	r2, r3, r5
   dc0dc:	921d      	str	r2, [sp, #116]	; 0x74
   dc0de:	5d5b      	ldrb	r3, [r3, r5]
   dc0e0:	2f00      	cmp	r7, #0
   dc0e2:	d037      	beq.n	dc154 <_strtod_l+0x254>
   dc0e4:	9007      	str	r0, [sp, #28]
   dc0e6:	463d      	mov	r5, r7
   dc0e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dc0ec:	2a09      	cmp	r2, #9
   dc0ee:	d912      	bls.n	dc116 <_strtod_l+0x216>
   dc0f0:	2201      	movs	r2, #1
   dc0f2:	e7c2      	b.n	dc07a <_strtod_l+0x17a>
   dc0f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc0f6:	1c5a      	adds	r2, r3, #1
   dc0f8:	921d      	str	r2, [sp, #116]	; 0x74
   dc0fa:	785b      	ldrb	r3, [r3, #1]
   dc0fc:	3001      	adds	r0, #1
   dc0fe:	2b30      	cmp	r3, #48	; 0x30
   dc100:	d0f8      	beq.n	dc0f4 <_strtod_l+0x1f4>
   dc102:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dc106:	2a08      	cmp	r2, #8
   dc108:	f200 84db 	bhi.w	dcac2 <_strtod_l+0xbc2>
   dc10c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dc10e:	9007      	str	r0, [sp, #28]
   dc110:	2000      	movs	r0, #0
   dc112:	920a      	str	r2, [sp, #40]	; 0x28
   dc114:	4605      	mov	r5, r0
   dc116:	3b30      	subs	r3, #48	; 0x30
   dc118:	f100 0201 	add.w	r2, r0, #1
   dc11c:	d014      	beq.n	dc148 <_strtod_l+0x248>
   dc11e:	9907      	ldr	r1, [sp, #28]
   dc120:	4411      	add	r1, r2
   dc122:	9107      	str	r1, [sp, #28]
   dc124:	462a      	mov	r2, r5
   dc126:	eb00 0e05 	add.w	lr, r0, r5
   dc12a:	210a      	movs	r1, #10
   dc12c:	4572      	cmp	r2, lr
   dc12e:	d113      	bne.n	dc158 <_strtod_l+0x258>
   dc130:	182a      	adds	r2, r5, r0
   dc132:	2a08      	cmp	r2, #8
   dc134:	f105 0501 	add.w	r5, r5, #1
   dc138:	4405      	add	r5, r0
   dc13a:	dc1c      	bgt.n	dc176 <_strtod_l+0x276>
   dc13c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc13e:	220a      	movs	r2, #10
   dc140:	fb02 3301 	mla	r3, r2, r1, r3
   dc144:	9309      	str	r3, [sp, #36]	; 0x24
   dc146:	2200      	movs	r2, #0
   dc148:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc14a:	1c59      	adds	r1, r3, #1
   dc14c:	911d      	str	r1, [sp, #116]	; 0x74
   dc14e:	785b      	ldrb	r3, [r3, #1]
   dc150:	4610      	mov	r0, r2
   dc152:	e7c9      	b.n	dc0e8 <_strtod_l+0x1e8>
   dc154:	4638      	mov	r0, r7
   dc156:	e7d2      	b.n	dc0fe <_strtod_l+0x1fe>
   dc158:	2a08      	cmp	r2, #8
   dc15a:	dc04      	bgt.n	dc166 <_strtod_l+0x266>
   dc15c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dc15e:	434e      	muls	r6, r1
   dc160:	9609      	str	r6, [sp, #36]	; 0x24
   dc162:	3201      	adds	r2, #1
   dc164:	e7e2      	b.n	dc12c <_strtod_l+0x22c>
   dc166:	f102 0c01 	add.w	ip, r2, #1
   dc16a:	f1bc 0f10 	cmp.w	ip, #16
   dc16e:	bfd8      	it	le
   dc170:	fb01 f909 	mulle.w	r9, r1, r9
   dc174:	e7f5      	b.n	dc162 <_strtod_l+0x262>
   dc176:	2d10      	cmp	r5, #16
   dc178:	bfdc      	itt	le
   dc17a:	220a      	movle	r2, #10
   dc17c:	fb02 3909 	mlale	r9, r2, r9, r3
   dc180:	e7e1      	b.n	dc146 <_strtod_l+0x246>
   dc182:	2300      	movs	r3, #0
   dc184:	9307      	str	r3, [sp, #28]
   dc186:	2201      	movs	r2, #1
   dc188:	e77c      	b.n	dc084 <_strtod_l+0x184>
   dc18a:	f04f 0c00 	mov.w	ip, #0
   dc18e:	f108 0302 	add.w	r3, r8, #2
   dc192:	931d      	str	r3, [sp, #116]	; 0x74
   dc194:	f898 3002 	ldrb.w	r3, [r8, #2]
   dc198:	e785      	b.n	dc0a6 <_strtod_l+0x1a6>
   dc19a:	f04f 0c01 	mov.w	ip, #1
   dc19e:	e7f6      	b.n	dc18e <_strtod_l+0x28e>
   dc1a0:	000deb4c 	.word	0x000deb4c
   dc1a4:	000de9f4 	.word	0x000de9f4
   dc1a8:	7ff00000 	.word	0x7ff00000
   dc1ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc1ae:	1c59      	adds	r1, r3, #1
   dc1b0:	911d      	str	r1, [sp, #116]	; 0x74
   dc1b2:	785b      	ldrb	r3, [r3, #1]
   dc1b4:	2b30      	cmp	r3, #48	; 0x30
   dc1b6:	d0f9      	beq.n	dc1ac <_strtod_l+0x2ac>
   dc1b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dc1bc:	2908      	cmp	r1, #8
   dc1be:	f63f af79 	bhi.w	dc0b4 <_strtod_l+0x1b4>
   dc1c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dc1c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc1c8:	9308      	str	r3, [sp, #32]
   dc1ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc1cc:	1c59      	adds	r1, r3, #1
   dc1ce:	911d      	str	r1, [sp, #116]	; 0x74
   dc1d0:	785b      	ldrb	r3, [r3, #1]
   dc1d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dc1d6:	2e09      	cmp	r6, #9
   dc1d8:	d937      	bls.n	dc24a <_strtod_l+0x34a>
   dc1da:	9e08      	ldr	r6, [sp, #32]
   dc1dc:	1b89      	subs	r1, r1, r6
   dc1de:	2908      	cmp	r1, #8
   dc1e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dc1e4:	dc02      	bgt.n	dc1ec <_strtod_l+0x2ec>
   dc1e6:	4576      	cmp	r6, lr
   dc1e8:	bfa8      	it	ge
   dc1ea:	4676      	movge	r6, lr
   dc1ec:	f1bc 0f00 	cmp.w	ip, #0
   dc1f0:	d000      	beq.n	dc1f4 <_strtod_l+0x2f4>
   dc1f2:	4276      	negs	r6, r6
   dc1f4:	2d00      	cmp	r5, #0
   dc1f6:	d14f      	bne.n	dc298 <_strtod_l+0x398>
   dc1f8:	9904      	ldr	r1, [sp, #16]
   dc1fa:	4301      	orrs	r1, r0
   dc1fc:	f47f aec2 	bne.w	dbf84 <_strtod_l+0x84>
   dc200:	2a00      	cmp	r2, #0
   dc202:	f47f aedb 	bne.w	dbfbc <_strtod_l+0xbc>
   dc206:	2b69      	cmp	r3, #105	; 0x69
   dc208:	d027      	beq.n	dc25a <_strtod_l+0x35a>
   dc20a:	dc24      	bgt.n	dc256 <_strtod_l+0x356>
   dc20c:	2b49      	cmp	r3, #73	; 0x49
   dc20e:	d024      	beq.n	dc25a <_strtod_l+0x35a>
   dc210:	2b4e      	cmp	r3, #78	; 0x4e
   dc212:	f47f aed3 	bne.w	dbfbc <_strtod_l+0xbc>
   dc216:	499e      	ldr	r1, [pc, #632]	; (dc490 <_strtod_l+0x590>)
   dc218:	a81d      	add	r0, sp, #116	; 0x74
   dc21a:	f000 ffb9 	bl	dd190 <__match>
   dc21e:	2800      	cmp	r0, #0
   dc220:	f43f aecc 	beq.w	dbfbc <_strtod_l+0xbc>
   dc224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc226:	781b      	ldrb	r3, [r3, #0]
   dc228:	2b28      	cmp	r3, #40	; 0x28
   dc22a:	d12d      	bne.n	dc288 <_strtod_l+0x388>
   dc22c:	4999      	ldr	r1, [pc, #612]	; (dc494 <_strtod_l+0x594>)
   dc22e:	aa20      	add	r2, sp, #128	; 0x80
   dc230:	a81d      	add	r0, sp, #116	; 0x74
   dc232:	f000 ffc1 	bl	dd1b8 <__hexnan>
   dc236:	2805      	cmp	r0, #5
   dc238:	d126      	bne.n	dc288 <_strtod_l+0x388>
   dc23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dc23c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dc240:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dc244:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dc248:	e69c      	b.n	dbf84 <_strtod_l+0x84>
   dc24a:	210a      	movs	r1, #10
   dc24c:	fb01 3e0e 	mla	lr, r1, lr, r3
   dc250:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dc254:	e7b9      	b.n	dc1ca <_strtod_l+0x2ca>
   dc256:	2b6e      	cmp	r3, #110	; 0x6e
   dc258:	e7db      	b.n	dc212 <_strtod_l+0x312>
   dc25a:	498f      	ldr	r1, [pc, #572]	; (dc498 <_strtod_l+0x598>)
   dc25c:	a81d      	add	r0, sp, #116	; 0x74
   dc25e:	f000 ff97 	bl	dd190 <__match>
   dc262:	2800      	cmp	r0, #0
   dc264:	f43f aeaa 	beq.w	dbfbc <_strtod_l+0xbc>
   dc268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc26a:	498c      	ldr	r1, [pc, #560]	; (dc49c <_strtod_l+0x59c>)
   dc26c:	3b01      	subs	r3, #1
   dc26e:	a81d      	add	r0, sp, #116	; 0x74
   dc270:	931d      	str	r3, [sp, #116]	; 0x74
   dc272:	f000 ff8d 	bl	dd190 <__match>
   dc276:	b910      	cbnz	r0, dc27e <_strtod_l+0x37e>
   dc278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc27a:	3301      	adds	r3, #1
   dc27c:	931d      	str	r3, [sp, #116]	; 0x74
   dc27e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dc4ac <_strtod_l+0x5ac>
   dc282:	f04f 0a00 	mov.w	sl, #0
   dc286:	e67d      	b.n	dbf84 <_strtod_l+0x84>
   dc288:	4885      	ldr	r0, [pc, #532]	; (dc4a0 <_strtod_l+0x5a0>)
   dc28a:	f7fe fef5 	bl	db078 <nan>
   dc28e:	ed8d 0b04 	vstr	d0, [sp, #16]
   dc292:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc296:	e675      	b.n	dbf84 <_strtod_l+0x84>
   dc298:	9b07      	ldr	r3, [sp, #28]
   dc29a:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc29c:	1af3      	subs	r3, r6, r3
   dc29e:	2f00      	cmp	r7, #0
   dc2a0:	bf08      	it	eq
   dc2a2:	462f      	moveq	r7, r5
   dc2a4:	2d10      	cmp	r5, #16
   dc2a6:	9308      	str	r3, [sp, #32]
   dc2a8:	46a8      	mov	r8, r5
   dc2aa:	bfa8      	it	ge
   dc2ac:	f04f 0810 	movge.w	r8, #16
   dc2b0:	f7ff f952 	bl	db558 <__aeabi_ui2d>
   dc2b4:	2d09      	cmp	r5, #9
   dc2b6:	4682      	mov	sl, r0
   dc2b8:	468b      	mov	fp, r1
   dc2ba:	dd13      	ble.n	dc2e4 <_strtod_l+0x3e4>
   dc2bc:	4b79      	ldr	r3, [pc, #484]	; (dc4a4 <_strtod_l+0x5a4>)
   dc2be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dc2c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dc2c6:	f7ff f9c1 	bl	db64c <__aeabi_dmul>
   dc2ca:	4682      	mov	sl, r0
   dc2cc:	4648      	mov	r0, r9
   dc2ce:	468b      	mov	fp, r1
   dc2d0:	f7ff f942 	bl	db558 <__aeabi_ui2d>
   dc2d4:	4602      	mov	r2, r0
   dc2d6:	460b      	mov	r3, r1
   dc2d8:	4650      	mov	r0, sl
   dc2da:	4659      	mov	r1, fp
   dc2dc:	f7ff f800 	bl	db2e0 <__adddf3>
   dc2e0:	4682      	mov	sl, r0
   dc2e2:	468b      	mov	fp, r1
   dc2e4:	2d0f      	cmp	r5, #15
   dc2e6:	dc38      	bgt.n	dc35a <_strtod_l+0x45a>
   dc2e8:	9b08      	ldr	r3, [sp, #32]
   dc2ea:	2b00      	cmp	r3, #0
   dc2ec:	f43f ae4a 	beq.w	dbf84 <_strtod_l+0x84>
   dc2f0:	dd24      	ble.n	dc33c <_strtod_l+0x43c>
   dc2f2:	2b16      	cmp	r3, #22
   dc2f4:	dc0b      	bgt.n	dc30e <_strtod_l+0x40e>
   dc2f6:	4d6b      	ldr	r5, [pc, #428]	; (dc4a4 <_strtod_l+0x5a4>)
   dc2f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dc2fc:	e9d5 0100 	ldrd	r0, r1, [r5]
   dc300:	4652      	mov	r2, sl
   dc302:	465b      	mov	r3, fp
   dc304:	f7ff f9a2 	bl	db64c <__aeabi_dmul>
   dc308:	4682      	mov	sl, r0
   dc30a:	468b      	mov	fp, r1
   dc30c:	e63a      	b.n	dbf84 <_strtod_l+0x84>
   dc30e:	9a08      	ldr	r2, [sp, #32]
   dc310:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dc314:	4293      	cmp	r3, r2
   dc316:	db20      	blt.n	dc35a <_strtod_l+0x45a>
   dc318:	4c62      	ldr	r4, [pc, #392]	; (dc4a4 <_strtod_l+0x5a4>)
   dc31a:	f1c5 050f 	rsb	r5, r5, #15
   dc31e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dc322:	4652      	mov	r2, sl
   dc324:	465b      	mov	r3, fp
   dc326:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc32a:	f7ff f98f 	bl	db64c <__aeabi_dmul>
   dc32e:	9b08      	ldr	r3, [sp, #32]
   dc330:	1b5d      	subs	r5, r3, r5
   dc332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dc336:	e9d4 2300 	ldrd	r2, r3, [r4]
   dc33a:	e7e3      	b.n	dc304 <_strtod_l+0x404>
   dc33c:	9b08      	ldr	r3, [sp, #32]
   dc33e:	3316      	adds	r3, #22
   dc340:	db0b      	blt.n	dc35a <_strtod_l+0x45a>
   dc342:	9b07      	ldr	r3, [sp, #28]
   dc344:	4a57      	ldr	r2, [pc, #348]	; (dc4a4 <_strtod_l+0x5a4>)
   dc346:	1b9e      	subs	r6, r3, r6
   dc348:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dc34c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc350:	4650      	mov	r0, sl
   dc352:	4659      	mov	r1, fp
   dc354:	f7ff faa4 	bl	db8a0 <__aeabi_ddiv>
   dc358:	e7d6      	b.n	dc308 <_strtod_l+0x408>
   dc35a:	9b08      	ldr	r3, [sp, #32]
   dc35c:	eba5 0808 	sub.w	r8, r5, r8
   dc360:	4498      	add	r8, r3
   dc362:	f1b8 0f00 	cmp.w	r8, #0
   dc366:	dd71      	ble.n	dc44c <_strtod_l+0x54c>
   dc368:	f018 030f 	ands.w	r3, r8, #15
   dc36c:	d00a      	beq.n	dc384 <_strtod_l+0x484>
   dc36e:	494d      	ldr	r1, [pc, #308]	; (dc4a4 <_strtod_l+0x5a4>)
   dc370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dc374:	4652      	mov	r2, sl
   dc376:	465b      	mov	r3, fp
   dc378:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc37c:	f7ff f966 	bl	db64c <__aeabi_dmul>
   dc380:	4682      	mov	sl, r0
   dc382:	468b      	mov	fp, r1
   dc384:	f038 080f 	bics.w	r8, r8, #15
   dc388:	d04d      	beq.n	dc426 <_strtod_l+0x526>
   dc38a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dc38e:	dd22      	ble.n	dc3d6 <_strtod_l+0x4d6>
   dc390:	2500      	movs	r5, #0
   dc392:	462e      	mov	r6, r5
   dc394:	9509      	str	r5, [sp, #36]	; 0x24
   dc396:	9507      	str	r5, [sp, #28]
   dc398:	2322      	movs	r3, #34	; 0x22
   dc39a:	f8df b110 	ldr.w	fp, [pc, #272]	; dc4ac <_strtod_l+0x5ac>
   dc39e:	6023      	str	r3, [r4, #0]
   dc3a0:	f04f 0a00 	mov.w	sl, #0
   dc3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3a6:	2b00      	cmp	r3, #0
   dc3a8:	f43f adec 	beq.w	dbf84 <_strtod_l+0x84>
   dc3ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc3ae:	4620      	mov	r0, r4
   dc3b0:	f000 ffe4 	bl	dd37c <_Bfree>
   dc3b4:	9907      	ldr	r1, [sp, #28]
   dc3b6:	4620      	mov	r0, r4
   dc3b8:	f000 ffe0 	bl	dd37c <_Bfree>
   dc3bc:	4631      	mov	r1, r6
   dc3be:	4620      	mov	r0, r4
   dc3c0:	f000 ffdc 	bl	dd37c <_Bfree>
   dc3c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc3c6:	4620      	mov	r0, r4
   dc3c8:	f000 ffd8 	bl	dd37c <_Bfree>
   dc3cc:	4629      	mov	r1, r5
   dc3ce:	4620      	mov	r0, r4
   dc3d0:	f000 ffd4 	bl	dd37c <_Bfree>
   dc3d4:	e5d6      	b.n	dbf84 <_strtod_l+0x84>
   dc3d6:	2300      	movs	r3, #0
   dc3d8:	ea4f 1828 	mov.w	r8, r8, asr #4
   dc3dc:	4650      	mov	r0, sl
   dc3de:	4659      	mov	r1, fp
   dc3e0:	4699      	mov	r9, r3
   dc3e2:	f1b8 0f01 	cmp.w	r8, #1
   dc3e6:	dc21      	bgt.n	dc42c <_strtod_l+0x52c>
   dc3e8:	b10b      	cbz	r3, dc3ee <_strtod_l+0x4ee>
   dc3ea:	4682      	mov	sl, r0
   dc3ec:	468b      	mov	fp, r1
   dc3ee:	4b2e      	ldr	r3, [pc, #184]	; (dc4a8 <_strtod_l+0x5a8>)
   dc3f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dc3f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dc3f8:	4652      	mov	r2, sl
   dc3fa:	465b      	mov	r3, fp
   dc3fc:	e9d9 0100 	ldrd	r0, r1, [r9]
   dc400:	f7ff f924 	bl	db64c <__aeabi_dmul>
   dc404:	4b29      	ldr	r3, [pc, #164]	; (dc4ac <_strtod_l+0x5ac>)
   dc406:	460a      	mov	r2, r1
   dc408:	400b      	ands	r3, r1
   dc40a:	4929      	ldr	r1, [pc, #164]	; (dc4b0 <_strtod_l+0x5b0>)
   dc40c:	428b      	cmp	r3, r1
   dc40e:	4682      	mov	sl, r0
   dc410:	d8be      	bhi.n	dc390 <_strtod_l+0x490>
   dc412:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dc416:	428b      	cmp	r3, r1
   dc418:	bf86      	itte	hi
   dc41a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dc4b4 <_strtod_l+0x5b4>
   dc41e:	f04f 3aff 	movhi.w	sl, #4294967295
   dc422:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dc426:	2300      	movs	r3, #0
   dc428:	9304      	str	r3, [sp, #16]
   dc42a:	e081      	b.n	dc530 <_strtod_l+0x630>
   dc42c:	f018 0f01 	tst.w	r8, #1
   dc430:	d007      	beq.n	dc442 <_strtod_l+0x542>
   dc432:	4b1d      	ldr	r3, [pc, #116]	; (dc4a8 <_strtod_l+0x5a8>)
   dc434:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dc438:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc43c:	f7ff f906 	bl	db64c <__aeabi_dmul>
   dc440:	2301      	movs	r3, #1
   dc442:	f109 0901 	add.w	r9, r9, #1
   dc446:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc44a:	e7ca      	b.n	dc3e2 <_strtod_l+0x4e2>
   dc44c:	d0eb      	beq.n	dc426 <_strtod_l+0x526>
   dc44e:	f1c8 0800 	rsb	r8, r8, #0
   dc452:	f018 020f 	ands.w	r2, r8, #15
   dc456:	d00a      	beq.n	dc46e <_strtod_l+0x56e>
   dc458:	4b12      	ldr	r3, [pc, #72]	; (dc4a4 <_strtod_l+0x5a4>)
   dc45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dc45e:	4650      	mov	r0, sl
   dc460:	4659      	mov	r1, fp
   dc462:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc466:	f7ff fa1b 	bl	db8a0 <__aeabi_ddiv>
   dc46a:	4682      	mov	sl, r0
   dc46c:	468b      	mov	fp, r1
   dc46e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dc472:	d0d8      	beq.n	dc426 <_strtod_l+0x526>
   dc474:	f1b8 0f1f 	cmp.w	r8, #31
   dc478:	dd1e      	ble.n	dc4b8 <_strtod_l+0x5b8>
   dc47a:	2500      	movs	r5, #0
   dc47c:	462e      	mov	r6, r5
   dc47e:	9509      	str	r5, [sp, #36]	; 0x24
   dc480:	9507      	str	r5, [sp, #28]
   dc482:	2322      	movs	r3, #34	; 0x22
   dc484:	f04f 0a00 	mov.w	sl, #0
   dc488:	f04f 0b00 	mov.w	fp, #0
   dc48c:	6023      	str	r3, [r4, #0]
   dc48e:	e789      	b.n	dc3a4 <_strtod_l+0x4a4>
   dc490:	000de9f1 	.word	0x000de9f1
   dc494:	000dea08 	.word	0x000dea08
   dc498:	000de9e8 	.word	0x000de9e8
   dc49c:	000de9eb 	.word	0x000de9eb
   dc4a0:	000de125 	.word	0x000de125
   dc4a4:	000deb88 	.word	0x000deb88
   dc4a8:	000deb60 	.word	0x000deb60
   dc4ac:	7ff00000 	.word	0x7ff00000
   dc4b0:	7ca00000 	.word	0x7ca00000
   dc4b4:	7fefffff 	.word	0x7fefffff
   dc4b8:	f018 0310 	ands.w	r3, r8, #16
   dc4bc:	bf18      	it	ne
   dc4be:	236a      	movne	r3, #106	; 0x6a
   dc4c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc878 <_strtod_l+0x978>
   dc4c4:	9304      	str	r3, [sp, #16]
   dc4c6:	4650      	mov	r0, sl
   dc4c8:	4659      	mov	r1, fp
   dc4ca:	2300      	movs	r3, #0
   dc4cc:	f018 0f01 	tst.w	r8, #1
   dc4d0:	d004      	beq.n	dc4dc <_strtod_l+0x5dc>
   dc4d2:	e9d9 2300 	ldrd	r2, r3, [r9]
   dc4d6:	f7ff f8b9 	bl	db64c <__aeabi_dmul>
   dc4da:	2301      	movs	r3, #1
   dc4dc:	ea5f 0868 	movs.w	r8, r8, asr #1
   dc4e0:	f109 0908 	add.w	r9, r9, #8
   dc4e4:	d1f2      	bne.n	dc4cc <_strtod_l+0x5cc>
   dc4e6:	b10b      	cbz	r3, dc4ec <_strtod_l+0x5ec>
   dc4e8:	4682      	mov	sl, r0
   dc4ea:	468b      	mov	fp, r1
   dc4ec:	9b04      	ldr	r3, [sp, #16]
   dc4ee:	b1bb      	cbz	r3, dc520 <_strtod_l+0x620>
   dc4f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dc4f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc4f8:	2b00      	cmp	r3, #0
   dc4fa:	4659      	mov	r1, fp
   dc4fc:	dd10      	ble.n	dc520 <_strtod_l+0x620>
   dc4fe:	2b1f      	cmp	r3, #31
   dc500:	f340 8128 	ble.w	dc754 <_strtod_l+0x854>
   dc504:	2b34      	cmp	r3, #52	; 0x34
   dc506:	bfde      	ittt	le
   dc508:	3b20      	suble	r3, #32
   dc50a:	f04f 32ff 	movle.w	r2, #4294967295
   dc50e:	fa02 f303 	lslle.w	r3, r2, r3
   dc512:	f04f 0a00 	mov.w	sl, #0
   dc516:	bfcc      	ite	gt
   dc518:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc51c:	ea03 0b01 	andle.w	fp, r3, r1
   dc520:	2200      	movs	r2, #0
   dc522:	2300      	movs	r3, #0
   dc524:	4650      	mov	r0, sl
   dc526:	4659      	mov	r1, fp
   dc528:	f7ff faf8 	bl	dbb1c <__aeabi_dcmpeq>
   dc52c:	2800      	cmp	r0, #0
   dc52e:	d1a4      	bne.n	dc47a <_strtod_l+0x57a>
   dc530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc532:	9300      	str	r3, [sp, #0]
   dc534:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc536:	462b      	mov	r3, r5
   dc538:	463a      	mov	r2, r7
   dc53a:	4620      	mov	r0, r4
   dc53c:	f000 ff73 	bl	dd426 <__s2b>
   dc540:	9009      	str	r0, [sp, #36]	; 0x24
   dc542:	2800      	cmp	r0, #0
   dc544:	f43f af24 	beq.w	dc390 <_strtod_l+0x490>
   dc548:	9b07      	ldr	r3, [sp, #28]
   dc54a:	1b9e      	subs	r6, r3, r6
   dc54c:	9b08      	ldr	r3, [sp, #32]
   dc54e:	2b00      	cmp	r3, #0
   dc550:	bfb4      	ite	lt
   dc552:	4633      	movlt	r3, r6
   dc554:	2300      	movge	r3, #0
   dc556:	9310      	str	r3, [sp, #64]	; 0x40
   dc558:	9b08      	ldr	r3, [sp, #32]
   dc55a:	2500      	movs	r5, #0
   dc55c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc560:	9318      	str	r3, [sp, #96]	; 0x60
   dc562:	462e      	mov	r6, r5
   dc564:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc566:	4620      	mov	r0, r4
   dc568:	6859      	ldr	r1, [r3, #4]
   dc56a:	f000 fed3 	bl	dd314 <_Balloc>
   dc56e:	9007      	str	r0, [sp, #28]
   dc570:	2800      	cmp	r0, #0
   dc572:	f43f af11 	beq.w	dc398 <_strtod_l+0x498>
   dc576:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc578:	691a      	ldr	r2, [r3, #16]
   dc57a:	3202      	adds	r2, #2
   dc57c:	f103 010c 	add.w	r1, r3, #12
   dc580:	0092      	lsls	r2, r2, #2
   dc582:	300c      	adds	r0, #12
   dc584:	f7ff fbe2 	bl	dbd4c <memcpy>
   dc588:	ec4b ab10 	vmov	d0, sl, fp
   dc58c:	aa20      	add	r2, sp, #128	; 0x80
   dc58e:	a91f      	add	r1, sp, #124	; 0x7c
   dc590:	4620      	mov	r0, r4
   dc592:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc596:	f001 fa35 	bl	dda04 <__d2b>
   dc59a:	901e      	str	r0, [sp, #120]	; 0x78
   dc59c:	2800      	cmp	r0, #0
   dc59e:	f43f aefb 	beq.w	dc398 <_strtod_l+0x498>
   dc5a2:	2101      	movs	r1, #1
   dc5a4:	4620      	mov	r0, r4
   dc5a6:	f000 ffcc 	bl	dd542 <__i2b>
   dc5aa:	4606      	mov	r6, r0
   dc5ac:	2800      	cmp	r0, #0
   dc5ae:	f43f aef3 	beq.w	dc398 <_strtod_l+0x498>
   dc5b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dc5b4:	9904      	ldr	r1, [sp, #16]
   dc5b6:	2b00      	cmp	r3, #0
   dc5b8:	bfab      	itete	ge
   dc5ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dc5bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dc5be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dc5c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dc5c4:	bfac      	ite	ge
   dc5c6:	eb03 0902 	addge.w	r9, r3, r2
   dc5ca:	1ad7      	sublt	r7, r2, r3
   dc5cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dc5ce:	eba3 0801 	sub.w	r8, r3, r1
   dc5d2:	4490      	add	r8, r2
   dc5d4:	4ba3      	ldr	r3, [pc, #652]	; (dc864 <_strtod_l+0x964>)
   dc5d6:	f108 38ff 	add.w	r8, r8, #4294967295
   dc5da:	4598      	cmp	r8, r3
   dc5dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dc5e0:	f280 80cc 	bge.w	dc77c <_strtod_l+0x87c>
   dc5e4:	eba3 0308 	sub.w	r3, r3, r8
   dc5e8:	2b1f      	cmp	r3, #31
   dc5ea:	eba2 0203 	sub.w	r2, r2, r3
   dc5ee:	f04f 0101 	mov.w	r1, #1
   dc5f2:	f300 80b6 	bgt.w	dc762 <_strtod_l+0x862>
   dc5f6:	fa01 f303 	lsl.w	r3, r1, r3
   dc5fa:	9311      	str	r3, [sp, #68]	; 0x44
   dc5fc:	2300      	movs	r3, #0
   dc5fe:	930c      	str	r3, [sp, #48]	; 0x30
   dc600:	eb09 0802 	add.w	r8, r9, r2
   dc604:	9b04      	ldr	r3, [sp, #16]
   dc606:	45c1      	cmp	r9, r8
   dc608:	4417      	add	r7, r2
   dc60a:	441f      	add	r7, r3
   dc60c:	464b      	mov	r3, r9
   dc60e:	bfa8      	it	ge
   dc610:	4643      	movge	r3, r8
   dc612:	42bb      	cmp	r3, r7
   dc614:	bfa8      	it	ge
   dc616:	463b      	movge	r3, r7
   dc618:	2b00      	cmp	r3, #0
   dc61a:	bfc2      	ittt	gt
   dc61c:	eba8 0803 	subgt.w	r8, r8, r3
   dc620:	1aff      	subgt	r7, r7, r3
   dc622:	eba9 0903 	subgt.w	r9, r9, r3
   dc626:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc628:	2b00      	cmp	r3, #0
   dc62a:	dd17      	ble.n	dc65c <_strtod_l+0x75c>
   dc62c:	4631      	mov	r1, r6
   dc62e:	461a      	mov	r2, r3
   dc630:	4620      	mov	r0, r4
   dc632:	f001 f82b 	bl	dd68c <__pow5mult>
   dc636:	4606      	mov	r6, r0
   dc638:	2800      	cmp	r0, #0
   dc63a:	f43f aead 	beq.w	dc398 <_strtod_l+0x498>
   dc63e:	4601      	mov	r1, r0
   dc640:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc642:	4620      	mov	r0, r4
   dc644:	f000 ff86 	bl	dd554 <__multiply>
   dc648:	900f      	str	r0, [sp, #60]	; 0x3c
   dc64a:	2800      	cmp	r0, #0
   dc64c:	f43f aea4 	beq.w	dc398 <_strtod_l+0x498>
   dc650:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc652:	4620      	mov	r0, r4
   dc654:	f000 fe92 	bl	dd37c <_Bfree>
   dc658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc65a:	931e      	str	r3, [sp, #120]	; 0x78
   dc65c:	f1b8 0f00 	cmp.w	r8, #0
   dc660:	f300 8091 	bgt.w	dc786 <_strtod_l+0x886>
   dc664:	9b08      	ldr	r3, [sp, #32]
   dc666:	2b00      	cmp	r3, #0
   dc668:	dd08      	ble.n	dc67c <_strtod_l+0x77c>
   dc66a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc66c:	9907      	ldr	r1, [sp, #28]
   dc66e:	4620      	mov	r0, r4
   dc670:	f001 f80c 	bl	dd68c <__pow5mult>
   dc674:	9007      	str	r0, [sp, #28]
   dc676:	2800      	cmp	r0, #0
   dc678:	f43f ae8e 	beq.w	dc398 <_strtod_l+0x498>
   dc67c:	2f00      	cmp	r7, #0
   dc67e:	dd08      	ble.n	dc692 <_strtod_l+0x792>
   dc680:	9907      	ldr	r1, [sp, #28]
   dc682:	463a      	mov	r2, r7
   dc684:	4620      	mov	r0, r4
   dc686:	f001 f84f 	bl	dd728 <__lshift>
   dc68a:	9007      	str	r0, [sp, #28]
   dc68c:	2800      	cmp	r0, #0
   dc68e:	f43f ae83 	beq.w	dc398 <_strtod_l+0x498>
   dc692:	f1b9 0f00 	cmp.w	r9, #0
   dc696:	dd08      	ble.n	dc6aa <_strtod_l+0x7aa>
   dc698:	4631      	mov	r1, r6
   dc69a:	464a      	mov	r2, r9
   dc69c:	4620      	mov	r0, r4
   dc69e:	f001 f843 	bl	dd728 <__lshift>
   dc6a2:	4606      	mov	r6, r0
   dc6a4:	2800      	cmp	r0, #0
   dc6a6:	f43f ae77 	beq.w	dc398 <_strtod_l+0x498>
   dc6aa:	9a07      	ldr	r2, [sp, #28]
   dc6ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc6ae:	4620      	mov	r0, r4
   dc6b0:	f001 f8b5 	bl	dd81e <__mdiff>
   dc6b4:	4605      	mov	r5, r0
   dc6b6:	2800      	cmp	r0, #0
   dc6b8:	f43f ae6e 	beq.w	dc398 <_strtod_l+0x498>
   dc6bc:	68c3      	ldr	r3, [r0, #12]
   dc6be:	930f      	str	r3, [sp, #60]	; 0x3c
   dc6c0:	2300      	movs	r3, #0
   dc6c2:	60c3      	str	r3, [r0, #12]
   dc6c4:	4631      	mov	r1, r6
   dc6c6:	f001 f88e 	bl	dd7e6 <__mcmp>
   dc6ca:	2800      	cmp	r0, #0
   dc6cc:	da65      	bge.n	dc79a <_strtod_l+0x89a>
   dc6ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc6d0:	ea53 030a 	orrs.w	r3, r3, sl
   dc6d4:	f040 8087 	bne.w	dc7e6 <_strtod_l+0x8e6>
   dc6d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc6dc:	2b00      	cmp	r3, #0
   dc6de:	f040 8082 	bne.w	dc7e6 <_strtod_l+0x8e6>
   dc6e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc6e6:	0d1b      	lsrs	r3, r3, #20
   dc6e8:	051b      	lsls	r3, r3, #20
   dc6ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dc6ee:	d97a      	bls.n	dc7e6 <_strtod_l+0x8e6>
   dc6f0:	696b      	ldr	r3, [r5, #20]
   dc6f2:	b913      	cbnz	r3, dc6fa <_strtod_l+0x7fa>
   dc6f4:	692b      	ldr	r3, [r5, #16]
   dc6f6:	2b01      	cmp	r3, #1
   dc6f8:	dd75      	ble.n	dc7e6 <_strtod_l+0x8e6>
   dc6fa:	4629      	mov	r1, r5
   dc6fc:	2201      	movs	r2, #1
   dc6fe:	4620      	mov	r0, r4
   dc700:	f001 f812 	bl	dd728 <__lshift>
   dc704:	4631      	mov	r1, r6
   dc706:	4605      	mov	r5, r0
   dc708:	f001 f86d 	bl	dd7e6 <__mcmp>
   dc70c:	2800      	cmp	r0, #0
   dc70e:	dd6a      	ble.n	dc7e6 <_strtod_l+0x8e6>
   dc710:	9904      	ldr	r1, [sp, #16]
   dc712:	4a55      	ldr	r2, [pc, #340]	; (dc868 <_strtod_l+0x968>)
   dc714:	465b      	mov	r3, fp
   dc716:	2900      	cmp	r1, #0
   dc718:	f000 8085 	beq.w	dc826 <_strtod_l+0x926>
   dc71c:	ea02 010b 	and.w	r1, r2, fp
   dc720:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dc724:	dc7f      	bgt.n	dc826 <_strtod_l+0x926>
   dc726:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dc72a:	f77f aeaa 	ble.w	dc482 <_strtod_l+0x582>
   dc72e:	4a4f      	ldr	r2, [pc, #316]	; (dc86c <_strtod_l+0x96c>)
   dc730:	2300      	movs	r3, #0
   dc732:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dc736:	4650      	mov	r0, sl
   dc738:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dc73c:	4659      	mov	r1, fp
   dc73e:	f7fe ff85 	bl	db64c <__aeabi_dmul>
   dc742:	460b      	mov	r3, r1
   dc744:	4303      	orrs	r3, r0
   dc746:	bf08      	it	eq
   dc748:	2322      	moveq	r3, #34	; 0x22
   dc74a:	4682      	mov	sl, r0
   dc74c:	468b      	mov	fp, r1
   dc74e:	bf08      	it	eq
   dc750:	6023      	streq	r3, [r4, #0]
   dc752:	e62b      	b.n	dc3ac <_strtod_l+0x4ac>
   dc754:	f04f 32ff 	mov.w	r2, #4294967295
   dc758:	fa02 f303 	lsl.w	r3, r2, r3
   dc75c:	ea03 0a0a 	and.w	sl, r3, sl
   dc760:	e6de      	b.n	dc520 <_strtod_l+0x620>
   dc762:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dc766:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dc76a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dc76e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dc772:	fa01 f308 	lsl.w	r3, r1, r8
   dc776:	930c      	str	r3, [sp, #48]	; 0x30
   dc778:	9111      	str	r1, [sp, #68]	; 0x44
   dc77a:	e741      	b.n	dc600 <_strtod_l+0x700>
   dc77c:	2300      	movs	r3, #0
   dc77e:	930c      	str	r3, [sp, #48]	; 0x30
   dc780:	2301      	movs	r3, #1
   dc782:	9311      	str	r3, [sp, #68]	; 0x44
   dc784:	e73c      	b.n	dc600 <_strtod_l+0x700>
   dc786:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc788:	4642      	mov	r2, r8
   dc78a:	4620      	mov	r0, r4
   dc78c:	f000 ffcc 	bl	dd728 <__lshift>
   dc790:	901e      	str	r0, [sp, #120]	; 0x78
   dc792:	2800      	cmp	r0, #0
   dc794:	f47f af66 	bne.w	dc664 <_strtod_l+0x764>
   dc798:	e5fe      	b.n	dc398 <_strtod_l+0x498>
   dc79a:	465f      	mov	r7, fp
   dc79c:	d16e      	bne.n	dc87c <_strtod_l+0x97c>
   dc79e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc7a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc7a4:	b342      	cbz	r2, dc7f8 <_strtod_l+0x8f8>
   dc7a6:	4a32      	ldr	r2, [pc, #200]	; (dc870 <_strtod_l+0x970>)
   dc7a8:	4293      	cmp	r3, r2
   dc7aa:	d128      	bne.n	dc7fe <_strtod_l+0x8fe>
   dc7ac:	9b04      	ldr	r3, [sp, #16]
   dc7ae:	4650      	mov	r0, sl
   dc7b0:	b1eb      	cbz	r3, dc7ee <_strtod_l+0x8ee>
   dc7b2:	4a2d      	ldr	r2, [pc, #180]	; (dc868 <_strtod_l+0x968>)
   dc7b4:	403a      	ands	r2, r7
   dc7b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc7ba:	f04f 31ff 	mov.w	r1, #4294967295
   dc7be:	d819      	bhi.n	dc7f4 <_strtod_l+0x8f4>
   dc7c0:	0d12      	lsrs	r2, r2, #20
   dc7c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc7c6:	fa01 f303 	lsl.w	r3, r1, r3
   dc7ca:	4298      	cmp	r0, r3
   dc7cc:	d117      	bne.n	dc7fe <_strtod_l+0x8fe>
   dc7ce:	4b29      	ldr	r3, [pc, #164]	; (dc874 <_strtod_l+0x974>)
   dc7d0:	429f      	cmp	r7, r3
   dc7d2:	d102      	bne.n	dc7da <_strtod_l+0x8da>
   dc7d4:	3001      	adds	r0, #1
   dc7d6:	f43f addf 	beq.w	dc398 <_strtod_l+0x498>
   dc7da:	4b23      	ldr	r3, [pc, #140]	; (dc868 <_strtod_l+0x968>)
   dc7dc:	403b      	ands	r3, r7
   dc7de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc7e2:	f04f 0a00 	mov.w	sl, #0
   dc7e6:	9b04      	ldr	r3, [sp, #16]
   dc7e8:	2b00      	cmp	r3, #0
   dc7ea:	d1a0      	bne.n	dc72e <_strtod_l+0x82e>
   dc7ec:	e5de      	b.n	dc3ac <_strtod_l+0x4ac>
   dc7ee:	f04f 33ff 	mov.w	r3, #4294967295
   dc7f2:	e7ea      	b.n	dc7ca <_strtod_l+0x8ca>
   dc7f4:	460b      	mov	r3, r1
   dc7f6:	e7e8      	b.n	dc7ca <_strtod_l+0x8ca>
   dc7f8:	ea53 030a 	orrs.w	r3, r3, sl
   dc7fc:	d088      	beq.n	dc710 <_strtod_l+0x810>
   dc7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc800:	b1db      	cbz	r3, dc83a <_strtod_l+0x93a>
   dc802:	423b      	tst	r3, r7
   dc804:	d0ef      	beq.n	dc7e6 <_strtod_l+0x8e6>
   dc806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc808:	9a04      	ldr	r2, [sp, #16]
   dc80a:	4650      	mov	r0, sl
   dc80c:	4659      	mov	r1, fp
   dc80e:	b1c3      	cbz	r3, dc842 <_strtod_l+0x942>
   dc810:	f7ff fb57 	bl	dbec2 <sulp>
   dc814:	4602      	mov	r2, r0
   dc816:	460b      	mov	r3, r1
   dc818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc81c:	f7fe fd60 	bl	db2e0 <__adddf3>
   dc820:	4682      	mov	sl, r0
   dc822:	468b      	mov	fp, r1
   dc824:	e7df      	b.n	dc7e6 <_strtod_l+0x8e6>
   dc826:	4013      	ands	r3, r2
   dc828:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc82c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc830:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc834:	f04f 3aff 	mov.w	sl, #4294967295
   dc838:	e7d5      	b.n	dc7e6 <_strtod_l+0x8e6>
   dc83a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc83c:	ea13 0f0a 	tst.w	r3, sl
   dc840:	e7e0      	b.n	dc804 <_strtod_l+0x904>
   dc842:	f7ff fb3e 	bl	dbec2 <sulp>
   dc846:	4602      	mov	r2, r0
   dc848:	460b      	mov	r3, r1
   dc84a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc84e:	f7fe fd45 	bl	db2dc <__aeabi_dsub>
   dc852:	2200      	movs	r2, #0
   dc854:	2300      	movs	r3, #0
   dc856:	4682      	mov	sl, r0
   dc858:	468b      	mov	fp, r1
   dc85a:	f7ff f95f 	bl	dbb1c <__aeabi_dcmpeq>
   dc85e:	2800      	cmp	r0, #0
   dc860:	d0c1      	beq.n	dc7e6 <_strtod_l+0x8e6>
   dc862:	e60e      	b.n	dc482 <_strtod_l+0x582>
   dc864:	fffffc02 	.word	0xfffffc02
   dc868:	7ff00000 	.word	0x7ff00000
   dc86c:	39500000 	.word	0x39500000
   dc870:	000fffff 	.word	0x000fffff
   dc874:	7fefffff 	.word	0x7fefffff
   dc878:	000dea20 	.word	0x000dea20
   dc87c:	4631      	mov	r1, r6
   dc87e:	4628      	mov	r0, r5
   dc880:	f001 f910 	bl	ddaa4 <__ratio>
   dc884:	ec59 8b10 	vmov	r8, r9, d0
   dc888:	ee10 0a10 	vmov	r0, s0
   dc88c:	2200      	movs	r2, #0
   dc88e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc892:	4649      	mov	r1, r9
   dc894:	f7ff f956 	bl	dbb44 <__aeabi_dcmple>
   dc898:	2800      	cmp	r0, #0
   dc89a:	d07c      	beq.n	dc996 <_strtod_l+0xa96>
   dc89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc89e:	2b00      	cmp	r3, #0
   dc8a0:	d04c      	beq.n	dc93c <_strtod_l+0xa3c>
   dc8a2:	4b95      	ldr	r3, [pc, #596]	; (dcaf8 <_strtod_l+0xbf8>)
   dc8a4:	2200      	movs	r2, #0
   dc8a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc8aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; dcaf8 <_strtod_l+0xbf8>
   dc8ae:	f04f 0800 	mov.w	r8, #0
   dc8b2:	4b92      	ldr	r3, [pc, #584]	; (dcafc <_strtod_l+0xbfc>)
   dc8b4:	403b      	ands	r3, r7
   dc8b6:	9311      	str	r3, [sp, #68]	; 0x44
   dc8b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc8ba:	4b91      	ldr	r3, [pc, #580]	; (dcb00 <_strtod_l+0xc00>)
   dc8bc:	429a      	cmp	r2, r3
   dc8be:	f040 80b2 	bne.w	dca26 <_strtod_l+0xb26>
   dc8c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc8c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc8ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc8ce:	ec4b ab10 	vmov	d0, sl, fp
   dc8d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc8d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc8da:	f001 f817 	bl	dd90c <__ulp>
   dc8de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc8e2:	ec53 2b10 	vmov	r2, r3, d0
   dc8e6:	f7fe feb1 	bl	db64c <__aeabi_dmul>
   dc8ea:	4652      	mov	r2, sl
   dc8ec:	465b      	mov	r3, fp
   dc8ee:	f7fe fcf7 	bl	db2e0 <__adddf3>
   dc8f2:	460b      	mov	r3, r1
   dc8f4:	4981      	ldr	r1, [pc, #516]	; (dcafc <_strtod_l+0xbfc>)
   dc8f6:	4a83      	ldr	r2, [pc, #524]	; (dcb04 <_strtod_l+0xc04>)
   dc8f8:	4019      	ands	r1, r3
   dc8fa:	4291      	cmp	r1, r2
   dc8fc:	4682      	mov	sl, r0
   dc8fe:	d95e      	bls.n	dc9be <_strtod_l+0xabe>
   dc900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc902:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc906:	4293      	cmp	r3, r2
   dc908:	d103      	bne.n	dc912 <_strtod_l+0xa12>
   dc90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc90c:	3301      	adds	r3, #1
   dc90e:	f43f ad43 	beq.w	dc398 <_strtod_l+0x498>
   dc912:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dcb10 <_strtod_l+0xc10>
   dc916:	f04f 3aff 	mov.w	sl, #4294967295
   dc91a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc91c:	4620      	mov	r0, r4
   dc91e:	f000 fd2d 	bl	dd37c <_Bfree>
   dc922:	9907      	ldr	r1, [sp, #28]
   dc924:	4620      	mov	r0, r4
   dc926:	f000 fd29 	bl	dd37c <_Bfree>
   dc92a:	4631      	mov	r1, r6
   dc92c:	4620      	mov	r0, r4
   dc92e:	f000 fd25 	bl	dd37c <_Bfree>
   dc932:	4629      	mov	r1, r5
   dc934:	4620      	mov	r0, r4
   dc936:	f000 fd21 	bl	dd37c <_Bfree>
   dc93a:	e613      	b.n	dc564 <_strtod_l+0x664>
   dc93c:	f1ba 0f00 	cmp.w	sl, #0
   dc940:	d11b      	bne.n	dc97a <_strtod_l+0xa7a>
   dc942:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc946:	b9f3      	cbnz	r3, dc986 <_strtod_l+0xa86>
   dc948:	4b6b      	ldr	r3, [pc, #428]	; (dcaf8 <_strtod_l+0xbf8>)
   dc94a:	2200      	movs	r2, #0
   dc94c:	4640      	mov	r0, r8
   dc94e:	4649      	mov	r1, r9
   dc950:	f7ff f8ee 	bl	dbb30 <__aeabi_dcmplt>
   dc954:	b9d0      	cbnz	r0, dc98c <_strtod_l+0xa8c>
   dc956:	4640      	mov	r0, r8
   dc958:	4649      	mov	r1, r9
   dc95a:	4b6b      	ldr	r3, [pc, #428]	; (dcb08 <_strtod_l+0xc08>)
   dc95c:	2200      	movs	r2, #0
   dc95e:	f7fe fe75 	bl	db64c <__aeabi_dmul>
   dc962:	4680      	mov	r8, r0
   dc964:	4689      	mov	r9, r1
   dc966:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc96a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc96e:	931b      	str	r3, [sp, #108]	; 0x6c
   dc970:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc974:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc978:	e79b      	b.n	dc8b2 <_strtod_l+0x9b2>
   dc97a:	f1ba 0f01 	cmp.w	sl, #1
   dc97e:	d102      	bne.n	dc986 <_strtod_l+0xa86>
   dc980:	2f00      	cmp	r7, #0
   dc982:	f43f ad7e 	beq.w	dc482 <_strtod_l+0x582>
   dc986:	4b61      	ldr	r3, [pc, #388]	; (dcb0c <_strtod_l+0xc0c>)
   dc988:	2200      	movs	r2, #0
   dc98a:	e78c      	b.n	dc8a6 <_strtod_l+0x9a6>
   dc98c:	f8df 9178 	ldr.w	r9, [pc, #376]	; dcb08 <_strtod_l+0xc08>
   dc990:	f04f 0800 	mov.w	r8, #0
   dc994:	e7e7      	b.n	dc966 <_strtod_l+0xa66>
   dc996:	4b5c      	ldr	r3, [pc, #368]	; (dcb08 <_strtod_l+0xc08>)
   dc998:	4640      	mov	r0, r8
   dc99a:	4649      	mov	r1, r9
   dc99c:	2200      	movs	r2, #0
   dc99e:	f7fe fe55 	bl	db64c <__aeabi_dmul>
   dc9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc9a4:	4680      	mov	r8, r0
   dc9a6:	4689      	mov	r9, r1
   dc9a8:	b933      	cbnz	r3, dc9b8 <_strtod_l+0xab8>
   dc9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc9ae:	9012      	str	r0, [sp, #72]	; 0x48
   dc9b0:	9313      	str	r3, [sp, #76]	; 0x4c
   dc9b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc9b6:	e7dd      	b.n	dc974 <_strtod_l+0xa74>
   dc9b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc9bc:	e7f9      	b.n	dc9b2 <_strtod_l+0xab2>
   dc9be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc9c2:	9b04      	ldr	r3, [sp, #16]
   dc9c4:	2b00      	cmp	r3, #0
   dc9c6:	d1a8      	bne.n	dc91a <_strtod_l+0xa1a>
   dc9c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc9cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc9ce:	0d1b      	lsrs	r3, r3, #20
   dc9d0:	051b      	lsls	r3, r3, #20
   dc9d2:	429a      	cmp	r2, r3
   dc9d4:	d1a1      	bne.n	dc91a <_strtod_l+0xa1a>
   dc9d6:	4640      	mov	r0, r8
   dc9d8:	4649      	mov	r1, r9
   dc9da:	f001 f8f7 	bl	ddbcc <__aeabi_d2lz>
   dc9de:	f7fe fe07 	bl	db5f0 <__aeabi_l2d>
   dc9e2:	4602      	mov	r2, r0
   dc9e4:	460b      	mov	r3, r1
   dc9e6:	4640      	mov	r0, r8
   dc9e8:	4649      	mov	r1, r9
   dc9ea:	f7fe fc77 	bl	db2dc <__aeabi_dsub>
   dc9ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc9f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc9f4:	ea43 030a 	orr.w	r3, r3, sl
   dc9f8:	4313      	orrs	r3, r2
   dc9fa:	4680      	mov	r8, r0
   dc9fc:	4689      	mov	r9, r1
   dc9fe:	d053      	beq.n	dcaa8 <_strtod_l+0xba8>
   dca00:	a335      	add	r3, pc, #212	; (adr r3, dcad8 <_strtod_l+0xbd8>)
   dca02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca06:	f7ff f893 	bl	dbb30 <__aeabi_dcmplt>
   dca0a:	2800      	cmp	r0, #0
   dca0c:	f47f acce 	bne.w	dc3ac <_strtod_l+0x4ac>
   dca10:	a333      	add	r3, pc, #204	; (adr r3, dcae0 <_strtod_l+0xbe0>)
   dca12:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca16:	4640      	mov	r0, r8
   dca18:	4649      	mov	r1, r9
   dca1a:	f7ff f8a7 	bl	dbb6c <__aeabi_dcmpgt>
   dca1e:	2800      	cmp	r0, #0
   dca20:	f43f af7b 	beq.w	dc91a <_strtod_l+0xa1a>
   dca24:	e4c2      	b.n	dc3ac <_strtod_l+0x4ac>
   dca26:	9b04      	ldr	r3, [sp, #16]
   dca28:	b333      	cbz	r3, dca78 <_strtod_l+0xb78>
   dca2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dca2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dca30:	d822      	bhi.n	dca78 <_strtod_l+0xb78>
   dca32:	a32d      	add	r3, pc, #180	; (adr r3, dcae8 <_strtod_l+0xbe8>)
   dca34:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca38:	4640      	mov	r0, r8
   dca3a:	4649      	mov	r1, r9
   dca3c:	f7ff f882 	bl	dbb44 <__aeabi_dcmple>
   dca40:	b1a0      	cbz	r0, dca6c <_strtod_l+0xb6c>
   dca42:	4649      	mov	r1, r9
   dca44:	4640      	mov	r0, r8
   dca46:	f7ff f8d9 	bl	dbbfc <__aeabi_d2uiz>
   dca4a:	2801      	cmp	r0, #1
   dca4c:	bf38      	it	cc
   dca4e:	2001      	movcc	r0, #1
   dca50:	f7fe fd82 	bl	db558 <__aeabi_ui2d>
   dca54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dca56:	4680      	mov	r8, r0
   dca58:	4689      	mov	r9, r1
   dca5a:	bb13      	cbnz	r3, dcaa2 <_strtod_l+0xba2>
   dca5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dca60:	9014      	str	r0, [sp, #80]	; 0x50
   dca62:	9315      	str	r3, [sp, #84]	; 0x54
   dca64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dca68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dca6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dca6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dca70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dca74:	1a9b      	subs	r3, r3, r2
   dca76:	930d      	str	r3, [sp, #52]	; 0x34
   dca78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dca7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dca80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dca84:	f000 ff42 	bl	dd90c <__ulp>
   dca88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dca8c:	ec53 2b10 	vmov	r2, r3, d0
   dca90:	f7fe fddc 	bl	db64c <__aeabi_dmul>
   dca94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dca98:	f7fe fc22 	bl	db2e0 <__adddf3>
   dca9c:	4682      	mov	sl, r0
   dca9e:	468b      	mov	fp, r1
   dcaa0:	e78f      	b.n	dc9c2 <_strtod_l+0xac2>
   dcaa2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dcaa6:	e7dd      	b.n	dca64 <_strtod_l+0xb64>
   dcaa8:	a311      	add	r3, pc, #68	; (adr r3, dcaf0 <_strtod_l+0xbf0>)
   dcaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcaae:	f7ff f83f 	bl	dbb30 <__aeabi_dcmplt>
   dcab2:	e7b4      	b.n	dca1e <_strtod_l+0xb1e>
   dcab4:	2300      	movs	r3, #0
   dcab6:	930e      	str	r3, [sp, #56]	; 0x38
   dcab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dcaba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcabc:	6013      	str	r3, [r2, #0]
   dcabe:	f7ff ba65 	b.w	dbf8c <_strtod_l+0x8c>
   dcac2:	2b65      	cmp	r3, #101	; 0x65
   dcac4:	f43f ab5d 	beq.w	dc182 <_strtod_l+0x282>
   dcac8:	2b45      	cmp	r3, #69	; 0x45
   dcaca:	f43f ab5a 	beq.w	dc182 <_strtod_l+0x282>
   dcace:	2201      	movs	r2, #1
   dcad0:	f7ff bb92 	b.w	dc1f8 <_strtod_l+0x2f8>
   dcad4:	f3af 8000 	nop.w
   dcad8:	94a03595 	.word	0x94a03595
   dcadc:	3fdfffff 	.word	0x3fdfffff
   dcae0:	35afe535 	.word	0x35afe535
   dcae4:	3fe00000 	.word	0x3fe00000
   dcae8:	ffc00000 	.word	0xffc00000
   dcaec:	41dfffff 	.word	0x41dfffff
   dcaf0:	94a03595 	.word	0x94a03595
   dcaf4:	3fcfffff 	.word	0x3fcfffff
   dcaf8:	3ff00000 	.word	0x3ff00000
   dcafc:	7ff00000 	.word	0x7ff00000
   dcb00:	7fe00000 	.word	0x7fe00000
   dcb04:	7c9fffff 	.word	0x7c9fffff
   dcb08:	3fe00000 	.word	0x3fe00000
   dcb0c:	bff00000 	.word	0xbff00000
   dcb10:	7fefffff 	.word	0x7fefffff

000dcb14 <strtod>:
   dcb14:	460a      	mov	r2, r1
   dcb16:	4601      	mov	r1, r0
   dcb18:	4802      	ldr	r0, [pc, #8]	; (dcb24 <strtod+0x10>)
   dcb1a:	4b03      	ldr	r3, [pc, #12]	; (dcb28 <strtod+0x14>)
   dcb1c:	6800      	ldr	r0, [r0, #0]
   dcb1e:	f7ff b9ef 	b.w	dbf00 <_strtod_l>
   dcb22:	bf00      	nop
   dcb24:	2003df54 	.word	0x2003df54
   dcb28:	2003dfbc 	.word	0x2003dfbc

000dcb2c <_strtol_l.isra.0>:
   dcb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcb30:	4e3a      	ldr	r6, [pc, #232]	; (dcc1c <_strtol_l.isra.0+0xf0>)
   dcb32:	4686      	mov	lr, r0
   dcb34:	468c      	mov	ip, r1
   dcb36:	4660      	mov	r0, ip
   dcb38:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcb3c:	5da5      	ldrb	r5, [r4, r6]
   dcb3e:	f015 0508 	ands.w	r5, r5, #8
   dcb42:	d1f8      	bne.n	dcb36 <_strtol_l.isra.0+0xa>
   dcb44:	2c2d      	cmp	r4, #45	; 0x2d
   dcb46:	d133      	bne.n	dcbb0 <_strtol_l.isra.0+0x84>
   dcb48:	f89c 4000 	ldrb.w	r4, [ip]
   dcb4c:	f04f 0801 	mov.w	r8, #1
   dcb50:	f100 0c02 	add.w	ip, r0, #2
   dcb54:	2b00      	cmp	r3, #0
   dcb56:	d05c      	beq.n	dcc12 <_strtol_l.isra.0+0xe6>
   dcb58:	2b10      	cmp	r3, #16
   dcb5a:	d10c      	bne.n	dcb76 <_strtol_l.isra.0+0x4a>
   dcb5c:	2c30      	cmp	r4, #48	; 0x30
   dcb5e:	d10a      	bne.n	dcb76 <_strtol_l.isra.0+0x4a>
   dcb60:	f89c 0000 	ldrb.w	r0, [ip]
   dcb64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dcb68:	2858      	cmp	r0, #88	; 0x58
   dcb6a:	d14d      	bne.n	dcc08 <_strtol_l.isra.0+0xdc>
   dcb6c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dcb70:	2310      	movs	r3, #16
   dcb72:	f10c 0c02 	add.w	ip, ip, #2
   dcb76:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dcb7a:	3f01      	subs	r7, #1
   dcb7c:	2600      	movs	r6, #0
   dcb7e:	fbb7 f9f3 	udiv	r9, r7, r3
   dcb82:	4630      	mov	r0, r6
   dcb84:	fb03 7a19 	mls	sl, r3, r9, r7
   dcb88:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dcb8c:	2d09      	cmp	r5, #9
   dcb8e:	d818      	bhi.n	dcbc2 <_strtol_l.isra.0+0x96>
   dcb90:	462c      	mov	r4, r5
   dcb92:	42a3      	cmp	r3, r4
   dcb94:	dd24      	ble.n	dcbe0 <_strtol_l.isra.0+0xb4>
   dcb96:	1c75      	adds	r5, r6, #1
   dcb98:	d007      	beq.n	dcbaa <_strtol_l.isra.0+0x7e>
   dcb9a:	4581      	cmp	r9, r0
   dcb9c:	d31d      	bcc.n	dcbda <_strtol_l.isra.0+0xae>
   dcb9e:	d101      	bne.n	dcba4 <_strtol_l.isra.0+0x78>
   dcba0:	45a2      	cmp	sl, r4
   dcba2:	db1a      	blt.n	dcbda <_strtol_l.isra.0+0xae>
   dcba4:	fb00 4003 	mla	r0, r0, r3, r4
   dcba8:	2601      	movs	r6, #1
   dcbaa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcbae:	e7eb      	b.n	dcb88 <_strtol_l.isra.0+0x5c>
   dcbb0:	2c2b      	cmp	r4, #43	; 0x2b
   dcbb2:	bf08      	it	eq
   dcbb4:	f89c 4000 	ldrbeq.w	r4, [ip]
   dcbb8:	46a8      	mov	r8, r5
   dcbba:	bf08      	it	eq
   dcbbc:	f100 0c02 	addeq.w	ip, r0, #2
   dcbc0:	e7c8      	b.n	dcb54 <_strtol_l.isra.0+0x28>
   dcbc2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dcbc6:	2d19      	cmp	r5, #25
   dcbc8:	d801      	bhi.n	dcbce <_strtol_l.isra.0+0xa2>
   dcbca:	3c37      	subs	r4, #55	; 0x37
   dcbcc:	e7e1      	b.n	dcb92 <_strtol_l.isra.0+0x66>
   dcbce:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dcbd2:	2d19      	cmp	r5, #25
   dcbd4:	d804      	bhi.n	dcbe0 <_strtol_l.isra.0+0xb4>
   dcbd6:	3c57      	subs	r4, #87	; 0x57
   dcbd8:	e7db      	b.n	dcb92 <_strtol_l.isra.0+0x66>
   dcbda:	f04f 36ff 	mov.w	r6, #4294967295
   dcbde:	e7e4      	b.n	dcbaa <_strtol_l.isra.0+0x7e>
   dcbe0:	1c73      	adds	r3, r6, #1
   dcbe2:	d106      	bne.n	dcbf2 <_strtol_l.isra.0+0xc6>
   dcbe4:	2322      	movs	r3, #34	; 0x22
   dcbe6:	f8ce 3000 	str.w	r3, [lr]
   dcbea:	4638      	mov	r0, r7
   dcbec:	b942      	cbnz	r2, dcc00 <_strtol_l.isra.0+0xd4>
   dcbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcbf2:	f1b8 0f00 	cmp.w	r8, #0
   dcbf6:	d000      	beq.n	dcbfa <_strtol_l.isra.0+0xce>
   dcbf8:	4240      	negs	r0, r0
   dcbfa:	2a00      	cmp	r2, #0
   dcbfc:	d0f7      	beq.n	dcbee <_strtol_l.isra.0+0xc2>
   dcbfe:	b10e      	cbz	r6, dcc04 <_strtol_l.isra.0+0xd8>
   dcc00:	f10c 31ff 	add.w	r1, ip, #4294967295
   dcc04:	6011      	str	r1, [r2, #0]
   dcc06:	e7f2      	b.n	dcbee <_strtol_l.isra.0+0xc2>
   dcc08:	2430      	movs	r4, #48	; 0x30
   dcc0a:	2b00      	cmp	r3, #0
   dcc0c:	d1b3      	bne.n	dcb76 <_strtol_l.isra.0+0x4a>
   dcc0e:	2308      	movs	r3, #8
   dcc10:	e7b1      	b.n	dcb76 <_strtol_l.isra.0+0x4a>
   dcc12:	2c30      	cmp	r4, #48	; 0x30
   dcc14:	d0a4      	beq.n	dcb60 <_strtol_l.isra.0+0x34>
   dcc16:	230a      	movs	r3, #10
   dcc18:	e7ad      	b.n	dcb76 <_strtol_l.isra.0+0x4a>
   dcc1a:	bf00      	nop
   dcc1c:	000dea49 	.word	0x000dea49

000dcc20 <strtol>:
   dcc20:	4613      	mov	r3, r2
   dcc22:	460a      	mov	r2, r1
   dcc24:	4601      	mov	r1, r0
   dcc26:	4802      	ldr	r0, [pc, #8]	; (dcc30 <strtol+0x10>)
   dcc28:	6800      	ldr	r0, [r0, #0]
   dcc2a:	f7ff bf7f 	b.w	dcb2c <_strtol_l.isra.0>
   dcc2e:	bf00      	nop
   dcc30:	2003df54 	.word	0x2003df54

000dcc34 <rshift>:
   dcc34:	6903      	ldr	r3, [r0, #16]
   dcc36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dcc3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcc3e:	ea4f 1261 	mov.w	r2, r1, asr #5
   dcc42:	f100 0414 	add.w	r4, r0, #20
   dcc46:	dd45      	ble.n	dccd4 <rshift+0xa0>
   dcc48:	f011 011f 	ands.w	r1, r1, #31
   dcc4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dcc50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dcc54:	d10c      	bne.n	dcc70 <rshift+0x3c>
   dcc56:	f100 0710 	add.w	r7, r0, #16
   dcc5a:	4629      	mov	r1, r5
   dcc5c:	42b1      	cmp	r1, r6
   dcc5e:	d334      	bcc.n	dccca <rshift+0x96>
   dcc60:	1a9b      	subs	r3, r3, r2
   dcc62:	009b      	lsls	r3, r3, #2
   dcc64:	1eea      	subs	r2, r5, #3
   dcc66:	4296      	cmp	r6, r2
   dcc68:	bf38      	it	cc
   dcc6a:	2300      	movcc	r3, #0
   dcc6c:	4423      	add	r3, r4
   dcc6e:	e015      	b.n	dcc9c <rshift+0x68>
   dcc70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dcc74:	f1c1 0820 	rsb	r8, r1, #32
   dcc78:	40cf      	lsrs	r7, r1
   dcc7a:	f105 0e04 	add.w	lr, r5, #4
   dcc7e:	46a1      	mov	r9, r4
   dcc80:	4576      	cmp	r6, lr
   dcc82:	46f4      	mov	ip, lr
   dcc84:	d815      	bhi.n	dccb2 <rshift+0x7e>
   dcc86:	1a9b      	subs	r3, r3, r2
   dcc88:	009a      	lsls	r2, r3, #2
   dcc8a:	3a04      	subs	r2, #4
   dcc8c:	3501      	adds	r5, #1
   dcc8e:	42ae      	cmp	r6, r5
   dcc90:	bf38      	it	cc
   dcc92:	2200      	movcc	r2, #0
   dcc94:	18a3      	adds	r3, r4, r2
   dcc96:	50a7      	str	r7, [r4, r2]
   dcc98:	b107      	cbz	r7, dcc9c <rshift+0x68>
   dcc9a:	3304      	adds	r3, #4
   dcc9c:	1b1a      	subs	r2, r3, r4
   dcc9e:	42a3      	cmp	r3, r4
   dcca0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dcca4:	bf08      	it	eq
   dcca6:	2300      	moveq	r3, #0
   dcca8:	6102      	str	r2, [r0, #16]
   dccaa:	bf08      	it	eq
   dccac:	6143      	streq	r3, [r0, #20]
   dccae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dccb2:	f8dc c000 	ldr.w	ip, [ip]
   dccb6:	fa0c fc08 	lsl.w	ip, ip, r8
   dccba:	ea4c 0707 	orr.w	r7, ip, r7
   dccbe:	f849 7b04 	str.w	r7, [r9], #4
   dccc2:	f85e 7b04 	ldr.w	r7, [lr], #4
   dccc6:	40cf      	lsrs	r7, r1
   dccc8:	e7da      	b.n	dcc80 <rshift+0x4c>
   dccca:	f851 cb04 	ldr.w	ip, [r1], #4
   dccce:	f847 cf04 	str.w	ip, [r7, #4]!
   dccd2:	e7c3      	b.n	dcc5c <rshift+0x28>
   dccd4:	4623      	mov	r3, r4
   dccd6:	e7e1      	b.n	dcc9c <rshift+0x68>

000dccd8 <__hexdig_fun>:
   dccd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dccdc:	2b09      	cmp	r3, #9
   dccde:	d802      	bhi.n	dcce6 <__hexdig_fun+0xe>
   dcce0:	3820      	subs	r0, #32
   dcce2:	b2c0      	uxtb	r0, r0
   dcce4:	4770      	bx	lr
   dcce6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dccea:	2b05      	cmp	r3, #5
   dccec:	d801      	bhi.n	dccf2 <__hexdig_fun+0x1a>
   dccee:	3847      	subs	r0, #71	; 0x47
   dccf0:	e7f7      	b.n	dcce2 <__hexdig_fun+0xa>
   dccf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dccf6:	2b05      	cmp	r3, #5
   dccf8:	d801      	bhi.n	dccfe <__hexdig_fun+0x26>
   dccfa:	3827      	subs	r0, #39	; 0x27
   dccfc:	e7f1      	b.n	dcce2 <__hexdig_fun+0xa>
   dccfe:	2000      	movs	r0, #0
   dcd00:	4770      	bx	lr
	...

000dcd04 <__gethex>:
   dcd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcd08:	ed2d 8b02 	vpush	{d8}
   dcd0c:	b089      	sub	sp, #36	; 0x24
   dcd0e:	ee08 0a10 	vmov	s16, r0
   dcd12:	9304      	str	r3, [sp, #16]
   dcd14:	4bbc      	ldr	r3, [pc, #752]	; (dd008 <__gethex+0x304>)
   dcd16:	681b      	ldr	r3, [r3, #0]
   dcd18:	9301      	str	r3, [sp, #4]
   dcd1a:	4618      	mov	r0, r3
   dcd1c:	468b      	mov	fp, r1
   dcd1e:	4690      	mov	r8, r2
   dcd20:	f7ff f88b 	bl	dbe3a <strlen>
   dcd24:	9b01      	ldr	r3, [sp, #4]
   dcd26:	f8db 2000 	ldr.w	r2, [fp]
   dcd2a:	4403      	add	r3, r0
   dcd2c:	4682      	mov	sl, r0
   dcd2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dcd32:	9305      	str	r3, [sp, #20]
   dcd34:	1c93      	adds	r3, r2, #2
   dcd36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dcd3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dcd3e:	32fe      	adds	r2, #254	; 0xfe
   dcd40:	18d1      	adds	r1, r2, r3
   dcd42:	461f      	mov	r7, r3
   dcd44:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcd48:	9100      	str	r1, [sp, #0]
   dcd4a:	2830      	cmp	r0, #48	; 0x30
   dcd4c:	d0f8      	beq.n	dcd40 <__gethex+0x3c>
   dcd4e:	f7ff ffc3 	bl	dccd8 <__hexdig_fun>
   dcd52:	4604      	mov	r4, r0
   dcd54:	2800      	cmp	r0, #0
   dcd56:	d13a      	bne.n	dcdce <__gethex+0xca>
   dcd58:	9901      	ldr	r1, [sp, #4]
   dcd5a:	4652      	mov	r2, sl
   dcd5c:	4638      	mov	r0, r7
   dcd5e:	f7ff f874 	bl	dbe4a <strncmp>
   dcd62:	4605      	mov	r5, r0
   dcd64:	2800      	cmp	r0, #0
   dcd66:	d168      	bne.n	dce3a <__gethex+0x136>
   dcd68:	f817 000a 	ldrb.w	r0, [r7, sl]
   dcd6c:	eb07 060a 	add.w	r6, r7, sl
   dcd70:	f7ff ffb2 	bl	dccd8 <__hexdig_fun>
   dcd74:	2800      	cmp	r0, #0
   dcd76:	d062      	beq.n	dce3e <__gethex+0x13a>
   dcd78:	4633      	mov	r3, r6
   dcd7a:	7818      	ldrb	r0, [r3, #0]
   dcd7c:	2830      	cmp	r0, #48	; 0x30
   dcd7e:	461f      	mov	r7, r3
   dcd80:	f103 0301 	add.w	r3, r3, #1
   dcd84:	d0f9      	beq.n	dcd7a <__gethex+0x76>
   dcd86:	f7ff ffa7 	bl	dccd8 <__hexdig_fun>
   dcd8a:	2301      	movs	r3, #1
   dcd8c:	fab0 f480 	clz	r4, r0
   dcd90:	0964      	lsrs	r4, r4, #5
   dcd92:	4635      	mov	r5, r6
   dcd94:	9300      	str	r3, [sp, #0]
   dcd96:	463a      	mov	r2, r7
   dcd98:	4616      	mov	r6, r2
   dcd9a:	3201      	adds	r2, #1
   dcd9c:	7830      	ldrb	r0, [r6, #0]
   dcd9e:	f7ff ff9b 	bl	dccd8 <__hexdig_fun>
   dcda2:	2800      	cmp	r0, #0
   dcda4:	d1f8      	bne.n	dcd98 <__gethex+0x94>
   dcda6:	9901      	ldr	r1, [sp, #4]
   dcda8:	4652      	mov	r2, sl
   dcdaa:	4630      	mov	r0, r6
   dcdac:	f7ff f84d 	bl	dbe4a <strncmp>
   dcdb0:	b980      	cbnz	r0, dcdd4 <__gethex+0xd0>
   dcdb2:	b94d      	cbnz	r5, dcdc8 <__gethex+0xc4>
   dcdb4:	eb06 050a 	add.w	r5, r6, sl
   dcdb8:	462a      	mov	r2, r5
   dcdba:	4616      	mov	r6, r2
   dcdbc:	3201      	adds	r2, #1
   dcdbe:	7830      	ldrb	r0, [r6, #0]
   dcdc0:	f7ff ff8a 	bl	dccd8 <__hexdig_fun>
   dcdc4:	2800      	cmp	r0, #0
   dcdc6:	d1f8      	bne.n	dcdba <__gethex+0xb6>
   dcdc8:	1bad      	subs	r5, r5, r6
   dcdca:	00ad      	lsls	r5, r5, #2
   dcdcc:	e004      	b.n	dcdd8 <__gethex+0xd4>
   dcdce:	2400      	movs	r4, #0
   dcdd0:	4625      	mov	r5, r4
   dcdd2:	e7e0      	b.n	dcd96 <__gethex+0x92>
   dcdd4:	2d00      	cmp	r5, #0
   dcdd6:	d1f7      	bne.n	dcdc8 <__gethex+0xc4>
   dcdd8:	7833      	ldrb	r3, [r6, #0]
   dcdda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dcdde:	2b50      	cmp	r3, #80	; 0x50
   dcde0:	d13b      	bne.n	dce5a <__gethex+0x156>
   dcde2:	7873      	ldrb	r3, [r6, #1]
   dcde4:	2b2b      	cmp	r3, #43	; 0x2b
   dcde6:	d02c      	beq.n	dce42 <__gethex+0x13e>
   dcde8:	2b2d      	cmp	r3, #45	; 0x2d
   dcdea:	d02e      	beq.n	dce4a <__gethex+0x146>
   dcdec:	1c71      	adds	r1, r6, #1
   dcdee:	f04f 0900 	mov.w	r9, #0
   dcdf2:	7808      	ldrb	r0, [r1, #0]
   dcdf4:	f7ff ff70 	bl	dccd8 <__hexdig_fun>
   dcdf8:	1e43      	subs	r3, r0, #1
   dcdfa:	b2db      	uxtb	r3, r3
   dcdfc:	2b18      	cmp	r3, #24
   dcdfe:	d82c      	bhi.n	dce5a <__gethex+0x156>
   dce00:	f1a0 0210 	sub.w	r2, r0, #16
   dce04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dce08:	f7ff ff66 	bl	dccd8 <__hexdig_fun>
   dce0c:	1e43      	subs	r3, r0, #1
   dce0e:	b2db      	uxtb	r3, r3
   dce10:	2b18      	cmp	r3, #24
   dce12:	d91d      	bls.n	dce50 <__gethex+0x14c>
   dce14:	f1b9 0f00 	cmp.w	r9, #0
   dce18:	d000      	beq.n	dce1c <__gethex+0x118>
   dce1a:	4252      	negs	r2, r2
   dce1c:	4415      	add	r5, r2
   dce1e:	f8cb 1000 	str.w	r1, [fp]
   dce22:	b1e4      	cbz	r4, dce5e <__gethex+0x15a>
   dce24:	9b00      	ldr	r3, [sp, #0]
   dce26:	2b00      	cmp	r3, #0
   dce28:	bf14      	ite	ne
   dce2a:	2700      	movne	r7, #0
   dce2c:	2706      	moveq	r7, #6
   dce2e:	4638      	mov	r0, r7
   dce30:	b009      	add	sp, #36	; 0x24
   dce32:	ecbd 8b02 	vpop	{d8}
   dce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dce3a:	463e      	mov	r6, r7
   dce3c:	4625      	mov	r5, r4
   dce3e:	2401      	movs	r4, #1
   dce40:	e7ca      	b.n	dcdd8 <__gethex+0xd4>
   dce42:	f04f 0900 	mov.w	r9, #0
   dce46:	1cb1      	adds	r1, r6, #2
   dce48:	e7d3      	b.n	dcdf2 <__gethex+0xee>
   dce4a:	f04f 0901 	mov.w	r9, #1
   dce4e:	e7fa      	b.n	dce46 <__gethex+0x142>
   dce50:	230a      	movs	r3, #10
   dce52:	fb03 0202 	mla	r2, r3, r2, r0
   dce56:	3a10      	subs	r2, #16
   dce58:	e7d4      	b.n	dce04 <__gethex+0x100>
   dce5a:	4631      	mov	r1, r6
   dce5c:	e7df      	b.n	dce1e <__gethex+0x11a>
   dce5e:	1bf3      	subs	r3, r6, r7
   dce60:	3b01      	subs	r3, #1
   dce62:	4621      	mov	r1, r4
   dce64:	2b07      	cmp	r3, #7
   dce66:	dc52      	bgt.n	dcf0e <__gethex+0x20a>
   dce68:	ee18 0a10 	vmov	r0, s16
   dce6c:	f000 fa52 	bl	dd314 <_Balloc>
   dce70:	f04f 0b00 	mov.w	fp, #0
   dce74:	f100 0914 	add.w	r9, r0, #20
   dce78:	f1ca 0301 	rsb	r3, sl, #1
   dce7c:	4604      	mov	r4, r0
   dce7e:	f8cd 9008 	str.w	r9, [sp, #8]
   dce82:	f8cd b000 	str.w	fp, [sp]
   dce86:	9306      	str	r3, [sp, #24]
   dce88:	42b7      	cmp	r7, r6
   dce8a:	d343      	bcc.n	dcf14 <__gethex+0x210>
   dce8c:	9802      	ldr	r0, [sp, #8]
   dce8e:	9b00      	ldr	r3, [sp, #0]
   dce90:	f840 3b04 	str.w	r3, [r0], #4
   dce94:	eba0 0009 	sub.w	r0, r0, r9
   dce98:	1080      	asrs	r0, r0, #2
   dce9a:	0146      	lsls	r6, r0, #5
   dce9c:	6120      	str	r0, [r4, #16]
   dce9e:	4618      	mov	r0, r3
   dcea0:	f000 faff 	bl	dd4a2 <__hi0bits>
   dcea4:	1a30      	subs	r0, r6, r0
   dcea6:	f8d8 6000 	ldr.w	r6, [r8]
   dceaa:	42b0      	cmp	r0, r6
   dceac:	dd66      	ble.n	dcf7c <__gethex+0x278>
   dceae:	1b87      	subs	r7, r0, r6
   dceb0:	4639      	mov	r1, r7
   dceb2:	4620      	mov	r0, r4
   dceb4:	f000 fe4c 	bl	ddb50 <__any_on>
   dceb8:	4682      	mov	sl, r0
   dceba:	b1a8      	cbz	r0, dcee8 <__gethex+0x1e4>
   dcebc:	1e7b      	subs	r3, r7, #1
   dcebe:	1159      	asrs	r1, r3, #5
   dcec0:	f003 021f 	and.w	r2, r3, #31
   dcec4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dcec8:	f04f 0a01 	mov.w	sl, #1
   dcecc:	fa0a f202 	lsl.w	r2, sl, r2
   dced0:	420a      	tst	r2, r1
   dced2:	d009      	beq.n	dcee8 <__gethex+0x1e4>
   dced4:	4553      	cmp	r3, sl
   dced6:	dd05      	ble.n	dcee4 <__gethex+0x1e0>
   dced8:	1eb9      	subs	r1, r7, #2
   dceda:	4620      	mov	r0, r4
   dcedc:	f000 fe38 	bl	ddb50 <__any_on>
   dcee0:	2800      	cmp	r0, #0
   dcee2:	d148      	bne.n	dcf76 <__gethex+0x272>
   dcee4:	f04f 0a02 	mov.w	sl, #2
   dcee8:	4639      	mov	r1, r7
   dceea:	4620      	mov	r0, r4
   dceec:	f7ff fea2 	bl	dcc34 <rshift>
   dcef0:	443d      	add	r5, r7
   dcef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcef6:	42ab      	cmp	r3, r5
   dcef8:	da4f      	bge.n	dcf9a <__gethex+0x296>
   dcefa:	ee18 0a10 	vmov	r0, s16
   dcefe:	4621      	mov	r1, r4
   dcf00:	f000 fa3c 	bl	dd37c <_Bfree>
   dcf04:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dcf06:	2300      	movs	r3, #0
   dcf08:	6013      	str	r3, [r2, #0]
   dcf0a:	27a3      	movs	r7, #163	; 0xa3
   dcf0c:	e78f      	b.n	dce2e <__gethex+0x12a>
   dcf0e:	3101      	adds	r1, #1
   dcf10:	105b      	asrs	r3, r3, #1
   dcf12:	e7a7      	b.n	dce64 <__gethex+0x160>
   dcf14:	1e73      	subs	r3, r6, #1
   dcf16:	9a05      	ldr	r2, [sp, #20]
   dcf18:	9303      	str	r3, [sp, #12]
   dcf1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dcf1e:	4293      	cmp	r3, r2
   dcf20:	d019      	beq.n	dcf56 <__gethex+0x252>
   dcf22:	f1bb 0f20 	cmp.w	fp, #32
   dcf26:	d107      	bne.n	dcf38 <__gethex+0x234>
   dcf28:	9b02      	ldr	r3, [sp, #8]
   dcf2a:	9a00      	ldr	r2, [sp, #0]
   dcf2c:	f843 2b04 	str.w	r2, [r3], #4
   dcf30:	9302      	str	r3, [sp, #8]
   dcf32:	2300      	movs	r3, #0
   dcf34:	9300      	str	r3, [sp, #0]
   dcf36:	469b      	mov	fp, r3
   dcf38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dcf3c:	f7ff fecc 	bl	dccd8 <__hexdig_fun>
   dcf40:	9b00      	ldr	r3, [sp, #0]
   dcf42:	f000 000f 	and.w	r0, r0, #15
   dcf46:	fa00 f00b 	lsl.w	r0, r0, fp
   dcf4a:	4303      	orrs	r3, r0
   dcf4c:	9300      	str	r3, [sp, #0]
   dcf4e:	f10b 0b04 	add.w	fp, fp, #4
   dcf52:	9b03      	ldr	r3, [sp, #12]
   dcf54:	e00d      	b.n	dcf72 <__gethex+0x26e>
   dcf56:	9b03      	ldr	r3, [sp, #12]
   dcf58:	9a06      	ldr	r2, [sp, #24]
   dcf5a:	4413      	add	r3, r2
   dcf5c:	42bb      	cmp	r3, r7
   dcf5e:	d3e0      	bcc.n	dcf22 <__gethex+0x21e>
   dcf60:	4618      	mov	r0, r3
   dcf62:	9901      	ldr	r1, [sp, #4]
   dcf64:	9307      	str	r3, [sp, #28]
   dcf66:	4652      	mov	r2, sl
   dcf68:	f7fe ff6f 	bl	dbe4a <strncmp>
   dcf6c:	9b07      	ldr	r3, [sp, #28]
   dcf6e:	2800      	cmp	r0, #0
   dcf70:	d1d7      	bne.n	dcf22 <__gethex+0x21e>
   dcf72:	461e      	mov	r6, r3
   dcf74:	e788      	b.n	dce88 <__gethex+0x184>
   dcf76:	f04f 0a03 	mov.w	sl, #3
   dcf7a:	e7b5      	b.n	dcee8 <__gethex+0x1e4>
   dcf7c:	da0a      	bge.n	dcf94 <__gethex+0x290>
   dcf7e:	1a37      	subs	r7, r6, r0
   dcf80:	4621      	mov	r1, r4
   dcf82:	ee18 0a10 	vmov	r0, s16
   dcf86:	463a      	mov	r2, r7
   dcf88:	f000 fbce 	bl	dd728 <__lshift>
   dcf8c:	1bed      	subs	r5, r5, r7
   dcf8e:	4604      	mov	r4, r0
   dcf90:	f100 0914 	add.w	r9, r0, #20
   dcf94:	f04f 0a00 	mov.w	sl, #0
   dcf98:	e7ab      	b.n	dcef2 <__gethex+0x1ee>
   dcf9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dcf9e:	42a8      	cmp	r0, r5
   dcfa0:	dd6d      	ble.n	dd07e <__gethex+0x37a>
   dcfa2:	1b45      	subs	r5, r0, r5
   dcfa4:	42ae      	cmp	r6, r5
   dcfa6:	dc31      	bgt.n	dd00c <__gethex+0x308>
   dcfa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dcfac:	2b02      	cmp	r3, #2
   dcfae:	d023      	beq.n	dcff8 <__gethex+0x2f4>
   dcfb0:	2b03      	cmp	r3, #3
   dcfb2:	d025      	beq.n	dd000 <__gethex+0x2fc>
   dcfb4:	2b01      	cmp	r3, #1
   dcfb6:	d115      	bne.n	dcfe4 <__gethex+0x2e0>
   dcfb8:	42ae      	cmp	r6, r5
   dcfba:	d113      	bne.n	dcfe4 <__gethex+0x2e0>
   dcfbc:	2e01      	cmp	r6, #1
   dcfbe:	d10b      	bne.n	dcfd8 <__gethex+0x2d4>
   dcfc0:	9a04      	ldr	r2, [sp, #16]
   dcfc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dcfc6:	6013      	str	r3, [r2, #0]
   dcfc8:	2301      	movs	r3, #1
   dcfca:	6123      	str	r3, [r4, #16]
   dcfcc:	f8c9 3000 	str.w	r3, [r9]
   dcfd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcfd2:	2762      	movs	r7, #98	; 0x62
   dcfd4:	601c      	str	r4, [r3, #0]
   dcfd6:	e72a      	b.n	dce2e <__gethex+0x12a>
   dcfd8:	1e71      	subs	r1, r6, #1
   dcfda:	4620      	mov	r0, r4
   dcfdc:	f000 fdb8 	bl	ddb50 <__any_on>
   dcfe0:	2800      	cmp	r0, #0
   dcfe2:	d1ed      	bne.n	dcfc0 <__gethex+0x2bc>
   dcfe4:	ee18 0a10 	vmov	r0, s16
   dcfe8:	4621      	mov	r1, r4
   dcfea:	f000 f9c7 	bl	dd37c <_Bfree>
   dcfee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dcff0:	2300      	movs	r3, #0
   dcff2:	6013      	str	r3, [r2, #0]
   dcff4:	2750      	movs	r7, #80	; 0x50
   dcff6:	e71a      	b.n	dce2e <__gethex+0x12a>
   dcff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcffa:	2b00      	cmp	r3, #0
   dcffc:	d1f2      	bne.n	dcfe4 <__gethex+0x2e0>
   dcffe:	e7df      	b.n	dcfc0 <__gethex+0x2bc>
   dd000:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd002:	2b00      	cmp	r3, #0
   dd004:	d1dc      	bne.n	dcfc0 <__gethex+0x2bc>
   dd006:	e7ed      	b.n	dcfe4 <__gethex+0x2e0>
   dd008:	000deb4c 	.word	0x000deb4c
   dd00c:	1e6f      	subs	r7, r5, #1
   dd00e:	f1ba 0f00 	cmp.w	sl, #0
   dd012:	d131      	bne.n	dd078 <__gethex+0x374>
   dd014:	b127      	cbz	r7, dd020 <__gethex+0x31c>
   dd016:	4639      	mov	r1, r7
   dd018:	4620      	mov	r0, r4
   dd01a:	f000 fd99 	bl	ddb50 <__any_on>
   dd01e:	4682      	mov	sl, r0
   dd020:	117b      	asrs	r3, r7, #5
   dd022:	2101      	movs	r1, #1
   dd024:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dd028:	f007 071f 	and.w	r7, r7, #31
   dd02c:	fa01 f707 	lsl.w	r7, r1, r7
   dd030:	421f      	tst	r7, r3
   dd032:	4629      	mov	r1, r5
   dd034:	4620      	mov	r0, r4
   dd036:	bf18      	it	ne
   dd038:	f04a 0a02 	orrne.w	sl, sl, #2
   dd03c:	1b76      	subs	r6, r6, r5
   dd03e:	f7ff fdf9 	bl	dcc34 <rshift>
   dd042:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dd046:	2702      	movs	r7, #2
   dd048:	f1ba 0f00 	cmp.w	sl, #0
   dd04c:	d048      	beq.n	dd0e0 <__gethex+0x3dc>
   dd04e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dd052:	2b02      	cmp	r3, #2
   dd054:	d015      	beq.n	dd082 <__gethex+0x37e>
   dd056:	2b03      	cmp	r3, #3
   dd058:	d017      	beq.n	dd08a <__gethex+0x386>
   dd05a:	2b01      	cmp	r3, #1
   dd05c:	d109      	bne.n	dd072 <__gethex+0x36e>
   dd05e:	f01a 0f02 	tst.w	sl, #2
   dd062:	d006      	beq.n	dd072 <__gethex+0x36e>
   dd064:	f8d9 0000 	ldr.w	r0, [r9]
   dd068:	ea4a 0a00 	orr.w	sl, sl, r0
   dd06c:	f01a 0f01 	tst.w	sl, #1
   dd070:	d10e      	bne.n	dd090 <__gethex+0x38c>
   dd072:	f047 0710 	orr.w	r7, r7, #16
   dd076:	e033      	b.n	dd0e0 <__gethex+0x3dc>
   dd078:	f04f 0a01 	mov.w	sl, #1
   dd07c:	e7d0      	b.n	dd020 <__gethex+0x31c>
   dd07e:	2701      	movs	r7, #1
   dd080:	e7e2      	b.n	dd048 <__gethex+0x344>
   dd082:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd084:	f1c3 0301 	rsb	r3, r3, #1
   dd088:	9315      	str	r3, [sp, #84]	; 0x54
   dd08a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd08c:	2b00      	cmp	r3, #0
   dd08e:	d0f0      	beq.n	dd072 <__gethex+0x36e>
   dd090:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dd094:	f104 0314 	add.w	r3, r4, #20
   dd098:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dd09c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dd0a0:	f04f 0c00 	mov.w	ip, #0
   dd0a4:	4618      	mov	r0, r3
   dd0a6:	f853 2b04 	ldr.w	r2, [r3], #4
   dd0aa:	f1b2 3fff 	cmp.w	r2, #4294967295
   dd0ae:	d01c      	beq.n	dd0ea <__gethex+0x3e6>
   dd0b0:	3201      	adds	r2, #1
   dd0b2:	6002      	str	r2, [r0, #0]
   dd0b4:	2f02      	cmp	r7, #2
   dd0b6:	f104 0314 	add.w	r3, r4, #20
   dd0ba:	d13a      	bne.n	dd132 <__gethex+0x42e>
   dd0bc:	f8d8 2000 	ldr.w	r2, [r8]
   dd0c0:	3a01      	subs	r2, #1
   dd0c2:	42b2      	cmp	r2, r6
   dd0c4:	d10a      	bne.n	dd0dc <__gethex+0x3d8>
   dd0c6:	1171      	asrs	r1, r6, #5
   dd0c8:	2201      	movs	r2, #1
   dd0ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dd0ce:	f006 061f 	and.w	r6, r6, #31
   dd0d2:	fa02 f606 	lsl.w	r6, r2, r6
   dd0d6:	421e      	tst	r6, r3
   dd0d8:	bf18      	it	ne
   dd0da:	4617      	movne	r7, r2
   dd0dc:	f047 0720 	orr.w	r7, r7, #32
   dd0e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dd0e2:	601c      	str	r4, [r3, #0]
   dd0e4:	9b04      	ldr	r3, [sp, #16]
   dd0e6:	601d      	str	r5, [r3, #0]
   dd0e8:	e6a1      	b.n	dce2e <__gethex+0x12a>
   dd0ea:	4299      	cmp	r1, r3
   dd0ec:	f843 cc04 	str.w	ip, [r3, #-4]
   dd0f0:	d8d8      	bhi.n	dd0a4 <__gethex+0x3a0>
   dd0f2:	68a3      	ldr	r3, [r4, #8]
   dd0f4:	4599      	cmp	r9, r3
   dd0f6:	db14      	blt.n	dd122 <__gethex+0x41e>
   dd0f8:	6861      	ldr	r1, [r4, #4]
   dd0fa:	ee18 0a10 	vmov	r0, s16
   dd0fe:	3101      	adds	r1, #1
   dd100:	f000 f908 	bl	dd314 <_Balloc>
   dd104:	6922      	ldr	r2, [r4, #16]
   dd106:	3202      	adds	r2, #2
   dd108:	f104 010c 	add.w	r1, r4, #12
   dd10c:	4682      	mov	sl, r0
   dd10e:	0092      	lsls	r2, r2, #2
   dd110:	300c      	adds	r0, #12
   dd112:	f7fe fe1b 	bl	dbd4c <memcpy>
   dd116:	4621      	mov	r1, r4
   dd118:	ee18 0a10 	vmov	r0, s16
   dd11c:	f000 f92e 	bl	dd37c <_Bfree>
   dd120:	4654      	mov	r4, sl
   dd122:	6923      	ldr	r3, [r4, #16]
   dd124:	1c5a      	adds	r2, r3, #1
   dd126:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dd12a:	6122      	str	r2, [r4, #16]
   dd12c:	2201      	movs	r2, #1
   dd12e:	615a      	str	r2, [r3, #20]
   dd130:	e7c0      	b.n	dd0b4 <__gethex+0x3b0>
   dd132:	6922      	ldr	r2, [r4, #16]
   dd134:	454a      	cmp	r2, r9
   dd136:	dd0b      	ble.n	dd150 <__gethex+0x44c>
   dd138:	2101      	movs	r1, #1
   dd13a:	4620      	mov	r0, r4
   dd13c:	f7ff fd7a 	bl	dcc34 <rshift>
   dd140:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd144:	3501      	adds	r5, #1
   dd146:	42ab      	cmp	r3, r5
   dd148:	f6ff aed7 	blt.w	dcefa <__gethex+0x1f6>
   dd14c:	2701      	movs	r7, #1
   dd14e:	e7c5      	b.n	dd0dc <__gethex+0x3d8>
   dd150:	f016 061f 	ands.w	r6, r6, #31
   dd154:	d0fa      	beq.n	dd14c <__gethex+0x448>
   dd156:	449b      	add	fp, r3
   dd158:	f1c6 0620 	rsb	r6, r6, #32
   dd15c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dd160:	f000 f99f 	bl	dd4a2 <__hi0bits>
   dd164:	42b0      	cmp	r0, r6
   dd166:	dbe7      	blt.n	dd138 <__gethex+0x434>
   dd168:	e7f0      	b.n	dd14c <__gethex+0x448>
   dd16a:	bf00      	nop

000dd16c <L_shift>:
   dd16c:	f1c2 0208 	rsb	r2, r2, #8
   dd170:	0092      	lsls	r2, r2, #2
   dd172:	b570      	push	{r4, r5, r6, lr}
   dd174:	f1c2 0620 	rsb	r6, r2, #32
   dd178:	6843      	ldr	r3, [r0, #4]
   dd17a:	6804      	ldr	r4, [r0, #0]
   dd17c:	fa03 f506 	lsl.w	r5, r3, r6
   dd180:	432c      	orrs	r4, r5
   dd182:	40d3      	lsrs	r3, r2
   dd184:	6004      	str	r4, [r0, #0]
   dd186:	f840 3f04 	str.w	r3, [r0, #4]!
   dd18a:	4288      	cmp	r0, r1
   dd18c:	d3f4      	bcc.n	dd178 <L_shift+0xc>
   dd18e:	bd70      	pop	{r4, r5, r6, pc}

000dd190 <__match>:
   dd190:	b530      	push	{r4, r5, lr}
   dd192:	6803      	ldr	r3, [r0, #0]
   dd194:	3301      	adds	r3, #1
   dd196:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd19a:	b914      	cbnz	r4, dd1a2 <__match+0x12>
   dd19c:	6003      	str	r3, [r0, #0]
   dd19e:	2001      	movs	r0, #1
   dd1a0:	bd30      	pop	{r4, r5, pc}
   dd1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd1a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dd1aa:	2d19      	cmp	r5, #25
   dd1ac:	bf98      	it	ls
   dd1ae:	3220      	addls	r2, #32
   dd1b0:	42a2      	cmp	r2, r4
   dd1b2:	d0f0      	beq.n	dd196 <__match+0x6>
   dd1b4:	2000      	movs	r0, #0
   dd1b6:	e7f3      	b.n	dd1a0 <__match+0x10>

000dd1b8 <__hexnan>:
   dd1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd1bc:	680b      	ldr	r3, [r1, #0]
   dd1be:	6801      	ldr	r1, [r0, #0]
   dd1c0:	115e      	asrs	r6, r3, #5
   dd1c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dd1c6:	f013 031f 	ands.w	r3, r3, #31
   dd1ca:	b087      	sub	sp, #28
   dd1cc:	bf18      	it	ne
   dd1ce:	3604      	addne	r6, #4
   dd1d0:	2500      	movs	r5, #0
   dd1d2:	1f37      	subs	r7, r6, #4
   dd1d4:	4682      	mov	sl, r0
   dd1d6:	4690      	mov	r8, r2
   dd1d8:	9301      	str	r3, [sp, #4]
   dd1da:	f846 5c04 	str.w	r5, [r6, #-4]
   dd1de:	46b9      	mov	r9, r7
   dd1e0:	463c      	mov	r4, r7
   dd1e2:	9502      	str	r5, [sp, #8]
   dd1e4:	46ab      	mov	fp, r5
   dd1e6:	784a      	ldrb	r2, [r1, #1]
   dd1e8:	1c4b      	adds	r3, r1, #1
   dd1ea:	9303      	str	r3, [sp, #12]
   dd1ec:	b342      	cbz	r2, dd240 <__hexnan+0x88>
   dd1ee:	4610      	mov	r0, r2
   dd1f0:	9105      	str	r1, [sp, #20]
   dd1f2:	9204      	str	r2, [sp, #16]
   dd1f4:	f7ff fd70 	bl	dccd8 <__hexdig_fun>
   dd1f8:	2800      	cmp	r0, #0
   dd1fa:	d14f      	bne.n	dd29c <__hexnan+0xe4>
   dd1fc:	9a04      	ldr	r2, [sp, #16]
   dd1fe:	9905      	ldr	r1, [sp, #20]
   dd200:	2a20      	cmp	r2, #32
   dd202:	d818      	bhi.n	dd236 <__hexnan+0x7e>
   dd204:	9b02      	ldr	r3, [sp, #8]
   dd206:	459b      	cmp	fp, r3
   dd208:	dd13      	ble.n	dd232 <__hexnan+0x7a>
   dd20a:	454c      	cmp	r4, r9
   dd20c:	d206      	bcs.n	dd21c <__hexnan+0x64>
   dd20e:	2d07      	cmp	r5, #7
   dd210:	dc04      	bgt.n	dd21c <__hexnan+0x64>
   dd212:	462a      	mov	r2, r5
   dd214:	4649      	mov	r1, r9
   dd216:	4620      	mov	r0, r4
   dd218:	f7ff ffa8 	bl	dd16c <L_shift>
   dd21c:	4544      	cmp	r4, r8
   dd21e:	d950      	bls.n	dd2c2 <__hexnan+0x10a>
   dd220:	2300      	movs	r3, #0
   dd222:	f1a4 0904 	sub.w	r9, r4, #4
   dd226:	f844 3c04 	str.w	r3, [r4, #-4]
   dd22a:	f8cd b008 	str.w	fp, [sp, #8]
   dd22e:	464c      	mov	r4, r9
   dd230:	461d      	mov	r5, r3
   dd232:	9903      	ldr	r1, [sp, #12]
   dd234:	e7d7      	b.n	dd1e6 <__hexnan+0x2e>
   dd236:	2a29      	cmp	r2, #41	; 0x29
   dd238:	d156      	bne.n	dd2e8 <__hexnan+0x130>
   dd23a:	3102      	adds	r1, #2
   dd23c:	f8ca 1000 	str.w	r1, [sl]
   dd240:	f1bb 0f00 	cmp.w	fp, #0
   dd244:	d050      	beq.n	dd2e8 <__hexnan+0x130>
   dd246:	454c      	cmp	r4, r9
   dd248:	d206      	bcs.n	dd258 <__hexnan+0xa0>
   dd24a:	2d07      	cmp	r5, #7
   dd24c:	dc04      	bgt.n	dd258 <__hexnan+0xa0>
   dd24e:	462a      	mov	r2, r5
   dd250:	4649      	mov	r1, r9
   dd252:	4620      	mov	r0, r4
   dd254:	f7ff ff8a 	bl	dd16c <L_shift>
   dd258:	4544      	cmp	r4, r8
   dd25a:	d934      	bls.n	dd2c6 <__hexnan+0x10e>
   dd25c:	f1a8 0204 	sub.w	r2, r8, #4
   dd260:	4623      	mov	r3, r4
   dd262:	f853 1b04 	ldr.w	r1, [r3], #4
   dd266:	f842 1f04 	str.w	r1, [r2, #4]!
   dd26a:	429f      	cmp	r7, r3
   dd26c:	d2f9      	bcs.n	dd262 <__hexnan+0xaa>
   dd26e:	1b3b      	subs	r3, r7, r4
   dd270:	f023 0303 	bic.w	r3, r3, #3
   dd274:	3304      	adds	r3, #4
   dd276:	3401      	adds	r4, #1
   dd278:	3e03      	subs	r6, #3
   dd27a:	42b4      	cmp	r4, r6
   dd27c:	bf88      	it	hi
   dd27e:	2304      	movhi	r3, #4
   dd280:	4443      	add	r3, r8
   dd282:	2200      	movs	r2, #0
   dd284:	f843 2b04 	str.w	r2, [r3], #4
   dd288:	429f      	cmp	r7, r3
   dd28a:	d2fb      	bcs.n	dd284 <__hexnan+0xcc>
   dd28c:	683b      	ldr	r3, [r7, #0]
   dd28e:	b91b      	cbnz	r3, dd298 <__hexnan+0xe0>
   dd290:	4547      	cmp	r7, r8
   dd292:	d127      	bne.n	dd2e4 <__hexnan+0x12c>
   dd294:	2301      	movs	r3, #1
   dd296:	603b      	str	r3, [r7, #0]
   dd298:	2005      	movs	r0, #5
   dd29a:	e026      	b.n	dd2ea <__hexnan+0x132>
   dd29c:	3501      	adds	r5, #1
   dd29e:	2d08      	cmp	r5, #8
   dd2a0:	f10b 0b01 	add.w	fp, fp, #1
   dd2a4:	dd06      	ble.n	dd2b4 <__hexnan+0xfc>
   dd2a6:	4544      	cmp	r4, r8
   dd2a8:	d9c3      	bls.n	dd232 <__hexnan+0x7a>
   dd2aa:	2300      	movs	r3, #0
   dd2ac:	f844 3c04 	str.w	r3, [r4, #-4]
   dd2b0:	2501      	movs	r5, #1
   dd2b2:	3c04      	subs	r4, #4
   dd2b4:	6822      	ldr	r2, [r4, #0]
   dd2b6:	f000 000f 	and.w	r0, r0, #15
   dd2ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dd2be:	6022      	str	r2, [r4, #0]
   dd2c0:	e7b7      	b.n	dd232 <__hexnan+0x7a>
   dd2c2:	2508      	movs	r5, #8
   dd2c4:	e7b5      	b.n	dd232 <__hexnan+0x7a>
   dd2c6:	9b01      	ldr	r3, [sp, #4]
   dd2c8:	2b00      	cmp	r3, #0
   dd2ca:	d0df      	beq.n	dd28c <__hexnan+0xd4>
   dd2cc:	f04f 32ff 	mov.w	r2, #4294967295
   dd2d0:	f1c3 0320 	rsb	r3, r3, #32
   dd2d4:	fa22 f303 	lsr.w	r3, r2, r3
   dd2d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dd2dc:	401a      	ands	r2, r3
   dd2de:	f846 2c04 	str.w	r2, [r6, #-4]
   dd2e2:	e7d3      	b.n	dd28c <__hexnan+0xd4>
   dd2e4:	3f04      	subs	r7, #4
   dd2e6:	e7d1      	b.n	dd28c <__hexnan+0xd4>
   dd2e8:	2004      	movs	r0, #4
   dd2ea:	b007      	add	sp, #28
   dd2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd2f0 <__ascii_mbtowc>:
   dd2f0:	b082      	sub	sp, #8
   dd2f2:	b901      	cbnz	r1, dd2f6 <__ascii_mbtowc+0x6>
   dd2f4:	a901      	add	r1, sp, #4
   dd2f6:	b142      	cbz	r2, dd30a <__ascii_mbtowc+0x1a>
   dd2f8:	b14b      	cbz	r3, dd30e <__ascii_mbtowc+0x1e>
   dd2fa:	7813      	ldrb	r3, [r2, #0]
   dd2fc:	600b      	str	r3, [r1, #0]
   dd2fe:	7812      	ldrb	r2, [r2, #0]
   dd300:	1e10      	subs	r0, r2, #0
   dd302:	bf18      	it	ne
   dd304:	2001      	movne	r0, #1
   dd306:	b002      	add	sp, #8
   dd308:	4770      	bx	lr
   dd30a:	4610      	mov	r0, r2
   dd30c:	e7fb      	b.n	dd306 <__ascii_mbtowc+0x16>
   dd30e:	f06f 0001 	mvn.w	r0, #1
   dd312:	e7f8      	b.n	dd306 <__ascii_mbtowc+0x16>

000dd314 <_Balloc>:
   dd314:	b570      	push	{r4, r5, r6, lr}
   dd316:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd318:	4604      	mov	r4, r0
   dd31a:	460d      	mov	r5, r1
   dd31c:	b93e      	cbnz	r6, dd32e <_Balloc+0x1a>
   dd31e:	2010      	movs	r0, #16
   dd320:	f7fa fc58 	bl	d7bd4 <malloc>
   dd324:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd328:	6260      	str	r0, [r4, #36]	; 0x24
   dd32a:	6006      	str	r6, [r0, #0]
   dd32c:	60c6      	str	r6, [r0, #12]
   dd32e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dd330:	68f3      	ldr	r3, [r6, #12]
   dd332:	b183      	cbz	r3, dd356 <_Balloc+0x42>
   dd334:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd336:	68db      	ldr	r3, [r3, #12]
   dd338:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dd33c:	b9b8      	cbnz	r0, dd36e <_Balloc+0x5a>
   dd33e:	2101      	movs	r1, #1
   dd340:	fa01 f605 	lsl.w	r6, r1, r5
   dd344:	1d72      	adds	r2, r6, #5
   dd346:	0092      	lsls	r2, r2, #2
   dd348:	4620      	mov	r0, r4
   dd34a:	f000 fc22 	bl	ddb92 <_calloc_r>
   dd34e:	b160      	cbz	r0, dd36a <_Balloc+0x56>
   dd350:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dd354:	e00e      	b.n	dd374 <_Balloc+0x60>
   dd356:	2221      	movs	r2, #33	; 0x21
   dd358:	2104      	movs	r1, #4
   dd35a:	4620      	mov	r0, r4
   dd35c:	f000 fc19 	bl	ddb92 <_calloc_r>
   dd360:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd362:	60f0      	str	r0, [r6, #12]
   dd364:	68db      	ldr	r3, [r3, #12]
   dd366:	2b00      	cmp	r3, #0
   dd368:	d1e4      	bne.n	dd334 <_Balloc+0x20>
   dd36a:	2000      	movs	r0, #0
   dd36c:	bd70      	pop	{r4, r5, r6, pc}
   dd36e:	6802      	ldr	r2, [r0, #0]
   dd370:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dd374:	2300      	movs	r3, #0
   dd376:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dd37a:	e7f7      	b.n	dd36c <_Balloc+0x58>

000dd37c <_Bfree>:
   dd37c:	b570      	push	{r4, r5, r6, lr}
   dd37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd380:	4605      	mov	r5, r0
   dd382:	460c      	mov	r4, r1
   dd384:	b93e      	cbnz	r6, dd396 <_Bfree+0x1a>
   dd386:	2010      	movs	r0, #16
   dd388:	f7fa fc24 	bl	d7bd4 <malloc>
   dd38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd390:	6268      	str	r0, [r5, #36]	; 0x24
   dd392:	6006      	str	r6, [r0, #0]
   dd394:	60c6      	str	r6, [r0, #12]
   dd396:	b13c      	cbz	r4, dd3a8 <_Bfree+0x2c>
   dd398:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dd39a:	6862      	ldr	r2, [r4, #4]
   dd39c:	68db      	ldr	r3, [r3, #12]
   dd39e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dd3a2:	6021      	str	r1, [r4, #0]
   dd3a4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dd3a8:	bd70      	pop	{r4, r5, r6, pc}

000dd3aa <__multadd>:
   dd3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd3ae:	690e      	ldr	r6, [r1, #16]
   dd3b0:	4607      	mov	r7, r0
   dd3b2:	4698      	mov	r8, r3
   dd3b4:	460c      	mov	r4, r1
   dd3b6:	f101 0014 	add.w	r0, r1, #20
   dd3ba:	2300      	movs	r3, #0
   dd3bc:	6805      	ldr	r5, [r0, #0]
   dd3be:	b2a9      	uxth	r1, r5
   dd3c0:	fb02 8101 	mla	r1, r2, r1, r8
   dd3c4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dd3c8:	0c2d      	lsrs	r5, r5, #16
   dd3ca:	fb02 c505 	mla	r5, r2, r5, ip
   dd3ce:	b289      	uxth	r1, r1
   dd3d0:	3301      	adds	r3, #1
   dd3d2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dd3d6:	429e      	cmp	r6, r3
   dd3d8:	f840 1b04 	str.w	r1, [r0], #4
   dd3dc:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dd3e0:	dcec      	bgt.n	dd3bc <__multadd+0x12>
   dd3e2:	f1b8 0f00 	cmp.w	r8, #0
   dd3e6:	d01b      	beq.n	dd420 <__multadd+0x76>
   dd3e8:	68a3      	ldr	r3, [r4, #8]
   dd3ea:	42b3      	cmp	r3, r6
   dd3ec:	dc12      	bgt.n	dd414 <__multadd+0x6a>
   dd3ee:	6861      	ldr	r1, [r4, #4]
   dd3f0:	4638      	mov	r0, r7
   dd3f2:	3101      	adds	r1, #1
   dd3f4:	f7ff ff8e 	bl	dd314 <_Balloc>
   dd3f8:	6922      	ldr	r2, [r4, #16]
   dd3fa:	3202      	adds	r2, #2
   dd3fc:	f104 010c 	add.w	r1, r4, #12
   dd400:	4605      	mov	r5, r0
   dd402:	0092      	lsls	r2, r2, #2
   dd404:	300c      	adds	r0, #12
   dd406:	f7fe fca1 	bl	dbd4c <memcpy>
   dd40a:	4621      	mov	r1, r4
   dd40c:	4638      	mov	r0, r7
   dd40e:	f7ff ffb5 	bl	dd37c <_Bfree>
   dd412:	462c      	mov	r4, r5
   dd414:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dd418:	3601      	adds	r6, #1
   dd41a:	f8c3 8014 	str.w	r8, [r3, #20]
   dd41e:	6126      	str	r6, [r4, #16]
   dd420:	4620      	mov	r0, r4
   dd422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd426 <__s2b>:
   dd426:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd42a:	460c      	mov	r4, r1
   dd42c:	4615      	mov	r5, r2
   dd42e:	461f      	mov	r7, r3
   dd430:	2209      	movs	r2, #9
   dd432:	3308      	adds	r3, #8
   dd434:	4606      	mov	r6, r0
   dd436:	fb93 f3f2 	sdiv	r3, r3, r2
   dd43a:	2100      	movs	r1, #0
   dd43c:	2201      	movs	r2, #1
   dd43e:	429a      	cmp	r2, r3
   dd440:	db20      	blt.n	dd484 <__s2b+0x5e>
   dd442:	4630      	mov	r0, r6
   dd444:	f7ff ff66 	bl	dd314 <_Balloc>
   dd448:	9b08      	ldr	r3, [sp, #32]
   dd44a:	6143      	str	r3, [r0, #20]
   dd44c:	2d09      	cmp	r5, #9
   dd44e:	f04f 0301 	mov.w	r3, #1
   dd452:	6103      	str	r3, [r0, #16]
   dd454:	dd19      	ble.n	dd48a <__s2b+0x64>
   dd456:	f104 0909 	add.w	r9, r4, #9
   dd45a:	46c8      	mov	r8, r9
   dd45c:	442c      	add	r4, r5
   dd45e:	f818 3b01 	ldrb.w	r3, [r8], #1
   dd462:	4601      	mov	r1, r0
   dd464:	3b30      	subs	r3, #48	; 0x30
   dd466:	220a      	movs	r2, #10
   dd468:	4630      	mov	r0, r6
   dd46a:	f7ff ff9e 	bl	dd3aa <__multadd>
   dd46e:	45a0      	cmp	r8, r4
   dd470:	d1f5      	bne.n	dd45e <__s2b+0x38>
   dd472:	f1a5 0408 	sub.w	r4, r5, #8
   dd476:	444c      	add	r4, r9
   dd478:	1b2d      	subs	r5, r5, r4
   dd47a:	1963      	adds	r3, r4, r5
   dd47c:	42bb      	cmp	r3, r7
   dd47e:	db07      	blt.n	dd490 <__s2b+0x6a>
   dd480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd484:	0052      	lsls	r2, r2, #1
   dd486:	3101      	adds	r1, #1
   dd488:	e7d9      	b.n	dd43e <__s2b+0x18>
   dd48a:	340a      	adds	r4, #10
   dd48c:	2509      	movs	r5, #9
   dd48e:	e7f3      	b.n	dd478 <__s2b+0x52>
   dd490:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd494:	4601      	mov	r1, r0
   dd496:	3b30      	subs	r3, #48	; 0x30
   dd498:	220a      	movs	r2, #10
   dd49a:	4630      	mov	r0, r6
   dd49c:	f7ff ff85 	bl	dd3aa <__multadd>
   dd4a0:	e7eb      	b.n	dd47a <__s2b+0x54>

000dd4a2 <__hi0bits>:
   dd4a2:	0c03      	lsrs	r3, r0, #16
   dd4a4:	041b      	lsls	r3, r3, #16
   dd4a6:	b9d3      	cbnz	r3, dd4de <__hi0bits+0x3c>
   dd4a8:	0400      	lsls	r0, r0, #16
   dd4aa:	2310      	movs	r3, #16
   dd4ac:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dd4b0:	bf04      	itt	eq
   dd4b2:	0200      	lsleq	r0, r0, #8
   dd4b4:	3308      	addeq	r3, #8
   dd4b6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dd4ba:	bf04      	itt	eq
   dd4bc:	0100      	lsleq	r0, r0, #4
   dd4be:	3304      	addeq	r3, #4
   dd4c0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dd4c4:	bf04      	itt	eq
   dd4c6:	0080      	lsleq	r0, r0, #2
   dd4c8:	3302      	addeq	r3, #2
   dd4ca:	2800      	cmp	r0, #0
   dd4cc:	db05      	blt.n	dd4da <__hi0bits+0x38>
   dd4ce:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dd4d2:	f103 0301 	add.w	r3, r3, #1
   dd4d6:	bf08      	it	eq
   dd4d8:	2320      	moveq	r3, #32
   dd4da:	4618      	mov	r0, r3
   dd4dc:	4770      	bx	lr
   dd4de:	2300      	movs	r3, #0
   dd4e0:	e7e4      	b.n	dd4ac <__hi0bits+0xa>

000dd4e2 <__lo0bits>:
   dd4e2:	6803      	ldr	r3, [r0, #0]
   dd4e4:	f013 0207 	ands.w	r2, r3, #7
   dd4e8:	4601      	mov	r1, r0
   dd4ea:	d00b      	beq.n	dd504 <__lo0bits+0x22>
   dd4ec:	07da      	lsls	r2, r3, #31
   dd4ee:	d424      	bmi.n	dd53a <__lo0bits+0x58>
   dd4f0:	0798      	lsls	r0, r3, #30
   dd4f2:	bf49      	itett	mi
   dd4f4:	085b      	lsrmi	r3, r3, #1
   dd4f6:	089b      	lsrpl	r3, r3, #2
   dd4f8:	2001      	movmi	r0, #1
   dd4fa:	600b      	strmi	r3, [r1, #0]
   dd4fc:	bf5c      	itt	pl
   dd4fe:	600b      	strpl	r3, [r1, #0]
   dd500:	2002      	movpl	r0, #2
   dd502:	4770      	bx	lr
   dd504:	b298      	uxth	r0, r3
   dd506:	b9b0      	cbnz	r0, dd536 <__lo0bits+0x54>
   dd508:	0c1b      	lsrs	r3, r3, #16
   dd50a:	2010      	movs	r0, #16
   dd50c:	f013 0fff 	tst.w	r3, #255	; 0xff
   dd510:	bf04      	itt	eq
   dd512:	0a1b      	lsreq	r3, r3, #8
   dd514:	3008      	addeq	r0, #8
   dd516:	071a      	lsls	r2, r3, #28
   dd518:	bf04      	itt	eq
   dd51a:	091b      	lsreq	r3, r3, #4
   dd51c:	3004      	addeq	r0, #4
   dd51e:	079a      	lsls	r2, r3, #30
   dd520:	bf04      	itt	eq
   dd522:	089b      	lsreq	r3, r3, #2
   dd524:	3002      	addeq	r0, #2
   dd526:	07da      	lsls	r2, r3, #31
   dd528:	d403      	bmi.n	dd532 <__lo0bits+0x50>
   dd52a:	085b      	lsrs	r3, r3, #1
   dd52c:	f100 0001 	add.w	r0, r0, #1
   dd530:	d005      	beq.n	dd53e <__lo0bits+0x5c>
   dd532:	600b      	str	r3, [r1, #0]
   dd534:	4770      	bx	lr
   dd536:	4610      	mov	r0, r2
   dd538:	e7e8      	b.n	dd50c <__lo0bits+0x2a>
   dd53a:	2000      	movs	r0, #0
   dd53c:	4770      	bx	lr
   dd53e:	2020      	movs	r0, #32
   dd540:	4770      	bx	lr

000dd542 <__i2b>:
   dd542:	b510      	push	{r4, lr}
   dd544:	460c      	mov	r4, r1
   dd546:	2101      	movs	r1, #1
   dd548:	f7ff fee4 	bl	dd314 <_Balloc>
   dd54c:	2201      	movs	r2, #1
   dd54e:	6144      	str	r4, [r0, #20]
   dd550:	6102      	str	r2, [r0, #16]
   dd552:	bd10      	pop	{r4, pc}

000dd554 <__multiply>:
   dd554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd558:	4615      	mov	r5, r2
   dd55a:	690a      	ldr	r2, [r1, #16]
   dd55c:	692b      	ldr	r3, [r5, #16]
   dd55e:	429a      	cmp	r2, r3
   dd560:	bfb8      	it	lt
   dd562:	460b      	movlt	r3, r1
   dd564:	460c      	mov	r4, r1
   dd566:	bfbc      	itt	lt
   dd568:	462c      	movlt	r4, r5
   dd56a:	461d      	movlt	r5, r3
   dd56c:	6927      	ldr	r7, [r4, #16]
   dd56e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dd572:	68a3      	ldr	r3, [r4, #8]
   dd574:	6861      	ldr	r1, [r4, #4]
   dd576:	eb07 0609 	add.w	r6, r7, r9
   dd57a:	42b3      	cmp	r3, r6
   dd57c:	bfb8      	it	lt
   dd57e:	3101      	addlt	r1, #1
   dd580:	b085      	sub	sp, #20
   dd582:	f7ff fec7 	bl	dd314 <_Balloc>
   dd586:	f100 0114 	add.w	r1, r0, #20
   dd58a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dd58e:	460b      	mov	r3, r1
   dd590:	2200      	movs	r2, #0
   dd592:	4543      	cmp	r3, r8
   dd594:	d31d      	bcc.n	dd5d2 <__multiply+0x7e>
   dd596:	f104 0314 	add.w	r3, r4, #20
   dd59a:	f105 0214 	add.w	r2, r5, #20
   dd59e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dd5a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd5a6:	9302      	str	r3, [sp, #8]
   dd5a8:	1b3b      	subs	r3, r7, r4
   dd5aa:	3b15      	subs	r3, #21
   dd5ac:	f023 0303 	bic.w	r3, r3, #3
   dd5b0:	3304      	adds	r3, #4
   dd5b2:	f104 0515 	add.w	r5, r4, #21
   dd5b6:	42af      	cmp	r7, r5
   dd5b8:	bf38      	it	cc
   dd5ba:	2304      	movcc	r3, #4
   dd5bc:	9301      	str	r3, [sp, #4]
   dd5be:	9b02      	ldr	r3, [sp, #8]
   dd5c0:	9203      	str	r2, [sp, #12]
   dd5c2:	4293      	cmp	r3, r2
   dd5c4:	d808      	bhi.n	dd5d8 <__multiply+0x84>
   dd5c6:	2e00      	cmp	r6, #0
   dd5c8:	dc5a      	bgt.n	dd680 <__multiply+0x12c>
   dd5ca:	6106      	str	r6, [r0, #16]
   dd5cc:	b005      	add	sp, #20
   dd5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd5d2:	f843 2b04 	str.w	r2, [r3], #4
   dd5d6:	e7dc      	b.n	dd592 <__multiply+0x3e>
   dd5d8:	f8b2 a000 	ldrh.w	sl, [r2]
   dd5dc:	f1ba 0f00 	cmp.w	sl, #0
   dd5e0:	d024      	beq.n	dd62c <__multiply+0xd8>
   dd5e2:	f104 0e14 	add.w	lr, r4, #20
   dd5e6:	4689      	mov	r9, r1
   dd5e8:	f04f 0c00 	mov.w	ip, #0
   dd5ec:	f85e 5b04 	ldr.w	r5, [lr], #4
   dd5f0:	f8d9 b000 	ldr.w	fp, [r9]
   dd5f4:	b2ab      	uxth	r3, r5
   dd5f6:	fa1f fb8b 	uxth.w	fp, fp
   dd5fa:	fb0a b303 	mla	r3, sl, r3, fp
   dd5fe:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dd602:	f8d9 5000 	ldr.w	r5, [r9]
   dd606:	4463      	add	r3, ip
   dd608:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd60c:	fb0a c50b 	mla	r5, sl, fp, ip
   dd610:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dd614:	b29b      	uxth	r3, r3
   dd616:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dd61a:	4577      	cmp	r7, lr
   dd61c:	f849 3b04 	str.w	r3, [r9], #4
   dd620:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd624:	d8e2      	bhi.n	dd5ec <__multiply+0x98>
   dd626:	9b01      	ldr	r3, [sp, #4]
   dd628:	f841 c003 	str.w	ip, [r1, r3]
   dd62c:	9b03      	ldr	r3, [sp, #12]
   dd62e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dd632:	3204      	adds	r2, #4
   dd634:	f1b9 0f00 	cmp.w	r9, #0
   dd638:	d020      	beq.n	dd67c <__multiply+0x128>
   dd63a:	680b      	ldr	r3, [r1, #0]
   dd63c:	f104 0c14 	add.w	ip, r4, #20
   dd640:	468e      	mov	lr, r1
   dd642:	f04f 0a00 	mov.w	sl, #0
   dd646:	f8bc 5000 	ldrh.w	r5, [ip]
   dd64a:	f8be b002 	ldrh.w	fp, [lr, #2]
   dd64e:	fb09 b505 	mla	r5, r9, r5, fp
   dd652:	44aa      	add	sl, r5
   dd654:	b29b      	uxth	r3, r3
   dd656:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dd65a:	f84e 3b04 	str.w	r3, [lr], #4
   dd65e:	f85c 3b04 	ldr.w	r3, [ip], #4
   dd662:	f8be 5000 	ldrh.w	r5, [lr]
   dd666:	0c1b      	lsrs	r3, r3, #16
   dd668:	fb09 5303 	mla	r3, r9, r3, r5
   dd66c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dd670:	4567      	cmp	r7, ip
   dd672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dd676:	d8e6      	bhi.n	dd646 <__multiply+0xf2>
   dd678:	9d01      	ldr	r5, [sp, #4]
   dd67a:	514b      	str	r3, [r1, r5]
   dd67c:	3104      	adds	r1, #4
   dd67e:	e79e      	b.n	dd5be <__multiply+0x6a>
   dd680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dd684:	2b00      	cmp	r3, #0
   dd686:	d1a0      	bne.n	dd5ca <__multiply+0x76>
   dd688:	3e01      	subs	r6, #1
   dd68a:	e79c      	b.n	dd5c6 <__multiply+0x72>

000dd68c <__pow5mult>:
   dd68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd690:	4615      	mov	r5, r2
   dd692:	f012 0203 	ands.w	r2, r2, #3
   dd696:	4606      	mov	r6, r0
   dd698:	460f      	mov	r7, r1
   dd69a:	d007      	beq.n	dd6ac <__pow5mult+0x20>
   dd69c:	4c21      	ldr	r4, [pc, #132]	; (dd724 <__pow5mult+0x98>)
   dd69e:	3a01      	subs	r2, #1
   dd6a0:	2300      	movs	r3, #0
   dd6a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd6a6:	f7ff fe80 	bl	dd3aa <__multadd>
   dd6aa:	4607      	mov	r7, r0
   dd6ac:	10ad      	asrs	r5, r5, #2
   dd6ae:	d035      	beq.n	dd71c <__pow5mult+0x90>
   dd6b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd6b2:	b93c      	cbnz	r4, dd6c4 <__pow5mult+0x38>
   dd6b4:	2010      	movs	r0, #16
   dd6b6:	f7fa fa8d 	bl	d7bd4 <malloc>
   dd6ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dd6be:	6270      	str	r0, [r6, #36]	; 0x24
   dd6c0:	6004      	str	r4, [r0, #0]
   dd6c2:	60c4      	str	r4, [r0, #12]
   dd6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd6cc:	b94c      	cbnz	r4, dd6e2 <__pow5mult+0x56>
   dd6ce:	f240 2171 	movw	r1, #625	; 0x271
   dd6d2:	4630      	mov	r0, r6
   dd6d4:	f7ff ff35 	bl	dd542 <__i2b>
   dd6d8:	2300      	movs	r3, #0
   dd6da:	f8c8 0008 	str.w	r0, [r8, #8]
   dd6de:	4604      	mov	r4, r0
   dd6e0:	6003      	str	r3, [r0, #0]
   dd6e2:	f04f 0900 	mov.w	r9, #0
   dd6e6:	07eb      	lsls	r3, r5, #31
   dd6e8:	d50a      	bpl.n	dd700 <__pow5mult+0x74>
   dd6ea:	4639      	mov	r1, r7
   dd6ec:	4622      	mov	r2, r4
   dd6ee:	4630      	mov	r0, r6
   dd6f0:	f7ff ff30 	bl	dd554 <__multiply>
   dd6f4:	4639      	mov	r1, r7
   dd6f6:	4680      	mov	r8, r0
   dd6f8:	4630      	mov	r0, r6
   dd6fa:	f7ff fe3f 	bl	dd37c <_Bfree>
   dd6fe:	4647      	mov	r7, r8
   dd700:	106d      	asrs	r5, r5, #1
   dd702:	d00b      	beq.n	dd71c <__pow5mult+0x90>
   dd704:	6820      	ldr	r0, [r4, #0]
   dd706:	b938      	cbnz	r0, dd718 <__pow5mult+0x8c>
   dd708:	4622      	mov	r2, r4
   dd70a:	4621      	mov	r1, r4
   dd70c:	4630      	mov	r0, r6
   dd70e:	f7ff ff21 	bl	dd554 <__multiply>
   dd712:	6020      	str	r0, [r4, #0]
   dd714:	f8c0 9000 	str.w	r9, [r0]
   dd718:	4604      	mov	r4, r0
   dd71a:	e7e4      	b.n	dd6e6 <__pow5mult+0x5a>
   dd71c:	4638      	mov	r0, r7
   dd71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd722:	bf00      	nop
   dd724:	000dec50 	.word	0x000dec50

000dd728 <__lshift>:
   dd728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd72c:	460c      	mov	r4, r1
   dd72e:	6849      	ldr	r1, [r1, #4]
   dd730:	6923      	ldr	r3, [r4, #16]
   dd732:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dd736:	68a3      	ldr	r3, [r4, #8]
   dd738:	4607      	mov	r7, r0
   dd73a:	4691      	mov	r9, r2
   dd73c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dd740:	f108 0601 	add.w	r6, r8, #1
   dd744:	42b3      	cmp	r3, r6
   dd746:	db3f      	blt.n	dd7c8 <__lshift+0xa0>
   dd748:	4638      	mov	r0, r7
   dd74a:	f7ff fde3 	bl	dd314 <_Balloc>
   dd74e:	2300      	movs	r3, #0
   dd750:	4605      	mov	r5, r0
   dd752:	f100 0114 	add.w	r1, r0, #20
   dd756:	f100 0210 	add.w	r2, r0, #16
   dd75a:	4618      	mov	r0, r3
   dd75c:	4553      	cmp	r3, sl
   dd75e:	db36      	blt.n	dd7ce <__lshift+0xa6>
   dd760:	6920      	ldr	r0, [r4, #16]
   dd762:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dd766:	f104 0314 	add.w	r3, r4, #20
   dd76a:	f019 091f 	ands.w	r9, r9, #31
   dd76e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dd772:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dd776:	d02e      	beq.n	dd7d6 <__lshift+0xae>
   dd778:	f1c9 0e20 	rsb	lr, r9, #32
   dd77c:	468a      	mov	sl, r1
   dd77e:	2200      	movs	r2, #0
   dd780:	6818      	ldr	r0, [r3, #0]
   dd782:	fa00 f009 	lsl.w	r0, r0, r9
   dd786:	4302      	orrs	r2, r0
   dd788:	f84a 2b04 	str.w	r2, [sl], #4
   dd78c:	f853 2b04 	ldr.w	r2, [r3], #4
   dd790:	459c      	cmp	ip, r3
   dd792:	fa22 f20e 	lsr.w	r2, r2, lr
   dd796:	d8f3      	bhi.n	dd780 <__lshift+0x58>
   dd798:	ebac 0304 	sub.w	r3, ip, r4
   dd79c:	3b15      	subs	r3, #21
   dd79e:	f023 0303 	bic.w	r3, r3, #3
   dd7a2:	3304      	adds	r3, #4
   dd7a4:	f104 0015 	add.w	r0, r4, #21
   dd7a8:	4560      	cmp	r0, ip
   dd7aa:	bf88      	it	hi
   dd7ac:	2304      	movhi	r3, #4
   dd7ae:	50ca      	str	r2, [r1, r3]
   dd7b0:	b10a      	cbz	r2, dd7b6 <__lshift+0x8e>
   dd7b2:	f108 0602 	add.w	r6, r8, #2
   dd7b6:	3e01      	subs	r6, #1
   dd7b8:	4638      	mov	r0, r7
   dd7ba:	612e      	str	r6, [r5, #16]
   dd7bc:	4621      	mov	r1, r4
   dd7be:	f7ff fddd 	bl	dd37c <_Bfree>
   dd7c2:	4628      	mov	r0, r5
   dd7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd7c8:	3101      	adds	r1, #1
   dd7ca:	005b      	lsls	r3, r3, #1
   dd7cc:	e7ba      	b.n	dd744 <__lshift+0x1c>
   dd7ce:	f842 0f04 	str.w	r0, [r2, #4]!
   dd7d2:	3301      	adds	r3, #1
   dd7d4:	e7c2      	b.n	dd75c <__lshift+0x34>
   dd7d6:	3904      	subs	r1, #4
   dd7d8:	f853 2b04 	ldr.w	r2, [r3], #4
   dd7dc:	f841 2f04 	str.w	r2, [r1, #4]!
   dd7e0:	459c      	cmp	ip, r3
   dd7e2:	d8f9      	bhi.n	dd7d8 <__lshift+0xb0>
   dd7e4:	e7e7      	b.n	dd7b6 <__lshift+0x8e>

000dd7e6 <__mcmp>:
   dd7e6:	b530      	push	{r4, r5, lr}
   dd7e8:	6902      	ldr	r2, [r0, #16]
   dd7ea:	690c      	ldr	r4, [r1, #16]
   dd7ec:	1b12      	subs	r2, r2, r4
   dd7ee:	d10e      	bne.n	dd80e <__mcmp+0x28>
   dd7f0:	f100 0314 	add.w	r3, r0, #20
   dd7f4:	3114      	adds	r1, #20
   dd7f6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dd7fa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dd7fe:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dd802:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dd806:	42a5      	cmp	r5, r4
   dd808:	d003      	beq.n	dd812 <__mcmp+0x2c>
   dd80a:	d305      	bcc.n	dd818 <__mcmp+0x32>
   dd80c:	2201      	movs	r2, #1
   dd80e:	4610      	mov	r0, r2
   dd810:	bd30      	pop	{r4, r5, pc}
   dd812:	4283      	cmp	r3, r0
   dd814:	d3f3      	bcc.n	dd7fe <__mcmp+0x18>
   dd816:	e7fa      	b.n	dd80e <__mcmp+0x28>
   dd818:	f04f 32ff 	mov.w	r2, #4294967295
   dd81c:	e7f7      	b.n	dd80e <__mcmp+0x28>

000dd81e <__mdiff>:
   dd81e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd822:	460c      	mov	r4, r1
   dd824:	4606      	mov	r6, r0
   dd826:	4611      	mov	r1, r2
   dd828:	4620      	mov	r0, r4
   dd82a:	4617      	mov	r7, r2
   dd82c:	f7ff ffdb 	bl	dd7e6 <__mcmp>
   dd830:	1e05      	subs	r5, r0, #0
   dd832:	d108      	bne.n	dd846 <__mdiff+0x28>
   dd834:	4629      	mov	r1, r5
   dd836:	4630      	mov	r0, r6
   dd838:	f7ff fd6c 	bl	dd314 <_Balloc>
   dd83c:	2301      	movs	r3, #1
   dd83e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dd842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd846:	bfa4      	itt	ge
   dd848:	463b      	movge	r3, r7
   dd84a:	4627      	movge	r7, r4
   dd84c:	4630      	mov	r0, r6
   dd84e:	6879      	ldr	r1, [r7, #4]
   dd850:	bfa6      	itte	ge
   dd852:	461c      	movge	r4, r3
   dd854:	2500      	movge	r5, #0
   dd856:	2501      	movlt	r5, #1
   dd858:	f7ff fd5c 	bl	dd314 <_Balloc>
   dd85c:	693e      	ldr	r6, [r7, #16]
   dd85e:	60c5      	str	r5, [r0, #12]
   dd860:	6925      	ldr	r5, [r4, #16]
   dd862:	f107 0114 	add.w	r1, r7, #20
   dd866:	f104 0914 	add.w	r9, r4, #20
   dd86a:	f100 0e14 	add.w	lr, r0, #20
   dd86e:	f107 0210 	add.w	r2, r7, #16
   dd872:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd876:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd87a:	46f2      	mov	sl, lr
   dd87c:	2700      	movs	r7, #0
   dd87e:	f859 3b04 	ldr.w	r3, [r9], #4
   dd882:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd886:	fa1f f883 	uxth.w	r8, r3
   dd88a:	fa17 f78b 	uxtah	r7, r7, fp
   dd88e:	0c1b      	lsrs	r3, r3, #16
   dd890:	eba7 0808 	sub.w	r8, r7, r8
   dd894:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd898:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd89c:	fa1f f888 	uxth.w	r8, r8
   dd8a0:	141f      	asrs	r7, r3, #16
   dd8a2:	454d      	cmp	r5, r9
   dd8a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd8a8:	f84a 3b04 	str.w	r3, [sl], #4
   dd8ac:	d8e7      	bhi.n	dd87e <__mdiff+0x60>
   dd8ae:	1b2b      	subs	r3, r5, r4
   dd8b0:	3b15      	subs	r3, #21
   dd8b2:	f023 0303 	bic.w	r3, r3, #3
   dd8b6:	3304      	adds	r3, #4
   dd8b8:	3415      	adds	r4, #21
   dd8ba:	42a5      	cmp	r5, r4
   dd8bc:	bf38      	it	cc
   dd8be:	2304      	movcc	r3, #4
   dd8c0:	4419      	add	r1, r3
   dd8c2:	4473      	add	r3, lr
   dd8c4:	469e      	mov	lr, r3
   dd8c6:	460d      	mov	r5, r1
   dd8c8:	4565      	cmp	r5, ip
   dd8ca:	d30e      	bcc.n	dd8ea <__mdiff+0xcc>
   dd8cc:	f10c 0203 	add.w	r2, ip, #3
   dd8d0:	1a52      	subs	r2, r2, r1
   dd8d2:	f022 0203 	bic.w	r2, r2, #3
   dd8d6:	3903      	subs	r1, #3
   dd8d8:	458c      	cmp	ip, r1
   dd8da:	bf38      	it	cc
   dd8dc:	2200      	movcc	r2, #0
   dd8de:	441a      	add	r2, r3
   dd8e0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd8e4:	b17b      	cbz	r3, dd906 <__mdiff+0xe8>
   dd8e6:	6106      	str	r6, [r0, #16]
   dd8e8:	e7ab      	b.n	dd842 <__mdiff+0x24>
   dd8ea:	f855 8b04 	ldr.w	r8, [r5], #4
   dd8ee:	fa17 f488 	uxtah	r4, r7, r8
   dd8f2:	1422      	asrs	r2, r4, #16
   dd8f4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd8f8:	b2a4      	uxth	r4, r4
   dd8fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd8fe:	f84e 4b04 	str.w	r4, [lr], #4
   dd902:	1417      	asrs	r7, r2, #16
   dd904:	e7e0      	b.n	dd8c8 <__mdiff+0xaa>
   dd906:	3e01      	subs	r6, #1
   dd908:	e7ea      	b.n	dd8e0 <__mdiff+0xc2>
	...

000dd90c <__ulp>:
   dd90c:	b082      	sub	sp, #8
   dd90e:	ed8d 0b00 	vstr	d0, [sp]
   dd912:	9b01      	ldr	r3, [sp, #4]
   dd914:	4912      	ldr	r1, [pc, #72]	; (dd960 <__ulp+0x54>)
   dd916:	4019      	ands	r1, r3
   dd918:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd91c:	2900      	cmp	r1, #0
   dd91e:	dd05      	ble.n	dd92c <__ulp+0x20>
   dd920:	2200      	movs	r2, #0
   dd922:	460b      	mov	r3, r1
   dd924:	ec43 2b10 	vmov	d0, r2, r3
   dd928:	b002      	add	sp, #8
   dd92a:	4770      	bx	lr
   dd92c:	4249      	negs	r1, r1
   dd92e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd932:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd936:	f04f 0200 	mov.w	r2, #0
   dd93a:	f04f 0300 	mov.w	r3, #0
   dd93e:	da04      	bge.n	dd94a <__ulp+0x3e>
   dd940:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd944:	fa41 f300 	asr.w	r3, r1, r0
   dd948:	e7ec      	b.n	dd924 <__ulp+0x18>
   dd94a:	f1a0 0114 	sub.w	r1, r0, #20
   dd94e:	291e      	cmp	r1, #30
   dd950:	bfda      	itte	le
   dd952:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd956:	fa20 f101 	lsrle.w	r1, r0, r1
   dd95a:	2101      	movgt	r1, #1
   dd95c:	460a      	mov	r2, r1
   dd95e:	e7e1      	b.n	dd924 <__ulp+0x18>
   dd960:	7ff00000 	.word	0x7ff00000

000dd964 <__b2d>:
   dd964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd966:	6905      	ldr	r5, [r0, #16]
   dd968:	f100 0714 	add.w	r7, r0, #20
   dd96c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd970:	1f2e      	subs	r6, r5, #4
   dd972:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd976:	4620      	mov	r0, r4
   dd978:	f7ff fd93 	bl	dd4a2 <__hi0bits>
   dd97c:	f1c0 0320 	rsb	r3, r0, #32
   dd980:	280a      	cmp	r0, #10
   dd982:	f8df c07c 	ldr.w	ip, [pc, #124]	; dda00 <__b2d+0x9c>
   dd986:	600b      	str	r3, [r1, #0]
   dd988:	dc14      	bgt.n	dd9b4 <__b2d+0x50>
   dd98a:	f1c0 0e0b 	rsb	lr, r0, #11
   dd98e:	fa24 f10e 	lsr.w	r1, r4, lr
   dd992:	42b7      	cmp	r7, r6
   dd994:	ea41 030c 	orr.w	r3, r1, ip
   dd998:	bf34      	ite	cc
   dd99a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd99e:	2100      	movcs	r1, #0
   dd9a0:	3015      	adds	r0, #21
   dd9a2:	fa04 f000 	lsl.w	r0, r4, r0
   dd9a6:	fa21 f10e 	lsr.w	r1, r1, lr
   dd9aa:	ea40 0201 	orr.w	r2, r0, r1
   dd9ae:	ec43 2b10 	vmov	d0, r2, r3
   dd9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd9b4:	42b7      	cmp	r7, r6
   dd9b6:	bf3a      	itte	cc
   dd9b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd9bc:	f1a5 0608 	subcc.w	r6, r5, #8
   dd9c0:	2100      	movcs	r1, #0
   dd9c2:	380b      	subs	r0, #11
   dd9c4:	d017      	beq.n	dd9f6 <__b2d+0x92>
   dd9c6:	f1c0 0c20 	rsb	ip, r0, #32
   dd9ca:	fa04 f500 	lsl.w	r5, r4, r0
   dd9ce:	42be      	cmp	r6, r7
   dd9d0:	fa21 f40c 	lsr.w	r4, r1, ip
   dd9d4:	ea45 0504 	orr.w	r5, r5, r4
   dd9d8:	bf8c      	ite	hi
   dd9da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd9de:	2400      	movls	r4, #0
   dd9e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd9e4:	fa01 f000 	lsl.w	r0, r1, r0
   dd9e8:	fa24 f40c 	lsr.w	r4, r4, ip
   dd9ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd9f0:	ea40 0204 	orr.w	r2, r0, r4
   dd9f4:	e7db      	b.n	dd9ae <__b2d+0x4a>
   dd9f6:	ea44 030c 	orr.w	r3, r4, ip
   dd9fa:	460a      	mov	r2, r1
   dd9fc:	e7d7      	b.n	dd9ae <__b2d+0x4a>
   dd9fe:	bf00      	nop
   dda00:	3ff00000 	.word	0x3ff00000

000dda04 <__d2b>:
   dda04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dda08:	4689      	mov	r9, r1
   dda0a:	2101      	movs	r1, #1
   dda0c:	ec57 6b10 	vmov	r6, r7, d0
   dda10:	4690      	mov	r8, r2
   dda12:	f7ff fc7f 	bl	dd314 <_Balloc>
   dda16:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dda1a:	4604      	mov	r4, r0
   dda1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dda20:	bb35      	cbnz	r5, dda70 <__d2b+0x6c>
   dda22:	2e00      	cmp	r6, #0
   dda24:	9301      	str	r3, [sp, #4]
   dda26:	d028      	beq.n	dda7a <__d2b+0x76>
   dda28:	4668      	mov	r0, sp
   dda2a:	9600      	str	r6, [sp, #0]
   dda2c:	f7ff fd59 	bl	dd4e2 <__lo0bits>
   dda30:	9900      	ldr	r1, [sp, #0]
   dda32:	b300      	cbz	r0, dda76 <__d2b+0x72>
   dda34:	9a01      	ldr	r2, [sp, #4]
   dda36:	f1c0 0320 	rsb	r3, r0, #32
   dda3a:	fa02 f303 	lsl.w	r3, r2, r3
   dda3e:	430b      	orrs	r3, r1
   dda40:	40c2      	lsrs	r2, r0
   dda42:	6163      	str	r3, [r4, #20]
   dda44:	9201      	str	r2, [sp, #4]
   dda46:	9b01      	ldr	r3, [sp, #4]
   dda48:	61a3      	str	r3, [r4, #24]
   dda4a:	2b00      	cmp	r3, #0
   dda4c:	bf14      	ite	ne
   dda4e:	2202      	movne	r2, #2
   dda50:	2201      	moveq	r2, #1
   dda52:	6122      	str	r2, [r4, #16]
   dda54:	b1d5      	cbz	r5, dda8c <__d2b+0x88>
   dda56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dda5a:	4405      	add	r5, r0
   dda5c:	f8c9 5000 	str.w	r5, [r9]
   dda60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dda64:	f8c8 0000 	str.w	r0, [r8]
   dda68:	4620      	mov	r0, r4
   dda6a:	b003      	add	sp, #12
   dda6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dda70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dda74:	e7d5      	b.n	dda22 <__d2b+0x1e>
   dda76:	6161      	str	r1, [r4, #20]
   dda78:	e7e5      	b.n	dda46 <__d2b+0x42>
   dda7a:	a801      	add	r0, sp, #4
   dda7c:	f7ff fd31 	bl	dd4e2 <__lo0bits>
   dda80:	9b01      	ldr	r3, [sp, #4]
   dda82:	6163      	str	r3, [r4, #20]
   dda84:	2201      	movs	r2, #1
   dda86:	6122      	str	r2, [r4, #16]
   dda88:	3020      	adds	r0, #32
   dda8a:	e7e3      	b.n	dda54 <__d2b+0x50>
   dda8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dda90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dda94:	f8c9 0000 	str.w	r0, [r9]
   dda98:	6918      	ldr	r0, [r3, #16]
   dda9a:	f7ff fd02 	bl	dd4a2 <__hi0bits>
   dda9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ddaa2:	e7df      	b.n	dda64 <__d2b+0x60>

000ddaa4 <__ratio>:
   ddaa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddaa8:	4688      	mov	r8, r1
   ddaaa:	4669      	mov	r1, sp
   ddaac:	4681      	mov	r9, r0
   ddaae:	f7ff ff59 	bl	dd964 <__b2d>
   ddab2:	a901      	add	r1, sp, #4
   ddab4:	4640      	mov	r0, r8
   ddab6:	ec55 4b10 	vmov	r4, r5, d0
   ddaba:	f7ff ff53 	bl	dd964 <__b2d>
   ddabe:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ddac2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ddac6:	eba3 0c02 	sub.w	ip, r3, r2
   ddaca:	e9dd 3200 	ldrd	r3, r2, [sp]
   ddace:	1a9b      	subs	r3, r3, r2
   ddad0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ddad4:	ec51 0b10 	vmov	r0, r1, d0
   ddad8:	2b00      	cmp	r3, #0
   ddada:	bfd6      	itet	le
   ddadc:	460a      	movle	r2, r1
   ddade:	462a      	movgt	r2, r5
   ddae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ddae4:	468b      	mov	fp, r1
   ddae6:	462f      	mov	r7, r5
   ddae8:	bfd4      	ite	le
   ddaea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ddaee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ddaf2:	4620      	mov	r0, r4
   ddaf4:	ee10 2a10 	vmov	r2, s0
   ddaf8:	465b      	mov	r3, fp
   ddafa:	4639      	mov	r1, r7
   ddafc:	f7fd fed0 	bl	db8a0 <__aeabi_ddiv>
   ddb00:	ec41 0b10 	vmov	d0, r0, r1
   ddb04:	b003      	add	sp, #12
   ddb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ddb0a <__copybits>:
   ddb0a:	3901      	subs	r1, #1
   ddb0c:	b570      	push	{r4, r5, r6, lr}
   ddb0e:	1149      	asrs	r1, r1, #5
   ddb10:	6914      	ldr	r4, [r2, #16]
   ddb12:	3101      	adds	r1, #1
   ddb14:	f102 0314 	add.w	r3, r2, #20
   ddb18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ddb1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ddb20:	1f05      	subs	r5, r0, #4
   ddb22:	42a3      	cmp	r3, r4
   ddb24:	d30c      	bcc.n	ddb40 <__copybits+0x36>
   ddb26:	1aa3      	subs	r3, r4, r2
   ddb28:	3b11      	subs	r3, #17
   ddb2a:	f023 0303 	bic.w	r3, r3, #3
   ddb2e:	3211      	adds	r2, #17
   ddb30:	42a2      	cmp	r2, r4
   ddb32:	bf88      	it	hi
   ddb34:	2300      	movhi	r3, #0
   ddb36:	4418      	add	r0, r3
   ddb38:	2300      	movs	r3, #0
   ddb3a:	4288      	cmp	r0, r1
   ddb3c:	d305      	bcc.n	ddb4a <__copybits+0x40>
   ddb3e:	bd70      	pop	{r4, r5, r6, pc}
   ddb40:	f853 6b04 	ldr.w	r6, [r3], #4
   ddb44:	f845 6f04 	str.w	r6, [r5, #4]!
   ddb48:	e7eb      	b.n	ddb22 <__copybits+0x18>
   ddb4a:	f840 3b04 	str.w	r3, [r0], #4
   ddb4e:	e7f4      	b.n	ddb3a <__copybits+0x30>

000ddb50 <__any_on>:
   ddb50:	f100 0214 	add.w	r2, r0, #20
   ddb54:	6900      	ldr	r0, [r0, #16]
   ddb56:	114b      	asrs	r3, r1, #5
   ddb58:	4298      	cmp	r0, r3
   ddb5a:	b510      	push	{r4, lr}
   ddb5c:	db11      	blt.n	ddb82 <__any_on+0x32>
   ddb5e:	dd0a      	ble.n	ddb76 <__any_on+0x26>
   ddb60:	f011 011f 	ands.w	r1, r1, #31
   ddb64:	d007      	beq.n	ddb76 <__any_on+0x26>
   ddb66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ddb6a:	fa24 f001 	lsr.w	r0, r4, r1
   ddb6e:	fa00 f101 	lsl.w	r1, r0, r1
   ddb72:	428c      	cmp	r4, r1
   ddb74:	d10b      	bne.n	ddb8e <__any_on+0x3e>
   ddb76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ddb7a:	4293      	cmp	r3, r2
   ddb7c:	d803      	bhi.n	ddb86 <__any_on+0x36>
   ddb7e:	2000      	movs	r0, #0
   ddb80:	bd10      	pop	{r4, pc}
   ddb82:	4603      	mov	r3, r0
   ddb84:	e7f7      	b.n	ddb76 <__any_on+0x26>
   ddb86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ddb8a:	2900      	cmp	r1, #0
   ddb8c:	d0f5      	beq.n	ddb7a <__any_on+0x2a>
   ddb8e:	2001      	movs	r0, #1
   ddb90:	e7f6      	b.n	ddb80 <__any_on+0x30>

000ddb92 <_calloc_r>:
   ddb92:	b513      	push	{r0, r1, r4, lr}
   ddb94:	434a      	muls	r2, r1
   ddb96:	4611      	mov	r1, r2
   ddb98:	9201      	str	r2, [sp, #4]
   ddb9a:	f7fa f843 	bl	d7c24 <_malloc_r>
   ddb9e:	4604      	mov	r4, r0
   ddba0:	b118      	cbz	r0, ddbaa <_calloc_r+0x18>
   ddba2:	9a01      	ldr	r2, [sp, #4]
   ddba4:	2100      	movs	r1, #0
   ddba6:	f7fe f8df 	bl	dbd68 <memset>
   ddbaa:	4620      	mov	r0, r4
   ddbac:	b002      	add	sp, #8
   ddbae:	bd10      	pop	{r4, pc}

000ddbb0 <__ascii_wctomb>:
   ddbb0:	b149      	cbz	r1, ddbc6 <__ascii_wctomb+0x16>
   ddbb2:	2aff      	cmp	r2, #255	; 0xff
   ddbb4:	bf85      	ittet	hi
   ddbb6:	238a      	movhi	r3, #138	; 0x8a
   ddbb8:	6003      	strhi	r3, [r0, #0]
   ddbba:	700a      	strbls	r2, [r1, #0]
   ddbbc:	f04f 30ff 	movhi.w	r0, #4294967295
   ddbc0:	bf98      	it	ls
   ddbc2:	2001      	movls	r0, #1
   ddbc4:	4770      	bx	lr
   ddbc6:	4608      	mov	r0, r1
   ddbc8:	4770      	bx	lr
	...

000ddbcc <__aeabi_d2lz>:
   ddbcc:	b538      	push	{r3, r4, r5, lr}
   ddbce:	2200      	movs	r2, #0
   ddbd0:	2300      	movs	r3, #0
   ddbd2:	4604      	mov	r4, r0
   ddbd4:	460d      	mov	r5, r1
   ddbd6:	f7fd ffab 	bl	dbb30 <__aeabi_dcmplt>
   ddbda:	b928      	cbnz	r0, ddbe8 <__aeabi_d2lz+0x1c>
   ddbdc:	4620      	mov	r0, r4
   ddbde:	4629      	mov	r1, r5
   ddbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ddbe4:	f7fe b87a 	b.w	dbcdc <__aeabi_d2ulz>
   ddbe8:	4620      	mov	r0, r4
   ddbea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ddbee:	f7fe f875 	bl	dbcdc <__aeabi_d2ulz>
   ddbf2:	4240      	negs	r0, r0
   ddbf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddbf8:	bd38      	pop	{r3, r4, r5, pc}
   ddbfa:	bf00      	nop

000ddbfc <dynalib_user>:
   ddbfc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   ddc0c:	0000 0000 6925 2500 696c 6f00 7475 7000     ....%i.%li.out.p
   ddc1c:	6d77 6400 0077 7761 7600 0077 7276 6200     wm.dw.aw.vw.vr.b
   ddc2c:	796c 6b6e 632d 6f6c 6475 632e 6d6f 6300     lynk-cloud.com.c
   ddc3c:	726c 5700 4669 2069 6f63 6e6e 6365 6574     lr.WiFi connecte
   ddc4c:	0a64 6d00 5f6c 6f74 635f 6c6f 656c 7463     d..ml_to_collect
   ddc5c:	7320 7465 7420 3a6f 0020 6d20 0a4c 7300      set to: . mL..s
   ddc6c:	6d61 6c70 2065 6e69 6574 7672 6c61 7320     ample interval s
   ddc7c:	7465 7420 3a6f 0020 6d20 6e69 000a 6874     et to: . min..th
   ddc8c:	6572 6873 6c6f 2064 6573 2074 6f74 203a     reshold set to: 
   ddc9c:	2000 6d63 000a 6173 706d 656c 625f 746f     . cm..sample_bot
   ddcac:	6c74 5f65 4c6d 7320 7465 7420 3a6f 0020     tle_mL set to: .
   ddcbc:	3225 332e 0066 7246 6d6f 2520 2073 6f74     %2.3f.From %s to
   ddccc:	2520 0073 6148 746c 6465 6920 206e 7265      %s.Halted in er
   ddcdc:	6f72 2072 7473 7461 0a65 4c00 7665 6c65     ror state..Level
   ddcec:	635f 006d 7352 6973 5300 6769 0053 4242     _cm.Rssi.SigS.BB
   ddcfc:	4646 592d 5245 3643 766b 444b 4172 6b4e     FF-YERC6kvKDrANk
   ddd0c:	7065 6157 4b51 5542 5557 5447 6c55 5554     epWaQKBUWUGTUlTU
   ddd1c:	005a                                        Z.

000ddd1e <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   ddd1e:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   ddd2e:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   ddd3e:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   ddd4e:	6974 6c63 0065 7562 6c69 0064 614a 206e     ticle.build.Jan 
   ddd5e:	3332 3220 3230 2031 3132 343a 3a39 3833     23 2021 21:49:38
   ddd6e:	0000 0000 0000                              ......

000ddd74 <_ZTV12AccelStepper>:
	...
   ddd7c:	5ae9 000d 5b19 000d 59df 000d 591b 000d     .Z...[...Y...Y..
   ddd8c:	5a69 000d 5a21 000d 5a7d 000d 5a9f 000d     iZ..!Z..}Z...Z..
   ddd9c:	5ac7 000d 595b 000d 59a5 000d 7441 6574     .Z..[Y...Y..Atte
   dddac:	706d 6974 676e 7420 206f 6572 6f63 6e6e     mpting to reconn
   dddbc:	6365 0074 7254 6979 676e 7420 206f 6f63     ect.Trying to co
   dddcc:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   ddddc:	6d65 7470 6e20 6d75 6562 3a72 0020 6974     empt number: .ti
   dddec:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   dddfc:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   dde0c:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   dde1c:	5300 7265 6576 2772 2073 6572 7073 6e6f     .Server's respon
   dde2c:	6573 003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d     se:..----------.
   dde3c:	4f50 5453 4f00 004b 6f43 6c75 2064 6f6e     POST.OK.Could no
   dde4c:	2074 6f63 6e6e 6365 2074 6f74 7420 6568     t connect to the
   dde5c:	6820 736f 0074 4c7c 7c56 5000 7961 6f6c      host.|LV|.Paylo
   dde6c:	6461 6620 726f 7220 7165 6575 7473 003a     ad for request:.
   dde7c:	2d0a 2d2d 002d 564c 4500 5252 524f 6320     .----.LV.ERROR c
   dde8c:	756f 646c 6e20 746f 6320 6e6f 656e 7463     ould not connect
   dde9c:	7420 206f 6874 2065 6573 7672 7265 0000      to the server..

000ddeac <_ZTV6UbiTCP>:
	...
   ddeb4:	61c9 000d 626d 000d 5fb7 000d 6f59 2075     .a..mb..._..You 
   ddec4:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
   dded4:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
   ddee4:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
   ddef4:	7620 7261 6169 6c62 7365 2500 3731 0067      variables.%17g.
   ddf04:	007b 7325 2522 2273 7b3a 7622 6c61 6575     {.%s"%s":{"value
   ddf14:	3a22 7325 2500 2c73 7422 6d69 7365 6174     ":%s.%s,"timesta
   ddf24:	706d 3a22 6c25 0075 6425 6425 6425 2500     mp":%lu.%d%d%d.%
   ddf34:	2573 0073 7325 3030 0030 7325 222c 6f63     s%s.%s000.%s,"co
   ddf44:	746e 7865 2274 203a 257b 7d73 2500 2c73     ntext": {%s}.%s,
   ddf54:	7000 7961 6f6c 6461 003a 6255 6469 746f     .payload:.Ubidot
   ddf64:	5073 7261 6974 6c63 2f65 2e33 0031 7325     sParticle/3.1.%s
   ddf74:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   ddf84:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   ddf94:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   ddfa4:	676e 6420 7461 2e61 2e2e 6900 646e 7375     ng data....indus
   ddfb4:	7274 6169 2e6c 7061 2e69 6275 6469 746f     trial.api.ubidot
   ddfc4:	2e73 6f63 006d 7441 6574 706d 2074 6966     s.com.Attempt fi
   ddfd4:	696e 6873 6465 5000 534f 2054 612f 6970     nished.POST /api
   ddfe4:	762f 2e31 2f36 6564 6976 6563 2f73 2000     /v1.6/devices/. 
   ddff4:	5448 5054 312f 312e 0a0d 4800 736f 3a74     HTTP/1.1...Host:
   de004:	0020 7355 7265 412d 6567 746e 203a 5800      .User-Agent: .X
   de014:	412d 7475 2d68 6f54 656b 3a6e 0020 6f43     -Auth-Token: .Co
   de024:	6e6e 6365 6974 6e6f 203a 6c63 736f 0d65     nnection: close.
   de034:	000a 6f43 746e 6e65 2d74 7954 6570 203a     ..Content-Type: 
   de044:	7061 6c70 6369 7461 6f69 2f6e 736a 6e6f     application/json
   de054:	0a0d 4300 6e6f 6574 746e 4c2d 6e65 7467     ...Content-Lengt
   de064:	3a68 0020 614d 696b 676e 7220 7165 6575     h: .Making reque
   de074:	7473 7420 206f 6255 6469 746f 3a73 000a     st to Ubidots:..
   de084:	6177 7469 6e69 2067 6f66 2072 6573 7672     waiting for serv
   de094:	7265 6120 736e 6577 2072 2e2e 002e 550a     er answer .....U
   de0a4:	6962 6f64 7374 2027 6553 7672 7265 7220     bidots' Server r
   de0b4:	7365 6f70 736e 3a65 000a 6f43 6c75 2064     esponse:..Could 
   de0c4:	6f6e 2074 6573 646e 6420 7461 2061 6f74     not send data to
   de0d4:	7520 6962 6f64 7374 7520 6973 676e 4820      ubidots using H
   de0e4:	5454 0050 4547 2054 612f 6970 762f 2e31     TTP.GET /api/v1.
   de0f4:	2f36 6564 6976 6563 2f73 2f00 766c 4300     6/devices/./lv.C
   de104:	6e6f 6574 746e 542d 7079 3a65 6120 7070     ontent-Type: app
   de114:	696c 6163 6974 6e6f 6a2f 6f73 0d6e 0d0a     lication/json...
   de124:	000a 6f43 6e6e 6365 6974 6e6f 4620 6961     ..Connection Fai
   de134:	656c 2064 6275 6469 746f 2073 202d 7254     led ubidots - Tr
   de144:	2079 6741 6961 006e                         y Again.

000de14c <_ZTV7UbiHTTP>:
	...
   de154:	6c6d 000d 6e9d 000d 6a27 000d 575b 7261     ml...n..'j..[War
   de164:	696e 676e 205d 6f43 6c75 2064 6f6e 2074     ning] Could not 
   de174:	6f73 766c 2065 5049 4120 6464 6572 7373     solve IP Address
   de184:	6f20 2066 6874 2065 6572 6f6d 6574 6820      of the remote h
   de194:	736f 2c74 7720 7469 2068 6f79 7275 4420     ost, with your D
   de1a4:	534e 7320 7465 7075 202e 2020 2020 2020     NS setup.       
   de1b4:	2020 2020 550a 6973 676e 6420 6665 7561         .Using defau
   de1c4:	746c 4920 646e 7375 7274 6169 206c 6255     lt Industrial Ub
   de1d4:	6469 746f 2073 5049 203a 3631 2e39 3535     idots IP: 169.55
   de1e4:	362e 2e31 3432 0033 5245 4f52 2052 6573     .61.243.ERROR se
   de1f4:	646e 6e69 2067 6176 756c 7365 7720 7469     nding values wit
   de204:	2068 4455 0050 0000                         h UDP...

000de20c <_ZTV6UbiUDP>:
	...
   de214:	74f1 000d 7489 000d 7495 000d               .t...t...t..

000de220 <_ZTV11UbiParticle>:
	...
   de228:	75d1 000d 75c1 000d 75cd 000d               .u...u...u..

000de234 <_ZL22BlynkReadHandlerVector>:
   de234:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de244:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de254:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de264:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de274:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de284:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de294:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2a4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2b4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2c4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2d4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2e4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de2f4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de304:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de314:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de324:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de334:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de344:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de354:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de364:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de374:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de384:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de394:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3a4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3b4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3c4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3d4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3e4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de3f4:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de404:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de414:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..
   de424:	766d 000d 766d 000d 766d 000d 766d 000d     mv..mv..mv..mv..

000de434 <_ZL23BlynkWriteHandlerVector>:
   de434:	766f 000d 4d75 000d 766f 000d 4dcd 000d     ov..uM..ov...M..
   de444:	4e21 000d 4e69 000d 766f 000d 766f 000d     !N..iN..ov..ov..
   de454:	766f 000d 4339 000d 766f 000d 766f 000d     ov..9C..ov..ov..
   de464:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de474:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de484:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de494:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4a4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4b4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4c4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4d4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4e4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de4f4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de504:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de514:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de524:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de534:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de544:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de554:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de564:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de574:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de584:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de594:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5a4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5b4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5c4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5d4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5e4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de5f4:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de604:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de614:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..
   de624:	766f 000d 766f 000d 766f 000d 766f 000d     ov..ov..ov..ov..

000de634 <_ZTVN5spark13EthernetClassE>:
	...
   de63c:	7cc3 000d 7cb9 000d 7caf 000d 7ca5 000d     .|...|...|...|..
   de64c:	7c99 000d 7c8d 000d 7c81 000d 7c79 000d     .|...|...|..y|..
   de65c:	7c6f 000d 7c65 000d 9865 000d               o|..e|..e...

000de668 <_ZTV3UDP>:
	...
   de670:	63f5 000d 6415 000d 7d71 000d 7e99 000d     .c...d..q}...~..
   de680:	7d69 000d 7d89 000d 7da7 000d 7dc1 000d     i}...}...}...}..
   de690:	7de5 000d 7e7d 000d 817b 000d 7f21 000d     .}..}~..{...!...
   de6a0:	8099 000d 7d51 000d 8265 000d 8021 000d     ....Q}..e...!...
   de6b0:	7f59 000d 8293 000d 7ec3 000d 7d5f 000d     Y........~.._}..
   de6c0:	7f01 000d 7d65 000d 7dc3 000d fff0 ffff     ....e}...}......
   de6d0:	0000 0000 7ddd 000d                         .....}..

000de6d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   de6e0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   de6f0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000de700 <_ZTV14CellularSignal>:
	...
   de708:	85e9 000d 85ef 000d 85eb 000d 85fd 000d     ................
   de718:	8631 000d 865d 000d 8691 000d 86e1 000d     1...]...........
   de728:	fffc ffff 0000 0000 8707 000d               ............

000de734 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de73c:	884d 000d 8853 000d 8891 000d 8861 000d     M...S.......a...
   de74c:	884f 000d                                   O...

000de750 <_ZTV9IPAddress>:
	...
   de758:	8d95 000d 8d85 000d 8d87 000d               ............

000de764 <_ZTV9USBSerial>:
	...
   de76c:	8eb1 000d 8f19 000d 8eef 000d 8361 000d     ............a...
   de77c:	8ee1 000d 8eb3 000d 8ec3 000d 8f13 000d     ................
   de78c:	8ed3 000d 8ead 000d                         ........

000de794 <_ZTVN5spark13CellularClassE>:
	...
   de79c:	9027 000d 901d 000d 9013 000d 8fc9 000d     '...............
   de7ac:	9007 000d 8ffb 000d 8fef 000d 8fe7 000d     ................
   de7bc:	8fdd 000d 8fd3 000d 9865 000d               ........e...

000de7c8 <_ZTV11USARTSerial>:
	...
   de7d0:	90d5 000d 9141 000d 9119 000d 8361 000d     ....A.......a...
   de7e0:	90e9 000d 9105 000d 90f7 000d 9113 000d     ................
   de7f0:	90d7 000d 90db 000d                         ........

000de7f8 <_ZTV7TwoWire>:
	...
   de800:	91f9 000d 9243 000d 921b 000d 91fb 000d     ....C...........
   de810:	9223 000d 922b 000d 9233 000d 923b 000d     #...+...3...;...
   de820:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   de830:	2072 203d 6425 0000                         r = %d..

000de838 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de840:	92f7 000d 9319 000d 97f7 000d 9327 000d     ............'...
   de850:	92f9 000d                                   ....

000de854 <_ZTV9TCPClient>:
	...
   de85c:	5fbd 000d 5ff1 000d 9275 000d 928f 000d     ._..._..u.......
   de86c:	9681 000d 93f3 000d 93c5 000d 92b9 000d     ................
   de87c:	9589 000d 947d 000d 9427 000d 9735 000d     ....}...'...5...
   de88c:	92bb 000d 92ed 000d 92a1 000d 932b 000d     ............+...
   de89c:	93a5 000d                                   ....

000de8a0 <_ZTVN5spark12NetworkClassE>:
	...
   de8a8:	97fd 000d 9807 000d 9811 000d 981b 000d     ................
   de8b8:	9825 000d 9831 000d 983d 000d 9849 000d     %...1...=...I...
   de8c8:	9851 000d 985b 000d 9865 000d               Q...[...e...

000de8d4 <_ZSt7nothrow>:
	...

000de8d5 <_ZTSSt19_Sp_make_shared_tag>:
   de8d5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   de8e5:	6572 5f64 6174 0067 0000                     red_tag....

000de8f0 <_ZTISt19_Sp_make_shared_tag>:
   de8f0:	e930 000d e8d5 000d                         0.......

000de8f8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   de8f8:	e990 000d e904 000d e9b4 000d               ............

000de904 <_ZTSN10__cxxabiv117__class_type_infoE>:
   de904:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   de914:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   de924:	0045 0000                                   E...

000de928 <_ZTVN10__cxxabiv117__class_type_infoE>:
   de928:	0000 0000 e8f8 000d 9d05 000d 9d19 000d     ................
   de938:	9ead 000d 9ead 000d 9d83 000d 9cc5 000d     ................
   de948:	9d6b 000d 9d2d 000d 9cf9 000d               k...-.......

000de954 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   de954:	e990 000d e960 000d e8f8 000d               ....`.......

000de960 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   de960:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   de970:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   de980:	666e 456f 0000 0000                         nfoE....

000de988 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   de988:	0000 0000 e954 000d 9dad 000d 9dc1 000d     ....T...........
   de998:	9ead 000d 9ead 000d 9d83 000d 9cc5 000d     ................
   de9a8:	9e81 000d 9e0d 000d 9dd5 000d               ............

000de9b4 <_ZTISt9type_info>:
   de9b4:	e930 000d e9bc 000d                         0.......

000de9bc <_ZTSSt9type_info>:
   de9bc:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   de9cc:	6f70 0077 7173 7472 0000 0000               pow.sqrt....

000de9d8 <TWO52>:
   de9d8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   de9e8:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000de9f4 <fpi.7566>:
   de9f4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dea04:	0000 0000                                   ....

000dea08 <fpinan.7602>:
   dea08:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dea20 <tinytens>:
   dea20:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dea30:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dea40:	6f43 64ac 0628 1168                         Co.d(.h.

000dea48 <_ctype_>:
   dea48:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dea58:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dea68:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dea78:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dea88:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dea98:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   deaa8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   deab8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   deac8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000deb4c <_C_numeric_locale>:
   deb4c:	e0a0 000d e125 000d dfb8 2003 0043 4f50     ....%...... C.PO
   deb5c:	4953 0058                                   SIX.

000deb60 <__mprec_bigtens>:
   deb60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   deb70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   deb80:	bf3c 7f73 4fdd 7515                         <.s..O.u

000deb88 <__mprec_tens>:
   deb88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   deb98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   deba8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   debb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   debc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   debd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   debe8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   debf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dec08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dec18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dec28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dec38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dec48:	9db4 79d9 7843 44ea                         ...yCx.D

000dec50 <p05.7490>:
   dec50:	0005 0000 0019 0000 007d 0000               ........}...

000dec5c <link_const_variable_data_end>:
   dec5c:	000d5699 	.word	0x000d5699
   dec60:	000d63d1 	.word	0x000d63d1
   dec64:	000d693d 	.word	0x000d693d
   dec68:	000d707d 	.word	0x000d707d
   dec6c:	000d7435 	.word	0x000d7435
   dec70:	000d74b9 	.word	0x000d74b9
   dec74:	000d7ccd 	.word	0x000d7ccd
   dec78:	000d7d15 	.word	0x000d7d15
   dec7c:	000d8339 	.word	0x000d8339
   dec80:	000d8479 	.word	0x000d8479
   dec84:	000d8581 	.word	0x000d8581
   dec88:	000d85cd 	.word	0x000d85cd
   dec8c:	000d90a5 	.word	0x000d90a5
   dec90:	000d9939 	.word	0x000d9939

000dec94 <link_constructors_end>:
	...
