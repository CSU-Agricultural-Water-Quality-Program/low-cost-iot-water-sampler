
c:/Users/edeleon/Documents/Particle/WaterSamplerV4/target/3.0.0/boron/WaterSamplerV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b1c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000df1e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000290  2003dff0  000df1e4  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000570  2003e280  2003e280  0002e280  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000df474  000df474  0001f474  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000df49c  000df49c  0001f49c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002a6552  00000000  00000000  0001f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00025aa7  00000000  00000000  002c59f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000464f2  00000000  00000000  002eb499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003808  00000000  00000000  0033198b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000c090  00000000  00000000  00335193  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a9db  00000000  00000000  00341223  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00060081  00000000  00000000  0038bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00146e92  00000000  00000000  003ebc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ab24  00000000  00000000  00532b14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 f8bb 	bl	dc1ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 f8c3 	bl	dc1c8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dff0 	.word	0x2003dff0
   d404c:	000df1e4 	.word	0x000df1e4
   d4050:	2003e280 	.word	0x2003e280
   d4054:	2003e280 	.word	0x2003e280
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fdd9 	bl	d8c18 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000df1a4 	.word	0x000df1a4
   d4080:	000df1dc 	.word	0x000df1dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd96 	b.w	d4bb4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f989 	bl	d53a0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bd83 	b.w	d8b9c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bec9 	b.w	d7e2c <malloc>

000d409a <_Znaj>:
   d409a:	f003 bec7 	b.w	d7e2c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 becd 	b.w	d7e3c <free>

000d40a2 <_ZdaPv>:
   d40a2:	f003 becb 	b.w	d7e3c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40ba:	4608      	mov	r0, r1
   d40bc:	9101      	str	r1, [sp, #4]
   d40be:	f008 f8ec 	bl	dc29a <strlen>
    if (len + l > buff_size)
   d40c2:	6863      	ldr	r3, [r4, #4]
   d40c4:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40c6:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40c8:	18e8      	adds	r0, r5, r3
   d40ca:	4290      	cmp	r0, r2
   d40cc:	d808      	bhi.n	d40e0 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d40ce:	6820      	ldr	r0, [r4, #0]
   d40d0:	9901      	ldr	r1, [sp, #4]
   d40d2:	462a      	mov	r2, r5
   d40d4:	4418      	add	r0, r3
   d40d6:	f008 f869 	bl	dc1ac <memcpy>
    len += l;
   d40da:	6860      	ldr	r0, [r4, #4]
   d40dc:	4428      	add	r0, r5
   d40de:	6060      	str	r0, [r4, #4]
}
   d40e0:	b003      	add	sp, #12
   d40e2:	bd30      	pop	{r4, r5, pc}

000d40e4 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40e4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40e6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40ea:	6003      	str	r3, [r0, #0]
   d40ec:	4605      	mov	r5, r0
   d40ee:	b17c      	cbz	r4, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000deda0 	.word	0x000deda0

000d4118 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4118:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d411a:	f003 fc4b 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d411e:	4b03      	ldr	r3, [pc, #12]	; (d412c <_ZN10CloudClass7processEv+0x14>)
   d4120:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d4122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d4126:	f003 be51 	b.w	d7dcc <spark_process>
   d412a:	bf00      	nop
   d412c:	2003e7d4 	.word	0x2003e7d4

000d4130 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4130:	6803      	ldr	r3, [r0, #0]
   d4132:	b12b      	cbz	r3, d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4134:	6842      	ldr	r2, [r0, #4]
   d4136:	4293      	cmp	r3, r2
   d4138:	d202      	bcs.n	d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d413a:	4618      	mov	r0, r3
   d413c:	f008 b81f 	b.w	dc17e <atoi>
   d4140:	2000      	movs	r0, #0
   d4142:	4770      	bx	lr

000d4144 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4144:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4146:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4148:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d414a:	b145      	cbz	r5, d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d414c:	6843      	ldr	r3, [r0, #4]
   d414e:	429d      	cmp	r5, r3
   d4150:	d205      	bcs.n	d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d4152:	4628      	mov	r0, r5
   d4154:	f008 f8a1 	bl	dc29a <strlen>
   d4158:	3001      	adds	r0, #1
   d415a:	4405      	add	r5, r0
   d415c:	6025      	str	r5, [r4, #0]
        }
   d415e:	4620      	mov	r0, r4
   d4160:	bd38      	pop	{r3, r4, r5, pc}

000d4162 <_ZN10BlynkParam3addEPKc>:
{
   d4162:	b410      	push	{r4}
   d4164:	4603      	mov	r3, r0
    if (str == NULL) {
   d4166:	460a      	mov	r2, r1
   d4168:	b939      	cbnz	r1, d417a <_ZN10BlynkParam3addEPKc+0x18>
        buff[len++] = '\0';
   d416a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d416e:	1c4c      	adds	r4, r1, #1
   d4170:	605c      	str	r4, [r3, #4]
   d4172:	5442      	strb	r2, [r0, r1]
}
   d4174:	f85d 4b04 	ldr.w	r4, [sp], #4
   d4178:	4770      	bx	lr
   d417a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d417e:	f7ff bf9a 	b.w	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
	...

000d4184 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4184:	b538      	push	{r3, r4, r5, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d418a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d418e:	6825      	ldr	r5, [r4, #0]
   d4190:	4a04      	ldr	r2, [pc, #16]	; (d41a4 <_ZN10BlynkParam3addEi+0x20>)
   d4192:	1a09      	subs	r1, r1, r0
   d4194:	4428      	add	r0, r5
   d4196:	f003 fe61 	bl	d7e5c <snprintf>
   d419a:	6863      	ldr	r3, [r4, #4]
   d419c:	3001      	adds	r0, #1
   d419e:	4403      	add	r3, r0
   d41a0:	6063      	str	r3, [r4, #4]
    }
   d41a2:	bd38      	pop	{r3, r4, r5, pc}
   d41a4:	000de114 	.word	0x000de114

000d41a8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41a8:	b538      	push	{r3, r4, r5, lr}
   d41aa:	4604      	mov	r4, r0
   d41ac:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41ae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41b2:	6825      	ldr	r5, [r4, #0]
   d41b4:	4a04      	ldr	r2, [pc, #16]	; (d41c8 <_ZN10BlynkParam3addEl+0x20>)
   d41b6:	1a09      	subs	r1, r1, r0
   d41b8:	4428      	add	r0, r5
   d41ba:	f003 fe4f 	bl	d7e5c <snprintf>
   d41be:	6863      	ldr	r3, [r4, #4]
   d41c0:	3001      	adds	r0, #1
   d41c2:	4403      	add	r3, r0
   d41c4:	6063      	str	r3, [r4, #4]
    }
   d41c6:	bd38      	pop	{r3, r4, r5, pc}
   d41c8:	000de117 	.word	0x000de117

000d41cc <_Z21check_sample_intervalv>:
    return 1;   // successful sample
   }
   else return 0;   // sample failed
}

bool check_sample_interval(){
   d41cc:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41ce:	f003 fbf1 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
	currentMillis = millis();
   d41d2:	4b06      	ldr	r3, [pc, #24]	; (d41ec <_Z21check_sample_intervalv+0x20>)
   d41d4:	6018      	str	r0, [r3, #0]
	if(currentMillis - old_sample_millis >= sample_interval_ms){
   d41d6:	4b06      	ldr	r3, [pc, #24]	; (d41f0 <_Z21check_sample_intervalv+0x24>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	1ac0      	subs	r0, r0, r3
   d41dc:	4b05      	ldr	r3, [pc, #20]	; (d41f4 <_Z21check_sample_intervalv+0x28>)
   d41de:	681b      	ldr	r3, [r3, #0]
		return 1;
	}	
	else return 0;
}
   d41e0:	4298      	cmp	r0, r3
   d41e2:	bf34      	ite	cc
   d41e4:	2000      	movcc	r0, #0
   d41e6:	2001      	movcs	r0, #1
   d41e8:	bd08      	pop	{r3, pc}
   d41ea:	bf00      	nop
   d41ec:	2003e2e8 	.word	0x2003e2e8
   d41f0:	2003e49c 	.word	0x2003e49c
   d41f4:	2003e4b4 	.word	0x2003e4b4

000d41f8 <_Z19check_sample_numberv>:

bool check_sample_number(){
	float current_bottle_mL = sample_number * ml_to_collect;
	if(current_bottle_mL <= sample_bottle_mL){
   d41f8:	4b0a      	ldr	r3, [pc, #40]	; (d4224 <_Z19check_sample_numberv+0x2c>)
   d41fa:	ed93 7a00 	vldr	s14, [r3]
	float current_bottle_mL = sample_number * ml_to_collect;
   d41fe:	4b0a      	ldr	r3, [pc, #40]	; (d4228 <_Z19check_sample_numberv+0x30>)
   d4200:	681a      	ldr	r2, [r3, #0]
   d4202:	4b0a      	ldr	r3, [pc, #40]	; (d422c <_Z19check_sample_numberv+0x34>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	4353      	muls	r3, r2
   d4208:	ee07 3a90 	vmov	s15, r3
	if(current_bottle_mL <= sample_bottle_mL){
   d420c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float current_bottle_mL = sample_number * ml_to_collect;
   d4210:	eef8 7a67 	vcvt.f32.u32	s15, s15
	if(current_bottle_mL <= sample_bottle_mL){
   d4214:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return 1;
	}
	else return 0;
}
   d421c:	bfac      	ite	ge
   d421e:	2001      	movge	r0, #1
   d4220:	2000      	movlt	r0, #0
   d4222:	4770      	bx	lr
   d4224:	2003e028 	.word	0x2003e028
   d4228:	2003e030 	.word	0x2003e030
   d422c:	2003e494 	.word	0x2003e494

000d4230 <_Z11ReadVoltageh>:
  Serial.println(stateTransitionString);
  Blynk.virtualWrite(V2, stateTransitionString);
  Blynk.virtualWrite(V2, "\n");
}

double ReadVoltage(byte pin){  // read voltage on esp32 w correction
   d4230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
   d4234:	f005 fe37 	bl	d9ea6 <analogRead>
  if(reading < 1 || reading > 4095) return 0;
   d4238:	f640 72fe 	movw	r2, #4094	; 0xffe
   d423c:	1e43      	subs	r3, r0, #1
   d423e:	4293      	cmp	r3, r2
   d4240:	d854      	bhi.n	d42ec <_Z11ReadVoltageh+0xbc>
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
   d4242:	f007 fbc9 	bl	db9d8 <__aeabi_i2d>
   d4246:	4604      	mov	r4, r0
   d4248:	460d      	mov	r5, r1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d424a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; d42f8 <_Z11ReadVoltageh+0xc8>
   d424e:	ec45 4b10 	vmov	d0, r4, r5
   d4252:	f006 f875 	bl	da340 <pow>
   d4256:	ed9f 1b2a 	vldr	d1, [pc, #168]	; d4300 <_Z11ReadVoltageh+0xd0>
   d425a:	ec57 6b10 	vmov	r6, r7, d0
   d425e:	ec45 4b10 	vmov	d0, r4, r5
   d4262:	f006 f86d 	bl	da340 <pow>
  // return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
  return -0.000000000000016 * pow(reading,4) + 0.000000000118171 * pow(reading,3)- 0.000000301211691 * pow(reading,2)+ 0.001109019271794 * reading + 0.034143524634089;
   d4266:	a32a      	add	r3, pc, #168	; (adr r3, d4310 <_Z11ReadVoltageh+0xe0>)
   d4268:	e9d3 2300 	ldrd	r2, r3, [r3]
   d426c:	4630      	mov	r0, r6
   d426e:	4639      	mov	r1, r7
   d4270:	ec59 8b10 	vmov	r8, r9, d0
   d4274:	f007 fc1a 	bl	dbaac <__aeabi_dmul>
   d4278:	a327      	add	r3, pc, #156	; (adr r3, d4318 <_Z11ReadVoltageh+0xe8>)
   d427a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d427e:	4606      	mov	r6, r0
   d4280:	460f      	mov	r7, r1
   d4282:	4640      	mov	r0, r8
   d4284:	4649      	mov	r1, r9
   d4286:	f007 fc11 	bl	dbaac <__aeabi_dmul>
   d428a:	4602      	mov	r2, r0
   d428c:	460b      	mov	r3, r1
   d428e:	4630      	mov	r0, r6
   d4290:	4639      	mov	r1, r7
   d4292:	f007 fa55 	bl	db740 <__adddf3>
   d4296:	4622      	mov	r2, r4
   d4298:	4606      	mov	r6, r0
   d429a:	460f      	mov	r7, r1
   d429c:	462b      	mov	r3, r5
   d429e:	4620      	mov	r0, r4
   d42a0:	4629      	mov	r1, r5
   d42a2:	f007 fc03 	bl	dbaac <__aeabi_dmul>
   d42a6:	a31e      	add	r3, pc, #120	; (adr r3, d4320 <_Z11ReadVoltageh+0xf0>)
   d42a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ac:	f007 fbfe 	bl	dbaac <__aeabi_dmul>
   d42b0:	4602      	mov	r2, r0
   d42b2:	460b      	mov	r3, r1
   d42b4:	4630      	mov	r0, r6
   d42b6:	4639      	mov	r1, r7
   d42b8:	f007 fa40 	bl	db73c <__aeabi_dsub>
   d42bc:	a31a      	add	r3, pc, #104	; (adr r3, d4328 <_Z11ReadVoltageh+0xf8>)
   d42be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c2:	4606      	mov	r6, r0
   d42c4:	460f      	mov	r7, r1
   d42c6:	4620      	mov	r0, r4
   d42c8:	4629      	mov	r1, r5
   d42ca:	f007 fbef 	bl	dbaac <__aeabi_dmul>
   d42ce:	4602      	mov	r2, r0
   d42d0:	460b      	mov	r3, r1
   d42d2:	4630      	mov	r0, r6
   d42d4:	4639      	mov	r1, r7
   d42d6:	f007 fa33 	bl	db740 <__adddf3>
   d42da:	a315      	add	r3, pc, #84	; (adr r3, d4330 <_Z11ReadVoltageh+0x100>)
   d42dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e0:	f007 fa2e 	bl	db740 <__adddf3>
   d42e4:	ec41 0b10 	vmov	d0, r0, r1
} 
   d42e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(reading < 1 || reading > 4095) return 0;
   d42ec:	ed9f 0b06 	vldr	d0, [pc, #24]	; d4308 <_Z11ReadVoltageh+0xd8>
   d42f0:	e7fa      	b.n	d42e8 <_Z11ReadVoltageh+0xb8>
   d42f2:	bf00      	nop
   d42f4:	f3af 8000 	nop.w
   d42f8:	00000000 	.word	0x00000000
   d42fc:	40100000 	.word	0x40100000
   d4300:	00000000 	.word	0x00000000
   d4304:	40080000 	.word	0x40080000
	...
   d4310:	9ee75616 	.word	0x9ee75616
   d4314:	bd1203af 	.word	0xbd1203af
   d4318:	be3de60b 	.word	0xbe3de60b
   d431c:	3de03dc5 	.word	0x3de03dc5
   d4320:	06d63921 	.word	0x06d63921
   d4324:	3e9436c7 	.word	0x3e9436c7
   d4328:	6030f8a1 	.word	0x6030f8a1
   d432c:	3f522b90 	.word	0x3f522b90
   d4330:	9358dfd2 	.word	0x9358dfd2
   d4334:	3fa17b42 	.word	0x3fa17b42

000d4338 <BlynkWidgetWrite9>:
  Blynk.virtualWrite(V2, sample_bottle_mL); 
  Blynk.virtualWrite(V2, " mL\n");
}

BLYNK_WRITE(V9) // get button value from blynk
{
   d4338:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   d433a:	6808      	ldr	r0, [r1, #0]
   d433c:	f007 ff1f 	bl	dc17e <atoi>
  int pinValue = param.asInt();
  sample_now=pinValue;
   d4340:	4b02      	ldr	r3, [pc, #8]	; (d434c <BlynkWidgetWrite9+0x14>)
   d4342:	3800      	subs	r0, #0
   d4344:	bf18      	it	ne
   d4346:	2001      	movne	r0, #1
   d4348:	7018      	strb	r0, [r3, #0]
 // Serial.print("sample_now: ");Serial.println(sample_now);
}
   d434a:	bd08      	pop	{r3, pc}
   d434c:	2003e4b8 	.word	0x2003e4b8

000d4350 <_ZN10MeanFilterIlE8AddValueEl>:
	_windowSize = windowSize;
	_count = 0;
}

template<typename T>
T MeanFilter<T>::AddValue(const T value)
   d4350:	b530      	push	{r4, r5, lr}
{
	_sum += value;
   d4352:	6903      	ldr	r3, [r0, #16]
   d4354:	440b      	add	r3, r1
   d4356:	6103      	str	r3, [r0, #16]

	if (_count >= _windowSize)
   d4358:	1d02      	adds	r2, r0, #4
   d435a:	ca34      	ldmia	r2, {r2, r4, r5}
   d435c:	42a5      	cmp	r5, r4
		_sum -= *_accessor;
   d435e:	bfa2      	ittt	ge
   d4360:	6814      	ldrge	r4, [r2, #0]
   d4362:	1b1b      	subge	r3, r3, r4
   d4364:	6103      	strge	r3, [r0, #16]
}

template<typename T>
inline void MeanFilter<T>::addToBuffer(const T value)
{
	*_accessor = value;
   d4366:	6011      	str	r1, [r2, #0]
	
	++_accessor;
   d4368:	6843      	ldr	r3, [r0, #4]
	if (_accessor >= _items + _windowSize)
   d436a:	6801      	ldr	r1, [r0, #0]
   d436c:	6882      	ldr	r2, [r0, #8]
	++_accessor;
   d436e:	3304      	adds	r3, #4
	if (_accessor >= _items + _windowSize)
   d4370:	eb01 0482 	add.w	r4, r1, r2, lsl #2
		_accessor = _items;
   d4374:	42a3      	cmp	r3, r4
   d4376:	bf28      	it	cs
   d4378:	460b      	movcs	r3, r1
   d437a:	6043      	str	r3, [r0, #4]
}

template<typename T>
inline void MeanFilter<T>::incCounter()
{
	if (_count < _windowSize)
   d437c:	68c3      	ldr	r3, [r0, #12]
   d437e:	4293      	cmp	r3, r2
		++_count;
   d4380:	bfbc      	itt	lt
   d4382:	3301      	addlt	r3, #1
   d4384:	60c3      	strlt	r3, [r0, #12]
	return (_sum / _count);
   d4386:	e9d0 0203 	ldrd	r0, r2, [r0, #12]
}
   d438a:	fb92 f0f0 	sdiv	r0, r2, r0
   d438e:	bd30      	pop	{r4, r5, pc}

000d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4390:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4392:	2300      	movs	r3, #0
   d4394:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4396:	6800      	ldr	r0, [r0, #0]
   d4398:	f005 fb72 	bl	d9a80 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d439c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d43a0:	f003 ba82 	b.w	d78a8 <BlynkNoOpCbk>

000d43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d43a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d43a8:	eb01 0902 	add.w	r9, r1, r2
   d43ac:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d43ae:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d43b0:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d43b4:	4680      	mov	r8, r0
   d43b6:	460d      	mov	r5, r1
   d43b8:	4616      	mov	r6, r2
    if (it >= param.end())
   d43ba:	f080 8092 	bcs.w	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d43be:	a805      	add	r0, sp, #20
   d43c0:	880f      	ldrh	r7, [r1, #0]
   d43c2:	f7ff febf 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d43c6:	6803      	ldr	r3, [r0, #0]
   d43c8:	4599      	cmp	r9, r3
   d43ca:	f240 808a 	bls.w	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43ce:	a805      	add	r0, sp, #20
   d43d0:	f7ff feae 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d43d4:	f247 2376 	movw	r3, #29302	; 0x7276
   d43d8:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43da:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d43dc:	f000 80a9 	beq.w	d4532 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d43e0:	d827      	bhi.n	d4432 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d43e2:	f247 2361 	movw	r3, #29281	; 0x7261
   d43e6:	429f      	cmp	r7, r3
   d43e8:	d07e      	beq.n	d44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d43ea:	f247 2364 	movw	r3, #29284	; 0x7264
   d43ee:	429f      	cmp	r7, r3
   d43f0:	d042      	beq.n	d4478 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d43f2:	f646 5370 	movw	r3, #28016	; 0x6d70
   d43f6:	429f      	cmp	r7, r3
   d43f8:	d128      	bne.n	d444c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d43fa:	4e63      	ldr	r6, [pc, #396]	; (d4588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43fc:	4f63      	ldr	r7, [pc, #396]	; (d458c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d43fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d45a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4402:	9b05      	ldr	r3, [sp, #20]
   d4404:	4599      	cmp	r9, r3
   d4406:	d96c      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4408:	a805      	add	r0, sp, #20
   d440a:	f7ff fe91 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d440e:	b2c4      	uxtb	r4, r0
            ++it;
   d4410:	a805      	add	r0, sp, #20
   d4412:	f7ff fe97 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4416:	9d05      	ldr	r5, [sp, #20]
   d4418:	4631      	mov	r1, r6
   d441a:	4628      	mov	r0, r5
   d441c:	f007 ff0d 	bl	dc23a <strcmp>
   d4420:	4601      	mov	r1, r0
   d4422:	b9e0      	cbnz	r0, d445e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4424:	4620      	mov	r0, r4
   d4426:	f005 fd01 	bl	d9e2c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d442a:	a805      	add	r0, sp, #20
   d442c:	f7ff fe8a 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4430:	e7e7      	b.n	d4402 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4432:	f247 7364 	movw	r3, #30564	; 0x7764
   d4436:	429f      	cmp	r7, r3
   d4438:	d03f      	beq.n	d44ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d443a:	f247 7376 	movw	r3, #30582	; 0x7776
   d443e:	429f      	cmp	r7, r3
   d4440:	f000 8087 	beq.w	d4552 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4444:	f247 7361 	movw	r3, #30561	; 0x7761
   d4448:	429f      	cmp	r7, r3
   d444a:	d05f      	beq.n	d450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
            BlynkWidgetWriteDefault(req, param2);
        }
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d444c:	2300      	movs	r3, #0
   d444e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4452:	2202      	movs	r2, #2
   d4454:	9200      	str	r2, [sp, #0]
   d4456:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d445a:	4619      	mov	r1, r3
   d445c:	e029      	b.n	d44b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d445e:	4639      	mov	r1, r7
   d4460:	4628      	mov	r0, r5
   d4462:	f007 feea 	bl	dc23a <strcmp>
   d4466:	b128      	cbz	r0, d4474 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4468:	4641      	mov	r1, r8
   d446a:	4628      	mov	r0, r5
   d446c:	f007 fee5 	bl	dc23a <strcmp>
   d4470:	2800      	cmp	r0, #0
   d4472:	d1da      	bne.n	d442a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d4474:	2101      	movs	r1, #1
   d4476:	e7d5      	b.n	d4424 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4478:	ab0a      	add	r3, sp, #40	; 0x28
   d447a:	4945      	ldr	r1, [pc, #276]	; (d4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d447c:	9307      	str	r3, [sp, #28]
   d447e:	a807      	add	r0, sp, #28
   d4480:	2310      	movs	r3, #16
   d4482:	2500      	movs	r5, #0
   d4484:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4488:	f7ff fe15 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d448c:	a807      	add	r0, sp, #28
   d448e:	4621      	mov	r1, r4
   d4490:	f7ff fe78 	bl	d4184 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4494:	4620      	mov	r0, r4
   d4496:	f005 fcf3 	bl	d9e80 <digitalRead>
        rsp.add(analogRead(pin));
   d449a:	4601      	mov	r1, r0
   d449c:	a807      	add	r0, sp, #28
   d449e:	f7ff fe83 	bl	d41a8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d44a2:	9b08      	ldr	r3, [sp, #32]
   d44a4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d44a8:	3b01      	subs	r3, #1
   d44aa:	9300      	str	r3, [sp, #0]
   d44ac:	9b07      	ldr	r3, [sp, #28]
   d44ae:	462a      	mov	r2, r5
   d44b0:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d44b2:	4640      	mov	r0, r8
   d44b4:	f000 fa70 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d44b8:	e013      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d44ba:	a805      	add	r0, sp, #20
   d44bc:	f7ff fe42 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d44c0:	6803      	ldr	r3, [r0, #0]
   d44c2:	4599      	cmp	r9, r3
   d44c4:	d90d      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d44c6:	b2a4      	uxth	r4, r4
   d44c8:	2101      	movs	r1, #1
   d44ca:	4620      	mov	r0, r4
   d44cc:	f005 fcae 	bl	d9e2c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d44d0:	a805      	add	r0, sp, #20
   d44d2:	f7ff fe2d 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d44d6:	1e01      	subs	r1, r0, #0
   d44d8:	bf18      	it	ne
   d44da:	2101      	movne	r1, #1
   d44dc:	4620      	mov	r0, r4
   d44de:	f005 fcb6 	bl	d9e4e <digitalWrite>
    }
}
   d44e2:	b00f      	add	sp, #60	; 0x3c
   d44e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d44e8:	ab0a      	add	r3, sp, #40	; 0x28
   d44ea:	9307      	str	r3, [sp, #28]
   d44ec:	a807      	add	r0, sp, #28
   d44ee:	2310      	movs	r3, #16
   d44f0:	4928      	ldr	r1, [pc, #160]	; (d4594 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d44f2:	2500      	movs	r5, #0
   d44f4:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d44f8:	f7ff fddd 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d44fc:	a807      	add	r0, sp, #28
   d44fe:	4621      	mov	r1, r4
   d4500:	f7ff fe40 	bl	d4184 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4504:	4620      	mov	r0, r4
   d4506:	f005 fcce 	bl	d9ea6 <analogRead>
   d450a:	e7c6      	b.n	d449a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d450c:	a805      	add	r0, sp, #20
   d450e:	f7ff fe19 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d4512:	6803      	ldr	r3, [r0, #0]
   d4514:	4599      	cmp	r9, r3
   d4516:	d9e4      	bls.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4518:	b2a4      	uxth	r4, r4
   d451a:	2101      	movs	r1, #1
   d451c:	4620      	mov	r0, r4
   d451e:	f005 fc85 	bl	d9e2c <pinMode>
        analogWrite(pin, it.asInt());
   d4522:	a805      	add	r0, sp, #20
   d4524:	f7ff fe04 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d4528:	4601      	mov	r1, r0
   d452a:	4620      	mov	r0, r4
   d452c:	f005 fcd2 	bl	d9ed4 <_Z11analogWritetm>
    } break;
   d4530:	e7d7      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        WidgetReadHandler handler = GetReadHandler(pin);
   d4532:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   d4534:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4538:	f003 f9b8 	bl	d78ac <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d453c:	4603      	mov	r3, r0
            handler(req);
   d453e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4540:	b123      	cbz	r3, d454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4542:	4a15      	ldr	r2, [pc, #84]	; (d4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4544:	4293      	cmp	r3, r2
   d4546:	d001      	beq.n	d454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4548:	4798      	blx	r3
   d454a:	e7ca      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetReadDefault(req);
   d454c:	f003 f9aa 	bl	d78a4 <BlynkWidgetRead>
    } break;
   d4550:	e7c7      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4552:	a805      	add	r0, sp, #20
   d4554:	f7ff fdf6 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4558:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   d455a:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d455e:	1b5d      	subs	r5, r3, r5
   d4560:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4562:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d4564:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4568:	950c      	str	r5, [sp, #48]	; 0x30
   d456a:	f003 f9a9 	bl	d78c0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d456e:	4603      	mov	r3, r0
            handler(req, param2);
   d4570:	a90a      	add	r1, sp, #40	; 0x28
   d4572:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d4574:	b123      	cbz	r3, d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d4576:	4a09      	ldr	r2, [pc, #36]	; (d459c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4578:	4293      	cmp	r3, r2
   d457a:	d001      	beq.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param2);
   d457c:	4798      	blx	r3
   d457e:	e7b0      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param2);
   d4580:	f003 f991 	bl	d78a6 <BlynkWidgetWrite>
    } break;
   d4584:	e7ad      	b.n	d44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d4586:	bf00      	nop
   d4588:	000de65d 	.word	0x000de65d
   d458c:	000de11b 	.word	0x000de11b
   d4590:	000de123 	.word	0x000de123
   d4594:	000de126 	.word	0x000de126
   d4598:	000d78a5 	.word	0x000d78a5
   d459c:	000d78a7 	.word	0x000d78a7
   d45a0:	000de11f 	.word	0x000de11f

000d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45a8:	b08c      	sub	sp, #48	; 0x30
   d45aa:	af04      	add	r7, sp, #16
   d45ac:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d45ae:	2205      	movs	r2, #5
   d45b0:	6800      	ldr	r0, [r0, #0]
   d45b2:	1d39      	adds	r1, r7, #4
   d45b4:	f004 f972 	bl	d889c <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d45b8:	b3b8      	cbz	r0, d462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d45ba:	2805      	cmp	r0, #5
   d45bc:	d004      	beq.n	d45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d45be:	2000      	movs	r0, #0
}
   d45c0:	3720      	adds	r7, #32
   d45c2:	46bd      	mov	sp, r7
   d45c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45c8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d45cc:	0a13      	lsrs	r3, r2, #8
   d45ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d45d2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d45d6:	f8a7 3005 	strh.w	r3, [r7, #5]
   d45da:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d45dc:	0a13      	lsrs	r3, r2, #8
   d45de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45e2:	fa1f f883 	uxth.w	r8, r3
   d45e6:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d45ea:	2900      	cmp	r1, #0
   d45ec:	d0e7      	beq.n	d45be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d45ee:	793b      	ldrb	r3, [r7, #4]
   d45f0:	bb23      	cbnz	r3, d463c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d45f2:	f003 f955 	bl	d78a0 <_Z11BlynkMillisv>
   d45f6:	60e0      	str	r0, [r4, #12]
   d45f8:	4602      	mov	r2, r0
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45fa:	7f60      	ldrb	r0, [r4, #29]
   d45fc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4600:	b9c0      	cbnz	r0, d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4602:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4606:	2901      	cmp	r1, #1
   d4608:	d114      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d460a:	2b09      	cmp	r3, #9
   d460c:	d00f      	beq.n	d462e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d460e:	2bc8      	cmp	r3, #200	; 0xc8
   d4610:	d001      	beq.n	d4616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4612:	2b04      	cmp	r3, #4
   d4614:	d1d4      	bne.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4616:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4618:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d461a:	4620      	mov	r0, r4
                state = CONNECTED;
   d461c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d461e:	f000 fa69 	bl	d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4622:	f7ff fd79 	bl	d4118 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4626:	f003 f93f 	bl	d78a8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d462a:	2001      	movs	r0, #1
   d462c:	e7c8      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d462e:	2303      	movs	r3, #3
   d4630:	7763      	strb	r3, [r4, #29]
                break;
   d4632:	e7c5      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4634:	1f58      	subs	r0, r3, #5
   d4636:	bf18      	it	ne
   d4638:	2001      	movne	r0, #1
   d463a:	e7c1      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d463c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4640:	d903      	bls.n	d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4642:	4620      	mov	r0, r4
   d4644:	f7ff fea4 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4648:	e7ef      	b.n	d462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d464a:	f108 0308 	add.w	r3, r8, #8
   d464e:	f023 0307 	bic.w	r3, r3, #7
   d4652:	466e      	mov	r6, sp
   d4654:	ebad 0d03 	sub.w	sp, sp, r3
   d4658:	ad04      	add	r5, sp, #16
   d465a:	6820      	ldr	r0, [r4, #0]
   d465c:	4642      	mov	r2, r8
   d465e:	4629      	mov	r1, r5
   d4660:	f004 f91c 	bl	d889c <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4664:	4580      	cmp	r8, r0
   d4666:	f04f 0000 	mov.w	r0, #0
   d466a:	d172      	bne.n	d4752 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ae>
    inputBuffer[hdr.length] = '\0';
   d466c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4670:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d4672:	f003 f915 	bl	d78a0 <_Z11BlynkMillisv>
    switch (hdr.type)
   d4676:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4678:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d467a:	2b14      	cmp	r3, #20
   d467c:	f000 8098 	beq.w	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20c>
   d4680:	d83b      	bhi.n	d46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x156>
   d4682:	2b0f      	cmp	r3, #15
   d4684:	f000 8094 	beq.w	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20c>
   d4688:	d807      	bhi.n	d469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d468a:	2b02      	cmp	r3, #2
   d468c:	d03b      	beq.n	d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x162>
   d468e:	2b06      	cmp	r3, #6
   d4690:	d044      	beq.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
        internalReconnect();
   d4692:	4620      	mov	r0, r4
   d4694:	f7ff fe7c 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4698:	e04b      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
    switch (hdr.type)
   d469a:	2b11      	cmp	r3, #17
   d469c:	d1f9      	bne.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d469e:	2300      	movs	r3, #0
   d46a0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d46a2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46a6:	442b      	add	r3, r5
        if (it >= param.end())
   d46a8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46aa:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d46ae:	d240      	bcs.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        ++it;
   d46b0:	f107 000c 	add.w	r0, r7, #12
   d46b4:	682c      	ldr	r4, [r5, #0]
   d46b6:	f7ff fd45 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d46ba:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d46bc:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d46c0:	1b5d      	subs	r5, r3, r5
   d46c2:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d46c4:	e9c7 3505 	strd	r3, r5, [r7, #20]
   d46c8:	4b54      	ldr	r3, [pc, #336]	; (d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>)
   d46ca:	61fd      	str	r5, [r7, #28]
   d46cc:	429c      	cmp	r4, r3
   d46ce:	f000 809f 	beq.w	d4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
   d46d2:	d87a      	bhi.n	d47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x226>
   d46d4:	4b52      	ldr	r3, [pc, #328]	; (d4820 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27c>)
   d46d6:	429c      	cmp	r4, r3
   d46d8:	f000 8088 	beq.w	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d46dc:	3303      	adds	r3, #3
   d46de:	429c      	cmp	r4, r3
   d46e0:	f000 808a 	beq.w	d47f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d46e4:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d46e8:	3b06      	subs	r3, #6
   d46ea:	429c      	cmp	r4, r3
   d46ec:	d121      	bne.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46ee:	f107 0114 	add.w	r1, r7, #20
   d46f2:	4638      	mov	r0, r7
   d46f4:	f003 f8d7 	bl	d78a6 <BlynkWidgetWrite>
   d46f8:	e01b      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
    switch (hdr.type)
   d46fa:	2b29      	cmp	r3, #41	; 0x29
   d46fc:	d01b      	beq.n	d4736 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
   d46fe:	2b37      	cmp	r3, #55	; 0x37
   d4700:	d017      	beq.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d4702:	2b1d      	cmp	r3, #29
   d4704:	d1c5      	bne.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4706:	7f63      	ldrb	r3, [r4, #29]
   d4708:	b943      	cbnz	r3, d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
            state = CONNECTED;
   d470a:	2301      	movs	r3, #1
   d470c:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d470e:	4620      	mov	r0, r4
   d4710:	f000 f9f0 	bl	d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4714:	f7ff fd00 	bl	d4118 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4718:	f003 f8c6 	bl	d78a8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d471c:	2300      	movs	r3, #0
   d471e:	21c8      	movs	r1, #200	; 0xc8
   d4720:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4724:	9100      	str	r1, [sp, #0]
   d4726:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d472a:	4619      	mov	r1, r3
   d472c:	4620      	mov	r0, r4
   d472e:	f000 f933 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4732:	2001      	movs	r0, #1
   d4734:	e00d      	b.n	d4752 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ae>
        if (!redir_serv) {
   d4736:	68a3      	ldr	r3, [r4, #8]
   d4738:	b91b      	cbnz	r3, d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19e>
             redir_serv = (char*)malloc(32);
   d473a:	2020      	movs	r0, #32
   d473c:	f003 fb76 	bl	d7e2c <malloc>
   d4740:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4742:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4746:	44a8      	add	r8, r5
        if (it >= param.end())
   d4748:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d474a:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d474e:	d302      	bcc.n	d4756 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b2>
            return false;
   d4750:	2000      	movs	r0, #0
   d4752:	46b5      	mov	sp, r6
   d4754:	e734      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 32);
   d4756:	4629      	mov	r1, r5
   d4758:	2220      	movs	r2, #32
   d475a:	68a0      	ldr	r0, [r4, #8]
   d475c:	f007 fdb7 	bl	dc2ce <strncpy>
        redir_serv[31] = '\0';
   d4760:	68a3      	ldr	r3, [r4, #8]
   d4762:	2500      	movs	r5, #0
   d4764:	77dd      	strb	r5, [r3, #31]
        if (++it < param.end())
   d4766:	f107 0014 	add.w	r0, r7, #20
   d476a:	f7ff fceb 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d476e:	6803      	ldr	r3, [r0, #0]
   d4770:	4543      	cmp	r3, r8
   d4772:	d21b      	bcs.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x208>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4774:	6978      	ldr	r0, [r7, #20]
   d4776:	b120      	cbz	r0, d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1de>
   d4778:	69bb      	ldr	r3, [r7, #24]
   d477a:	4298      	cmp	r0, r3
   d477c:	d214      	bcs.n	d47a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x204>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d477e:	f007 fd02 	bl	dc186 <atol>
            redir_port = it.asLong();
   d4782:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4784:	6820      	ldr	r0, [r4, #0]
   d4786:	f005 f97b 	bl	d9a80 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d478a:	6823      	ldr	r3, [r4, #0]
   d478c:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d478e:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4790:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4792:	2300      	movs	r3, #0
   d4794:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4796:	f003 f883 	bl	d78a0 <_Z11BlynkMillisv>
   d479a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d479e:	3808      	subs	r0, #8
   d47a0:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d47a4:	6160      	str	r0, [r4, #20]
   d47a6:	e7c4      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d47a8:	4628      	mov	r0, r5
   d47aa:	e7ea      	b.n	d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1de>
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d47ac:	2550      	movs	r5, #80	; 0x50
   d47ae:	e7e9      	b.n	d4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e0>
        msgIdOutOverride = hdr.msg_id;
   d47b0:	687b      	ldr	r3, [r7, #4]
   d47b2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d47b6:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d47b8:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   d47bc:	4629      	mov	r1, r5
   d47be:	4620      	mov	r0, r4
   d47c0:	f7ff fdf0 	bl	d43a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d47c4:	2300      	movs	r3, #0
   d47c6:	8363      	strh	r3, [r4, #26]
   d47c8:	e7b3      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d47ca:	4b16      	ldr	r3, [pc, #88]	; (d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x280>)
   d47cc:	429c      	cmp	r4, r3
   d47ce:	d019      	beq.n	d4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
   d47d0:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d47d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d47d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d47dc:	429c      	cmp	r4, r3
   d47de:	d1a8      	bne.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d47e0:	f107 0114 	add.w	r1, r7, #20
   d47e4:	4638      	mov	r0, r7
   d47e6:	f003 f85e 	bl	d78a6 <BlynkWidgetWrite>
   d47ea:	e7a2      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d47ec:	f107 0114 	add.w	r1, r7, #20
   d47f0:	4638      	mov	r0, r7
   d47f2:	f003 f858 	bl	d78a6 <BlynkWidgetWrite>
   d47f6:	e79c      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d47f8:	f107 0114 	add.w	r1, r7, #20
   d47fc:	4638      	mov	r0, r7
   d47fe:	f003 f852 	bl	d78a6 <BlynkWidgetWrite>
   d4802:	e796      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4804:	f107 0114 	add.w	r1, r7, #20
   d4808:	4638      	mov	r0, r7
   d480a:	f003 f84c 	bl	d78a6 <BlynkWidgetWrite>
   d480e:	e790      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4810:	f107 0114 	add.w	r1, r7, #20
   d4814:	4638      	mov	r0, r7
   d4816:	f003 f846 	bl	d78a6 <BlynkWidgetWrite>
   d481a:	e78a      	b.n	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
   d481c:	6174656d 	.word	0x6174656d
   d4820:	00637472 	.word	0x00637472
   d4824:	6e6f6361 	.word	0x6e6f6361

000d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d4828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d482c:	4604      	mov	r4, r0
   d482e:	b08c      	sub	sp, #48	; 0x30
   d4830:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4832:	f7ff fc71 	bl	d4118 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d4836:	7f63      	ldrb	r3, [r4, #29]
   d4838:	2b02      	cmp	r3, #2
   d483a:	f000 80a8 	beq.w	d498e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d483e:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4840:	8b62      	ldrh	r2, [r4, #26]
   d4842:	3301      	adds	r3, #1
   d4844:	b2db      	uxtb	r3, r3
   d4846:	7723      	strb	r3, [r4, #28]
   d4848:	b10a      	cbz	r2, d484e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d484a:	2501      	movs	r5, #1
   d484c:	e016      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d484e:	2b02      	cmp	r3, #2
   d4850:	d8fb      	bhi.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4852:	6820      	ldr	r0, [r4, #0]
   d4854:	f004 ff57 	bl	d9706 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d4858:	b1b8      	cbz	r0, d488a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d485a:	b925      	cbnz	r5, d4866 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d485c:	6820      	ldr	r0, [r4, #0]
   d485e:	f005 f8b5 	bl	d99cc <_ZN9TCPClient9availableEv>
   d4862:	2800      	cmp	r0, #0
   d4864:	dd11      	ble.n	d488a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fe9c 	bl	d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d486c:	4605      	mov	r5, r0
   d486e:	2800      	cmp	r0, #0
   d4870:	d1f4      	bne.n	d485c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4872:	6820      	ldr	r0, [r4, #0]
   d4874:	f005 f904 	bl	d9a80 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4878:	f003 f816 	bl	d78a8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d487c:	7f23      	ldrb	r3, [r4, #28]
   d487e:	3b01      	subs	r3, #1
   d4880:	7723      	strb	r3, [r4, #28]
}
   d4882:	4628      	mov	r0, r5
   d4884:	b00c      	add	sp, #48	; 0x30
   d4886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d488a:	f003 f809 	bl	d78a0 <_Z11BlynkMillisv>
   d488e:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4890:	6820      	ldr	r0, [r4, #0]
   d4892:	f004 ff38 	bl	d9706 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4896:	7f67      	ldrb	r7, [r4, #29]
   d4898:	2f01      	cmp	r7, #1
   d489a:	4605      	mov	r5, r0
   d489c:	d129      	bne.n	d48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d489e:	b920      	cbnz	r0, d48aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d48a0:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d48a2:	4620      	mov	r0, r4
   d48a4:	f7ff fd74 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d48a8:	e7e8      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d48aa:	68e3      	ldr	r3, [r4, #12]
   d48ac:	f644 2238 	movw	r2, #19000	; 0x4a38
   d48b0:	1af3      	subs	r3, r6, r3
   d48b2:	4293      	cmp	r3, r2
   d48b4:	d904      	bls.n	d48c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff fd6a 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d48bc:	2500      	movs	r5, #0
   d48be:	e7dd      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d48c0:	f242 7210 	movw	r2, #10000	; 0x2710
   d48c4:	4293      	cmp	r3, r2
   d48c6:	d803      	bhi.n	d48d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48c8:	6923      	ldr	r3, [r4, #16]
   d48ca:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d48cc:	4293      	cmp	r3, r2
   d48ce:	d9bc      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d48d0:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d48d6:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d48d8:	4293      	cmp	r3, r2
   d48da:	d9b6      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d48dc:	2300      	movs	r3, #0
   d48de:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d48e2:	9300      	str	r3, [sp, #0]
   d48e4:	461a      	mov	r2, r3
   d48e6:	2106      	movs	r1, #6
   d48e8:	4620      	mov	r0, r4
   d48ea:	f000 f855 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d48ee:	6166      	str	r6, [r4, #20]
   d48f0:	e7ab      	b.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d48f2:	2f00      	cmp	r7, #0
   d48f4:	d1a9      	bne.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48f6:	6962      	ldr	r2, [r4, #20]
   d48f8:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d48fa:	b140      	cbz	r0, d490e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d48fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4900:	429a      	cmp	r2, r3
   d4902:	d9a2      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4904:	6820      	ldr	r0, [r4, #0]
   d4906:	f005 f8bb 	bl	d9a80 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d490a:	7767      	strb	r7, [r4, #29]
   d490c:	e7d6      	b.n	d48bc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d490e:	f241 3388 	movw	r3, #5000	; 0x1388
   d4912:	429a      	cmp	r2, r3
   d4914:	d999      	bls.n	d484a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4916:	6820      	ldr	r0, [r4, #0]
   d4918:	f005 f8b2 	bl	d9a80 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d491c:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4920:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4924:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d4928:	f1be 0f00 	cmp.w	lr, #0
   d492c:	d00b      	beq.n	d4946 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d492e:	462b      	mov	r3, r5
   d4930:	4642      	mov	r2, r8
   d4932:	4671      	mov	r1, lr
   d4934:	4660      	mov	r0, ip
   d4936:	f005 f907 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d493a:	1e43      	subs	r3, r0, #1
   d493c:	425d      	negs	r5, r3
   d493e:	415d      	adcs	r5, r3
   d4940:	b98d      	cbnz	r5, d4966 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4942:	6166      	str	r6, [r4, #20]
                return false;
   d4944:	e79a      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4946:	4b13      	ldr	r3, [pc, #76]	; (d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d4948:	9306      	str	r3, [sp, #24]
   d494a:	f10c 0720 	add.w	r7, ip, #32
   d494e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4950:	ad07      	add	r5, sp, #28
   d4952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4954:	683b      	ldr	r3, [r7, #0]
   d4956:	702b      	strb	r3, [r5, #0]
   d4958:	4642      	mov	r2, r8
   d495a:	4673      	mov	r3, lr
   d495c:	a906      	add	r1, sp, #24
   d495e:	4660      	mov	r0, ip
   d4960:	f004 ffb9 	bl	d98d6 <_ZN9TCPClient7connectE9IPAddresstm>
   d4964:	e7e9      	b.n	d493a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4966:	6863      	ldr	r3, [r4, #4]
   d4968:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d496a:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d496c:	4618      	mov	r0, r3
            msgIdOut = 1;
   d496e:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4970:	f007 fc93 	bl	dc29a <strlen>
   d4974:	2200      	movs	r2, #0
   d4976:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d497a:	9b05      	ldr	r3, [sp, #20]
   d497c:	9000      	str	r0, [sp, #0]
   d497e:	4632      	mov	r2, r6
   d4980:	211d      	movs	r1, #29
   d4982:	4620      	mov	r0, r4
   d4984:	f000 f808 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4988:	6923      	ldr	r3, [r4, #16]
   d498a:	6163      	str	r3, [r4, #20]
            return true;
   d498c:	e776      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d498e:	2500      	movs	r5, #0
   d4990:	e777      	b.n	d4882 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4992:	bf00      	nop
   d4994:	000dec94 	.word	0x000dec94

000d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d499c:	b083      	sub	sp, #12
   d499e:	af00      	add	r7, sp, #0
   d49a0:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d49a2:	6800      	ldr	r0, [r0, #0]
   d49a4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d49a6:	4688      	mov	r8, r1
   d49a8:	4616      	mov	r6, r2
   d49aa:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d49ac:	46eb      	mov	fp, sp
   d49ae:	f004 feaa 	bl	d9706 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d49b2:	2800      	cmp	r0, #0
   d49b4:	d07f      	beq.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d49b6:	f1b8 0f1d 	cmp.w	r8, #29
   d49ba:	d804      	bhi.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d49bc:	4b4c      	ldr	r3, [pc, #304]	; (d4af0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d49be:	fa23 f308 	lsr.w	r3, r3, r8
   d49c2:	07db      	lsls	r3, r3, #31
   d49c4:	d402      	bmi.n	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d49c6:	7f63      	ldrb	r3, [r4, #29]
   d49c8:	2b01      	cmp	r3, #1
   d49ca:	d174      	bne.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49cc:	b946      	cbnz	r6, d49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49ce:	8b66      	ldrh	r6, [r4, #26]
   d49d0:	b936      	cbnz	r6, d49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49d2:	8b23      	ldrh	r3, [r4, #24]
   d49d4:	3301      	adds	r3, #1
   d49d6:	b29b      	uxth	r3, r3
   d49d8:	2b00      	cmp	r3, #0
   d49da:	d071      	beq.n	d4ac0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49dc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49de:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49e0:	f1a8 030c 	sub.w	r3, r8, #12
   d49e4:	2b08      	cmp	r3, #8
   d49e6:	d816      	bhi.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49e8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d49ec:	4293      	cmp	r3, r2
   d49ee:	bf38      	it	cc
   d49f0:	4613      	movcc	r3, r2
   d49f2:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49f6:	f002 ff53 	bl	d78a0 <_Z11BlynkMillisv>
   d49fa:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49fe:	2800      	cmp	r0, #0
   d4a00:	db60      	blt.n	d4ac4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a02:	2100      	movs	r1, #0
   d4a04:	4620      	mov	r0, r4
   d4a06:	f7ff ff0f 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a0a:	f002 ff49 	bl	d78a0 <_Z11BlynkMillisv>
   d4a0e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a12:	2800      	cmp	r0, #0
   d4a14:	daf5      	bge.n	d4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a16:	f1b9 0f00 	cmp.w	r9, #0
   d4a1a:	d05a      	beq.n	d4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a1c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a20:	2a00      	cmp	r2, #0
   d4a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a24:	bf08      	it	eq
   d4a26:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a28:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a2c:	f10a 0307 	add.w	r3, sl, #7
   d4a30:	f023 0307 	bic.w	r3, r3, #7
   d4a34:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a3a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a3e:	18ea      	adds	r2, r5, r3
   d4a40:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a44:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a4a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a4e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a52:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a56:	f1b9 0f00 	cmp.w	r9, #0
   d4a5a:	d03c      	beq.n	d4ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a5c:	2d00      	cmp	r5, #0
   d4a5e:	d03a      	beq.n	d4ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a60:	462a      	mov	r2, r5
   d4a62:	4649      	mov	r1, r9
   d4a64:	f10d 0005 	add.w	r0, sp, #5
   d4a68:	f007 fba0 	bl	dc1ac <memcpy>
        pos += length;
   d4a6c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a70:	b13b      	cbz	r3, d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a74:	b12b      	cbz	r3, d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a76:	461a      	mov	r2, r3
   d4a78:	687b      	ldr	r3, [r7, #4]
   d4a7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a7c:	4418      	add	r0, r3
   d4a7e:	f007 fb95 	bl	dc1ac <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a82:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a84:	4555      	cmp	r5, sl
   d4a86:	d22a      	bcs.n	d4ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a88:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a8c:	687b      	ldr	r3, [r7, #4]
   d4a8e:	6820      	ldr	r0, [r4, #0]
   d4a90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a94:	bf28      	it	cs
   d4a96:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a9a:	1959      	adds	r1, r3, r5
   d4a9c:	f004 fe1d 	bl	d96da <_ZN9TCPClient5writeEPKhj>
   d4aa0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4aa2:	2000      	movs	r0, #0
   d4aa4:	f002 fefa 	bl	d789c <_Z10BlynkDelaym>
        if (w == 0) {
   d4aa8:	b9be      	cbnz	r6, d4ada <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4aaa:	6820      	ldr	r0, [r4, #0]
   d4aac:	f004 ffe8 	bl	d9a80 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4ab0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4ab2:	f002 fef9 	bl	d78a8 <BlynkNoOpCbk>
}
   d4ab6:	370c      	adds	r7, #12
   d4ab8:	46dd      	mov	sp, fp
   d4aba:	46bd      	mov	sp, r7
   d4abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4ac0:	2301      	movs	r3, #1
   d4ac2:	e78b      	b.n	d49dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4ac4:	7f21      	ldrb	r1, [r4, #28]
   d4ac6:	2900      	cmp	r1, #0
   d4ac8:	d1a5      	bne.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4aca:	4620      	mov	r0, r4
   d4acc:	f7ff feac 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ad0:	e7a1      	b.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4ad2:	2305      	movs	r3, #5
   d4ad4:	e7a3      	b.n	d4a1e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4ad6:	2005      	movs	r0, #5
   d4ad8:	e7c9      	b.n	d4a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4ada:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4adc:	e7d2      	b.n	d4a84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4ade:	d003      	beq.n	d4ae8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff fc55 	bl	d4390 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4ae6:	e7e6      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4ae8:	f002 feda 	bl	d78a0 <_Z11BlynkMillisv>
   d4aec:	6120      	str	r0, [r4, #16]
   d4aee:	e7e2      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4af0:	20000045 	.word	0x20000045

000d4af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4af4:	b500      	push	{lr}
   d4af6:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4af8:	ab04      	add	r3, sp, #16
   d4afa:	2200      	movs	r2, #0
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	2349      	movs	r3, #73	; 0x49
   d4b00:	9300      	str	r3, [sp, #0]
   d4b02:	9202      	str	r2, [sp, #8]
   d4b04:	4b03      	ldr	r3, [pc, #12]	; (d4b14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b06:	2111      	movs	r1, #17
   d4b08:	f7ff ff46 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b0c:	b015      	add	sp, #84	; 0x54
   d4b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b12:	bf00      	nop
   d4b14:	000de22a 	.word	0x000de22a

000d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b1a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b1e:	ab08      	add	r3, sp, #32
   d4b20:	2400      	movs	r4, #0
   d4b22:	4605      	mov	r5, r0
   d4b24:	460f      	mov	r7, r1
   d4b26:	9305      	str	r3, [sp, #20]
   d4b28:	a805      	add	r0, sp, #20
   d4b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b2e:	490e      	ldr	r1, [pc, #56]	; (d4b68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_+0x50>)
   d4b30:	4616      	mov	r6, r2
   d4b32:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b36:	f7ff fabe 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
   d4b3a:	4639      	mov	r1, r7
   d4b3c:	a805      	add	r0, sp, #20
   d4b3e:	f7ff fb21 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d4b42:	4631      	mov	r1, r6
   d4b44:	a805      	add	r0, sp, #20
   d4b46:	f7ff fb0c 	bl	d4162 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b4a:	9b06      	ldr	r3, [sp, #24]
   d4b4c:	3b01      	subs	r3, #1
   d4b4e:	9300      	str	r3, [sp, #0]
   d4b50:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b54:	9b05      	ldr	r3, [sp, #20]
   d4b56:	4622      	mov	r2, r4
   d4b58:	2114      	movs	r1, #20
   d4b5a:	4628      	mov	r0, r5
   d4b5c:	f7ff ff1c 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b60:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b66:	bf00      	nop
   d4b68:	000de129 	.word	0x000de129

000d4b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>:
     * This will probably cause user-defined BLYNK_WRITE handler to be called.
     *
     * @param pin Virtual Pin number
     */
    template <typename... Args>
    void syncVirtual(Args... pins) {
   d4b6c:	b570      	push	{r4, r5, r6, lr}
   d4b6e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b72:	ab08      	add	r3, sp, #32
   d4b74:	2400      	movs	r4, #0
   d4b76:	4605      	mov	r5, r0
   d4b78:	460e      	mov	r6, r1
   d4b7a:	9305      	str	r3, [sp, #20]
   d4b7c:	a805      	add	r0, sp, #20
   d4b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b82:	490b      	ldr	r1, [pc, #44]	; (d4bb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_+0x44>)
   d4b84:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b88:	f7ff fa95 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        add(last);
   d4b8c:	4631      	mov	r1, r6
   d4b8e:	a805      	add	r0, sp, #20
   d4b90:	f7ff faf8 	bl	d4184 <_ZN10BlynkParam3addEi>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vr");
        cmd.add_multi(pins...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b94:	9b06      	ldr	r3, [sp, #24]
   d4b96:	3b01      	subs	r3, #1
   d4b98:	9300      	str	r3, [sp, #0]
   d4b9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b9e:	9b05      	ldr	r3, [sp, #20]
   d4ba0:	4622      	mov	r2, r4
   d4ba2:	2110      	movs	r1, #16
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	f7ff fef7 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4baa:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4bae:	bd70      	pop	{r4, r5, r6, pc}
   d4bb0:	000de12c 	.word	0x000de12c

000d4bb4 <setup>:
void setup() {
   d4bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.begin(115200); // opens serial port, sets data rate to 9600 bps
   d4bb8:	f004 fbf8 	bl	d93ac <_Z16_fetch_usbserialv>
   d4bbc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4bc0:	f004 fbe2 	bl	d9388 <_ZN9USBSerial5beginEl>
  while (!Serial) {
   d4bc4:	f004 fbf2 	bl	d93ac <_Z16_fetch_usbserialv>
   d4bc8:	f004 fbe5 	bl	d9396 <_ZN9USBSerialcvbEv>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0f9      	beq.n	d4bc4 <setup+0x10>
  Serial.setTimeout(10);
   d4bd0:	f004 fbec 	bl	d93ac <_Z16_fetch_usbserialv>
   d4bd4:	210a      	movs	r1, #10
   d4bd6:	f003 fe5f 	bl	d8898 <_ZN6Stream10setTimeoutEm>
  pinMode(LED_BUILTIN, OUTPUT);
   d4bda:	2101      	movs	r1, #1
   d4bdc:	2007      	movs	r0, #7
   d4bde:	f005 f925 	bl	d9e2c <pinMode>
  pinMode(STEP_PIN1, OUTPUT);
   d4be2:	2101      	movs	r1, #1
   d4be4:	2005      	movs	r0, #5
   d4be6:	f005 f921 	bl	d9e2c <pinMode>
  pinMode(DIR_PIN1, OUTPUT);
   d4bea:	2101      	movs	r1, #1
   d4bec:	2003      	movs	r0, #3
   d4bee:	f005 f91d 	bl	d9e2c <pinMode>
  pinMode(STEPEN_PIN1, OUTPUT);
   d4bf2:	2101      	movs	r1, #1
   d4bf4:	2002      	movs	r0, #2
   d4bf6:	f005 f919 	bl	d9e2c <pinMode>
  pinMode(WATER_PIN, INPUT_PULLUP);  // water detector
   d4bfa:	2102      	movs	r1, #2
   d4bfc:	2004      	movs	r0, #4
   d4bfe:	f005 f915 	bl	d9e2c <pinMode>
  stepper1.setMaxSpeed(1200); // Set the maximum speed in steps per second:
   d4c02:	ed9f 0a2f 	vldr	s0, [pc, #188]	; d4cc0 <setup+0x10c>
   d4c06:	482f      	ldr	r0, [pc, #188]	; (d4cc4 <setup+0x110>)
        this->authkey = auth;
   d4c08:	4c2f      	ldr	r4, [pc, #188]	; (d4cc8 <setup+0x114>)
   d4c0a:	f001 f8b5 	bl	d5d78 <_ZN12AccelStepper11setMaxSpeedEf>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4c0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4c12:	f002 fe43 	bl	d789c <_Z10BlynkDelaym>
   d4c16:	4b2d      	ldr	r3, [pc, #180]	; (d4ccc <setup+0x118>)
   d4c18:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4c1a:	f002 fe41 	bl	d78a0 <_Z11BlynkMillisv>
   d4c1e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   d4c22:	6823      	ldr	r3, [r4, #0]
        domain = d;
   d4c24:	4a2a      	ldr	r2, [pc, #168]	; (d4cd0 <setup+0x11c>)
   d4c26:	635a      	str	r2, [r3, #52]	; 0x34
   d4c28:	3808      	subs	r0, #8
   d4c2a:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   d4c2e:	2250      	movs	r2, #80	; 0x50
   d4c30:	6160      	str	r0, [r4, #20]
   d4c32:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   d4c34:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   d4c36:	f242 3727 	movw	r7, #8999	; 0x2327
            run();
   d4c3a:	46a0      	mov	r8, r4
    void disconnect() { client.stop(); }
   d4c3c:	6820      	ldr	r0, [r4, #0]
   d4c3e:	f004 ff1f 	bl	d9a80 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4c42:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4c44:	f002 fe2c 	bl	d78a0 <_Z11BlynkMillisv>
   d4c48:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4c4a:	7f63      	ldrb	r3, [r4, #29]
   d4c4c:	2b01      	cmp	r3, #1
   d4c4e:	d00c      	beq.n	d4c6a <setup+0xb6>
               (BlynkMillis() - started < timeout))
   d4c50:	f002 fe26 	bl	d78a0 <_Z11BlynkMillisv>
   d4c54:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4c56:	42b8      	cmp	r0, r7
   d4c58:	d804      	bhi.n	d4c64 <setup+0xb0>
            run();
   d4c5a:	2100      	movs	r1, #0
   d4c5c:	4640      	mov	r0, r8
   d4c5e:	f7ff fde3 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4c62:	e7f2      	b.n	d4c4a <setup+0x96>
        config(auth, domain, port);
        while(this->connect() != true) {}
   d4c64:	7f63      	ldrb	r3, [r4, #29]
   d4c66:	2b01      	cmp	r3, #1
   d4c68:	d1e8      	bne.n	d4c3c <setup+0x88>
  Blynk.virtualWrite(V2, "clr");  // clear Terminal Widget
   d4c6a:	4a1a      	ldr	r2, [pc, #104]	; (d4cd4 <setup+0x120>)
   d4c6c:	4816      	ldr	r0, [pc, #88]	; (d4cc8 <setup+0x114>)
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4c6e:	4e1a      	ldr	r6, [pc, #104]	; (d4cd8 <setup+0x124>)
   d4c70:	4d1a      	ldr	r5, [pc, #104]	; (d4cdc <setup+0x128>)
  Blynk.virtualWrite(V2, "clr");  // clear Terminal Widget
   d4c72:	2102      	movs	r1, #2
   d4c74:	f7ff ff50 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, "WiFi connected\n");
   d4c78:	4a19      	ldr	r2, [pc, #100]	; (d4ce0 <setup+0x12c>)
   d4c7a:	4813      	ldr	r0, [pc, #76]	; (d4cc8 <setup+0x114>)
   d4c7c:	2102      	movs	r1, #2
   d4c7e:	f7ff ff4b 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.syncVirtual(V1);  // sync slider value
   d4c82:	4811      	ldr	r0, [pc, #68]	; (d4cc8 <setup+0x114>)
   d4c84:	2101      	movs	r1, #1
   d4c86:	f7ff ff71 	bl	d4b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiEEEvDpT_>
   d4c8a:	2433      	movs	r4, #51	; 0x33
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4c8c:	2004      	movs	r0, #4
   d4c8e:	f005 f8f7 	bl	d9e80 <digitalRead>
   d4c92:	4601      	mov	r1, r0
   d4c94:	4630      	mov	r0, r6
   d4c96:	f7ff fb5b 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
  for (int x = 0; x < 51; x++) {  // read non contact water sensor on hose
   d4c9a:	3c01      	subs	r4, #1
    waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); 
   d4c9c:	6028      	str	r0, [r5, #0]
  for (int x = 0; x < 51; x++) {  // read non contact water sensor on hose
   d4c9e:	d1f5      	bne.n	d4c8c <setup+0xd8>
    state = PURGE_STATE;
   d4ca0:	4b10      	ldr	r3, [pc, #64]	; (d4ce4 <setup+0x130>)
   d4ca2:	2205      	movs	r2, #5
  digitalWrite(STEPEN_PIN1, LOW); // Pump1 on
   d4ca4:	4621      	mov	r1, r4
   d4ca6:	2002      	movs	r0, #2
    state = PURGE_STATE;
   d4ca8:	701a      	strb	r2, [r3, #0]
  digitalWrite(STEPEN_PIN1, LOW); // Pump1 on
   d4caa:	f005 f8d0 	bl	d9e4e <digitalWrite>
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4cae:	4b0e      	ldr	r3, [pc, #56]	; (d4ce8 <setup+0x134>)
   d4cb0:	681a      	ldr	r2, [r3, #0]
   d4cb2:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4cb6:	4353      	muls	r3, r2
   d4cb8:	4a0c      	ldr	r2, [pc, #48]	; (d4cec <setup+0x138>)
   d4cba:	6013      	str	r3, [r2, #0]
}  // end setup
   d4cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4cc0:	44960000 	.word	0x44960000
   d4cc4:	2003e4cc 	.word	0x2003e4cc
   d4cc8:	2003e284 	.word	0x2003e284
   d4ccc:	2003dff4 	.word	0x2003dff4
   d4cd0:	000de12f 	.word	0x000de12f
   d4cd4:	000de13f 	.word	0x000de13f
   d4cd8:	2003e2f0 	.word	0x2003e2f0
   d4cdc:	2003e544 	.word	0x2003e544
   d4ce0:	000de143 	.word	0x000de143
   d4ce4:	2003e4c8 	.word	0x2003e4c8
   d4ce8:	2003e02c 	.word	0x2003e02c
   d4cec:	2003e4b4 	.word	0x2003e4b4

000d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cf2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4cf6:	ab08      	add	r3, sp, #32
   d4cf8:	2400      	movs	r4, #0
   d4cfa:	4605      	mov	r5, r0
   d4cfc:	460f      	mov	r7, r1
   d4cfe:	9305      	str	r3, [sp, #20]
   d4d00:	a805      	add	r0, sp, #20
   d4d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4d06:	490e      	ldr	r1, [pc, #56]	; (d4d40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
   d4d08:	4616      	mov	r6, r2
   d4d0a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4d0e:	f7ff f9d2 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4d12:	4639      	mov	r1, r7
   d4d14:	a805      	add	r0, sp, #20
   d4d16:	f7ff fa35 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d4d1a:	4631      	mov	r1, r6
   d4d1c:	a805      	add	r0, sp, #20
   d4d1e:	f7ff fa31 	bl	d4184 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4d22:	9b06      	ldr	r3, [sp, #24]
   d4d24:	3b01      	subs	r3, #1
   d4d26:	9300      	str	r3, [sp, #0]
   d4d28:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4d2c:	9b05      	ldr	r3, [sp, #20]
   d4d2e:	4622      	mov	r2, r4
   d4d30:	2114      	movs	r1, #20
   d4d32:	4628      	mov	r0, r5
   d4d34:	f7ff fe30 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4d38:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d3e:	bf00      	nop
   d4d40:	000de129 	.word	0x000de129

000d4d44 <BlynkWidgetWrite1>:
{
   d4d44:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
   d4d46:	6808      	ldr	r0, [r1, #0]
  ml_to_collect  = pinValue;
   d4d48:	4c10      	ldr	r4, [pc, #64]	; (d4d8c <BlynkWidgetWrite1+0x48>)
   d4d4a:	f007 fa18 	bl	dc17e <atoi>
  float pinValue = param.asInt(); // assigning incoming value from pin V1 to a variable
   d4d4e:	ee07 0a90 	vmov	s15, r0
   d4d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d56:	480e      	ldr	r0, [pc, #56]	; (d4d90 <BlynkWidgetWrite1+0x4c>)
  ml_to_collect  = pinValue;
   d4d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d5c:	210c      	movs	r1, #12
  ml_to_collect  = pinValue;
   d4d5e:	ee17 2a90 	vmov	r2, s15
   d4d62:	edc4 7a00 	vstr	s15, [r4]
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4d66:	f7ff ffc3 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "ml_to_collect set to: ");
   d4d6a:	4a0a      	ldr	r2, [pc, #40]	; (d4d94 <BlynkWidgetWrite1+0x50>)
   d4d6c:	4808      	ldr	r0, [pc, #32]	; (d4d90 <BlynkWidgetWrite1+0x4c>)
   d4d6e:	2102      	movs	r1, #2
   d4d70:	f7ff fed2 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, ml_to_collect); 
   d4d74:	6822      	ldr	r2, [r4, #0]
   d4d76:	4806      	ldr	r0, [pc, #24]	; (d4d90 <BlynkWidgetWrite1+0x4c>)
   d4d78:	2102      	movs	r1, #2
   d4d7a:	f7ff ffb9 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " mL\n");  
   d4d7e:	4a06      	ldr	r2, [pc, #24]	; (d4d98 <BlynkWidgetWrite1+0x54>)
   d4d80:	4803      	ldr	r0, [pc, #12]	; (d4d90 <BlynkWidgetWrite1+0x4c>)
   d4d82:	2102      	movs	r1, #2
   d4d84:	f7ff fec8 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4d88:	bd10      	pop	{r4, pc}
   d4d8a:	bf00      	nop
   d4d8c:	2003e494 	.word	0x2003e494
   d4d90:	2003e284 	.word	0x2003e284
   d4d94:	000de153 	.word	0x000de153
   d4d98:	000de16a 	.word	0x000de16a

000d4d9c <BlynkWidgetWrite3>:
{
   d4d9c:	b510      	push	{r4, lr}
   d4d9e:	6808      	ldr	r0, [r1, #0]
  sample_interval_min  = pinValue;	// desired sample interval in minutes
   d4da0:	4c0e      	ldr	r4, [pc, #56]	; (d4ddc <BlynkWidgetWrite3+0x40>)
   d4da2:	f007 f9ec 	bl	dc17e <atoi>
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4da6:	490e      	ldr	r1, [pc, #56]	; (d4de0 <BlynkWidgetWrite3+0x44>)
  sample_interval_min  = pinValue;	// desired sample interval in minutes
   d4da8:	6020      	str	r0, [r4, #0]
  sample_interval_ms = sample_interval_min * 60 * 1000;
   d4daa:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4dae:	4343      	muls	r3, r0
   d4db0:	600b      	str	r3, [r1, #0]
   d4db2:	4602      	mov	r2, r0
  Blynk.virtualWrite(13, sample_interval_min); // virtual pin 
   d4db4:	210d      	movs	r1, #13
   d4db6:	480b      	ldr	r0, [pc, #44]	; (d4de4 <BlynkWidgetWrite3+0x48>)
   d4db8:	f7ff ff9a 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "sample interval set to: ");
   d4dbc:	4a0a      	ldr	r2, [pc, #40]	; (d4de8 <BlynkWidgetWrite3+0x4c>)
   d4dbe:	4809      	ldr	r0, [pc, #36]	; (d4de4 <BlynkWidgetWrite3+0x48>)
   d4dc0:	2102      	movs	r1, #2
   d4dc2:	f7ff fea9 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, sample_interval_min); 
   d4dc6:	6822      	ldr	r2, [r4, #0]
   d4dc8:	4806      	ldr	r0, [pc, #24]	; (d4de4 <BlynkWidgetWrite3+0x48>)
   d4dca:	2102      	movs	r1, #2
   d4dcc:	f7ff ff90 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " min\n");
   d4dd0:	4a06      	ldr	r2, [pc, #24]	; (d4dec <BlynkWidgetWrite3+0x50>)
   d4dd2:	4804      	ldr	r0, [pc, #16]	; (d4de4 <BlynkWidgetWrite3+0x48>)
   d4dd4:	2102      	movs	r1, #2
   d4dd6:	f7ff fe9f 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4dda:	bd10      	pop	{r4, pc}
   d4ddc:	2003e02c 	.word	0x2003e02c
   d4de0:	2003e4b4 	.word	0x2003e4b4
   d4de4:	2003e284 	.word	0x2003e284
   d4de8:	000de16f 	.word	0x000de16f
   d4dec:	000de188 	.word	0x000de188

000d4df0 <BlynkWidgetWrite4>:
{
   d4df0:	b510      	push	{r4, lr}
   d4df2:	6808      	ldr	r0, [r1, #0]
  threshold  = pinValue; // depth threshold (cm) for autosampler to begin sample collection
   d4df4:	4c0c      	ldr	r4, [pc, #48]	; (d4e28 <BlynkWidgetWrite4+0x38>)
   d4df6:	f007 f9c2 	bl	dc17e <atoi>
  Blynk.virtualWrite(14, threshold); // virtual pin
   d4dfa:	210e      	movs	r1, #14
   d4dfc:	4602      	mov	r2, r0
  threshold  = pinValue; // depth threshold (cm) for autosampler to begin sample collection
   d4dfe:	6020      	str	r0, [r4, #0]
  Blynk.virtualWrite(14, threshold); // virtual pin
   d4e00:	480a      	ldr	r0, [pc, #40]	; (d4e2c <BlynkWidgetWrite4+0x3c>)
   d4e02:	f7ff ff75 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "threshold set to: ");
   d4e06:	4a0a      	ldr	r2, [pc, #40]	; (d4e30 <BlynkWidgetWrite4+0x40>)
   d4e08:	4808      	ldr	r0, [pc, #32]	; (d4e2c <BlynkWidgetWrite4+0x3c>)
   d4e0a:	2102      	movs	r1, #2
   d4e0c:	f7ff fe84 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, threshold); 
   d4e10:	6822      	ldr	r2, [r4, #0]
   d4e12:	4806      	ldr	r0, [pc, #24]	; (d4e2c <BlynkWidgetWrite4+0x3c>)
   d4e14:	2102      	movs	r1, #2
   d4e16:	f7ff ff6b 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " cm\n"); 
   d4e1a:	4a06      	ldr	r2, [pc, #24]	; (d4e34 <BlynkWidgetWrite4+0x44>)
   d4e1c:	4803      	ldr	r0, [pc, #12]	; (d4e2c <BlynkWidgetWrite4+0x3c>)
   d4e1e:	2102      	movs	r1, #2
   d4e20:	f7ff fe7a 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4e24:	bd10      	pop	{r4, pc}
   d4e26:	bf00      	nop
   d4e28:	2003e09c 	.word	0x2003e09c
   d4e2c:	2003e284 	.word	0x2003e284
   d4e30:	000de18e 	.word	0x000de18e
   d4e34:	000de1a1 	.word	0x000de1a1

000d4e38 <BlynkWidgetWrite5>:
{
   d4e38:	b510      	push	{r4, lr}
   d4e3a:	6808      	ldr	r0, [r1, #0]
  sample_bottle_mL  = pinValue; // sample bottle volume in mL
   d4e3c:	4c0c      	ldr	r4, [pc, #48]	; (d4e70 <BlynkWidgetWrite5+0x38>)
   d4e3e:	f007 f99e 	bl	dc17e <atoi>
  Blynk.virtualWrite(15, sample_bottle_mL); // virtual pin 
   d4e42:	210f      	movs	r1, #15
   d4e44:	4602      	mov	r2, r0
  sample_bottle_mL  = pinValue; // sample bottle volume in mL
   d4e46:	6020      	str	r0, [r4, #0]
  Blynk.virtualWrite(15, sample_bottle_mL); // virtual pin 
   d4e48:	480a      	ldr	r0, [pc, #40]	; (d4e74 <BlynkWidgetWrite5+0x3c>)
   d4e4a:	f7ff ff51 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, "sample_bottle_mL set to: ");
   d4e4e:	4a0a      	ldr	r2, [pc, #40]	; (d4e78 <BlynkWidgetWrite5+0x40>)
   d4e50:	4808      	ldr	r0, [pc, #32]	; (d4e74 <BlynkWidgetWrite5+0x3c>)
   d4e52:	2102      	movs	r1, #2
   d4e54:	f7ff fe60 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
  Blynk.virtualWrite(V2, sample_bottle_mL); 
   d4e58:	6822      	ldr	r2, [r4, #0]
   d4e5a:	4806      	ldr	r0, [pc, #24]	; (d4e74 <BlynkWidgetWrite5+0x3c>)
   d4e5c:	2102      	movs	r1, #2
   d4e5e:	f7ff ff47 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, " mL\n");
   d4e62:	4a06      	ldr	r2, [pc, #24]	; (d4e7c <BlynkWidgetWrite5+0x44>)
   d4e64:	4803      	ldr	r0, [pc, #12]	; (d4e74 <BlynkWidgetWrite5+0x3c>)
   d4e66:	2102      	movs	r1, #2
   d4e68:	f7ff fe56 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d4e6c:	bd10      	pop	{r4, pc}
   d4e6e:	bf00      	nop
   d4e70:	2003e028 	.word	0x2003e028
   d4e74:	2003e284 	.word	0x2003e284
   d4e78:	000de1a6 	.word	0x000de1a6
   d4e7c:	000de16a 	.word	0x000de16a

000d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e84:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4e88:	ab08      	add	r3, sp, #32
   d4e8a:	2400      	movs	r4, #0
   d4e8c:	4605      	mov	r5, r0
   d4e8e:	460e      	mov	r6, r1
   d4e90:	9305      	str	r3, [sp, #20]
   d4e92:	a805      	add	r0, sp, #20
   d4e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4e98:	4915      	ldr	r1, [pc, #84]	; (d4ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x70>)
   d4e9a:	ee10 8a10 	vmov	r8, s0
   d4e9e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4ea2:	f7ff f908 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4ea6:	a805      	add	r0, sp, #20
   d4ea8:	4631      	mov	r1, r6
   d4eaa:	f7ff f96b 	bl	d4184 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d4eae:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
   d4eb2:	9b05      	ldr	r3, [sp, #20]
   d4eb4:	4640      	mov	r0, r8
   d4eb6:	1b8f      	subs	r7, r1, r6
   d4eb8:	441e      	add	r6, r3
   d4eba:	f006 fd9f 	bl	db9fc <__aeabi_f2d>
   d4ebe:	4a0d      	ldr	r2, [pc, #52]	; (d4ef4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x74>)
   d4ec0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ec4:	4639      	mov	r1, r7
   d4ec6:	4630      	mov	r0, r6
   d4ec8:	f002 ffc8 	bl	d7e5c <snprintf>
   d4ecc:	1c43      	adds	r3, r0, #1
   d4ece:	9806      	ldr	r0, [sp, #24]
   d4ed0:	4403      	add	r3, r0
   d4ed2:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4ed4:	3b01      	subs	r3, #1
   d4ed6:	9300      	str	r3, [sp, #0]
   d4ed8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4edc:	9b05      	ldr	r3, [sp, #20]
   d4ede:	4622      	mov	r2, r4
   d4ee0:	2114      	movs	r1, #20
   d4ee2:	4628      	mov	r0, r5
   d4ee4:	f7ff fd58 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4ee8:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ef0:	000de129 	.word	0x000de129
   d4ef4:	000de1c0 	.word	0x000de1c0

000d4ef8 <_Z13reportingDatav>:
bool reportingData() {  // send data to Blynk
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	ed2d 8b02 	vpush	{d8}
  Blynk.virtualWrite(10, float(volCal1*sampleSteps)); // virtual pin 
   d4efe:	4b21      	ldr	r3, [pc, #132]	; (d4f84 <_Z13reportingDatav+0x8c>)
   d4f00:	4821      	ldr	r0, [pc, #132]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f02:	ed93 0a00 	vldr	s0, [r3]
   d4f06:	4b21      	ldr	r3, [pc, #132]	; (d4f8c <_Z13reportingDatav+0x94>)
  Blynk.virtualWrite(13, float(primeMillis)/1000); // virtual pin 
   d4f08:	ed9f 8a21 	vldr	s16, [pc, #132]	; d4f90 <_Z13reportingDatav+0x98>
  Blynk.virtualWrite(10, float(volCal1*sampleSteps)); // virtual pin 
   d4f0c:	edd3 7a00 	vldr	s15, [r3]
   d4f10:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f14:	210a      	movs	r1, #10
   d4f16:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4f1a:	f7ff ffb1 	bl	d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(12, ml_to_collect); // virtual pin
   d4f1e:	4b1d      	ldr	r3, [pc, #116]	; (d4f94 <_Z13reportingDatav+0x9c>)
   d4f20:	4819      	ldr	r0, [pc, #100]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f22:	681a      	ldr	r2, [r3, #0]
   d4f24:	210c      	movs	r1, #12
   d4f26:	f7ff fee3 	bl	d4cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(13, float(primeMillis)/1000); // virtual pin 
   d4f2a:	4b1b      	ldr	r3, [pc, #108]	; (d4f98 <_Z13reportingDatav+0xa0>)
   d4f2c:	4816      	ldr	r0, [pc, #88]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f2e:	ed93 0a00 	vldr	s0, [r3]
   d4f32:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f36:	210d      	movs	r1, #13
   d4f38:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f3c:	f7ff ffa0 	bl	d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(18, float(sampleMillis)/1000); // virtual pin
   d4f40:	4b16      	ldr	r3, [pc, #88]	; (d4f9c <_Z13reportingDatav+0xa4>)
   d4f42:	4811      	ldr	r0, [pc, #68]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f44:	2112      	movs	r1, #18
   d4f46:	ed93 0a00 	vldr	s0, [r3]
   d4f4a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f4e:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f52:	f7ff ff95 	bl	d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(16, float(purgeMillis)/1000); // virtual pin
   d4f56:	4b12      	ldr	r3, [pc, #72]	; (d4fa0 <_Z13reportingDatav+0xa8>)
   d4f58:	480b      	ldr	r0, [pc, #44]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f5a:	2110      	movs	r1, #16
   d4f5c:	ed93 0a00 	vldr	s0, [r3]
   d4f60:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d4f64:	ee80 0a08 	vdiv.f32	s0, s0, s16
   d4f68:	f7ff ff8a 	bl	d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  Blynk.virtualWrite(17, depth); // virtual pin
   d4f6c:	4b0d      	ldr	r3, [pc, #52]	; (d4fa4 <_Z13reportingDatav+0xac>)
   d4f6e:	4806      	ldr	r0, [pc, #24]	; (d4f88 <_Z13reportingDatav+0x90>)
   d4f70:	2111      	movs	r1, #17
   d4f72:	ed93 0a00 	vldr	s0, [r3]
   d4f76:	f7ff ff83 	bl	d4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
}
   d4f7a:	ecbd 8b02 	vpop	{d8}
   d4f7e:	2001      	movs	r0, #1
   d4f80:	bd08      	pop	{r3, pc}
   d4f82:	bf00      	nop
   d4f84:	2003e024 	.word	0x2003e024
   d4f88:	2003e284 	.word	0x2003e284
   d4f8c:	2003e0a0 	.word	0x2003e0a0
   d4f90:	447a0000 	.word	0x447a0000
   d4f94:	2003e494 	.word	0x2003e494
   d4f98:	2003e4a0 	.word	0x2003e4a0
   d4f9c:	2003e4ac 	.word	0x2003e4ac
   d4fa0:	2003e4a4 	.word	0x2003e4a4
   d4fa4:	2003e2ec 	.word	0x2003e2ec

000d4fa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4faa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4fae:	ab08      	add	r3, sp, #32
   d4fb0:	2400      	movs	r4, #0
   d4fb2:	4605      	mov	r5, r0
   d4fb4:	460f      	mov	r7, r1
   d4fb6:	9305      	str	r3, [sp, #20]
   d4fb8:	a805      	add	r0, sp, #20
   d4fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4fbe:	490e      	ldr	r1, [pc, #56]	; (d4ff8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_+0x50>)
   d4fc0:	4616      	mov	r6, r2
   d4fc2:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4fc6:	f7ff f876 	bl	d40b6 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4fca:	4639      	mov	r1, r7
   d4fcc:	a805      	add	r0, sp, #20
   d4fce:	f7ff f8d9 	bl	d4184 <_ZN10BlynkParam3addEi>
        add(last);
   d4fd2:	4631      	mov	r1, r6
   d4fd4:	a805      	add	r0, sp, #20
   d4fd6:	f7ff f8c4 	bl	d4162 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4fda:	9b06      	ldr	r3, [sp, #24]
   d4fdc:	3b01      	subs	r3, #1
   d4fde:	9300      	str	r3, [sp, #0]
   d4fe0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4fe4:	9b05      	ldr	r3, [sp, #20]
   d4fe6:	4622      	mov	r2, r4
   d4fe8:	2114      	movs	r1, #20
   d4fea:	4628      	mov	r0, r5
   d4fec:	f7ff fcd4 	bl	d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4ff0:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ff6:	bf00      	nop
   d4ff8:	000de129 	.word	0x000de129

000d4ffc <_Z20printStateTransitionv>:
{
   d4ffc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4ffe:	4d12      	ldr	r5, [pc, #72]	; (d5048 <_Z20printStateTransitionv+0x4c>)
   d5000:	4c12      	ldr	r4, [pc, #72]	; (d504c <_Z20printStateTransitionv+0x50>)
   d5002:	4913      	ldr	r1, [pc, #76]	; (d5050 <_Z20printStateTransitionv+0x54>)
   d5004:	782a      	ldrb	r2, [r5, #0]
   d5006:	7820      	ldrb	r0, [r4, #0]
{
   d5008:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d500a:	230e      	movs	r3, #14
   d500c:	fb03 1202 	mla	r2, r3, r2, r1
   d5010:	9200      	str	r2, [sp, #0]
   d5012:	fb03 1300 	mla	r3, r3, r0, r1
   d5016:	4a0f      	ldr	r2, [pc, #60]	; (d5054 <_Z20printStateTransitionv+0x58>)
   d5018:	2128      	movs	r1, #40	; 0x28
   d501a:	a802      	add	r0, sp, #8
   d501c:	f002 ff1e 	bl	d7e5c <snprintf>
  oldState = state;
   d5020:	782b      	ldrb	r3, [r5, #0]
   d5022:	7023      	strb	r3, [r4, #0]
  Serial.println(stateTransitionString);
   d5024:	f004 f9c2 	bl	d93ac <_Z16_fetch_usbserialv>
   d5028:	a902      	add	r1, sp, #8
   d502a:	f003 fb20 	bl	d866e <_ZN5Print7printlnEPKc>
  Blynk.virtualWrite(V2, stateTransitionString);
   d502e:	aa02      	add	r2, sp, #8
   d5030:	4809      	ldr	r0, [pc, #36]	; (d5058 <_Z20printStateTransitionv+0x5c>)
   d5032:	2102      	movs	r1, #2
   d5034:	f7ff ffb8 	bl	d4fa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPcEEEviDpT_>
  Blynk.virtualWrite(V2, "\n");
   d5038:	4a08      	ldr	r2, [pc, #32]	; (d505c <_Z20printStateTransitionv+0x60>)
   d503a:	4807      	ldr	r0, [pc, #28]	; (d5058 <_Z20printStateTransitionv+0x5c>)
   d503c:	2102      	movs	r1, #2
   d503e:	f7ff fd6b 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
}
   d5042:	b00d      	add	sp, #52	; 0x34
   d5044:	bd30      	pop	{r4, r5, pc}
   d5046:	bf00      	nop
   d5048:	2003e4c8 	.word	0x2003e4c8
   d504c:	2003e498 	.word	0x2003e498
   d5050:	2003e035 	.word	0x2003e035
   d5054:	000de1c6 	.word	0x000de1c6
   d5058:	2003e284 	.word	0x2003e284
   d505c:	000de638 	.word	0x000de638

000d5060 <_Z11primeSystemv>:
bool primeSystem() {    // prime system with water 
   d5060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   digitalWrite(STEPEN_PIN1, LOW); // Pump on
   d5064:	2100      	movs	r1, #0
   d5066:	2002      	movs	r0, #2
   d5068:	f004 fef1 	bl	d9e4e <digitalWrite>
   d506c:	f002 fca2 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
   startMillis=millis();
   d5070:	4d22      	ldr	r5, [pc, #136]	; (d50fc <_Z11primeSystemv+0x9c>)
   currentMillis=startMillis;
   d5072:	4c23      	ldr	r4, [pc, #140]	; (d5100 <_Z11primeSystemv+0xa0>)
   startMillis=millis();
   d5074:	6028      	str	r0, [r5, #0]
   currentMillis=startMillis;
   d5076:	6020      	str	r0, [r4, #0]
   waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d5078:	2004      	movs	r0, #4
   d507a:	f004 ff01 	bl	d9e80 <digitalRead>
   d507e:	4601      	mov	r1, r0
   d5080:	4820      	ldr	r0, [pc, #128]	; (d5104 <_Z11primeSystemv+0xa4>)
   d5082:	4e21      	ldr	r6, [pc, #132]	; (d5108 <_Z11primeSystemv+0xa8>)
   d5084:	4f21      	ldr	r7, [pc, #132]	; (d510c <_Z11primeSystemv+0xac>)
     stepper1.setSpeed(stepperSpeed);
   d5086:	f8df 9094 	ldr.w	r9, [pc, #148]	; d511c <_Z11primeSystemv+0xbc>
   d508a:	f8df 8088 	ldr.w	r8, [pc, #136]	; d5114 <_Z11primeSystemv+0xb4>
   waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d508e:	f7ff f95f 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
   d5092:	6030      	str	r0, [r6, #0]
   while (waterMean != 0 && (currentMillis-startMillis)<maxprimeMillis){
   d5094:	6833      	ldr	r3, [r6, #0]
   d5096:	b1fb      	cbz	r3, d50d8 <_Z11primeSystemv+0x78>
   d5098:	682a      	ldr	r2, [r5, #0]
   d509a:	6823      	ldr	r3, [r4, #0]
   d509c:	1a9b      	subs	r3, r3, r2
   d509e:	683a      	ldr	r2, [r7, #0]
   d50a0:	4293      	cmp	r3, r2
   d50a2:	d219      	bcs.n	d50d8 <_Z11primeSystemv+0x78>
     stepper1.setSpeed(stepperSpeed);
   d50a4:	edd9 7a00 	vldr	s15, [r9]
   d50a8:	4640      	mov	r0, r8
   d50aa:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d50ae:	f000 fe9b 	bl	d5de8 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d50b2:	4640      	mov	r0, r8
   d50b4:	f000 fcf8 	bl	d5aa8 <_ZN12AccelStepper8runSpeedEv>
   d50b8:	f002 fc7c 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
     currentMillis=millis();   // wait for prime of tubing or runs of time
   d50bc:	6020      	str	r0, [r4, #0]
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d50be:	2004      	movs	r0, #4
   d50c0:	f004 fede 	bl	d9e80 <digitalRead>
   d50c4:	4601      	mov	r1, r0
   d50c6:	480f      	ldr	r0, [pc, #60]	; (d5104 <_Z11primeSystemv+0xa4>)
   d50c8:	f7ff f942 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
     Blynk.run();
   d50cc:	2100      	movs	r1, #0
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN)); //  noncontact water sensor on hose
   d50ce:	6030      	str	r0, [r6, #0]
     Blynk.run();
   d50d0:	480f      	ldr	r0, [pc, #60]	; (d5110 <_Z11primeSystemv+0xb0>)
   d50d2:	f7ff fba9 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (waterMean != 0 && (currentMillis-startMillis)<maxprimeMillis){
   d50d6:	e7dd      	b.n	d5094 <_Z11primeSystemv+0x34>
   stepper1.stop();       // turn Pump1 Off
   d50d8:	480e      	ldr	r0, [pc, #56]	; (d5114 <_Z11primeSystemv+0xb4>)
   d50da:	f000 fecd 	bl	d5e78 <_ZN12AccelStepper4stopEv>
   delay(50);
   d50de:	2032      	movs	r0, #50	; 0x32
   d50e0:	f003 fc7c 	bl	d89dc <delay>
   if((currentMillis-startMillis)<=maxprimeMillis){
   d50e4:	682a      	ldr	r2, [r5, #0]
   d50e6:	6823      	ldr	r3, [r4, #0]
   d50e8:	1a9b      	subs	r3, r3, r2
   d50ea:	683a      	ldr	r2, [r7, #0]
   d50ec:	4293      	cmp	r3, r2
    primeMillis=currentMillis-startMillis;
   d50ee:	bf9d      	ittte	ls
   d50f0:	4a09      	ldrls	r2, [pc, #36]	; (d5118 <_Z11primeSystemv+0xb8>)
   d50f2:	6013      	strls	r3, [r2, #0]
    return 1;   // successful prime
   d50f4:	2001      	movls	r0, #1
   else return 0;   // prime failed
   d50f6:	2000      	movhi	r0, #0
}
   d50f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d50fc:	2003e4c4 	.word	0x2003e4c4
   d5100:	2003e2e8 	.word	0x2003e2e8
   d5104:	2003e2f0 	.word	0x2003e2f0
   d5108:	2003e544 	.word	0x2003e544
   d510c:	2003e018 	.word	0x2003e018
   d5110:	2003e284 	.word	0x2003e284
   d5114:	2003e4cc 	.word	0x2003e4cc
   d5118:	2003e4a0 	.word	0x2003e4a0
   d511c:	2003e098 	.word	0x2003e098

000d5120 <_Z13collectSamplev>:
bool collectSample() {  // pump desired volume into sample bottle
   d5120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   digitalWrite(STEPEN_PIN1,LOW);    // pump1 on
   d5124:	2100      	movs	r1, #0
   d5126:	2002      	movs	r0, #2
   d5128:	f004 fe91 	bl	d9e4e <digitalWrite>
   d512c:	f002 fc42 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
   sampleSteps = ml_to_collect/volCal1;
   d5130:	4b53      	ldr	r3, [pc, #332]	; (d5280 <_Z13collectSamplev+0x160>)
   startMillis=millis();
   d5132:	4d54      	ldr	r5, [pc, #336]	; (d5284 <_Z13collectSamplev+0x164>)
   sampleSteps = ml_to_collect/volCal1;
   d5134:	ed93 7a00 	vldr	s14, [r3]
   d5138:	4b53      	ldr	r3, [pc, #332]	; (d5288 <_Z13collectSamplev+0x168>)
   currentMillis=startMillis;
   d513a:	4c54      	ldr	r4, [pc, #336]	; (d528c <_Z13collectSamplev+0x16c>)
   sampleSteps = ml_to_collect/volCal1;
   d513c:	edd3 6a00 	vldr	s13, [r3]
   d5140:	4e53      	ldr	r6, [pc, #332]	; (d5290 <_Z13collectSamplev+0x170>)
   startMillis=millis();
   d5142:	6028      	str	r0, [r5, #0]
   sampleSteps = ml_to_collect/volCal1;
   d5144:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   currentMillis=startMillis;
   d5148:	6020      	str	r0, [r4, #0]
   sampleSteps = ml_to_collect/volCal1;
   d514a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   stepper1.setCurrentPosition(0);
   d514e:	4851      	ldr	r0, [pc, #324]	; (d5294 <_Z13collectSamplev+0x174>)
   while (stepper1.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d5150:	f8df b140 	ldr.w	fp, [pc, #320]	; d5294 <_Z13collectSamplev+0x174>
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d5154:	f8df 9160 	ldr.w	r9, [pc, #352]	; d52b8 <_Z13collectSamplev+0x198>
   stepper1.setCurrentPosition(0);
   d5158:	2100      	movs	r1, #0
   d515a:	46b2      	mov	sl, r6
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d515c:	f04f 0800 	mov.w	r8, #0
   sampleSteps = ml_to_collect/volCal1;
   d5160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d5164:	edc6 7a00 	vstr	s15, [r6]
   stepper1.setCurrentPosition(0);
   d5168:	f000 fcbd 	bl	d5ae6 <_ZN12AccelStepper18setCurrentPositionEl>
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d516c:	a742      	add	r7, pc, #264	; (adr r7, d5278 <_Z13collectSamplev+0x158>)
   d516e:	e9d7 6700 	ldrd	r6, r7, [r7]
   while (stepper1.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d5172:	4658      	mov	r0, fp
   d5174:	f000 fcb5 	bl	d5ae2 <_ZN12AccelStepper15currentPositionEv>
   d5178:	f8da 3000 	ldr.w	r3, [sl]
   d517c:	4a46      	ldr	r2, [pc, #280]	; (d5298 <_Z13collectSamplev+0x178>)
   d517e:	4298      	cmp	r0, r3
   d5180:	d05e      	beq.n	d5240 <_Z13collectSamplev+0x120>
   d5182:	6829      	ldr	r1, [r5, #0]
   d5184:	6823      	ldr	r3, [r4, #0]
   d5186:	1a5b      	subs	r3, r3, r1
   d5188:	6811      	ldr	r1, [r2, #0]
   d518a:	428b      	cmp	r3, r1
   d518c:	d258      	bcs.n	d5240 <_Z13collectSamplev+0x120>
   d518e:	f002 fc11 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
     stepper1.setSpeed(stepperSpeed);
   d5192:	4b42      	ldr	r3, [pc, #264]	; (d529c <_Z13collectSamplev+0x17c>)
     currentMillis=millis(); // wait for sampling to complete or run out of time
   d5194:	6020      	str	r0, [r4, #0]
     stepper1.setSpeed(stepperSpeed);
   d5196:	ed93 0a00 	vldr	s0, [r3]
   d519a:	4658      	mov	r0, fp
   d519c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   d51a0:	f000 fe22 	bl	d5de8 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d51a4:	4658      	mov	r0, fp
   d51a6:	f000 fc7f 	bl	d5aa8 <_ZN12AccelStepper8runSpeedEv>
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d51aa:	2011      	movs	r0, #17
   d51ac:	f7ff f840 	bl	d4230 <_Z11ReadVoltageh>
   d51b0:	ec51 0b10 	vmov	r0, r1, d0
   d51b4:	f006 ff72 	bl	dc09c <__aeabi_d2f>
	_sum += value;
   d51b8:	4b39      	ldr	r3, [pc, #228]	; (d52a0 <_Z13collectSamplev+0x180>)
	if (_count >= _windowSize)
   d51ba:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
	_sum += value;
   d51be:	edd3 7a04 	vldr	s15, [r3, #16]
   d51c2:	ee07 0a10 	vmov	s14, r0
	if (_count >= _windowSize)
   d51c6:	4291      	cmp	r1, r2
	_sum += value;
   d51c8:	ee77 7a27 	vadd.f32	s15, s14, s15
		_sum -= *_accessor;
   d51cc:	bfa8      	it	ge
   d51ce:	685a      	ldrge	r2, [r3, #4]
	_sum += value;
   d51d0:	edc3 7a04 	vstr	s15, [r3, #16]
		_sum -= *_accessor;
   d51d4:	bfa8      	it	ge
   d51d6:	edd2 6a00 	vldrge	s13, [r2]
	*_accessor = value;
   d51da:	685a      	ldr	r2, [r3, #4]
		_sum -= *_accessor;
   d51dc:	bfa4      	itt	ge
   d51de:	ee77 7ae6 	vsubge.f32	s15, s15, s13
   d51e2:	edc3 7a04 	vstrge	s15, [r3, #16]
	*_accessor = value;
   d51e6:	6010      	str	r0, [r2, #0]
	if (_accessor >= _items + _windowSize)
   d51e8:	6818      	ldr	r0, [r3, #0]
	++_accessor;
   d51ea:	685a      	ldr	r2, [r3, #4]
	if (_accessor >= _items + _windowSize)
   d51ec:	6899      	ldr	r1, [r3, #8]
	return (_sum / _count);
   d51ee:	ed93 7a04 	vldr	s14, [r3, #16]
	if (_accessor >= _items + _windowSize)
   d51f2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
	++_accessor;
   d51f6:	3204      	adds	r2, #4
		_accessor = _items;
   d51f8:	4562      	cmp	r2, ip
   d51fa:	bf28      	it	cs
   d51fc:	4602      	movcs	r2, r0
   d51fe:	605a      	str	r2, [r3, #4]
	if (_count < _windowSize)
   d5200:	68da      	ldr	r2, [r3, #12]
   d5202:	428a      	cmp	r2, r1
		++_count;
   d5204:	bfbc      	itt	lt
   d5206:	3201      	addlt	r2, #1
   d5208:	60da      	strlt	r2, [r3, #12]
	return (_sum / _count);
   d520a:	edd3 7a03 	vldr	s15, [r3, #12]
   d520e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5212:	eec7 7a27 	vdiv.f32	s15, s14, s15
   d5216:	ee17 0a90 	vmov	r0, s15
   d521a:	f006 fbef 	bl	db9fc <__aeabi_f2d>
   d521e:	4642      	mov	r2, r8
   d5220:	464b      	mov	r3, r9
   d5222:	f006 fc43 	bl	dbaac <__aeabi_dmul>
   d5226:	463b      	mov	r3, r7
   d5228:	4632      	mov	r2, r6
   d522a:	f006 fc3f 	bl	dbaac <__aeabi_dmul>
   d522e:	f006 ff35 	bl	dc09c <__aeabi_d2f>
   d5232:	4b1c      	ldr	r3, [pc, #112]	; (d52a4 <_Z13collectSamplev+0x184>)
     Blynk.run();
   d5234:	2100      	movs	r1, #0
     battVolt = voltFilter.AddValue(ReadVoltage(VOLT_PIN))*10.0*1.0125; //  volt source
   d5236:	6018      	str	r0, [r3, #0]
     Blynk.run();
   d5238:	481b      	ldr	r0, [pc, #108]	; (d52a8 <_Z13collectSamplev+0x188>)
   d523a:	f7ff faf5 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (stepper1.currentPosition() != sampleSteps && (currentMillis-startMillis)<maxsampleMillis){   
   d523e:	e798      	b.n	d5172 <_Z13collectSamplev+0x52>
   stepper1.stop();       // turn Pump Off
   d5240:	4814      	ldr	r0, [pc, #80]	; (d5294 <_Z13collectSamplev+0x174>)
   d5242:	f000 fe19 	bl	d5e78 <_ZN12AccelStepper4stopEv>
   delay(50);
   d5246:	2032      	movs	r0, #50	; 0x32
   d5248:	f003 fbc8 	bl	d89dc <delay>
   if((currentMillis-startMillis)<maxsampleMillis){
   d524c:	4a12      	ldr	r2, [pc, #72]	; (d5298 <_Z13collectSamplev+0x178>)
   d524e:	6829      	ldr	r1, [r5, #0]
   d5250:	6823      	ldr	r3, [r4, #0]
   d5252:	6812      	ldr	r2, [r2, #0]
   d5254:	1a5b      	subs	r3, r3, r1
   d5256:	4293      	cmp	r3, r2
   d5258:	d20a      	bcs.n	d5270 <_Z13collectSamplev+0x150>
    sampleMillis=currentMillis-startMillis;
   d525a:	4a14      	ldr	r2, [pc, #80]	; (d52ac <_Z13collectSamplev+0x18c>)
   d525c:	6013      	str	r3, [r2, #0]
    old_sample_millis = startMillis;
   d525e:	4b14      	ldr	r3, [pc, #80]	; (d52b0 <_Z13collectSamplev+0x190>)
	  sample_number++;
   d5260:	4a14      	ldr	r2, [pc, #80]	; (d52b4 <_Z13collectSamplev+0x194>)
    old_sample_millis = startMillis;
   d5262:	6019      	str	r1, [r3, #0]
	  sample_number++;
   d5264:	6813      	ldr	r3, [r2, #0]
   d5266:	3301      	adds	r3, #1
   d5268:	6013      	str	r3, [r2, #0]
    return 1;   // successful sample
   d526a:	2001      	movs	r0, #1
}
   d526c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   else return 0;   // sample failed
   d5270:	2000      	movs	r0, #0
   d5272:	e7fb      	b.n	d526c <_Z13collectSamplev+0x14c>
   d5274:	f3af 8000 	nop.w
   d5278:	33333333 	.word	0x33333333
   d527c:	3ff03333 	.word	0x3ff03333
   d5280:	2003e494 	.word	0x2003e494
   d5284:	2003e4c4 	.word	0x2003e4c4
   d5288:	2003e0a0 	.word	0x2003e0a0
   d528c:	2003e2e8 	.word	0x2003e2e8
   d5290:	2003e024 	.word	0x2003e024
   d5294:	2003e4cc 	.word	0x2003e4cc
   d5298:	2003e020 	.word	0x2003e020
   d529c:	2003e098 	.word	0x2003e098
   d52a0:	2003e530 	.word	0x2003e530
   d52a4:	2003e2e4 	.word	0x2003e2e4
   d52a8:	2003e284 	.word	0x2003e284
   d52ac:	2003e4ac 	.word	0x2003e4ac
   d52b0:	2003e49c 	.word	0x2003e49c
   d52b4:	2003e030 	.word	0x2003e030
   d52b8:	40240000 	.word	0x40240000

000d52bc <_Z11purgeSystemv>:
bool purgeSystem() {  // reverse pump and purge water lines of all water
   d52bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   if (primeMillis>1000){           // if > 1s
   d52c0:	4b2b      	ldr	r3, [pc, #172]	; (d5370 <_Z11purgeSystemv+0xb4>)
   d52c2:	4d2c      	ldr	r5, [pc, #176]	; (d5374 <_Z11purgeSystemv+0xb8>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   startMillis=millis();
   d52c6:	4e2c      	ldr	r6, [pc, #176]	; (d5378 <_Z11purgeSystemv+0xbc>)
   currentMillis=startMillis;
   d52c8:	4c2c      	ldr	r4, [pc, #176]	; (d537c <_Z11purgeSystemv+0xc0>)
   sampleStepsPerge = sampleSteps*-1;
   d52ca:	4f2d      	ldr	r7, [pc, #180]	; (d5380 <_Z11purgeSystemv+0xc4>)
   while (stepper1.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d52cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5388 <_Z11purgeSystemv+0xcc>
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d52d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; d5398 <_Z11purgeSystemv+0xdc>
   d52d4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; d539c <_Z11purgeSystemv+0xe0>
   if (primeMillis>1000){           // if > 1s
   d52d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     maxpurgeMillis= primeMillis*2;}
   d52dc:	bf8c      	ite	hi
   d52de:	005b      	lslhi	r3, r3, #1
   maxpurgeMillis= 45*1000;}     // if <1s then default to 45s. 
   d52e0:	f64a 73c8 	movwls	r3, #45000	; 0xafc8
   d52e4:	602b      	str	r3, [r5, #0]
   d52e6:	f002 fb65 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
   sampleStepsPerge = sampleSteps*-1;
   d52ea:	4b26      	ldr	r3, [pc, #152]	; (d5384 <_Z11purgeSystemv+0xc8>)
   startMillis=millis();
   d52ec:	6030      	str	r0, [r6, #0]
   sampleStepsPerge = sampleSteps*-1;
   d52ee:	681b      	ldr	r3, [r3, #0]
   currentMillis=startMillis;
   d52f0:	6020      	str	r0, [r4, #0]
   sampleStepsPerge = sampleSteps*-1;
   d52f2:	425b      	negs	r3, r3
   stepper1.setCurrentPosition(0);
   d52f4:	4824      	ldr	r0, [pc, #144]	; (d5388 <_Z11purgeSystemv+0xcc>)
   sampleStepsPerge = sampleSteps*-1;
   d52f6:	603b      	str	r3, [r7, #0]
   stepper1.setCurrentPosition(0);
   d52f8:	2100      	movs	r1, #0
   d52fa:	f000 fbf4 	bl	d5ae6 <_ZN12AccelStepper18setCurrentPositionEl>
   while (stepper1.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d52fe:	4640      	mov	r0, r8
   d5300:	f000 fbef 	bl	d5ae2 <_ZN12AccelStepper15currentPositionEv>
   d5304:	683b      	ldr	r3, [r7, #0]
   d5306:	4298      	cmp	r0, r3
   d5308:	d01e      	beq.n	d5348 <_Z11purgeSystemv+0x8c>
   d530a:	6832      	ldr	r2, [r6, #0]
   d530c:	6823      	ldr	r3, [r4, #0]
   d530e:	1a9b      	subs	r3, r3, r2
   d5310:	682a      	ldr	r2, [r5, #0]
   d5312:	4293      	cmp	r3, r2
   d5314:	d218      	bcs.n	d5348 <_Z11purgeSystemv+0x8c>
   d5316:	f002 fb4d 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
     currentMillis=millis(); // wait for purge to complete or run out of time
   d531a:	6020      	str	r0, [r4, #0]
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d531c:	2004      	movs	r0, #4
   d531e:	f004 fdaf 	bl	d9e80 <digitalRead>
   d5322:	4601      	mov	r1, r0
   d5324:	4650      	mov	r0, sl
   d5326:	f7ff f813 	bl	d4350 <_ZN10MeanFilterIlE8AddValueEl>
     stepper1.setSpeed(-1000);
   d532a:	ed9f 0a18 	vldr	s0, [pc, #96]	; d538c <_Z11purgeSystemv+0xd0>
     waterMean = meanFilter.AddValue(digitalRead(WATER_PIN));
   d532e:	f8c9 0000 	str.w	r0, [r9]
     stepper1.setSpeed(-1000);
   d5332:	4640      	mov	r0, r8
   d5334:	f000 fd58 	bl	d5de8 <_ZN12AccelStepper8setSpeedEf>
     stepper1.runSpeed();
   d5338:	4640      	mov	r0, r8
   d533a:	f000 fbb5 	bl	d5aa8 <_ZN12AccelStepper8runSpeedEv>
     Blynk.run();
   d533e:	2100      	movs	r1, #0
   d5340:	4813      	ldr	r0, [pc, #76]	; (d5390 <_Z11purgeSystemv+0xd4>)
   d5342:	f7ff fa71 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   while (stepper1.currentPosition() != sampleStepsPerge && (currentMillis-startMillis)<maxpurgeMillis){
   d5346:	e7da      	b.n	d52fe <_Z11purgeSystemv+0x42>
   stepper1.stop();       // turn Pump1 Off
   d5348:	480f      	ldr	r0, [pc, #60]	; (d5388 <_Z11purgeSystemv+0xcc>)
   d534a:	f000 fd95 	bl	d5e78 <_ZN12AccelStepper4stopEv>
   digitalWrite(STEPEN_PIN1,HIGH);    // pump1 off, forward
   d534e:	2002      	movs	r0, #2
   d5350:	2101      	movs	r1, #1
   d5352:	f004 fd7c 	bl	d9e4e <digitalWrite>
   if((currentMillis-startMillis)<=maxpurgeMillis){
   d5356:	6832      	ldr	r2, [r6, #0]
   d5358:	6823      	ldr	r3, [r4, #0]
   d535a:	1a9b      	subs	r3, r3, r2
   d535c:	682a      	ldr	r2, [r5, #0]
   d535e:	4293      	cmp	r3, r2
    purgeMillis=currentMillis-startMillis;
   d5360:	bf9d      	ittte	ls
   d5362:	4a0c      	ldrls	r2, [pc, #48]	; (d5394 <_Z11purgeSystemv+0xd8>)
   d5364:	6013      	strls	r3, [r2, #0]
    return 1;   // successful sample
   d5366:	2001      	movls	r0, #1
   else return 0;   // purge failed
   d5368:	2000      	movhi	r0, #0
}
   d536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d536e:	bf00      	nop
   d5370:	2003e4a0 	.word	0x2003e4a0
   d5374:	2003e01c 	.word	0x2003e01c
   d5378:	2003e4c4 	.word	0x2003e4c4
   d537c:	2003e2e8 	.word	0x2003e2e8
   d5380:	2003e4b0 	.word	0x2003e4b0
   d5384:	2003e024 	.word	0x2003e024
   d5388:	2003e4cc 	.word	0x2003e4cc
   d538c:	c47a0000 	.word	0xc47a0000
   d5390:	2003e284 	.word	0x2003e284
   d5394:	2003e4a4 	.word	0x2003e4a4
   d5398:	2003e2f0 	.word	0x2003e2f0
   d539c:	2003e544 	.word	0x2003e544

000d53a0 <loop>:
{
   d53a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53a4:	ed2d 8b02 	vpush	{d8}
  switch(state) {
   d53a8:	4c79      	ldr	r4, [pc, #484]	; (d5590 <loop+0x1f0>)
  Blynk.run();
   d53aa:	487a      	ldr	r0, [pc, #488]	; (d5594 <loop+0x1f4>)
{
   d53ac:	b089      	sub	sp, #36	; 0x24
  Blynk.run();
   d53ae:	2100      	movs	r1, #0
   d53b0:	f7ff fa3a 	bl	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  switch(state) {
   d53b4:	7823      	ldrb	r3, [r4, #0]
   d53b6:	3b01      	subs	r3, #1
   d53b8:	2b05      	cmp	r3, #5
   d53ba:	d82b      	bhi.n	d5414 <loop+0x74>
   d53bc:	e8df f003 	tbb	[pc, r3]
   d53c0:	5e510385 	.word	0x5e510385
   d53c4:	766a      	.short	0x766a
   if (state != oldState) printStateTransition();
   d53c6:	4b74      	ldr	r3, [pc, #464]	; (d5598 <loop+0x1f8>)
   d53c8:	781b      	ldrb	r3, [r3, #0]
   d53ca:	2b02      	cmp	r3, #2
   d53cc:	d001      	beq.n	d53d2 <loop+0x32>
   d53ce:	f7ff fe15 	bl	d4ffc <_Z20printStateTransitionv>
   if (ml_to_collect>0 && check_sample_interval()==1 && depth >= threshold && check_sample_number()==1) state = PRIME_STATE;
   d53d2:	4d72      	ldr	r5, [pc, #456]	; (d559c <loop+0x1fc>)
   d53d4:	682a      	ldr	r2, [r5, #0]
   d53d6:	2a00      	cmp	r2, #0
   d53d8:	dd1c      	ble.n	d5414 <loop+0x74>
   d53da:	f7fe fef7 	bl	d41cc <_Z21check_sample_intervalv>
   d53de:	b190      	cbz	r0, d5406 <loop+0x66>
   d53e0:	4b6f      	ldr	r3, [pc, #444]	; (d55a0 <loop+0x200>)
   d53e2:	edd3 7a00 	vldr	s15, [r3]
   d53e6:	4b6f      	ldr	r3, [pc, #444]	; (d55a4 <loop+0x204>)
   d53e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d53ec:	ed93 7a00 	vldr	s14, [r3]
   d53f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d53f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d53f8:	d805      	bhi.n	d5406 <loop+0x66>
   d53fa:	f7fe fefd 	bl	d41f8 <_Z19check_sample_numberv>
   d53fe:	b110      	cbz	r0, d5406 <loop+0x66>
   d5400:	2303      	movs	r3, #3
    else state = SAMPLE_STATE;
   d5402:	7023      	strb	r3, [r4, #0]
   d5404:	e006      	b.n	d5414 <loop+0x74>
   else if (ml_to_collect>0 && sample_now) state = PRIME_STATE;
   d5406:	682b      	ldr	r3, [r5, #0]
   d5408:	2b00      	cmp	r3, #0
   d540a:	dd03      	ble.n	d5414 <loop+0x74>
   d540c:	4b66      	ldr	r3, [pc, #408]	; (d55a8 <loop+0x208>)
   d540e:	781b      	ldrb	r3, [r3, #0]
   d5410:	2b00      	cmp	r3, #0
   d5412:	d1f5      	bne.n	d5400 <loop+0x60>
if(Time.minute() % 2 == 0 && Time_old != Time.minute()){ //Samples every 10 min. change the "10" to change sample interval in min (1 - 59)
   d5414:	f003 facc 	bl	d89b0 <_ZN9TimeClass6minuteEv>
   d5418:	f010 0401 	ands.w	r4, r0, #1
   d541c:	f040 80a8 	bne.w	d5570 <loop+0x1d0>
   d5420:	4d62      	ldr	r5, [pc, #392]	; (d55ac <loop+0x20c>)
   d5422:	f003 fac5 	bl	d89b0 <_ZN9TimeClass6minuteEv>
   d5426:	682b      	ldr	r3, [r5, #0]
   d5428:	4298      	cmp	r0, r3
   d542a:	f000 80a1 	beq.w	d5570 <loop+0x1d0>
   d542e:	4f60      	ldr	r7, [pc, #384]	; (d55b0 <loop+0x210>)
  for(int i=0;i<NUMSAMPLES;i++){
   d5430:	4e60      	ldr	r6, [pc, #384]	; (d55b4 <loop+0x214>)
    v=analogRead(sensorPin);
   d5432:	f8df 91ac 	ldr.w	r9, [pc, #428]	; d55e0 <loop+0x240>
   d5436:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d55e4 <loop+0x244>
  for(int i=0;i<NUMSAMPLES;i++){
   d543a:	6832      	ldr	r2, [r6, #0]
   d543c:	42a2      	cmp	r2, r4
   d543e:	dd50      	ble.n	d54e2 <loop+0x142>
    v=analogRead(sensorPin);
   d5440:	f899 0000 	ldrb.w	r0, [r9]
   d5444:	f004 fd2f 	bl	d9ea6 <analogRead>
    measurements[i]=(v); // convert to volts
   d5448:	ee07 0a90 	vmov	s15, r0
   d544c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v=analogRead(sensorPin);
   d5450:	f8c8 0000 	str.w	r0, [r8]
    delay(10);  // Change (or remove) this delay value to alter the sampling time span.
   d5454:	200a      	movs	r0, #10
    measurements[i]=(v); // convert to volts
   d5456:	ece7 7a01 	vstmia	r7!, {s15}
  for(int i=0;i<NUMSAMPLES;i++){
   d545a:	3401      	adds	r4, #1
    delay(10);  // Change (or remove) this delay value to alter the sampling time span.
   d545c:	f003 fabe 	bl	d89dc <delay>
  for(int i=0;i<NUMSAMPLES;i++){
   d5460:	e7eb      	b.n	d543a <loop+0x9a>
    if (state != oldState) printStateTransition();
   d5462:	4b4d      	ldr	r3, [pc, #308]	; (d5598 <loop+0x1f8>)
   d5464:	781b      	ldrb	r3, [r3, #0]
   d5466:	2b03      	cmp	r3, #3
   d5468:	d001      	beq.n	d546e <loop+0xce>
   d546a:	f7ff fdc7 	bl	d4ffc <_Z20printStateTransitionv>
    if (!primeSystem())
   d546e:	f7ff fdf7 	bl	d5060 <_Z11primeSystemv>
   d5472:	b908      	cbnz	r0, d5478 <loop+0xd8>
      state = ERROR_STATE;
   d5474:	2301      	movs	r3, #1
   d5476:	e7c4      	b.n	d5402 <loop+0x62>
    else state = SAMPLE_STATE;
   d5478:	2304      	movs	r3, #4
   d547a:	e7c2      	b.n	d5402 <loop+0x62>
    if (state != oldState) printStateTransition();
   d547c:	4b46      	ldr	r3, [pc, #280]	; (d5598 <loop+0x1f8>)
   d547e:	781b      	ldrb	r3, [r3, #0]
   d5480:	2b04      	cmp	r3, #4
   d5482:	d001      	beq.n	d5488 <loop+0xe8>
   d5484:	f7ff fdba 	bl	d4ffc <_Z20printStateTransitionv>
    if (!collectSample())
   d5488:	f7ff fe4a 	bl	d5120 <_Z13collectSamplev>
   d548c:	2800      	cmp	r0, #0
   d548e:	d0f1      	beq.n	d5474 <loop+0xd4>
    else state = PURGE_STATE;
   d5490:	2305      	movs	r3, #5
   d5492:	e7b6      	b.n	d5402 <loop+0x62>
   if (state != oldState) printStateTransition();
   d5494:	4b40      	ldr	r3, [pc, #256]	; (d5598 <loop+0x1f8>)
   d5496:	781b      	ldrb	r3, [r3, #0]
   d5498:	2b05      	cmp	r3, #5
   d549a:	d001      	beq.n	d54a0 <loop+0x100>
   d549c:	f7ff fdae 	bl	d4ffc <_Z20printStateTransitionv>
   if (!purgeSystem())
   d54a0:	f7ff ff0c 	bl	d52bc <_Z11purgeSystemv>
   d54a4:	2800      	cmp	r0, #0
   d54a6:	d0e5      	beq.n	d5474 <loop+0xd4>
    state = REPORTING_STATE;
   d54a8:	2306      	movs	r3, #6
   d54aa:	e7aa      	b.n	d5402 <loop+0x62>
   if (state != oldState) printStateTransition();
   d54ac:	4b3a      	ldr	r3, [pc, #232]	; (d5598 <loop+0x1f8>)
   d54ae:	781b      	ldrb	r3, [r3, #0]
   d54b0:	2b06      	cmp	r3, #6
   d54b2:	d001      	beq.n	d54b8 <loop+0x118>
   d54b4:	f7ff fda2 	bl	d4ffc <_Z20printStateTransitionv>
   if (!reportingData())
   d54b8:	f7ff fd1e 	bl	d4ef8 <_Z13reportingDatav>
   d54bc:	2800      	cmp	r0, #0
   d54be:	d0d9      	beq.n	d5474 <loop+0xd4>
    sample_now=false;
   d54c0:	4b39      	ldr	r3, [pc, #228]	; (d55a8 <loop+0x208>)
   d54c2:	2200      	movs	r2, #0
   d54c4:	701a      	strb	r2, [r3, #0]
    state = IDLE_STATE;
   d54c6:	2302      	movs	r3, #2
   d54c8:	e79b      	b.n	d5402 <loop+0x62>
    if (state != oldState) printStateTransition();
   d54ca:	4b33      	ldr	r3, [pc, #204]	; (d5598 <loop+0x1f8>)
   d54cc:	781b      	ldrb	r3, [r3, #0]
   d54ce:	2b01      	cmp	r3, #1
   d54d0:	d001      	beq.n	d54d6 <loop+0x136>
   d54d2:	f7ff fd93 	bl	d4ffc <_Z20printStateTransitionv>
    Blynk.virtualWrite(V2, "Halted in error state\n");
   d54d6:	4a38      	ldr	r2, [pc, #224]	; (d55b8 <loop+0x218>)
   d54d8:	482e      	ldr	r0, [pc, #184]	; (d5594 <loop+0x1f4>)
   d54da:	2102      	movs	r1, #2
   d54dc:	f7ff fb1c 	bl	d4b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJPKcEEEviDpT_>
    while(1);  // halt
   d54e0:	e7fe      	b.n	d54e0 <loop+0x140>
  smoothed=stats.median(measurements,NUMSAMPLES); // Median filter (choose which filter to use)
   d54e2:	4933      	ldr	r1, [pc, #204]	; (d55b0 <loop+0x210>)
   d54e4:	4835      	ldr	r0, [pc, #212]	; (d55bc <loop+0x21c>)
   d54e6:	4c36      	ldr	r4, [pc, #216]	; (d55c0 <loop+0x220>)
   d54e8:	f000 f980 	bl	d57ec <_ZN10QuickStats6medianEPfi>
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d54ec:	6832      	ldr	r2, [r6, #0]
   d54ee:	4930      	ldr	r1, [pc, #192]	; (d55b0 <loop+0x210>)
   d54f0:	4832      	ldr	r0, [pc, #200]	; (d55bc <loop+0x21c>)
  smoothed=stats.median(measurements,NUMSAMPLES); // Median filter (choose which filter to use)
   d54f2:	ed84 0a00 	vstr	s0, [r4]
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d54f6:	f000 f93b 	bl	d5770 <_ZN10QuickStats2CVEPfi>
   d54fa:	4b32      	ldr	r3, [pc, #200]	; (d55c4 <loop+0x224>)
 depth = (-0.0394*smoothed) + 81.848;  //// S1 12 etape sensor for CT1 2021
   d54fc:	6820      	ldr	r0, [r4, #0]
  smoothedCV=stats.CV(measurements,NUMSAMPLES); // CV of readings    
   d54fe:	ed83 0a00 	vstr	s0, [r3]
 depth = (-0.0394*smoothed) + 81.848;  //// S1 12 etape sensor for CT1 2021
   d5502:	f006 fa7b 	bl	db9fc <__aeabi_f2d>
   d5506:	a31e      	add	r3, pc, #120	; (adr r3, d5580 <loop+0x1e0>)
   d5508:	e9d3 2300 	ldrd	r2, r3, [r3]
   d550c:	f006 face 	bl	dbaac <__aeabi_dmul>
   d5510:	a31d      	add	r3, pc, #116	; (adr r3, d5588 <loop+0x1e8>)
   d5512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5516:	f006 f913 	bl	db740 <__adddf3>
   d551a:	f006 fdbf 	bl	dc09c <__aeabi_d2f>
   d551e:	4e21      	ldr	r6, [pc, #132]	; (d55a4 <loop+0x204>)
  CellularSignal sig = Cellular.RSSI();
   d5520:	4929      	ldr	r1, [pc, #164]	; (d55c8 <loop+0x228>)
 depth = (-0.0394*smoothed) + 81.848;  //// S1 12 etape sensor for CT1 2021
   d5522:	6030      	str	r0, [r6, #0]
  CellularSignal sig = Cellular.RSSI();
   d5524:	4668      	mov	r0, sp
   d5526:	f003 ff9f 	bl	d9468 <_ZN5spark13CellularClass4RSSIEv>
  rssi = sig.getQuality();
   d552a:	4668      	mov	r0, sp
   d552c:	f003 fad8 	bl	d8ae0 <_ZNK14CellularSignal10getQualityEv>
   d5530:	4c26      	ldr	r4, [pc, #152]	; (d55cc <loop+0x22c>)
  float strength = sig.getStrength();
   d5532:	4668      	mov	r0, sp
  rssi = sig.getQuality();
   d5534:	ed84 0a00 	vstr	s0, [r4]
  float strength = sig.getStrength();
   d5538:	f003 faa2 	bl	d8a80 <_ZNK14CellularSignal11getStrengthEv>
  ubidots.add("Level_cm", depth);  // Change for your variable. 
   d553c:	4924      	ldr	r1, [pc, #144]	; (d55d0 <loop+0x230>)
   d553e:	4825      	ldr	r0, [pc, #148]	; (d55d4 <loop+0x234>)
  float strength = sig.getStrength();
   d5540:	eeb0 8a40 	vmov.f32	s16, s0
  ubidots.add("Level_cm", depth);  // Change for your variable. 
   d5544:	ed96 0a00 	vldr	s0, [r6]
   d5548:	f001 fb67 	bl	d6c1a <_ZN7Ubidots3addEPcf>
  ubidots.add("Rssi", rssi);
   d554c:	ed94 0a00 	vldr	s0, [r4]
   d5550:	4921      	ldr	r1, [pc, #132]	; (d55d8 <loop+0x238>)
   d5552:	4820      	ldr	r0, [pc, #128]	; (d55d4 <loop+0x234>)
   d5554:	f001 fb61 	bl	d6c1a <_ZN7Ubidots3addEPcf>
  ubidots.add("SigS", strength);
   d5558:	4920      	ldr	r1, [pc, #128]	; (d55dc <loop+0x23c>)
   d555a:	481e      	ldr	r0, [pc, #120]	; (d55d4 <loop+0x234>)
   d555c:	eeb0 0a48 	vmov.f32	s0, s16
   d5560:	f001 fb5b 	bl	d6c1a <_ZN7Ubidots3addEPcf>
    bufferSent =ubidots.send();  //Send data to ubidot
   d5564:	481b      	ldr	r0, [pc, #108]	; (d55d4 <loop+0x234>)
   d5566:	f001 fb61 	bl	d6c2c <_ZN7Ubidots4sendEv>
    Time_old = Time.minute(); // resetting time 
   d556a:	f003 fa21 	bl	d89b0 <_ZN9TimeClass6minuteEv>
   d556e:	6028      	str	r0, [r5, #0]
} // end main loop
   d5570:	b009      	add	sp, #36	; 0x24
   d5572:	ecbd 8b02 	vpop	{d8}
   d5576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d557a:	bf00      	nop
   d557c:	f3af 8000 	nop.w
   d5580:	9eecbfb1 	.word	0x9eecbfb1
   d5584:	bfa42c3c 	.word	0xbfa42c3c
   d5588:	a1cac083 	.word	0xa1cac083
   d558c:	40547645 	.word	0x40547645
   d5590:	2003e4c8 	.word	0x2003e4c8
   d5594:	2003e284 	.word	0x2003e284
   d5598:	2003e498 	.word	0x2003e498
   d559c:	2003e494 	.word	0x2003e494
   d55a0:	2003e09c 	.word	0x2003e09c
   d55a4:	2003e2ec 	.word	0x2003e2ec
   d55a8:	2003e4b8 	.word	0x2003e4b8
   d55ac:	2003e2a4 	.word	0x2003e2a4
   d55b0:	2003e304 	.word	0x2003e304
   d55b4:	2003dff0 	.word	0x2003dff0
   d55b8:	000de1d4 	.word	0x000de1d4
   d55bc:	2003e4c9 	.word	0x2003e4c9
   d55c0:	2003e4bc 	.word	0x2003e4bc
   d55c4:	2003e4c0 	.word	0x2003e4c0
   d55c8:	2003e770 	.word	0x2003e770
   d55cc:	2003e4a8 	.word	0x2003e4a8
   d55d0:	000de1eb 	.word	0x000de1eb
   d55d4:	2003e520 	.word	0x2003e520
   d55d8:	000de1f4 	.word	0x000de1f4
   d55dc:	000de1f9 	.word	0x000de1f9
   d55e0:	2003e034 	.word	0x2003e034
   d55e4:	2003e52c 	.word	0x2003e52c

000d55e8 <_GLOBAL__sub_I_Blynk>:
}
   d55e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d55ea:	4d26      	ldr	r5, [pc, #152]	; (d5684 <_GLOBAL__sub_I_Blynk+0x9c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d55ec:	4e26      	ldr	r6, [pc, #152]	; (d5688 <_GLOBAL__sub_I_Blynk+0xa0>)
   d55ee:	4628      	mov	r0, r5
   d55f0:	2400      	movs	r4, #0
   d55f2:	f004 fa95 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d55f6:	f105 001c 	add.w	r0, r5, #28
   d55fa:	f003 fe15 	bl	d9228 <_ZN9IPAddressC1Ev>
   d55fe:	636c      	str	r4, [r5, #52]	; 0x34
   d5600:	872c      	strh	r4, [r5, #56]	; 0x38
   d5602:	4632      	mov	r2, r6
   d5604:	4921      	ldr	r1, [pc, #132]	; (d568c <_GLOBAL__sub_I_Blynk+0xa4>)
   d5606:	4628      	mov	r0, r5
   d5608:	f004 fcca 	bl	d9fa0 <__aeabi_atexit>
        , state(CONNECTING)
   d560c:	4b20      	ldr	r3, [pc, #128]	; (d5690 <_GLOBAL__sub_I_Blynk+0xa8>)
Ubidots ubidots(TOKEN, UBI_TCP); // Comment this line to use another protocol.
   d560e:	4921      	ldr	r1, [pc, #132]	; (d5694 <_GLOBAL__sub_I_Blynk+0xac>)
   d5610:	619c      	str	r4, [r3, #24]
   d5612:	e9c3 5400 	strd	r5, r4, [r3]
   d5616:	4d20      	ldr	r5, [pc, #128]	; (d5698 <_GLOBAL__sub_I_Blynk+0xb0>)
   d5618:	839c      	strh	r4, [r3, #28]
   d561a:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d561e:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d5622:	2201      	movs	r2, #1
   d5624:	4628      	mov	r0, r5
   d5626:	f001 fad7 	bl	d6bd8 <_ZN7UbidotsC1EPc11IotProtocol>
   d562a:	4632      	mov	r2, r6
   d562c:	491b      	ldr	r1, [pc, #108]	; (d569c <_GLOBAL__sub_I_Blynk+0xb4>)
   d562e:	4628      	mov	r0, r5
   d5630:	f004 fcb6 	bl	d9fa0 <__aeabi_atexit>
AccelStepper stepper1 = AccelStepper(motorInterfaceType, STEP_PIN1, DIR_PIN1);
   d5634:	2101      	movs	r1, #1
   d5636:	2205      	movs	r2, #5
   d5638:	2304      	movs	r3, #4
   d563a:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d563e:	9300      	str	r3, [sp, #0]
   d5640:	4817      	ldr	r0, [pc, #92]	; (d56a0 <_GLOBAL__sub_I_Blynk+0xb8>)
   d5642:	2303      	movs	r3, #3
   d5644:	f000 fb60 	bl	d5d08 <_ZN12AccelStepperC1Ehhhhhb>
	_items = new T[windowSize];
   d5648:	2064      	movs	r0, #100	; 0x64
   d564a:	f7fe fd26 	bl	d409a <_Znaj>
   d564e:	4b15      	ldr	r3, [pc, #84]	; (d56a4 <_GLOBAL__sub_I_Blynk+0xbc>)
	_windowSize = windowSize;
   d5650:	2219      	movs	r2, #25
	_count = 0;
   d5652:	e9c3 2402 	strd	r2, r4, [r3, #8]
	_accessor = _items;
   d5656:	e9c3 0000 	strd	r0, r0, [r3]
	_items = new T[windowSize];
   d565a:	20c8      	movs	r0, #200	; 0xc8
   d565c:	f7fe fd1d 	bl	d409a <_Znaj>
   d5660:	4b11      	ldr	r3, [pc, #68]	; (d56a8 <_GLOBAL__sub_I_Blynk+0xc0>)
	_windowSize = windowSize;
   d5662:	2232      	movs	r2, #50	; 0x32
	_count = 0;
   d5664:	e9c3 2402 	strd	r2, r4, [r3, #8]
QuickStats stats; //initialize an instance of this class
   d5668:	4c10      	ldr	r4, [pc, #64]	; (d56ac <_GLOBAL__sub_I_Blynk+0xc4>)
	_accessor = _items;
   d566a:	e9c3 0000 	strd	r0, r0, [r3]
   d566e:	4620      	mov	r0, r4
   d5670:	f000 f820 	bl	d56b4 <_ZN10QuickStatsC1Ev>
   d5674:	490e      	ldr	r1, [pc, #56]	; (d56b0 <_GLOBAL__sub_I_Blynk+0xc8>)
   d5676:	4632      	mov	r2, r6
   d5678:	4620      	mov	r0, r4
}
   d567a:	b004      	add	sp, #16
   d567c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
QuickStats stats; //initialize an instance of this class
   d5680:	f004 bc8e 	b.w	d9fa0 <__aeabi_atexit>
   d5684:	2003e2a8 	.word	0x2003e2a8
   d5688:	2003e280 	.word	0x2003e280
   d568c:	000d40e5 	.word	0x000d40e5
   d5690:	2003e284 	.word	0x2003e284
   d5694:	000de1fe 	.word	0x000de1fe
   d5698:	2003e520 	.word	0x2003e520
   d569c:	000d6bf5 	.word	0x000d6bf5
   d56a0:	2003e4cc 	.word	0x2003e4cc
   d56a4:	2003e2f0 	.word	0x2003e2f0
   d56a8:	2003e530 	.word	0x2003e530
   d56ac:	2003e4c9 	.word	0x2003e4c9
   d56b0:	000d56b7 	.word	0x000d56b7

000d56b4 <_ZN10QuickStatsC1Ev>:

#include "Arduino.h"
#include "QuickStats.h"
#include <math.h>

QuickStats::QuickStats(){/*nothing to construct*/}
   d56b4:	4770      	bx	lr

000d56b6 <_ZN10QuickStatsD1Ev>:
QuickStats::~QuickStats(){/*nothing to destruct*/}
   d56b6:	4770      	bx	lr

000d56b8 <_ZN10QuickStats7averageEPfi>:

float QuickStats::average(float samples[],int m)
{
  float total1=0.0;
   d56b8:	eddf 7a08 	vldr	s15, [pc, #32]	; d56dc <_ZN10QuickStats7averageEPfi+0x24>
  for(int i=0;i<m;i++){
   d56bc:	2300      	movs	r3, #0
   d56be:	4293      	cmp	r3, r2
   d56c0:	da05      	bge.n	d56ce <_ZN10QuickStats7averageEPfi+0x16>
    total1=total1+samples[i];
   d56c2:	ecb1 7a01 	vldmia	r1!, {s14}
  for(int i=0;i<m;i++){
   d56c6:	3301      	adds	r3, #1
    total1=total1+samples[i];
   d56c8:	ee77 7a87 	vadd.f32	s15, s15, s14
  for(int i=0;i<m;i++){
   d56cc:	e7f7      	b.n	d56be <_ZN10QuickStats7averageEPfi+0x6>
  }
  return total1/(float)m;
   d56ce:	ee07 2a10 	vmov	s14, r2
   d56d2:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
   d56d6:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d56da:	4770      	bx	lr
   d56dc:	00000000 	.word	0x00000000

000d56e0 <_ZN10QuickStats5stdevEPfi>:
  bubbleSort(sorted,m);  // Sort the values
  return(sorted[m-1]);   // last element is the maximum
}

float QuickStats::stdev(float samples[],int m)
{
   d56e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d56e4:	ed2d 8b02 	vpush	{d8}
   d56e8:	460c      	mov	r4, r1
   d56ea:	4615      	mov	r5, r2
  float avg=0.0;
  float total2=0.0;
  avg=average(samples,m);
   d56ec:	f7ff ffe4 	bl	d56b8 <_ZN10QuickStats7averageEPfi>
  for(int i=0;i<m;i++){
   d56f0:	2600      	movs	r6, #0
  avg=average(samples,m);
   d56f2:	eeb0 8a40 	vmov.f32	s16, s0
  float total2=0.0;
   d56f6:	2000      	movs	r0, #0
  for(int i=0;i<m;i++){
   d56f8:	f006 f980 	bl	db9fc <__aeabi_f2d>
   d56fc:	42ae      	cmp	r6, r5
   d56fe:	4680      	mov	r8, r0
   d5700:	4689      	mov	r9, r1
   d5702:	da13      	bge.n	d572c <_ZN10QuickStats5stdevEPfi+0x4c>
    total2 = total2 + pow(samples[i] - avg,2);
   d5704:	ecf4 7a01 	vldmia	r4!, {s15}
   d5708:	ee77 7ac8 	vsub.f32	s15, s15, s16
  for(int i=0;i<m;i++){
   d570c:	3601      	adds	r6, #1
   d570e:	ee17 0a90 	vmov	r0, s15
   d5712:	f006 f973 	bl	db9fc <__aeabi_f2d>
   d5716:	4602      	mov	r2, r0
   d5718:	460b      	mov	r3, r1
   d571a:	f006 f9c7 	bl	dbaac <__aeabi_dmul>
    total2 = total2 + pow(samples[i] - avg,2);
   d571e:	4642      	mov	r2, r8
   d5720:	464b      	mov	r3, r9
   d5722:	f006 f80d 	bl	db740 <__adddf3>
   d5726:	f006 fcb9 	bl	dc09c <__aeabi_d2f>
  for(int i=0;i<m;i++){
   d572a:	e7e5      	b.n	d56f8 <_ZN10QuickStats5stdevEPfi+0x18>
  }
  return sqrt(total2/((float)m-1.0));
   d572c:	ee07 5a90 	vmov	s15, r5
   d5730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5734:	ee17 0a90 	vmov	r0, s15
   d5738:	f006 f960 	bl	db9fc <__aeabi_f2d>
   d573c:	4b0b      	ldr	r3, [pc, #44]	; (d576c <_ZN10QuickStats5stdevEPfi+0x8c>)
   d573e:	2200      	movs	r2, #0
   d5740:	f005 fffc 	bl	db73c <__aeabi_dsub>
   d5744:	4602      	mov	r2, r0
   d5746:	460b      	mov	r3, r1
   d5748:	4640      	mov	r0, r8
   d574a:	4649      	mov	r1, r9
   d574c:	f006 fad8 	bl	dbd00 <__aeabi_ddiv>
   d5750:	ec41 0b10 	vmov	d0, r0, r1
   d5754:	f004 ffaa 	bl	da6ac <sqrt>
   d5758:	ec51 0b10 	vmov	r0, r1, d0
   d575c:	f006 fc9e 	bl	dc09c <__aeabi_d2f>
}
   d5760:	ecbd 8b02 	vpop	{d8}
   d5764:	ee00 0a10 	vmov	s0, r0
   d5768:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d576c:	3ff00000 	.word	0x3ff00000

000d5770 <_ZN10QuickStats2CVEPfi>:
  temp1=stdev(samples,m);
  return (temp1/sqrt((float)m));
}

float QuickStats::CV(float samples[],int m)  //Coefficient of variation (%RSD, or relative stdev)
{
   d5770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5772:	460d      	mov	r5, r1
  float avg=0.0;
  float sd=0.0;
  avg=average(samples,m);
   d5774:	f7ff ffa0 	bl	d56b8 <_ZN10QuickStats7averageEPfi>
  sd=stdev(samples,m);
   d5778:	4629      	mov	r1, r5
  avg=average(samples,m);
   d577a:	ee10 6a10 	vmov	r6, s0
  sd=stdev(samples,m);
   d577e:	f7ff ffaf 	bl	d56e0 <_ZN10QuickStats5stdevEPfi>
   d5782:	ee10 0a10 	vmov	r0, s0
  return 100.0*sd/avg;
   d5786:	f006 f939 	bl	db9fc <__aeabi_f2d>
   d578a:	4b0a      	ldr	r3, [pc, #40]	; (d57b4 <_ZN10QuickStats2CVEPfi+0x44>)
   d578c:	2200      	movs	r2, #0
   d578e:	f006 f98d 	bl	dbaac <__aeabi_dmul>
   d5792:	4604      	mov	r4, r0
   d5794:	4630      	mov	r0, r6
   d5796:	460d      	mov	r5, r1
   d5798:	f006 f930 	bl	db9fc <__aeabi_f2d>
   d579c:	4602      	mov	r2, r0
   d579e:	460b      	mov	r3, r1
   d57a0:	4620      	mov	r0, r4
   d57a2:	4629      	mov	r1, r5
   d57a4:	f006 faac 	bl	dbd00 <__aeabi_ddiv>
   d57a8:	f006 fc78 	bl	dc09c <__aeabi_d2f>
}
   d57ac:	ee00 0a10 	vmov	s0, r0
   d57b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57b2:	bf00      	nop
   d57b4:	40590000 	.word	0x40590000

000d57b8 <_ZN10QuickStats10bubbleSortEPfi>:

void QuickStats::bubbleSort(float A[],int len)
{
   d57b8:	b510      	push	{r4, lr}
  unsigned long newn;
  unsigned long n=len;
  float temp=0.0;
  do {
    newn=1;
    for(int p=1;p<len;p++){
   d57ba:	2001      	movs	r0, #1
   d57bc:	460b      	mov	r3, r1
    newn=1;
   d57be:	4604      	mov	r4, r0
    for(int p=1;p<len;p++){
   d57c0:	4290      	cmp	r0, r2
   d57c2:	da10      	bge.n	d57e6 <_ZN10QuickStats10bubbleSortEPfi+0x2e>
      if(A[p-1]>A[p]){
   d57c4:	ed93 7a00 	vldr	s14, [r3]
   d57c8:	edd3 7a01 	vldr	s15, [r3, #4]
   d57cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d57d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        temp=A[p];           //swap places in array
        A[p]=A[p-1];
   d57d4:	bfc2      	ittt	gt
   d57d6:	ed83 7a01 	vstrgt	s14, [r3, #4]
        A[p-1]=temp;
   d57da:	edc3 7a00 	vstrgt	s15, [r3]
        newn=p;
   d57de:	4604      	movgt	r4, r0
    for(int p=1;p<len;p++){
   d57e0:	3304      	adds	r3, #4
   d57e2:	3001      	adds	r0, #1
   d57e4:	e7ec      	b.n	d57c0 <_ZN10QuickStats10bubbleSortEPfi+0x8>
      } //end if
    } //end for
    n=newn;
  } while(n>1);
   d57e6:	2c01      	cmp	r4, #1
   d57e8:	d1e7      	bne.n	d57ba <_ZN10QuickStats10bubbleSortEPfi+0x2>
}
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_ZN10QuickStats6medianEPfi>:
    return sample;
  }
}

float QuickStats::median(float samples[],int m) //calculate the median
{
   d57ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //First bubble sort the values: https://en.wikipedia.org/wiki/Bubble_sort
  float sorted[m];   //Define and initialize sorted array.
   d57ee:	0093      	lsls	r3, r2, #2
   d57f0:	3307      	adds	r3, #7
   d57f2:	f023 0307 	bic.w	r3, r3, #7
{
   d57f6:	af00      	add	r7, sp, #0
  float sorted[m];   //Define and initialize sorted array.
   d57f8:	ebad 0d03 	sub.w	sp, sp, r3
   d57fc:	466c      	mov	r4, sp
  float temp=0.0;      //Temporary float for swapping elements
  /*Serial.println("Before:");
  for(int j=0;j<m;j++){
    Serial.println(samples[j]);
  }*/
  for(int i=0;i<m;i++){
   d57fe:	4625      	mov	r5, r4
   d5800:	2300      	movs	r3, #0
   d5802:	4293      	cmp	r3, r2
   d5804:	da05      	bge.n	d5812 <_ZN10QuickStats6medianEPfi+0x26>
    sorted[i]=samples[i];
   d5806:	f851 6b04 	ldr.w	r6, [r1], #4
   d580a:	f845 6b04 	str.w	r6, [r5], #4
  for(int i=0;i<m;i++){
   d580e:	3301      	adds	r3, #1
   d5810:	e7f7      	b.n	d5802 <_ZN10QuickStats6medianEPfi+0x16>
  }
  bubbleSort(sorted,m);  // Sort the values
   d5812:	4621      	mov	r1, r4
   d5814:	f7ff ffd0 	bl	d57b8 <_ZN10QuickStats10bubbleSortEPfi>
  /*Serial.println("After:");
  for(int i=0;i<m;i++){
    Serial.println(sorted[i]);
  }*/
  if (bitRead(m,0)==1) {  //If the last bit of a number is 1, it's odd. This is equivalent to "TRUE". Also use if m%2!=0.
   d5818:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   d581c:	105b      	asrs	r3, r3, #1
   d581e:	009b      	lsls	r3, r3, #2
   d5820:	f012 0f01 	tst.w	r2, #1
    return sorted[m/2]; //If the number of data points is odd, return middle number.
   d5824:	4423      	add	r3, r4
  } else {    
    return (sorted[(m/2)-1]+sorted[m/2])/2; //If the number of data points is even, return avg of the middle two numbers.
   d5826:	bf05      	ittet	eq
   d5828:	ed13 0a01 	vldreq	s0, [r3, #-4]
   d582c:	edd3 7a00 	vldreq	s15, [r3]
    return sorted[m/2]; //If the number of data points is odd, return middle number.
   d5830:	ed93 0a00 	vldrne	s0, [r3]
    return (sorted[(m/2)-1]+sorted[m/2])/2; //If the number of data points is even, return avg of the middle two numbers.
   d5834:	ee30 0a27 	vaddeq.f32	s0, s0, s15
   d5838:	bf04      	itt	eq
   d583a:	eef6 7a00 	vmoveq.f32	s15, #96	; 0x3f000000  0.5
   d583e:	ee20 0a27 	vmuleq.f32	s0, s0, s15
  }
}
   d5842:	46bd      	mov	sp, r7
   d5844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5846 <_ZN12AccelStepper4stepEl>:
}

// Subclasses can override
void AccelStepper::step(long step)
{
    switch (_interface)
   d5846:	7903      	ldrb	r3, [r0, #4]
   d5848:	2b08      	cmp	r3, #8
   d584a:	d81b      	bhi.n	d5884 <_ZN12AccelStepper4stepEl+0x3e>
   d584c:	e8df f003 	tbb	[pc, r3]
   d5850:	0e0b0805 	.word	0x0e0b0805
   d5854:	1a141a11 	.word	0x1a141a11
   d5858:	17          	.byte	0x17
   d5859:	00          	.byte	0x00
    {
        case FUNCTION:
            step0(step);
   d585a:	6803      	ldr	r3, [r0, #0]
   d585c:	691b      	ldr	r3, [r3, #16]
	case HALF3WIRE:
	    step6(step);
	    break;

	case HALF4WIRE:
	    step8(step);
   d585e:	4718      	bx	r3
	    step1(step);
   d5860:	6803      	ldr	r3, [r0, #0]
   d5862:	695b      	ldr	r3, [r3, #20]
   d5864:	e7fb      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    step2(step);
   d5866:	6803      	ldr	r3, [r0, #0]
   d5868:	699b      	ldr	r3, [r3, #24]
   d586a:	e7f8      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    step3(step);
   d586c:	6803      	ldr	r3, [r0, #0]
   d586e:	69db      	ldr	r3, [r3, #28]
   d5870:	e7f5      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    step4(step);
   d5872:	6803      	ldr	r3, [r0, #0]
   d5874:	6a1b      	ldr	r3, [r3, #32]
   d5876:	e7f2      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    step6(step);
   d5878:	6803      	ldr	r3, [r0, #0]
   d587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d587c:	e7ef      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    step8(step);
   d587e:	6803      	ldr	r3, [r0, #0]
   d5880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5882:	e7ec      	b.n	d585e <_ZN12AccelStepper4stepEl+0x18>
	    break;
    }
}
   d5884:	4770      	bx	lr

000d5886 <_ZN12AccelStepper5step6El>:
// 3 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step6(long step)
{
    switch (step % 6)
   d5886:	2306      	movs	r3, #6
   d5888:	fb91 f2f3 	sdiv	r2, r1, r3
   d588c:	fb02 1313 	mls	r3, r2, r3, r1
   d5890:	2b05      	cmp	r3, #5
   d5892:	d81c      	bhi.n	d58ce <_ZN12AccelStepper5step6El+0x48>
   d5894:	e8df f003 	tbb	[pc, r3]
   d5898:	0f0b0703 	.word	0x0f0b0703
   d589c:	1713      	.short	0x1713
    {
	case 0:    // 100
	    setOutputPins(0b100);
   d589e:	6803      	ldr	r3, [r0, #0]
   d58a0:	689b      	ldr	r3, [r3, #8]
   d58a2:	2104      	movs	r1, #4
	case 4:    // 010
	    setOutputPins(0b010);
            break;

	case 5:    // 011
	    setOutputPins(0b110);
   d58a4:	4718      	bx	r3
	    setOutputPins(0b101);
   d58a6:	6803      	ldr	r3, [r0, #0]
   d58a8:	2105      	movs	r1, #5
   d58aa:	689b      	ldr	r3, [r3, #8]
   d58ac:	e7fa      	b.n	d58a4 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b001);
   d58ae:	6803      	ldr	r3, [r0, #0]
   d58b0:	2101      	movs	r1, #1
   d58b2:	689b      	ldr	r3, [r3, #8]
   d58b4:	e7f6      	b.n	d58a4 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b011);
   d58b6:	6803      	ldr	r3, [r0, #0]
   d58b8:	2103      	movs	r1, #3
   d58ba:	689b      	ldr	r3, [r3, #8]
   d58bc:	e7f2      	b.n	d58a4 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b010);
   d58be:	6803      	ldr	r3, [r0, #0]
   d58c0:	2102      	movs	r1, #2
   d58c2:	689b      	ldr	r3, [r3, #8]
   d58c4:	e7ee      	b.n	d58a4 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b110);
   d58c6:	6803      	ldr	r3, [r0, #0]
   d58c8:	2106      	movs	r1, #6
   d58ca:	689b      	ldr	r3, [r3, #8]
   d58cc:	e7ea      	b.n	d58a4 <_ZN12AccelStepper5step6El+0x1e>
            break;

    }
}
   d58ce:	4770      	bx	lr

000d58d0 <_ZN12AccelStepper5step8El>:
// 4 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step8(long step)
{
    switch (step & 0x7)
   d58d0:	6803      	ldr	r3, [r0, #0]
   d58d2:	f001 0107 	and.w	r1, r1, #7
   d58d6:	3901      	subs	r1, #1
   d58d8:	689b      	ldr	r3, [r3, #8]
   d58da:	2906      	cmp	r1, #6
   d58dc:	d805      	bhi.n	d58ea <_ZN12AccelStepper5step8El+0x1a>
   d58de:	e8df f001 	tbb	[pc, r1]
   d58e2:	0806      	.short	0x0806
   d58e4:	100e0c0a 	.word	0x100e0c0a
   d58e8:	12          	.byte	0x12
   d58e9:	00          	.byte	0x00
    {
	case 0:    // 1000
	    setOutputPins(0b0001);
   d58ea:	2101      	movs	r1, #1
	case 6:    // 0001
	    setOutputPins(0b1000);
            break;

        case 7:    //1001
	    setOutputPins(0b1001);
   d58ec:	4718      	bx	r3
	    setOutputPins(0b0101);
   d58ee:	2105      	movs	r1, #5
   d58f0:	e7fc      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0100);
   d58f2:	2104      	movs	r1, #4
   d58f4:	e7fa      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0110);
   d58f6:	2106      	movs	r1, #6
   d58f8:	e7f8      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0010);
   d58fa:	2102      	movs	r1, #2
   d58fc:	e7f6      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1010);
   d58fe:	210a      	movs	r1, #10
   d5900:	e7f4      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1000);
   d5902:	2108      	movs	r1, #8
   d5904:	e7f2      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1001);
   d5906:	2109      	movs	r1, #9
   d5908:	e7f0      	b.n	d58ec <_ZN12AccelStepper5step8El+0x1c>

000d590a <_ZN12AccelStepper13setOutputPinsEh>:
{
   d590a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d590c:	7905      	ldrb	r5, [r0, #4]
   d590e:	2d04      	cmp	r5, #4
{
   d5910:	460f      	mov	r7, r1
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d5912:	d007      	beq.n	d5924 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
   d5914:	2d08      	cmp	r5, #8
   d5916:	d017      	beq.n	d5948 <_ZN12AccelStepper13setOutputPinsEh+0x3e>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
   d5918:	2d03      	cmp	r5, #3
   d591a:	d003      	beq.n	d5924 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
	numpins = 3;
   d591c:	2d06      	cmp	r5, #6
   d591e:	bf14      	ite	ne
   d5920:	2502      	movne	r5, #2
   d5922:	2503      	moveq	r5, #3
    for (i = 0; i < numpins; i++)
   d5924:	1d44      	adds	r4, r0, #5
	numpins = 3;
   d5926:	2600      	movs	r6, #0
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
   d5928:	f814 0b01 	ldrb.w	r0, [r4], #1
   d592c:	fa47 f306 	asr.w	r3, r7, r6
   d5930:	78e1      	ldrb	r1, [r4, #3]
   d5932:	07db      	lsls	r3, r3, #31
   d5934:	bf48      	it	mi
   d5936:	f081 0101 	eormi.w	r1, r1, #1
   d593a:	3601      	adds	r6, #1
   d593c:	f004 fa87 	bl	d9e4e <digitalWrite>
    for (i = 0; i < numpins; i++)
   d5940:	b2f3      	uxtb	r3, r6
   d5942:	429d      	cmp	r5, r3
   d5944:	d8f0      	bhi.n	d5928 <_ZN12AccelStepper13setOutputPinsEh+0x1e>
}
   d5946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	numpins = 4;
   d5948:	2504      	movs	r5, #4
   d594a:	e7eb      	b.n	d5924 <_ZN12AccelStepper13setOutputPinsEh+0x1a>

000d594c <_ZN12AccelStepper5step1El>:
{
   d594c:	b510      	push	{r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
   d594e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   d5952:	6803      	ldr	r3, [r0, #0]
{
   d5954:	4604      	mov	r4, r0
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
   d5956:	2a00      	cmp	r2, #0
   d5958:	bf14      	ite	ne
   d595a:	2102      	movne	r1, #2
   d595c:	2100      	moveq	r1, #0
   d595e:	689b      	ldr	r3, [r3, #8]
   d5960:	4798      	blx	r3
    setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
   d5962:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5966:	6823      	ldr	r3, [r4, #0]
   d5968:	2a00      	cmp	r2, #0
   d596a:	bf14      	ite	ne
   d596c:	2103      	movne	r1, #3
   d596e:	2101      	moveq	r1, #1
   d5970:	689b      	ldr	r3, [r3, #8]
   d5972:	4620      	mov	r0, r4
   d5974:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5976:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d5978:	f002 f80c 	bl	d7994 <HAL_Delay_Microseconds>
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
   d597c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5980:	6823      	ldr	r3, [r4, #0]
   d5982:	2a00      	cmp	r2, #0
   d5984:	4620      	mov	r0, r4
   d5986:	689b      	ldr	r3, [r3, #8]
}
   d5988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
   d598c:	bf14      	ite	ne
   d598e:	2102      	movne	r1, #2
   d5990:	2100      	moveq	r1, #0
   d5992:	4718      	bx	r3

000d5994 <_ZN12AccelStepper5step0El>:
    if (_speed > 0)
   d5994:	edd0 7a06 	vldr	s15, [r0, #24]
   d5998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_forward();
   d59a0:	bfcc      	ite	gt
   d59a2:	6b83      	ldrgt	r3, [r0, #56]	; 0x38
	_backward();
   d59a4:	6bc3      	ldrle	r3, [r0, #60]	; 0x3c
   d59a6:	4718      	bx	r3

000d59a8 <_ZN12AccelStepper5step2El>:
    switch (step & 0x3)
   d59a8:	6803      	ldr	r3, [r0, #0]
   d59aa:	f001 0103 	and.w	r1, r1, #3
   d59ae:	2902      	cmp	r1, #2
   d59b0:	689b      	ldr	r3, [r3, #8]
   d59b2:	d006      	beq.n	d59c2 <_ZN12AccelStepper5step2El+0x1a>
   d59b4:	2903      	cmp	r1, #3
   d59b6:	d006      	beq.n	d59c6 <_ZN12AccelStepper5step2El+0x1e>
   d59b8:	2901      	cmp	r1, #1
	    setOutputPins(0b10);
   d59ba:	bf14      	ite	ne
   d59bc:	2102      	movne	r1, #2
	    setOutputPins(0b11);
   d59be:	2103      	moveq	r1, #3
	    setOutputPins(0b00);
   d59c0:	4718      	bx	r3
	    setOutputPins(0b01);
   d59c2:	2101      	movs	r1, #1
   d59c4:	e7fc      	b.n	d59c0 <_ZN12AccelStepper5step2El+0x18>
	    setOutputPins(0b00);
   d59c6:	2100      	movs	r1, #0
   d59c8:	e7fa      	b.n	d59c0 <_ZN12AccelStepper5step2El+0x18>

000d59ca <_ZN12AccelStepper5step3El>:
    switch (step % 3)
   d59ca:	2303      	movs	r3, #3
   d59cc:	fb91 f3f3 	sdiv	r3, r1, r3
   d59d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d59d4:	1ac9      	subs	r1, r1, r3
   d59d6:	2901      	cmp	r1, #1
{
   d59d8:	4602      	mov	r2, r0
    switch (step % 3)
   d59da:	d006      	beq.n	d59ea <_ZN12AccelStepper5step3El+0x20>
   d59dc:	2902      	cmp	r1, #2
   d59de:	d004      	beq.n	d59ea <_ZN12AccelStepper5step3El+0x20>
   d59e0:	b931      	cbnz	r1, d59f0 <_ZN12AccelStepper5step3El+0x26>
	    setOutputPins(0b100);
   d59e2:	6803      	ldr	r3, [r0, #0]
   d59e4:	689b      	ldr	r3, [r3, #8]
   d59e6:	2104      	movs	r1, #4
	    setOutputPins(0b010);
   d59e8:	4718      	bx	r3
   d59ea:	6813      	ldr	r3, [r2, #0]
   d59ec:	689b      	ldr	r3, [r3, #8]
   d59ee:	e7fb      	b.n	d59e8 <_ZN12AccelStepper5step3El+0x1e>
}
   d59f0:	4770      	bx	lr

000d59f2 <_ZN12AccelStepper5step4El>:
    switch (step & 0x3)
   d59f2:	6803      	ldr	r3, [r0, #0]
   d59f4:	f001 0103 	and.w	r1, r1, #3
   d59f8:	2902      	cmp	r1, #2
   d59fa:	689b      	ldr	r3, [r3, #8]
   d59fc:	d006      	beq.n	d5a0c <_ZN12AccelStepper5step4El+0x1a>
   d59fe:	2903      	cmp	r1, #3
   d5a00:	d006      	beq.n	d5a10 <_ZN12AccelStepper5step4El+0x1e>
   d5a02:	2901      	cmp	r1, #1
	    setOutputPins(0b0101);
   d5a04:	bf14      	ite	ne
   d5a06:	2105      	movne	r1, #5
	    setOutputPins(0b0110);
   d5a08:	2106      	moveq	r1, #6
	    setOutputPins(0b1001);
   d5a0a:	4718      	bx	r3
	    setOutputPins(0b1010);
   d5a0c:	210a      	movs	r1, #10
   d5a0e:	e7fc      	b.n	d5a0a <_ZN12AccelStepper5step4El+0x18>
	    setOutputPins(0b1001);
   d5a10:	2109      	movs	r1, #9
   d5a12:	e7fa      	b.n	d5a0a <_ZN12AccelStepper5step4El+0x18>

000d5a14 <_ZN12AccelStepper14disableOutputsEv>:
    }
}

// Prevents power consumption on the outputs
void    AccelStepper::disableOutputs()
{
   d5a14:	b510      	push	{r4, lr}
    if (! _interface) return;
   d5a16:	7903      	ldrb	r3, [r0, #4]
{
   d5a18:	4604      	mov	r4, r0
    if (! _interface) return;
   d5a1a:	b193      	cbz	r3, d5a42 <_ZN12AccelStepper14disableOutputsEv+0x2e>

    setOutputPins(0); // Handles inversion automatically
   d5a1c:	6803      	ldr	r3, [r0, #0]
   d5a1e:	2100      	movs	r1, #0
   d5a20:	689b      	ldr	r3, [r3, #8]
   d5a22:	4798      	blx	r3
    if (_enablePin != 0xff)
   d5a24:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5a28:	28ff      	cmp	r0, #255	; 0xff
   d5a2a:	d00a      	beq.n	d5a42 <_ZN12AccelStepper14disableOutputsEv+0x2e>
    {
        pinMode(_enablePin, OUTPUT);
   d5a2c:	2101      	movs	r1, #1
   d5a2e:	f004 f9fd 	bl	d9e2c <pinMode>
        digitalWrite(_enablePin, LOW ^ _enableInverted);
   d5a32:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   d5a36:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    }
}
   d5a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, LOW ^ _enableInverted);
   d5a3e:	f004 ba06 	b.w	d9e4e <digitalWrite>
}
   d5a42:	bd10      	pop	{r4, pc}

000d5a44 <_ZN12AccelStepper13enableOutputsEv>:

void    AccelStepper::enableOutputs()
{
   d5a44:	b510      	push	{r4, lr}
    if (! _interface)
   d5a46:	7903      	ldrb	r3, [r0, #4]
{
   d5a48:	4604      	mov	r4, r0
    if (! _interface)
   d5a4a:	b363      	cbz	r3, d5aa6 <_ZN12AccelStepper13enableOutputsEv+0x62>
	return;

    pinMode(_pin[0], OUTPUT);
   d5a4c:	7940      	ldrb	r0, [r0, #5]
   d5a4e:	2101      	movs	r1, #1
   d5a50:	f004 f9ec 	bl	d9e2c <pinMode>
    pinMode(_pin[1], OUTPUT);
   d5a54:	79a0      	ldrb	r0, [r4, #6]
   d5a56:	2101      	movs	r1, #1
   d5a58:	f004 f9e8 	bl	d9e2c <pinMode>
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
   d5a5c:	7923      	ldrb	r3, [r4, #4]
   d5a5e:	2b04      	cmp	r3, #4
   d5a60:	d001      	beq.n	d5a66 <_ZN12AccelStepper13enableOutputsEv+0x22>
   d5a62:	2b08      	cmp	r3, #8
   d5a64:	d118      	bne.n	d5a98 <_ZN12AccelStepper13enableOutputsEv+0x54>
    {
        pinMode(_pin[2], OUTPUT);
   d5a66:	79e0      	ldrb	r0, [r4, #7]
   d5a68:	2101      	movs	r1, #1
   d5a6a:	f004 f9df 	bl	d9e2c <pinMode>
        pinMode(_pin[3], OUTPUT);
   d5a6e:	7a20      	ldrb	r0, [r4, #8]
   d5a70:	2101      	movs	r1, #1
    }
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
    {
        pinMode(_pin[2], OUTPUT);
   d5a72:	f004 f9db 	bl	d9e2c <pinMode>
    }

    if (_enablePin != 0xff)
   d5a76:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5a7a:	28ff      	cmp	r0, #255	; 0xff
   d5a7c:	d013      	beq.n	d5aa6 <_ZN12AccelStepper13enableOutputsEv+0x62>
    {
        pinMode(_enablePin, OUTPUT);
   d5a7e:	2101      	movs	r1, #1
   d5a80:	f004 f9d4 	bl	d9e2c <pinMode>
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
   d5a84:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   d5a88:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   d5a8c:	f081 0101 	eor.w	r1, r1, #1
    }
}
   d5a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
   d5a94:	f004 b9db 	b.w	d9e4e <digitalWrite>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
   d5a98:	2b03      	cmp	r3, #3
   d5a9a:	d001      	beq.n	d5aa0 <_ZN12AccelStepper13enableOutputsEv+0x5c>
   d5a9c:	2b06      	cmp	r3, #6
   d5a9e:	d1ea      	bne.n	d5a76 <_ZN12AccelStepper13enableOutputsEv+0x32>
        pinMode(_pin[2], OUTPUT);
   d5aa0:	79e0      	ldrb	r0, [r4, #7]
   d5aa2:	2101      	movs	r1, #1
   d5aa4:	e7e5      	b.n	d5a72 <_ZN12AccelStepper13enableOutputsEv+0x2e>
}
   d5aa6:	bd10      	pop	{r4, pc}

000d5aa8 <_ZN12AccelStepper8runSpeedEv>:
{
   d5aa8:	b538      	push	{r3, r4, r5, lr}
    if (!_stepInterval)
   d5aaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   d5aac:	4604      	mov	r4, r0
    if (!_stepInterval)
   d5aae:	b90b      	cbnz	r3, d5ab4 <_ZN12AccelStepper8runSpeedEv+0xc>
	return false;
   d5ab0:	2000      	movs	r0, #0
}
   d5ab2:	bd38      	pop	{r3, r4, r5, pc}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5ab4:	f001 ff76 	bl	d79a4 <HAL_Timer_Get_Micro_Seconds>
    if (time - _lastStepTime >= _stepInterval)
   d5ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5aba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5abc:	1ac3      	subs	r3, r0, r3
   d5abe:	4293      	cmp	r3, r2
   d5ac0:	4605      	mov	r5, r0
   d5ac2:	d3f5      	bcc.n	d5ab0 <_ZN12AccelStepper8runSpeedEv+0x8>
	if (_direction == DIRECTION_CW)
   d5ac4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5ac8:	6921      	ldr	r1, [r4, #16]
   d5aca:	b143      	cbz	r3, d5ade <_ZN12AccelStepper8runSpeedEv+0x36>
	    _currentPos += 1;
   d5acc:	3101      	adds	r1, #1
	step(_currentPos);
   d5ace:	6823      	ldr	r3, [r4, #0]
   d5ad0:	6121      	str	r1, [r4, #16]
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	68db      	ldr	r3, [r3, #12]
   d5ad6:	4798      	blx	r3
	_lastStepTime = time; // Caution: does not account for costs in step()
   d5ad8:	62e5      	str	r5, [r4, #44]	; 0x2c
	return true;
   d5ada:	2001      	movs	r0, #1
   d5adc:	e7e9      	b.n	d5ab2 <_ZN12AccelStepper8runSpeedEv+0xa>
	    _currentPos -= 1;
   d5ade:	3901      	subs	r1, #1
   d5ae0:	e7f5      	b.n	d5ace <_ZN12AccelStepper8runSpeedEv+0x26>

000d5ae2 <_ZN12AccelStepper15currentPositionEv>:
}
   d5ae2:	6900      	ldr	r0, [r0, #16]
   d5ae4:	4770      	bx	lr

000d5ae6 <_ZN12AccelStepper18setCurrentPositionEl>:
    _n = 0;
   d5ae6:	2300      	movs	r3, #0
   d5ae8:	6403      	str	r3, [r0, #64]	; 0x40
    _stepInterval = 0;
   d5aea:	6283      	str	r3, [r0, #40]	; 0x28
    _speed = 0.0;
   d5aec:	2300      	movs	r3, #0
    _targetPos = _currentPos = position;
   d5aee:	e9c0 1104 	strd	r1, r1, [r0, #16]
    _speed = 0.0;
   d5af2:	6183      	str	r3, [r0, #24]
}
   d5af4:	4770      	bx	lr
	...

000d5af8 <_ZN12AccelStepper15computeNewSpeedEv>:
{
   d5af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5afc:	edd0 7a06 	vldr	s15, [r0, #24]
   d5b00:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return _targetPos - _currentPos;
   d5b04:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
{
   d5b08:	4604      	mov	r4, r0
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5b0a:	ee17 0a90 	vmov	r0, s15
   d5b0e:	f005 ff75 	bl	db9fc <__aeabi_f2d>
   d5b12:	4680      	mov	r8, r0
   d5b14:	6a20      	ldr	r0, [r4, #32]
   d5b16:	4689      	mov	r9, r1
   d5b18:	f005 ff70 	bl	db9fc <__aeabi_f2d>
   d5b1c:	4602      	mov	r2, r0
   d5b1e:	460b      	mov	r3, r1
   d5b20:	f005 fe0e 	bl	db740 <__adddf3>
   d5b24:	4602      	mov	r2, r0
   d5b26:	460b      	mov	r3, r1
   d5b28:	4640      	mov	r0, r8
   d5b2a:	4649      	mov	r1, r9
   d5b2c:	f006 f8e8 	bl	dbd00 <__aeabi_ddiv>
    return _targetPos - _currentPos;
   d5b30:	1bbd      	subs	r5, r7, r6
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5b32:	f006 fa6b 	bl	dc00c <__aeabi_d2iz>
    if (distanceTo == 0 && stepsToStop <= 1)
   d5b36:	2d00      	cmp	r5, #0
   d5b38:	d157      	bne.n	d5bea <_ZN12AccelStepper15computeNewSpeedEv+0xf2>
   d5b3a:	2801      	cmp	r0, #1
   d5b3c:	dc60      	bgt.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	_speed = 0.0;
   d5b3e:	2300      	movs	r3, #0
	_stepInterval = 0;
   d5b40:	62a5      	str	r5, [r4, #40]	; 0x28
	_speed = 0.0;
   d5b42:	61a3      	str	r3, [r4, #24]
	_n = 0;
   d5b44:	6425      	str	r5, [r4, #64]	; 0x40
}
   d5b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (_n > 0)
   d5b4a:	2b00      	cmp	r3, #0
   d5b4c:	dd08      	ble.n	d5b60 <_ZN12AccelStepper15computeNewSpeedEv+0x68>
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
   d5b4e:	42a8      	cmp	r0, r5
   d5b50:	da03      	bge.n	d5b5a <_ZN12AccelStepper15computeNewSpeedEv+0x62>
   d5b52:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5b56:	2b00      	cmp	r3, #0
   d5b58:	d152      	bne.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
		_n = -stepsToStop; // Start deceleration
   d5b5a:	4240      	negs	r0, r0
   d5b5c:	6420      	str	r0, [r4, #64]	; 0x40
   d5b5e:	e04f      	b.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	else if (_n < 0)
   d5b60:	d04e      	beq.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
   d5b62:	42a8      	cmp	r0, r5
   d5b64:	da4c      	bge.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5b66:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5b6a:	2a00      	cmp	r2, #0
   d5b6c:	d048      	beq.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
		_n = -_n; // Start accceleration
   d5b6e:	425b      	negs	r3, r3
   d5b70:	6423      	str	r3, [r4, #64]	; 0x40
   d5b72:	e045      	b.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	else if (_n < 0)
   d5b74:	d044      	beq.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
   d5b76:	1bf6      	subs	r6, r6, r7
   d5b78:	4286      	cmp	r6, r0
   d5b7a:	dd41      	ble.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5b7c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   d5b80:	2a00      	cmp	r2, #0
   d5b82:	d13d      	bne.n	d5c00 <_ZN12AccelStepper15computeNewSpeedEv+0x108>
   d5b84:	e7f3      	b.n	d5b6e <_ZN12AccelStepper15computeNewSpeedEv+0x76>
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
   d5b86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5b88:	f005 ff38 	bl	db9fc <__aeabi_f2d>
   d5b8c:	4602      	mov	r2, r0
   d5b8e:	460b      	mov	r3, r1
   d5b90:	4606      	mov	r6, r0
   d5b92:	460f      	mov	r7, r1
   d5b94:	f005 fdd4 	bl	db740 <__adddf3>
   d5b98:	4680      	mov	r8, r0
   d5b9a:	4650      	mov	r0, sl
   d5b9c:	4689      	mov	r9, r1
   d5b9e:	f005 ff1b 	bl	db9d8 <__aeabi_i2d>
   d5ba2:	4b2a      	ldr	r3, [pc, #168]	; (d5c4c <_ZN12AccelStepper15computeNewSpeedEv+0x154>)
   d5ba4:	2200      	movs	r2, #0
   d5ba6:	f005 ff81 	bl	dbaac <__aeabi_dmul>
   d5baa:	4b29      	ldr	r3, [pc, #164]	; (d5c50 <_ZN12AccelStepper15computeNewSpeedEv+0x158>)
   d5bac:	2200      	movs	r2, #0
   d5bae:	f005 fdc7 	bl	db740 <__adddf3>
   d5bb2:	4602      	mov	r2, r0
   d5bb4:	460b      	mov	r3, r1
   d5bb6:	4640      	mov	r0, r8
   d5bb8:	4649      	mov	r1, r9
   d5bba:	f006 f8a1 	bl	dbd00 <__aeabi_ddiv>
   d5bbe:	4602      	mov	r2, r0
   d5bc0:	460b      	mov	r3, r1
   d5bc2:	4630      	mov	r0, r6
   d5bc4:	4639      	mov	r1, r7
   d5bc6:	f005 fdb9 	bl	db73c <__aeabi_dsub>
   d5bca:	f006 fa67 	bl	dc09c <__aeabi_d2f>
	_cn = max(_cn, _cmin);
   d5bce:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
   d5bd2:	ee07 0a90 	vmov	s15, r0
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5bde:	bfd8      	it	le
   d5be0:	eef0 7a47 	vmovle.f32	s15, s14
	_cn = max(_cn, _cmin);
   d5be4:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
   d5be8:	e017      	b.n	d5c1a <_ZN12AccelStepper15computeNewSpeedEv+0x122>
    if (distanceTo > 0)
   d5bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5bec:	dcad      	bgt.n	d5b4a <_ZN12AccelStepper15computeNewSpeedEv+0x52>
	if (_n > 0)
   d5bee:	2b00      	cmp	r3, #0
   d5bf0:	ddc0      	ble.n	d5b74 <_ZN12AccelStepper15computeNewSpeedEv+0x7c>
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
   d5bf2:	1bf6      	subs	r6, r6, r7
   d5bf4:	4286      	cmp	r6, r0
   d5bf6:	ddb0      	ble.n	d5b5a <_ZN12AccelStepper15computeNewSpeedEv+0x62>
   d5bf8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   d5bfc:	2b00      	cmp	r3, #0
   d5bfe:	d1ac      	bne.n	d5b5a <_ZN12AccelStepper15computeNewSpeedEv+0x62>
    if (_n == 0)
   d5c00:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
   d5c04:	f1ba 0f00 	cmp.w	sl, #0
   d5c08:	d1bd      	bne.n	d5b86 <_ZN12AccelStepper15computeNewSpeedEv+0x8e>
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
   d5c0a:	2d00      	cmp	r5, #0
	_cn = _c0;
   d5c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5c0e:	64a3      	str	r3, [r4, #72]	; 0x48
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
   d5c10:	bfd4      	ite	le
   d5c12:	2500      	movle	r5, #0
   d5c14:	2501      	movgt	r5, #1
   d5c16:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    _stepInterval = _cn;
   d5c1a:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    _speed = 1000000.0 / _cn;
   d5c1e:	eddf 6a0d 	vldr	s13, [pc, #52]	; d5c54 <_ZN12AccelStepper15computeNewSpeedEv+0x15c>
    _stepInterval = _cn;
   d5c22:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    _n++;
   d5c26:	f10a 0301 	add.w	r3, sl, #1
    _stepInterval = _cn;
   d5c2a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    _speed = 1000000.0 / _cn;
   d5c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _n++;
   d5c32:	6423      	str	r3, [r4, #64]	; 0x40
    if (_direction == DIRECTION_CCW)
   d5c34:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    _speed = 1000000.0 / _cn;
   d5c38:	edc4 7a06 	vstr	s15, [r4, #24]
    if (_direction == DIRECTION_CCW)
   d5c3c:	2b00      	cmp	r3, #0
   d5c3e:	d182      	bne.n	d5b46 <_ZN12AccelStepper15computeNewSpeedEv+0x4e>
	_speed = -_speed;
   d5c40:	eef1 7a67 	vneg.f32	s15, s15
   d5c44:	edc4 7a06 	vstr	s15, [r4, #24]
   d5c48:	e77d      	b.n	d5b46 <_ZN12AccelStepper15computeNewSpeedEv+0x4e>
   d5c4a:	bf00      	nop
   d5c4c:	40100000 	.word	0x40100000
   d5c50:	3ff00000 	.word	0x3ff00000
   d5c54:	49742400 	.word	0x49742400

000d5c58 <_ZN12AccelStepper6moveToEl>:
    if (_targetPos != absolute)
   d5c58:	6942      	ldr	r2, [r0, #20]
   d5c5a:	428a      	cmp	r2, r1
   d5c5c:	d002      	beq.n	d5c64 <_ZN12AccelStepper6moveToEl+0xc>
	_targetPos = absolute;
   d5c5e:	6141      	str	r1, [r0, #20]
	computeNewSpeed();
   d5c60:	f7ff bf4a 	b.w	d5af8 <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5c64:	4770      	bx	lr

000d5c66 <_ZN12AccelStepper4moveEl>:
    moveTo(_currentPos + relative);
   d5c66:	6903      	ldr	r3, [r0, #16]
   d5c68:	4419      	add	r1, r3
   d5c6a:	f7ff bff5 	b.w	d5c58 <_ZN12AccelStepper6moveToEl>
	...

000d5c70 <_ZN12AccelStepper15setAccelerationEf.part.0>:
void AccelStepper::setAcceleration(float acceleration)
   d5c70:	b510      	push	{r4, lr}
   d5c72:	ed2d 8b02 	vpush	{d8}
    if (_acceleration != acceleration)
   d5c76:	ed90 7a08 	vldr	s14, [r0, #32]
   d5c7a:	eeb4 7a40 	vcmp.f32	s14, s0
   d5c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void AccelStepper::setAcceleration(float acceleration)
   d5c82:	4604      	mov	r4, r0
   d5c84:	eeb0 8a40 	vmov.f32	s16, s0
    if (_acceleration != acceleration)
   d5c88:	d032      	beq.n	d5cf0 <_ZN12AccelStepper15setAccelerationEf.part.0+0x80>
	_n = _n * (_acceleration / acceleration);
   d5c8a:	eec7 6a00 	vdiv.f32	s13, s14, s0
   d5c8e:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
   d5c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5c96:	ee67 7aa6 	vmul.f32	s15, s15, s13
   d5c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5c9e:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
   d5ca2:	ee10 0a10 	vmov	r0, s0
   d5ca6:	f005 fea9 	bl	db9fc <__aeabi_f2d>
   d5caa:	4602      	mov	r2, r0
   d5cac:	460b      	mov	r3, r1
   d5cae:	2000      	movs	r0, #0
   d5cb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   d5cb4:	f006 f824 	bl	dbd00 <__aeabi_ddiv>
   d5cb8:	ec41 0b10 	vmov	d0, r0, r1
   d5cbc:	f004 fcf6 	bl	da6ac <sqrt>
   d5cc0:	a30d      	add	r3, pc, #52	; (adr r3, d5cf8 <_ZN12AccelStepper15setAccelerationEf.part.0+0x88>)
   d5cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5cc6:	ec51 0b10 	vmov	r0, r1, d0
   d5cca:	f005 feef 	bl	dbaac <__aeabi_dmul>
   d5cce:	a30c      	add	r3, pc, #48	; (adr r3, d5d00 <_ZN12AccelStepper15setAccelerationEf.part.0+0x90>)
   d5cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5cd4:	f005 feea 	bl	dbaac <__aeabi_dmul>
   d5cd8:	f006 f9e0 	bl	dc09c <__aeabi_d2f>
	_acceleration = acceleration;
   d5cdc:	ed84 8a08 	vstr	s16, [r4, #32]
}
   d5ce0:	ecbd 8b02 	vpop	{d8}
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
   d5ce4:	6460      	str	r0, [r4, #68]	; 0x44
	computeNewSpeed();
   d5ce6:	4620      	mov	r0, r4
}
   d5ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	computeNewSpeed();
   d5cec:	f7ff bf04 	b.w	d5af8 <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5cf0:	ecbd 8b02 	vpop	{d8}
   d5cf4:	bd10      	pop	{r4, pc}
   d5cf6:	bf00      	nop
   d5cf8:	c083126f 	.word	0xc083126f
   d5cfc:	3fe5a1ca 	.word	0x3fe5a1ca
   d5d00:	00000000 	.word	0x00000000
   d5d04:	412e8480 	.word	0x412e8480

000d5d08 <_ZN12AccelStepperC1Ehhhhhb>:
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _minPulseWidth = 1;
   d5d0a:	f04f 0c01 	mov.w	ip, #1
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5d0e:	4d19      	ldr	r5, [pc, #100]	; (d5d74 <_ZN12AccelStepperC1Ehhhhhb+0x6c>)
    _pin[1] = pin2;
   d5d10:	7183      	strb	r3, [r0, #6]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5d12:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _pin[2] = pin3;
   d5d16:	f89d 3018 	ldrb.w	r3, [sp, #24]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5d1a:	6005      	str	r5, [r0, #0]
    _maxSpeed = 1.0;
   d5d1c:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    _speed = 0.0;
   d5d20:	2500      	movs	r5, #0
    _interface = interface;
   d5d22:	7101      	strb	r1, [r0, #4]
    _minPulseWidth = 1;
   d5d24:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    _currentPos = 0;
   d5d28:	2100      	movs	r1, #0
    _enablePin = 0xff;
   d5d2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    _pin[2] = pin3;
   d5d2e:	71c3      	strb	r3, [r0, #7]
    _pin[3] = pin4;
   d5d30:	f89d 301c 	ldrb.w	r3, [sp, #28]
    _speed = 0.0;
   d5d34:	6185      	str	r5, [r0, #24]
    _targetPos = 0;
   d5d36:	e9c0 1104 	strd	r1, r1, [r0, #16]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
   d5d3a:	4604      	mov	r4, r0
    _maxSpeed = 1.0;
   d5d3c:	61c6      	str	r6, [r0, #28]
    _acceleration = 0.0;
   d5d3e:	6205      	str	r5, [r0, #32]
    _sqrt_twoa = 1.0;
   d5d40:	6246      	str	r6, [r0, #36]	; 0x24
    _stepInterval = 0;
   d5d42:	6281      	str	r1, [r0, #40]	; 0x28
    _enablePin = 0xff;
   d5d44:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    _lastStepTime = 0;
   d5d48:	62c1      	str	r1, [r0, #44]	; 0x2c
    _pin[0] = pin1;
   d5d4a:	7142      	strb	r2, [r0, #5]
    _pin[3] = pin4;
   d5d4c:	7203      	strb	r3, [r0, #8]
    _n = 0;
   d5d4e:	6401      	str	r1, [r0, #64]	; 0x40
    _c0 = 0.0;
   d5d50:	6445      	str	r5, [r0, #68]	; 0x44
    _cn = 0.0;
   d5d52:	6485      	str	r5, [r0, #72]	; 0x48
    _cmin = 1.0;
   d5d54:	64c6      	str	r6, [r0, #76]	; 0x4c
    _direction = DIRECTION_CCW;
   d5d56:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
	_pinInverted[i] = 0;
   d5d5a:	7241      	strb	r1, [r0, #9]
   d5d5c:	8141      	strh	r1, [r0, #10]
   d5d5e:	7301      	strb	r1, [r0, #12]
    if (enable)
   d5d60:	b10f      	cbz	r7, d5d66 <_ZN12AccelStepperC1Ehhhhhb+0x5e>
	enableOutputs();
   d5d62:	f7ff fe6f 	bl	d5a44 <_ZN12AccelStepper13enableOutputsEv>
    if (acceleration == 0.0)
   d5d66:	4620      	mov	r0, r4
   d5d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d5d6c:	f7ff ff80 	bl	d5c70 <_ZN12AccelStepper15setAccelerationEf.part.0>
}
   d5d70:	4620      	mov	r0, r4
   d5d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5d74:	000de280 	.word	0x000de280

000d5d78 <_ZN12AccelStepper11setMaxSpeedEf>:
{
   d5d78:	b5d0      	push	{r4, r6, r7, lr}
    if (_maxSpeed != speed)
   d5d7a:	edd0 7a07 	vldr	s15, [r0, #28]
   d5d7e:	eef4 7a40 	vcmp.f32	s15, s0
   d5d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5d86:	4604      	mov	r4, r0
    if (_maxSpeed != speed)
   d5d88:	d029      	beq.n	d5dde <_ZN12AccelStepper11setMaxSpeedEf+0x66>
	_cmin = 1000000.0 / speed;
   d5d8a:	ed9f 7a15 	vldr	s14, [pc, #84]	; d5de0 <_ZN12AccelStepper11setMaxSpeedEf+0x68>
	if (_n > 0)
   d5d8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	_maxSpeed = speed;
   d5d90:	ed80 0a07 	vstr	s0, [r0, #28]
	_cmin = 1000000.0 / speed;
   d5d94:	eec7 7a00 	vdiv.f32	s15, s14, s0
	if (_n > 0)
   d5d98:	2b00      	cmp	r3, #0
	_cmin = 1000000.0 / speed;
   d5d9a:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
	if (_n > 0)
   d5d9e:	dd1e      	ble.n	d5dde <_ZN12AccelStepper11setMaxSpeedEf+0x66>
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
   d5da0:	edd0 7a06 	vldr	s15, [r0, #24]
   d5da4:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d5da8:	ee17 0a90 	vmov	r0, s15
   d5dac:	f005 fe26 	bl	db9fc <__aeabi_f2d>
   d5db0:	4606      	mov	r6, r0
   d5db2:	6a20      	ldr	r0, [r4, #32]
   d5db4:	460f      	mov	r7, r1
   d5db6:	f005 fe21 	bl	db9fc <__aeabi_f2d>
   d5dba:	4602      	mov	r2, r0
   d5dbc:	460b      	mov	r3, r1
   d5dbe:	f005 fcbf 	bl	db740 <__adddf3>
   d5dc2:	4602      	mov	r2, r0
   d5dc4:	460b      	mov	r3, r1
   d5dc6:	4630      	mov	r0, r6
   d5dc8:	4639      	mov	r1, r7
   d5dca:	f005 ff99 	bl	dbd00 <__aeabi_ddiv>
   d5dce:	f006 f91d 	bl	dc00c <__aeabi_d2iz>
   d5dd2:	6420      	str	r0, [r4, #64]	; 0x40
	    computeNewSpeed();
   d5dd4:	4620      	mov	r0, r4
}
   d5dd6:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	    computeNewSpeed();
   d5dda:	f7ff be8d 	b.w	d5af8 <_ZN12AccelStepper15computeNewSpeedEv>
}
   d5dde:	bdd0      	pop	{r4, r6, r7, pc}
   d5de0:	49742400 	.word	0x49742400
   d5de4:	00000000 	.word	0x00000000

000d5de8 <_ZN12AccelStepper8setSpeedEf>:
{
   d5de8:	b510      	push	{r4, lr}
   d5dea:	ed2d 8b02 	vpush	{d8}
    if (speed == _speed)
   d5dee:	edd0 7a06 	vldr	s15, [r0, #24]
   d5df2:	eef4 7a40 	vcmp.f32	s15, s0
   d5df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5dfa:	4604      	mov	r4, r0
    if (speed == _speed)
   d5dfc:	d01a      	beq.n	d5e34 <_ZN12AccelStepper8setSpeedEf+0x4c>
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
   d5dfe:	edd0 7a07 	vldr	s15, [r0, #28]
   d5e02:	eeb1 8a67 	vneg.f32	s16, s15
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d5e06:	eeb4 0ac8 	vcmpe.f32	s0, s16
   d5e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5e0e:	d408      	bmi.n	d5e22 <_ZN12AccelStepper8setSpeedEf+0x3a>
   d5e10:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5e18:	bfd4      	ite	le
   d5e1a:	eeb0 8a40 	vmovle.f32	s16, s0
   d5e1e:	eeb0 8a67 	vmovgt.f32	s16, s15
    if (speed == 0.0)
   d5e22:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5e2a:	d106      	bne.n	d5e3a <_ZN12AccelStepper8setSpeedEf+0x52>
	_stepInterval = 0;
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	62a3      	str	r3, [r4, #40]	; 0x28
    _speed = speed;
   d5e30:	ed84 8a06 	vstr	s16, [r4, #24]
}
   d5e34:	ecbd 8b02 	vpop	{d8}
   d5e38:	bd10      	pop	{r4, pc}
	_stepInterval = fabs(1000000.0 / speed);
   d5e3a:	ee18 0a10 	vmov	r0, s16
   d5e3e:	f005 fddd 	bl	db9fc <__aeabi_f2d>
   d5e42:	4602      	mov	r2, r0
   d5e44:	460b      	mov	r3, r1
   d5e46:	a10a      	add	r1, pc, #40	; (adr r1, d5e70 <_ZN12AccelStepper8setSpeedEf+0x88>)
   d5e48:	e9d1 0100 	ldrd	r0, r1, [r1]
   d5e4c:	f005 ff58 	bl	dbd00 <__aeabi_ddiv>
   d5e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d5e54:	4619      	mov	r1, r3
   d5e56:	f006 f901 	bl	dc05c <__aeabi_d2uiz>
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
   d5e5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5e62:	bfcc      	ite	gt
   d5e64:	2301      	movgt	r3, #1
   d5e66:	2300      	movle	r3, #0
	_stepInterval = fabs(1000000.0 / speed);
   d5e68:	62a0      	str	r0, [r4, #40]	; 0x28
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
   d5e6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   d5e6e:	e7df      	b.n	d5e30 <_ZN12AccelStepper8setSpeedEf+0x48>
   d5e70:	00000000 	.word	0x00000000
   d5e74:	412e8480 	.word	0x412e8480

000d5e78 <_ZN12AccelStepper4stopEv>:
    moveTo(position);
    runToPosition();
}

void AccelStepper::stop()
{
   d5e78:	b5d0      	push	{r4, r6, r7, lr}
   d5e7a:	ed2d 8b02 	vpush	{d8}
    if (_speed != 0.0)
   d5e7e:	ed90 8a06 	vldr	s16, [r0, #24]
   d5e82:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5e8a:	4604      	mov	r4, r0
    if (_speed != 0.0)
   d5e8c:	d024      	beq.n	d5ed8 <_ZN12AccelStepper4stopEv+0x60>
    {
	long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
   d5e8e:	ee68 7a08 	vmul.f32	s15, s16, s16
   d5e92:	ee17 0a90 	vmov	r0, s15
   d5e96:	f005 fdb1 	bl	db9fc <__aeabi_f2d>
   d5e9a:	4606      	mov	r6, r0
   d5e9c:	6a20      	ldr	r0, [r4, #32]
   d5e9e:	460f      	mov	r7, r1
   d5ea0:	f005 fdac 	bl	db9fc <__aeabi_f2d>
   d5ea4:	4602      	mov	r2, r0
   d5ea6:	460b      	mov	r3, r1
   d5ea8:	f005 fc4a 	bl	db740 <__adddf3>
   d5eac:	4602      	mov	r2, r0
   d5eae:	460b      	mov	r3, r1
   d5eb0:	4630      	mov	r0, r6
   d5eb2:	4639      	mov	r1, r7
   d5eb4:	f005 ff24 	bl	dbd00 <__aeabi_ddiv>
   d5eb8:	f006 f8a8 	bl	dc00c <__aeabi_d2iz>
	if (_speed > 0)
   d5ebc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	    move(stepsToStop);
	else
	    move(-stepsToStop);
    }
}
   d5ec0:	ecbd 8b02 	vpop	{d8}
	if (_speed > 0)
   d5ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	    move(stepsToStop);
   d5ec8:	bfcc      	ite	gt
   d5eca:	1c41      	addgt	r1, r0, #1
	    move(-stepsToStop);
   d5ecc:	43c1      	mvnle	r1, r0
   d5ece:	4620      	mov	r0, r4
}
   d5ed0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	    move(-stepsToStop);
   d5ed4:	f7ff bec7 	b.w	d5c66 <_ZN12AccelStepper4moveEl>
}
   d5ed8:	ecbd 8b02 	vpop	{d8}
   d5edc:	bdd0      	pop	{r4, r6, r7, pc}

000d5ede <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d5ede:	7501      	strb	r1, [r0, #20]
   d5ee0:	4770      	bx	lr
	...

000d5ee4 <_ZN9TCPClientD1Ev>:
   d5ee4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5ee6:	6984      	ldr	r4, [r0, #24]
   d5ee8:	4b0a      	ldr	r3, [pc, #40]	; (d5f14 <_ZN9TCPClientD1Ev+0x30>)
   d5eea:	6003      	str	r3, [r0, #0]
   d5eec:	4605      	mov	r5, r0
   d5eee:	b17c      	cbz	r4, d5f10 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5ef0:	6863      	ldr	r3, [r4, #4]
   d5ef2:	3b01      	subs	r3, #1
   d5ef4:	6063      	str	r3, [r4, #4]
   d5ef6:	b95b      	cbnz	r3, d5f10 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5ef8:	6823      	ldr	r3, [r4, #0]
   d5efa:	4620      	mov	r0, r4
   d5efc:	689b      	ldr	r3, [r3, #8]
   d5efe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f00:	68a3      	ldr	r3, [r4, #8]
   d5f02:	3b01      	subs	r3, #1
   d5f04:	60a3      	str	r3, [r4, #8]
   d5f06:	b91b      	cbnz	r3, d5f10 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5f08:	6823      	ldr	r3, [r4, #0]
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	68db      	ldr	r3, [r3, #12]
   d5f0e:	4798      	blx	r3
   d5f10:	4628      	mov	r0, r5
   d5f12:	bd38      	pop	{r3, r4, r5, pc}
   d5f14:	000deda0 	.word	0x000deda0

000d5f18 <_ZN9TCPClientD0Ev>:
   d5f18:	b510      	push	{r4, lr}
   d5f1a:	4604      	mov	r4, r0
   d5f1c:	f7ff ffe2 	bl	d5ee4 <_ZN9TCPClientD1Ev>
   d5f20:	4620      	mov	r0, r4
   d5f22:	211c      	movs	r1, #28
   d5f24:	f004 f841 	bl	d9faa <_ZdlPvj>
   d5f28:	4620      	mov	r0, r4
   d5f2a:	bd10      	pop	{r4, pc}

000d5f2c <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d5f2c:	b530      	push	{r4, r5, lr}
   d5f2e:	4d06      	ldr	r5, [pc, #24]	; (d5f48 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d5f30:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d5f32:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d5f36:	2500      	movs	r5, #0
  _token = token;
   d5f38:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d5f3a:	7505      	strb	r5, [r0, #20]
   d5f3c:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d5f40:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d5f44:	6185      	str	r5, [r0, #24]
}
   d5f46:	bd30      	pop	{r4, r5, pc}
   d5f48:	000de3c4 	.word	0x000de3c4

000d5f4c <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d5f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f50:	460d      	mov	r5, r1
   d5f52:	4617      	mov	r7, r2
   d5f54:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d5f56:	f003 fa29 	bl	d93ac <_Z16_fetch_usbserialv>
   d5f5a:	491e      	ldr	r1, [pc, #120]	; (d5fd4 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d5f5c:	4e1e      	ldr	r6, [pc, #120]	; (d5fd8 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d5f5e:	f8df a07c 	ldr.w	sl, [pc, #124]	; d5fdc <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d5f62:	f8df b07c 	ldr.w	fp, [pc, #124]	; d5fe0 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d5f66:	f002 fb82 	bl	d866e <_ZN5Print7printlnEPKc>
   d5f6a:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d5f6c:	4630      	mov	r0, r6
   d5f6e:	f003 fd9e 	bl	d9aae <_ZN9TCPClient6statusEv>
   d5f72:	bb60      	cbnz	r0, d5fce <_ZN6UbiTCP9reconnectEPKci+0x82>
   d5f74:	2c05      	cmp	r4, #5
   d5f76:	d02a      	beq.n	d5fce <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d5f78:	f898 3014 	ldrb.w	r3, [r8, #20]
   d5f7c:	b1c3      	cbz	r3, d5fb0 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d5f7e:	f003 fa15 	bl	d93ac <_Z16_fetch_usbserialv>
   d5f82:	4651      	mov	r1, sl
   d5f84:	f002 fb60 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(host);
   d5f88:	f003 fa10 	bl	d93ac <_Z16_fetch_usbserialv>
   d5f8c:	4629      	mov	r1, r5
   d5f8e:	f002 fb5b 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d5f92:	f003 fa0b 	bl	d93ac <_Z16_fetch_usbserialv>
   d5f96:	4659      	mov	r1, fp
   d5f98:	f002 fb56 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5f9c:	f003 fa06 	bl	d93ac <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5fa0:	220a      	movs	r2, #10
   d5fa2:	4681      	mov	r9, r0
   d5fa4:	4621      	mov	r1, r4
   d5fa6:	f002 fb6c 	bl	d8682 <_ZN5Print11printNumberEmh>
        n += println();
   d5faa:	4648      	mov	r0, r9
   d5fac:	f002 fb53 	bl	d8656 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d5fb0:	4630      	mov	r0, r6
   d5fb2:	f003 fd65 	bl	d9a80 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	b2ba      	uxth	r2, r7
   d5fba:	4629      	mov	r1, r5
   d5fbc:	4630      	mov	r0, r6
   d5fbe:	f003 fdc3 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d5fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5fc6:	f002 fd09 	bl	d89dc <delay>
   d5fca:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d5fcc:	e7ce      	b.n	d5f6c <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d5fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fd2:	bf00      	nop
   d5fd4:	000de2ac 	.word	0x000de2ac
   d5fd8:	2003e548 	.word	0x2003e548
   d5fdc:	000de2c4 	.word	0x000de2c4
   d5fe0:	000de2da 	.word	0x000de2da

000d5fe4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d5fe4:	b570      	push	{r4, r5, r6, lr}
   d5fe6:	4604      	mov	r4, r0
   d5fe8:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d5fea:	6881      	ldr	r1, [r0, #8]
   d5fec:	482e      	ldr	r0, [pc, #184]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d5fee:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d5ff0:	f002 fb2a 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d5ff4:	492d      	ldr	r1, [pc, #180]	; (d60ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d5ff6:	482c      	ldr	r0, [pc, #176]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d5ff8:	f002 fb26 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d5ffc:	68e1      	ldr	r1, [r4, #12]
   d5ffe:	482a      	ldr	r0, [pc, #168]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6000:	f002 fb22 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d6004:	492a      	ldr	r1, [pc, #168]	; (d60b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6006:	4828      	ldr	r0, [pc, #160]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6008:	f002 fb1e 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d600c:	4631      	mov	r1, r6
   d600e:	4826      	ldr	r0, [pc, #152]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6010:	f002 fb1a 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d6014:	4927      	ldr	r1, [pc, #156]	; (d60b4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6016:	4824      	ldr	r0, [pc, #144]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6018:	f002 fb16 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d601c:	4629      	mov	r1, r5
   d601e:	4822      	ldr	r0, [pc, #136]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6020:	f002 fb12 	bl	d8648 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d6024:	4924      	ldr	r1, [pc, #144]	; (d60b8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6026:	4820      	ldr	r0, [pc, #128]	; (d60a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6028:	f002 fb0e 	bl	d8648 <_ZN5Print5printEPKc>
  if (_debug) {
   d602c:	7d23      	ldrb	r3, [r4, #20]
   d602e:	2b00      	cmp	r3, #0
   d6030:	d038      	beq.n	d60a4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d6032:	f003 f9bb 	bl	d93ac <_Z16_fetch_usbserialv>
   d6036:	4921      	ldr	r1, [pc, #132]	; (d60bc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d6038:	f002 fb19 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d603c:	f003 f9b6 	bl	d93ac <_Z16_fetch_usbserialv>
   d6040:	491f      	ldr	r1, [pc, #124]	; (d60c0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d6042:	f002 fb14 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d6046:	f003 f9b1 	bl	d93ac <_Z16_fetch_usbserialv>
   d604a:	68a1      	ldr	r1, [r4, #8]
   d604c:	f002 fafc 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6050:	f003 f9ac 	bl	d93ac <_Z16_fetch_usbserialv>
   d6054:	4915      	ldr	r1, [pc, #84]	; (d60ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6056:	f002 faf7 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d605a:	f003 f9a7 	bl	d93ac <_Z16_fetch_usbserialv>
   d605e:	68e1      	ldr	r1, [r4, #12]
   d6060:	f002 faf2 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print("|");
   d6064:	f003 f9a2 	bl	d93ac <_Z16_fetch_usbserialv>
   d6068:	4911      	ldr	r1, [pc, #68]	; (d60b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d606a:	f002 faed 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d606e:	f003 f99d 	bl	d93ac <_Z16_fetch_usbserialv>
   d6072:	4631      	mov	r1, r6
   d6074:	f002 fae8 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print(":");
   d6078:	f003 f998 	bl	d93ac <_Z16_fetch_usbserialv>
   d607c:	490d      	ldr	r1, [pc, #52]	; (d60b4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d607e:	f002 fae3 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d6082:	f003 f993 	bl	d93ac <_Z16_fetch_usbserialv>
   d6086:	4629      	mov	r1, r5
   d6088:	f002 fade 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d608c:	f003 f98e 	bl	d93ac <_Z16_fetch_usbserialv>
   d6090:	4909      	ldr	r1, [pc, #36]	; (d60b8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6092:	f002 fad9 	bl	d8648 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d6096:	f003 f989 	bl	d93ac <_Z16_fetch_usbserialv>
}
   d609a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d609e:	4909      	ldr	r1, [pc, #36]	; (d60c4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d60a0:	f002 bae5 	b.w	d866e <_ZN5Print7printlnEPKc>
}
   d60a4:	bd70      	pop	{r4, r5, r6, pc}
   d60a6:	bf00      	nop
   d60a8:	2003e548 	.word	0x2003e548
   d60ac:	000de2ee 	.word	0x000de2ee
   d60b0:	000de2f1 	.word	0x000de2f1
   d60b4:	000de470 	.word	0x000de470
   d60b8:	000de4ae 	.word	0x000de4ae
   d60bc:	000de309 	.word	0x000de309
   d60c0:	000de2f3 	.word	0x000de2f3
   d60c4:	000de308 	.word	0x000de308

000d60c8 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d60c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d60ca:	4f0e      	ldr	r7, [pc, #56]	; (d6104 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d60cc:	4604      	mov	r4, r0
  int timeout = 0;
   d60ce:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d60d0:	4638      	mov	r0, r7
   d60d2:	f003 fc7b 	bl	d99cc <_ZN9TCPClient9availableEv>
   d60d6:	4605      	mov	r5, r0
   d60d8:	b990      	cbnz	r0, d6100 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d60da:	69a3      	ldr	r3, [r4, #24]
   d60dc:	42b3      	cmp	r3, r6
   d60de:	dd0f      	ble.n	d6100 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d60e0:	2001      	movs	r0, #1
   d60e2:	f002 fc7b 	bl	d89dc <delay>
    if (timeout > _timeout - 1) {
   d60e6:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d60e8:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d60ea:	42b3      	cmp	r3, r6
   d60ec:	dcf0      	bgt.n	d60d0 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d60ee:	7d20      	ldrb	r0, [r4, #20]
   d60f0:	b128      	cbz	r0, d60fe <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d60f2:	f003 f95b 	bl	d93ac <_Z16_fetch_usbserialv>
   d60f6:	4904      	ldr	r1, [pc, #16]	; (d6108 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d60f8:	f002 fab9 	bl	d866e <_ZN5Print7printlnEPKc>
   d60fc:	4628      	mov	r0, r5
}
   d60fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6100:	2001      	movs	r0, #1
   d6102:	e7fc      	b.n	d60fe <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d6104:	2003e548 	.word	0x2003e548
   d6108:	000de30e 	.word	0x000de30e

000d610c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6110:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6112:	4606      	mov	r6, r0
   d6114:	4688      	mov	r8, r1
   d6116:	4614      	mov	r4, r2
  if (_debug) {
   d6118:	b14b      	cbz	r3, d612e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d611a:	f003 f947 	bl	d93ac <_Z16_fetch_usbserialv>
   d611e:	4927      	ldr	r1, [pc, #156]	; (d61bc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6120:	f002 faa5 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6124:	f003 f942 	bl	d93ac <_Z16_fetch_usbserialv>
   d6128:	4925      	ldr	r1, [pc, #148]	; (d61c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d612a:	f002 faa0 	bl	d866e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d612e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d61d4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6132:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6134:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6138:	4648      	mov	r0, r9
   d613a:	f003 fc47 	bl	d99cc <_ZN9TCPClient9availableEv>
   d613e:	b178      	cbz	r0, d6160 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6140:	4648      	mov	r0, r9
   d6142:	f003 fb7c 	bl	d983e <_ZN9TCPClient4readEv>
    if (_debug) {
   d6146:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d6148:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d614a:	b12b      	cbz	r3, d6158 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d614c:	f003 f92e 	bl	d93ac <_Z16_fetch_usbserialv>
   d6150:	6803      	ldr	r3, [r0, #0]
   d6152:	4639      	mov	r1, r7
   d6154:	689b      	ldr	r3, [r3, #8]
   d6156:	4798      	blx	r3
    response[j] = c;
   d6158:	5567      	strb	r7, [r4, r5]
    j++;
   d615a:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d615c:	4555      	cmp	r5, sl
   d615e:	d1eb      	bne.n	d6138 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6160:	7d33      	ldrb	r3, [r6, #20]
   d6162:	b123      	cbz	r3, d616e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6164:	f003 f922 	bl	d93ac <_Z16_fetch_usbserialv>
   d6168:	4916      	ldr	r1, [pc, #88]	; (d61c4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d616a:	f002 fa80 	bl	d866e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d616e:	2300      	movs	r3, #0
   d6170:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d6172:	4915      	ldr	r1, [pc, #84]	; (d61c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d6174:	4640      	mov	r0, r8
   d6176:	f006 f860 	bl	dc23a <strcmp>
   d617a:	b968      	cbnz	r0, d6198 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d617c:	4913      	ldr	r1, [pc, #76]	; (d61cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d617e:	4620      	mov	r0, r4
   d6180:	f006 f8b8 	bl	dc2f4 <strstr>
      result = 1;
   d6184:	ed9f 0a12 	vldr	s0, [pc, #72]	; d61d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6188:	2800      	cmp	r0, #0
   d618a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d618e:	bf18      	it	ne
   d6190:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6198:	217c      	movs	r1, #124	; 0x7c
   d619a:	4620      	mov	r0, r4
   d619c:	f006 f840 	bl	dc220 <strchr>
  if (pch != NULL) {
   d61a0:	b148      	cbz	r0, d61b6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d61a2:	3001      	adds	r0, #1
   d61a4:	f005 ffe8 	bl	dc178 <atof>
   d61a8:	ec51 0b10 	vmov	r0, r1, d0
   d61ac:	f005 ff76 	bl	dc09c <__aeabi_d2f>
   d61b0:	ee00 0a10 	vmov	s0, r0
   d61b4:	e7ee      	b.n	d6194 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d61b6:	ed9f 0a06 	vldr	s0, [pc, #24]	; d61d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d61ba:	e7eb      	b.n	d6194 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d61bc:	000de355 	.word	0x000de355
   d61c0:	000de341 	.word	0x000de341
   d61c4:	000de354 	.word	0x000de354
   d61c8:	000de360 	.word	0x000de360
   d61cc:	000de365 	.word	0x000de365
   d61d0:	cda2425f 	.word	0xcda2425f
   d61d4:	2003e548 	.word	0x2003e548

000d61d8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d61d8:	b570      	push	{r4, r5, r6, lr}
   d61da:	ed2d 8b02 	vpush	{d8}
   d61de:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d61e0:	6841      	ldr	r1, [r0, #4]
   d61e2:	4822      	ldr	r0, [pc, #136]	; (d626c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d61e4:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d61e8:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d61ea:	2300      	movs	r3, #0
   d61ec:	f003 fcac 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d61f0:	4620      	mov	r0, r4
   d61f2:	6861      	ldr	r1, [r4, #4]
   d61f4:	f242 3234 	movw	r2, #9012	; 0x2334
   d61f8:	f7ff fea8 	bl	d5f4c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d61fc:	481b      	ldr	r0, [pc, #108]	; (d626c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d61fe:	f003 fa82 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d6202:	b348      	cbz	r0, d6258 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d6204:	4629      	mov	r1, r5
   d6206:	4819      	ldr	r0, [pc, #100]	; (d626c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6208:	f002 fa1e 	bl	d8648 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d620c:	4620      	mov	r0, r4
   d620e:	f7ff ff5b 	bl	d60c8 <_ZN6UbiTCP16waitServerAnswerEv>
   d6212:	4605      	mov	r5, r0
   d6214:	b938      	cbnz	r0, d6226 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d6216:	4815      	ldr	r0, [pc, #84]	; (d626c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6218:	f003 fc32 	bl	d9a80 <_ZN9TCPClient4stopEv>
    return false;
   d621c:	2500      	movs	r5, #0
}
   d621e:	ecbd 8b02 	vpop	{d8}
   d6222:	4628      	mov	r0, r5
   d6224:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d6226:	2064      	movs	r0, #100	; 0x64
   d6228:	f001 fe00 	bl	d7e2c <malloc>
  float value = parseTCPAnswer("POST", response);
   d622c:	4910      	ldr	r1, [pc, #64]	; (d6270 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d622e:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6230:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d6232:	4620      	mov	r0, r4
   d6234:	f7ff ff6a 	bl	d610c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6238:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d623a:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d623e:	f001 fdfd 	bl	d7e3c <free>
  if (value != ERROR_VALUE) {
   d6242:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6274 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d6246:	eeb4 8a67 	vcmp.f32	s16, s15
   d624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d624e:	d0e2      	beq.n	d6216 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6250:	4806      	ldr	r0, [pc, #24]	; (d626c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6252:	f003 fc15 	bl	d9a80 <_ZN9TCPClient4stopEv>
    return true;
   d6256:	e7e2      	b.n	d621e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d6258:	7d23      	ldrb	r3, [r4, #20]
   d625a:	2b00      	cmp	r3, #0
   d625c:	d0db      	beq.n	d6216 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d625e:	f003 f8a5 	bl	d93ac <_Z16_fetch_usbserialv>
   d6262:	4905      	ldr	r1, [pc, #20]	; (d6278 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6264:	f002 fa03 	bl	d866e <_ZN5Print7printlnEPKc>
   d6268:	e7d5      	b.n	d6216 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d626a:	bf00      	nop
   d626c:	2003e548 	.word	0x2003e548
   d6270:	000de360 	.word	0x000de360
   d6274:	cda2425f 	.word	0xcda2425f
   d6278:	000de368 	.word	0x000de368

000d627c <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d627c:	b570      	push	{r4, r5, r6, lr}
   d627e:	ed2d 8b02 	vpush	{d8}
   d6282:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6284:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6286:	460d      	mov	r5, r1
   d6288:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d628a:	6841      	ldr	r1, [r0, #4]
   d628c:	481e      	ldr	r0, [pc, #120]	; (d6308 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d628e:	f242 3234 	movw	r2, #9012	; 0x2334
   d6292:	f003 fc59 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6296:	4620      	mov	r0, r4
   d6298:	6861      	ldr	r1, [r4, #4]
   d629a:	f242 3234 	movw	r2, #9012	; 0x2334
   d629e:	f7ff fe55 	bl	d5f4c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d62a2:	4819      	ldr	r0, [pc, #100]	; (d6308 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d62a4:	f003 fa2f 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d62a8:	b328      	cbz	r0, d62f6 <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d62aa:	4620      	mov	r0, r4
   d62ac:	4632      	mov	r2, r6
   d62ae:	4629      	mov	r1, r5
   d62b0:	f7ff fe98 	bl	d5fe4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d62b4:	4620      	mov	r0, r4
   d62b6:	f7ff ff07 	bl	d60c8 <_ZN6UbiTCP16waitServerAnswerEv>
   d62ba:	b948      	cbnz	r0, d62d0 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d62bc:	4812      	ldr	r0, [pc, #72]	; (d6308 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d62be:	ed9f 8a13 	vldr	s16, [pc, #76]	; d630c <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d62c2:	f003 fbdd 	bl	d9a80 <_ZN9TCPClient4stopEv>
}
   d62c6:	eeb0 0a48 	vmov.f32	s0, s16
   d62ca:	ecbd 8b02 	vpop	{d8}
   d62ce:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d62d0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d62d4:	f001 fdaa 	bl	d7e2c <malloc>
    float value = parseTCPAnswer("LV", response);
   d62d8:	490d      	ldr	r1, [pc, #52]	; (d6310 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d62da:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d62dc:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d62de:	4620      	mov	r0, r4
   d62e0:	f7ff ff14 	bl	d610c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d62e4:	4808      	ldr	r0, [pc, #32]	; (d6308 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d62e6:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d62ea:	f003 fbc9 	bl	d9a80 <_ZN9TCPClient4stopEv>
    free(response);
   d62ee:	4628      	mov	r0, r5
   d62f0:	f001 fda4 	bl	d7e3c <free>
    return value;
   d62f4:	e7e7      	b.n	d62c6 <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d62f6:	7d23      	ldrb	r3, [r4, #20]
   d62f8:	2b00      	cmp	r3, #0
   d62fa:	d0df      	beq.n	d62bc <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d62fc:	f003 f856 	bl	d93ac <_Z16_fetch_usbserialv>
   d6300:	4904      	ldr	r1, [pc, #16]	; (d6314 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d6302:	f002 f9b4 	bl	d866e <_ZN5Print7printlnEPKc>
   d6306:	e7d9      	b.n	d62bc <_ZN6UbiTCP3getEPKcS1_+0x40>
   d6308:	2003e548 	.word	0x2003e548
   d630c:	cda2425f 	.word	0xcda2425f
   d6310:	000de386 	.word	0x000de386
   d6314:	000de389 	.word	0x000de389

000d6318 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6318:	b570      	push	{r4, r5, r6, lr}
   d631a:	4605      	mov	r5, r0
   d631c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d631e:	b14c      	cbz	r4, d6334 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	{
	  _M_erase(_S_right(__x));
   d6320:	68e1      	ldr	r1, [r4, #12]
   d6322:	4628      	mov	r0, r5
   d6324:	f7ff fff8 	bl	d6318 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d6328:	68a6      	ldr	r6, [r4, #8]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d632a:	4620      	mov	r0, r4
   d632c:	f7fd feb7 	bl	d409e <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
   d6330:	4634      	mov	r4, r6
      while (__x != 0)
   d6332:	e7f4      	b.n	d631e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
	}
    }
   d6334:	bd70      	pop	{r4, r5, r6, pc}

000d6336 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d633a:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d633c:	2018      	movs	r0, #24
   d633e:	4615      	mov	r5, r2
   d6340:	460f      	mov	r7, r1
   d6342:	f7fd fea8 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d6346:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d634a:	686b      	ldr	r3, [r5, #4]
   d634c:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d6350:	68ba      	ldr	r2, [r7, #8]
   d6352:	6143      	str	r3, [r0, #20]
   d6354:	4606      	mov	r6, r0
   d6356:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d635a:	4655      	mov	r5, sl
      bool __comp = true;
   d635c:	2301      	movs	r3, #1
      while (__x != 0)
   d635e:	b152      	cbz	r2, d6376 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d6360:	6913      	ldr	r3, [r2, #16]
   d6362:	454b      	cmp	r3, r9
   d6364:	bfcc      	ite	gt
   d6366:	6891      	ldrgt	r1, [r2, #8]
   d6368:	68d1      	ldrle	r1, [r2, #12]
   d636a:	4615      	mov	r5, r2
   d636c:	bfcc      	ite	gt
   d636e:	2301      	movgt	r3, #1
   d6370:	2300      	movle	r3, #0
   d6372:	460a      	mov	r2, r1
   d6374:	e7f3      	b.n	d635e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d6376:	b1a3      	cbz	r3, d63a2 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d6378:	68fb      	ldr	r3, [r7, #12]
   d637a:	42ab      	cmp	r3, r5
   d637c:	d023      	beq.n	d63c6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d637e:	4628      	mov	r0, r5
   d6380:	f003 fe6b 	bl	da05a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d6384:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d6386:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d638a:	454b      	cmp	r3, r9
   d638c:	db1b      	blt.n	d63c6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d638e:	4630      	mov	r0, r6
   d6390:	f7fd fe85 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6394:	f8c4 8000 	str.w	r8, [r4]
   d6398:	2300      	movs	r3, #0
   d639a:	7123      	strb	r3, [r4, #4]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d639c:	4620      	mov	r0, r4
   d639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d63a2:	46a8      	mov	r8, r5
   d63a4:	e7ef      	b.n	d6386 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d63a6:	6928      	ldr	r0, [r5, #16]
   d63a8:	4581      	cmp	r9, r0
   d63aa:	bfac      	ite	ge
   d63ac:	2000      	movge	r0, #0
   d63ae:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d63b0:	4653      	mov	r3, sl
   d63b2:	462a      	mov	r2, r5
   d63b4:	4631      	mov	r1, r6
   d63b6:	f003 fe52 	bl	da05e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d63ba:	697b      	ldr	r3, [r7, #20]
   d63bc:	6026      	str	r6, [r4, #0]
   d63be:	3301      	adds	r3, #1
   d63c0:	617b      	str	r3, [r7, #20]
   d63c2:	2301      	movs	r3, #1
   d63c4:	e7e9      	b.n	d639a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d63c6:	45aa      	cmp	sl, r5
   d63c8:	d1ed      	bne.n	d63a6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d63ca:	2001      	movs	r0, #1
   d63cc:	e7f0      	b.n	d63b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>
	...

000d63d0 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d63d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d63d4:	460d      	mov	r5, r1
   d63d6:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d63d8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d63dc:	f001 fd26 	bl	d7e2c <malloc>
  if (_debug) {
   d63e0:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d63e2:	4607      	mov	r7, r0
  if (_debug) {
   d63e4:	b14b      	cbz	r3, d63fa <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d63e6:	f002 ffe1 	bl	d93ac <_Z16_fetch_usbserialv>
   d63ea:	493a      	ldr	r1, [pc, #232]	; (d64d4 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d63ec:	f002 f93f 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d63f0:	f002 ffdc 	bl	d93ac <_Z16_fetch_usbserialv>
   d63f4:	4938      	ldr	r1, [pc, #224]	; (d64d8 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d63f6:	f002 f93a 	bl	d866e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d63fa:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d64ec <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d63fe:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6400:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6404:	4648      	mov	r0, r9
   d6406:	f003 fae1 	bl	d99cc <_ZN9TCPClient9availableEv>
   d640a:	b188      	cbz	r0, d6430 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d640c:	4648      	mov	r0, r9
   d640e:	f003 fa16 	bl	d983e <_ZN9TCPClient4readEv>
    if (_debug) {
   d6412:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d6414:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d6418:	b12b      	cbz	r3, d6426 <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d641a:	f002 ffc7 	bl	d93ac <_Z16_fetch_usbserialv>
   d641e:	6803      	ldr	r3, [r0, #0]
   d6420:	4641      	mov	r1, r8
   d6422:	689b      	ldr	r3, [r3, #8]
   d6424:	4798      	blx	r3
    response[j] = c;
   d6426:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d642a:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d642c:	4556      	cmp	r6, sl
   d642e:	d1e9      	bne.n	d6404 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d6430:	7d2b      	ldrb	r3, [r5, #20]
   d6432:	b123      	cbz	r3, d643e <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d6434:	f002 ffba 	bl	d93ac <_Z16_fetch_usbserialv>
   d6438:	4928      	ldr	r1, [pc, #160]	; (d64dc <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d643a:	f002 f918 	bl	d866e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d643e:	2500      	movs	r5, #0
	  : _Node_allocator()
   d6440:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d6442:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d6446:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d644a:	4925      	ldr	r1, [pc, #148]	; (d64e0 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d644c:	7125      	strb	r5, [r4, #4]
   d644e:	4638      	mov	r0, r7
  response[j] = '\0';
   d6450:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d6452:	f006 fd9b 	bl	dcf8c <strtok>
    if (strcmp(token, "OK") == 0) {
   d6456:	f8df 9098 	ldr.w	r9, [pc, #152]	; d64f0 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d645a:	f8df a098 	ldr.w	sl, [pc, #152]	; d64f4 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d645e:	f8df 8080 	ldr.w	r8, [pc, #128]	; d64e0 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d6462:	4606      	mov	r6, r0
  while (token != NULL) {
   d6464:	b37e      	cbz	r6, d64c6 <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d6466:	4649      	mov	r1, r9
   d6468:	4630      	mov	r0, r6
   d646a:	f005 fee6 	bl	dc23a <strcmp>
   d646e:	bb00      	cbnz	r0, d64b2 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d6470:	4641      	mov	r1, r8
   d6472:	f006 fd8b 	bl	dcf8c <strtok>
      if (strcmp(token, "null") == 0) {
   d6476:	491b      	ldr	r1, [pc, #108]	; (d64e4 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d6478:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d647a:	f005 fede 	bl	dc23a <strcmp>
   d647e:	b918      	cbnz	r0, d6488 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d6480:	4b19      	ldr	r3, [pc, #100]	; (d64e8 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d6482:	9500      	str	r5, [sp, #0]
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	e008      	b.n	d649a <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d6488:	4630      	mov	r0, r6
   d648a:	f005 fe75 	bl	dc178 <atof>
   d648e:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6492:	9500      	str	r5, [sp, #0]
   d6494:	f005 fe02 	bl	dc09c <__aeabi_d2f>
   d6498:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d649a:	466a      	mov	r2, sp
   d649c:	4621      	mov	r1, r4
   d649e:	a802      	add	r0, sp, #8
   d64a0:	f7ff ff49 	bl	d6336 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d64a4:	4641      	mov	r1, r8
   d64a6:	2000      	movs	r0, #0
   d64a8:	f006 fd70 	bl	dcf8c <strtok>
    mapKey++;
   d64ac:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d64ae:	4606      	mov	r6, r0
  while (token != NULL) {
   d64b0:	e7d8      	b.n	d6464 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d64b2:	4651      	mov	r1, sl
   d64b4:	4630      	mov	r0, r6
   d64b6:	f005 fec0 	bl	dc23a <strcmp>
   d64ba:	2800      	cmp	r0, #0
   d64bc:	d1f2      	bne.n	d64a4 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d64be:	4641      	mov	r1, r8
   d64c0:	f006 fd64 	bl	dcf8c <strtok>
   d64c4:	e7dc      	b.n	d6480 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d64c6:	4638      	mov	r0, r7
   d64c8:	f001 fcb8 	bl	d7e3c <free>
}
   d64cc:	4620      	mov	r0, r4
   d64ce:	b004      	add	sp, #16
   d64d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d64d4:	000de355 	.word	0x000de355
   d64d8:	000de341 	.word	0x000de341
   d64dc:	000de354 	.word	0x000de354
   d64e0:	000de2f1 	.word	0x000de2f1
   d64e4:	000de3af 	.word	0x000de3af
   d64e8:	cda2425f 	.word	0xcda2425f
   d64ec:	2003e548 	.word	0x2003e548
   d64f0:	000de365 	.word	0x000de365
   d64f4:	000de3b4 	.word	0x000de3b4

000d64f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d64f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d64fc:	1d07      	adds	r7, r0, #4
   d64fe:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d6500:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d6502:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d6506:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d650a:	7103      	strb	r3, [r0, #4]
   d650c:	460d      	mov	r5, r1
   d650e:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6510:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d6512:	4604      	mov	r4, r0
   d6514:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6516:	482e      	ldr	r0, [pc, #184]	; (d65d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6518:	f242 3234 	movw	r2, #9012	; 0x2334
   d651c:	f003 fb14 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6520:	4628      	mov	r0, r5
   d6522:	6869      	ldr	r1, [r5, #4]
   d6524:	f242 3234 	movw	r2, #9012	; 0x2334
   d6528:	f7ff fd10 	bl	d5f4c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d652c:	4828      	ldr	r0, [pc, #160]	; (d65d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d652e:	f003 f8ea 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d6532:	b310      	cbz	r0, d657a <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d6534:	4631      	mov	r1, r6
   d6536:	4642      	mov	r2, r8
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff fd53 	bl	d5fe4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d653e:	4628      	mov	r0, r5
   d6540:	f7ff fdc2 	bl	d60c8 <_ZN6UbiTCP16waitServerAnswerEv>
   d6544:	4606      	mov	r6, r0
   d6546:	b9c0      	cbnz	r0, d657a <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d6548:	4821      	ldr	r0, [pc, #132]	; (d65d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d654a:	4f22      	ldr	r7, [pc, #136]	; (d65d4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d654c:	f003 fa98 	bl	d9a80 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d6550:	4921      	ldr	r1, [pc, #132]	; (d65d8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d6552:	4640      	mov	r0, r8
   d6554:	f006 fd1a 	bl	dcf8c <strtok>
      int mapKey = 0;
   d6558:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d655a:	4e1f      	ldr	r6, [pc, #124]	; (d65d8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d655c:	2800      	cmp	r0, #0
   d655e:	d032      	beq.n	d65c6 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d6560:	4621      	mov	r1, r4
   d6562:	a802      	add	r0, sp, #8
   d6564:	466a      	mov	r2, sp
   d6566:	9500      	str	r5, [sp, #0]
   d6568:	9701      	str	r7, [sp, #4]
   d656a:	f7ff fee4 	bl	d6336 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d656e:	4631      	mov	r1, r6
   d6570:	2000      	movs	r0, #0
        mapKey++;
   d6572:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d6574:	f006 fd0a 	bl	dcf8c <strtok>
      while (token != NULL) {
   d6578:	e7f0      	b.n	d655c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d657a:	4629      	mov	r1, r5
   d657c:	a802      	add	r0, sp, #8
   d657e:	f7ff ff27 	bl	d63d0 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d6582:	68a1      	ldr	r1, [r4, #8]
   d6584:	4620      	mov	r0, r4
   d6586:	f7ff fec7 	bl	d6318 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d658a:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d658c:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d658e:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d6592:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d6596:	b17a      	cbz	r2, d65b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d6598:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d659c:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d659e:	9905      	ldr	r1, [sp, #20]
   d65a0:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d65a2:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d65a4:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d65a6:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d65a8:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d65aa:	9a07      	ldr	r2, [sp, #28]
   d65ac:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d65ae:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d65b0:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d65b4:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d65b6:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d65b8:	a802      	add	r0, sp, #8
   d65ba:	9904      	ldr	r1, [sp, #16]
   d65bc:	f7ff feac 	bl	d6318 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d65c0:	4803      	ldr	r0, [pc, #12]	; (d65d0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d65c2:	f003 fa5d 	bl	d9a80 <_ZN9TCPClient4stopEv>
}
   d65c6:	4620      	mov	r0, r4
   d65c8:	b008      	add	sp, #32
   d65ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65ce:	bf00      	nop
   d65d0:	2003e548 	.word	0x2003e548
   d65d4:	cda2425f 	.word	0xcda2425f
   d65d8:	000de467 	.word	0x000de467

000d65dc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d65dc:	b510      	push	{r4, lr}
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d65de:	4c05      	ldr	r4, [pc, #20]	; (d65f4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d65e0:	4620      	mov	r0, r4
   d65e2:	f003 fa9d 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d65e6:	4620      	mov	r0, r4
   d65e8:	4a03      	ldr	r2, [pc, #12]	; (d65f8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d65ea:	4904      	ldr	r1, [pc, #16]	; (d65fc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d65ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d65f0:	f003 bcd6 	b.w	d9fa0 <__aeabi_atexit>
   d65f4:	2003e548 	.word	0x2003e548
   d65f8:	2003e280 	.word	0x2003e280
   d65fc:	000d5ee5 	.word	0x000d5ee5

000d6600 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d6600:	b510      	push	{r4, lr}
   d6602:	4b06      	ldr	r3, [pc, #24]	; (d661c <_ZN3UDPD1Ev+0x1c>)
   d6604:	6003      	str	r3, [r0, #0]
   d6606:	3364      	adds	r3, #100	; 0x64
   d6608:	4604      	mov	r4, r0
   d660a:	6103      	str	r3, [r0, #16]
   d660c:	f001 fd62 	bl	d80d4 <_ZN3UDP4stopEv>
   d6610:	4620      	mov	r0, r4
   d6612:	f001 fe59 	bl	d82c8 <_ZN3UDP13releaseBufferEv>
   d6616:	4620      	mov	r0, r4
   d6618:	bd10      	pop	{r4, pc}
   d661a:	bf00      	nop
   d661c:	000deb98 	.word	0x000deb98

000d6620 <_ZN3UDPD0Ev>:
   d6620:	b510      	push	{r4, lr}
   d6622:	4604      	mov	r4, r0
   d6624:	f7ff ffec 	bl	d6600 <_ZN3UDPD1Ev>
   d6628:	4620      	mov	r0, r4
   d662a:	214c      	movs	r1, #76	; 0x4c
   d662c:	f003 fcbd 	bl	d9faa <_ZdlPvj>
   d6630:	4620      	mov	r0, r4
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d6634:	b510      	push	{r4, lr}
   d6636:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d6638:	6800      	ldr	r0, [r0, #0]
   d663a:	b108      	cbz	r0, d6640 <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d663c:	f7fd fd31 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d6640:	68e0      	ldr	r0, [r4, #12]
   d6642:	f001 fbfb 	bl	d7e3c <free>
  delete _ubiProtocol;
   d6646:	6860      	ldr	r0, [r4, #4]
   d6648:	b110      	cbz	r0, d6650 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d664a:	2104      	movs	r1, #4
   d664c:	f003 fcad 	bl	d9faa <_ZdlPvj>
}
   d6650:	4620      	mov	r0, r4
   d6652:	bd10      	pop	{r4, pc}

000d6654 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d6654:	b538      	push	{r3, r4, r5, lr}
   d6656:	4604      	mov	r4, r0
  _dirty = true;
   d6658:	2001      	movs	r0, #1
   d665a:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d665c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6660:	68e5      	ldr	r5, [r4, #12]
   d6662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6666:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d666a:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d666e:	68e0      	ldr	r0, [r4, #12]
   d6670:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6674:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d6678:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d667c:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6680:	68e0      	ldr	r0, [r4, #12]
   d6682:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6686:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d668a:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d668c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d6690:	68e1      	ldr	r1, [r4, #12]
   d6692:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d6696:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d669a:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d669c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d66a0:	68e2      	ldr	r2, [r4, #12]
   d66a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d66a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d66aa:	9a04      	ldr	r2, [sp, #16]
   d66ac:	611a      	str	r2, [r3, #16]
  _current_value++;
   d66ae:	7c23      	ldrb	r3, [r4, #16]
   d66b0:	3301      	adds	r3, #1
   d66b2:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d66b4:	2b0a      	cmp	r3, #10
  _current_value++;
   d66b6:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d66b8:	dd08      	ble.n	d66cc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d66ba:	7ca3      	ldrb	r3, [r4, #18]
   d66bc:	b123      	cbz	r3, d66c8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d66be:	f002 fe75 	bl	d93ac <_Z16_fetch_usbserialv>
   d66c2:	4903      	ldr	r1, [pc, #12]	; (d66d0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d66c4:	f001 ffd3 	bl	d866e <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d66c8:	230a      	movs	r3, #10
   d66ca:	7423      	strb	r3, [r4, #16]
  }
}
   d66cc:	bd38      	pop	{r3, r4, r5, pc}
   d66ce:	bf00      	nop
   d66d0:	000de3d4 	.word	0x000de3d4

000d66d4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d66d4:	b510      	push	{r4, lr}
   d66d6:	ee10 0a10 	vmov	r0, s0
   d66da:	b086      	sub	sp, #24
   d66dc:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d66de:	f005 f98d 	bl	db9fc <__aeabi_f2d>
   d66e2:	4602      	mov	r2, r0
   d66e4:	460b      	mov	r3, r1
   d66e6:	a801      	add	r0, sp, #4
   d66e8:	490a      	ldr	r1, [pc, #40]	; (d6714 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d66ea:	f001 fbaf 	bl	d7e4c <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d66ee:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d66f0:	2214      	movs	r2, #20
  uint8_t k = 0;
   d66f2:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d66f4:	f810 1b01 	ldrb.w	r1, [r0], #1
   d66f8:	2920      	cmp	r1, #32
   d66fa:	d006      	beq.n	d670a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d66fc:	54e1      	strb	r1, [r4, r3]
      k++;
   d66fe:	3301      	adds	r3, #1
   d6700:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d6702:	b911      	cbnz	r1, d670a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d6704:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d6706:	b006      	add	sp, #24
   d6708:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d670a:	3a01      	subs	r2, #1
   d670c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d6710:	d1f0      	bne.n	d66f4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d6712:	e7f8      	b.n	d6706 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d6714:	000de413 	.word	0x000de413

000d6718 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d6718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d671c:	460c      	mov	r4, r1
   d671e:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d6720:	494c      	ldr	r1, [pc, #304]	; (d6854 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d6722:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6878 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6726:	f8df 9154 	ldr.w	r9, [pc, #340]	; d687c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d672a:	f8df a154 	ldr.w	sl, [pc, #340]	; d6880 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d672e:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d6730:	4620      	mov	r0, r4
   d6732:	f005 fd8c 	bl	dc24e <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d6736:	2600      	movs	r6, #0
   d6738:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d673c:	429e      	cmp	r6, r3
   d673e:	da6a      	bge.n	d6816 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6740:	68eb      	ldr	r3, [r5, #12]
   d6742:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d6746:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d674a:	ed93 0a02 	vldr	s0, [r3, #8]
   d674e:	a903      	add	r1, sp, #12
   d6750:	4628      	mov	r0, r5
   d6752:	f7ff ffbf 	bl	d66d4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d6756:	68eb      	ldr	r3, [r5, #12]
   d6758:	a903      	add	r1, sp, #12
   d675a:	9100      	str	r1, [sp, #0]
   d675c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d6760:	4622      	mov	r2, r4
   d6762:	4641      	mov	r1, r8
   d6764:	4620      	mov	r0, r4
   d6766:	f001 fb71 	bl	d7e4c <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d676a:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d676c:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6770:	443b      	add	r3, r7
   d6772:	68db      	ldr	r3, [r3, #12]
   d6774:	b343      	cbz	r3, d67c8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6776:	4622      	mov	r2, r4
   d6778:	4649      	mov	r1, r9
   d677a:	4620      	mov	r0, r4
   d677c:	f001 fb66 	bl	d7e4c <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6780:	68eb      	ldr	r3, [r5, #12]
   d6782:	443b      	add	r3, r7
   d6784:	691b      	ldr	r3, [r3, #16]
   d6786:	2b00      	cmp	r3, #0
   d6788:	d038      	beq.n	d67fc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d678a:	200a      	movs	r0, #10
   d678c:	fb93 f1f0 	sdiv	r1, r3, r0
   d6790:	fb91 fcf0 	sdiv	ip, r1, r0
   d6794:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d6798:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d679c:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d679e:	2264      	movs	r2, #100	; 0x64
   d67a0:	fb93 f2f2 	sdiv	r2, r3, r2
   d67a4:	fb92 fef0 	sdiv	lr, r2, r0
   d67a8:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d67ac:	9100      	str	r1, [sp, #0]
   d67ae:	fa5f f38c 	uxtb.w	r3, ip
   d67b2:	4929      	ldr	r1, [pc, #164]	; (d6858 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d67b4:	b2d2      	uxtb	r2, r2
   d67b6:	a802      	add	r0, sp, #8
   d67b8:	f001 fb48 	bl	d7e4c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d67bc:	4927      	ldr	r1, [pc, #156]	; (d685c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d67be:	ab02      	add	r3, sp, #8
   d67c0:	4622      	mov	r2, r4
   d67c2:	4620      	mov	r0, r4
   d67c4:	f001 fb42 	bl	d7e4c <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d67c8:	68eb      	ldr	r3, [r5, #12]
   d67ca:	441f      	add	r7, r3
   d67cc:	687b      	ldr	r3, [r7, #4]
   d67ce:	b123      	cbz	r3, d67da <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d67d0:	4923      	ldr	r1, [pc, #140]	; (d6860 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d67d2:	4622      	mov	r2, r4
   d67d4:	4620      	mov	r0, r4
   d67d6:	f001 fb39 	bl	d7e4c <sprintf>
    sprintf(payload, "%s}", payload);
   d67da:	4622      	mov	r2, r4
   d67dc:	4921      	ldr	r1, [pc, #132]	; (d6864 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d67de:	4620      	mov	r0, r4
   d67e0:	f001 fb34 	bl	d7e4c <sprintf>
    i++;
   d67e4:	3601      	adds	r6, #1
    if (i < _current_value) {
   d67e6:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d67ea:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d67ec:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d67ee:	4622      	mov	r2, r4
    if (i < _current_value) {
   d67f0:	da0a      	bge.n	d6808 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d67f2:	491d      	ldr	r1, [pc, #116]	; (d6868 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d67f4:	4620      	mov	r0, r4
   d67f6:	f001 fb29 	bl	d7e4c <sprintf>
   d67fa:	e79d      	b.n	d6738 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d67fc:	4622      	mov	r2, r4
   d67fe:	4651      	mov	r1, sl
   d6800:	4620      	mov	r0, r4
   d6802:	f001 fb23 	bl	d7e4c <sprintf>
   d6806:	e7df      	b.n	d67c8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d6808:	4916      	ldr	r1, [pc, #88]	; (d6864 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d680a:	4620      	mov	r0, r4
   d680c:	f001 fb1e 	bl	d7e4c <sprintf>
      _current_value = 0;
   d6810:	2300      	movs	r3, #0
   d6812:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d6814:	e790      	b.n	d6738 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d6816:	7cab      	ldrb	r3, [r5, #18]
   d6818:	b1c3      	cbz	r3, d684c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d681a:	f002 fdc7 	bl	d93ac <_Z16_fetch_usbserialv>
   d681e:	4913      	ldr	r1, [pc, #76]	; (d686c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d6820:	f001 ff25 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d6824:	f002 fdc2 	bl	d93ac <_Z16_fetch_usbserialv>
   d6828:	4911      	ldr	r1, [pc, #68]	; (d6870 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d682a:	f001 ff20 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d682e:	f002 fdbd 	bl	d93ac <_Z16_fetch_usbserialv>
   d6832:	4621      	mov	r1, r4
   d6834:	f001 ff1b 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d6838:	f002 fdb8 	bl	d93ac <_Z16_fetch_usbserialv>
   d683c:	490b      	ldr	r1, [pc, #44]	; (d686c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d683e:	f001 ff16 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6842:	f002 fdb3 	bl	d93ac <_Z16_fetch_usbserialv>
   d6846:	490b      	ldr	r1, [pc, #44]	; (d6874 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d6848:	f001 ff11 	bl	d866e <_ZN5Print7printlnEPKc>
}
   d684c:	b009      	add	sp, #36	; 0x24
   d684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6852:	bf00      	nop
   d6854:	000de418 	.word	0x000de418
   d6858:	000de440 	.word	0x000de440
   d685c:	000de447 	.word	0x000de447
   d6860:	000de452 	.word	0x000de452
   d6864:	000de461 	.word	0x000de461
   d6868:	000de465 	.word	0x000de465
   d686c:	000de355 	.word	0x000de355
   d6870:	000de469 	.word	0x000de469
   d6874:	000de639 	.word	0x000de639
   d6878:	000de41a 	.word	0x000de41a
   d687c:	000de42d 	.word	0x000de42d
   d6880:	000de44c 	.word	0x000de44c

000d6884 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6888:	460c      	mov	r4, r1
   d688a:	4605      	mov	r5, r0
   d688c:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d688e:	4952      	ldr	r1, [pc, #328]	; (d69d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6890:	f8df 8174 	ldr.w	r8, [pc, #372]	; d6a08 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6894:	f8df 9174 	ldr.w	r9, [pc, #372]	; d6a0c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d6898:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d689a:	4616      	mov	r6, r2
   d689c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d689e:	f005 fcd6 	bl	dc24e <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d68a2:	68ab      	ldr	r3, [r5, #8]
   d68a4:	4a4d      	ldr	r2, [pc, #308]	; (d69dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d68a6:	494e      	ldr	r1, [pc, #312]	; (d69e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d68a8:	4620      	mov	r0, r4
   d68aa:	f001 facf 	bl	d7e4c <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d68ae:	4633      	mov	r3, r6
   d68b0:	494c      	ldr	r1, [pc, #304]	; (d69e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d68b2:	9700      	str	r7, [sp, #0]
   d68b4:	4622      	mov	r2, r4
   d68b6:	4620      	mov	r0, r4
   d68b8:	f001 fac8 	bl	d7e4c <sprintf>
  sprintf(payload, "%s=>", payload);
   d68bc:	494a      	ldr	r1, [pc, #296]	; (d69e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d68be:	4f49      	ldr	r7, [pc, #292]	; (d69e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d68c0:	4622      	mov	r2, r4
   d68c2:	4620      	mov	r0, r4
   d68c4:	f001 fac2 	bl	d7e4c <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d68c8:	2600      	movs	r6, #0
   d68ca:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d68ce:	429e      	cmp	r6, r3
   d68d0:	da64      	bge.n	d699c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d68d2:	68eb      	ldr	r3, [r5, #12]
   d68d4:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d68d8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d68dc:	ed93 0a02 	vldr	s0, [r3, #8]
   d68e0:	a903      	add	r1, sp, #12
   d68e2:	4628      	mov	r0, r5
   d68e4:	f7ff fef6 	bl	d66d4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d68e8:	68eb      	ldr	r3, [r5, #12]
   d68ea:	a903      	add	r1, sp, #12
   d68ec:	9100      	str	r1, [sp, #0]
   d68ee:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d68f2:	4622      	mov	r2, r4
   d68f4:	4639      	mov	r1, r7
   d68f6:	4620      	mov	r0, r4
   d68f8:	f001 faa8 	bl	d7e4c <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d68fc:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d68fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d6902:	4453      	add	r3, sl
   d6904:	685b      	ldr	r3, [r3, #4]
   d6906:	b123      	cbz	r3, d6912 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6908:	4622      	mov	r2, r4
   d690a:	4641      	mov	r1, r8
   d690c:	4620      	mov	r0, r4
   d690e:	f001 fa9d 	bl	d7e4c <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6912:	68eb      	ldr	r3, [r5, #12]
   d6914:	4453      	add	r3, sl
   d6916:	68db      	ldr	r3, [r3, #12]
   d6918:	b33b      	cbz	r3, d696a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d691a:	4622      	mov	r2, r4
   d691c:	4649      	mov	r1, r9
   d691e:	4620      	mov	r0, r4
   d6920:	f001 fa94 	bl	d7e4c <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6924:	68eb      	ldr	r3, [r5, #12]
   d6926:	4453      	add	r3, sl
   d6928:	691b      	ldr	r3, [r3, #16]
   d692a:	b353      	cbz	r3, d6982 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d692c:	200a      	movs	r0, #10
   d692e:	fb93 f1f0 	sdiv	r1, r3, r0
   d6932:	fb91 fcf0 	sdiv	ip, r1, r0
   d6936:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d693a:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d693e:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6940:	2264      	movs	r2, #100	; 0x64
   d6942:	fb93 f2f2 	sdiv	r2, r3, r2
   d6946:	fb92 fef0 	sdiv	lr, r2, r0
   d694a:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d694e:	9100      	str	r1, [sp, #0]
   d6950:	fa5f f38c 	uxtb.w	r3, ip
   d6954:	4925      	ldr	r1, [pc, #148]	; (d69ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d6956:	b2d2      	uxtb	r2, r2
   d6958:	a802      	add	r0, sp, #8
   d695a:	f001 fa77 	bl	d7e4c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d695e:	4924      	ldr	r1, [pc, #144]	; (d69f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6960:	ab02      	add	r3, sp, #8
   d6962:	4622      	mov	r2, r4
   d6964:	4620      	mov	r0, r4
   d6966:	f001 fa71 	bl	d7e4c <sprintf>
    if (i < _current_value) {
   d696a:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d696e:	3601      	adds	r6, #1
   d6970:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6972:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6974:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6976:	da0a      	bge.n	d698e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d6978:	491e      	ldr	r1, [pc, #120]	; (d69f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d697a:	4620      	mov	r0, r4
   d697c:	f001 fa66 	bl	d7e4c <sprintf>
   d6980:	e7a3      	b.n	d68ca <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6982:	491d      	ldr	r1, [pc, #116]	; (d69f8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6984:	4622      	mov	r2, r4
   d6986:	4620      	mov	r0, r4
   d6988:	f001 fa60 	bl	d7e4c <sprintf>
   d698c:	e7ed      	b.n	d696a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d698e:	491b      	ldr	r1, [pc, #108]	; (d69fc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6990:	4620      	mov	r0, r4
   d6992:	f001 fa5b 	bl	d7e4c <sprintf>
      _current_value = 0;
   d6996:	2300      	movs	r3, #0
   d6998:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d699a:	e796      	b.n	d68ca <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d699c:	7cab      	ldrb	r3, [r5, #18]
   d699e:	b1c3      	cbz	r3, d69d2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d69a0:	f002 fd04 	bl	d93ac <_Z16_fetch_usbserialv>
   d69a4:	4916      	ldr	r1, [pc, #88]	; (d6a00 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d69a6:	f001 fe62 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d69aa:	f002 fcff 	bl	d93ac <_Z16_fetch_usbserialv>
   d69ae:	4915      	ldr	r1, [pc, #84]	; (d6a04 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d69b0:	f001 fe5d 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d69b4:	f002 fcfa 	bl	d93ac <_Z16_fetch_usbserialv>
   d69b8:	4621      	mov	r1, r4
   d69ba:	f001 fe58 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d69be:	f002 fcf5 	bl	d93ac <_Z16_fetch_usbserialv>
   d69c2:	490f      	ldr	r1, [pc, #60]	; (d6a00 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d69c4:	f001 fe53 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d69c8:	f002 fcf0 	bl	d93ac <_Z16_fetch_usbserialv>
   d69cc:	4902      	ldr	r1, [pc, #8]	; (d69d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d69ce:	f001 fe4e 	bl	d866e <_ZN5Print7printlnEPKc>
}
   d69d2:	b009      	add	sp, #36	; 0x24
   d69d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d69d8:	000de639 	.word	0x000de639
   d69dc:	000de472 	.word	0x000de472
   d69e0:	000de486 	.word	0x000de486
   d69e4:	000de492 	.word	0x000de492
   d69e8:	000de49a 	.word	0x000de49a
   d69ec:	000de440 	.word	0x000de440
   d69f0:	000de447 	.word	0x000de447
   d69f4:	000de465 	.word	0x000de465
   d69f8:	000de44c 	.word	0x000de44c
   d69fc:	000de4ac 	.word	0x000de4ac
   d6a00:	000de355 	.word	0x000de355
   d6a04:	000de469 	.word	0x000de469
   d6a08:	000de49f 	.word	0x000de49f
   d6a0c:	000de4a5 	.word	0x000de4a5

000d6a10 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6a14:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6a16:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6a1a:	461e      	mov	r6, r3
   d6a1c:	460f      	mov	r7, r1
   d6a1e:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6a20:	f001 fa04 	bl	d7e2c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6a24:	7ce3      	ldrb	r3, [r4, #19]
   d6a26:	3b01      	subs	r3, #1
   d6a28:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6a2a:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6a2c:	d826      	bhi.n	d6a7c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d6a2e:	4601      	mov	r1, r0
   d6a30:	4643      	mov	r3, r8
   d6a32:	463a      	mov	r2, r7
   d6a34:	4620      	mov	r0, r4
   d6a36:	f7ff ff25 	bl	d6884 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d6a3a:	7ca3      	ldrb	r3, [r4, #18]
   d6a3c:	b123      	cbz	r3, d6a48 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d6a3e:	f002 fcb5 	bl	d93ac <_Z16_fetch_usbserialv>
   d6a42:	4911      	ldr	r1, [pc, #68]	; (d6a88 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6a44:	f001 fe13 	bl	d866e <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d6a48:	6860      	ldr	r0, [r4, #4]
   d6a4a:	6803      	ldr	r3, [r0, #0]
   d6a4c:	9600      	str	r6, [sp, #0]
   d6a4e:	f8d3 9000 	ldr.w	r9, [r3]
   d6a52:	4639      	mov	r1, r7
   d6a54:	462b      	mov	r3, r5
   d6a56:	4642      	mov	r2, r8
   d6a58:	47c8      	blx	r9
   d6a5a:	4607      	mov	r7, r0
  free(payload);
   d6a5c:	4628      	mov	r0, r5
   d6a5e:	f001 f9ed 	bl	d7e3c <free>
  delete flags;
   d6a62:	b11e      	cbz	r6, d6a6c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6a64:	2101      	movs	r1, #1
   d6a66:	4630      	mov	r0, r6
   d6a68:	f003 fa9f 	bl	d9faa <_ZdlPvj>
  if (result) {
   d6a6c:	2300      	movs	r3, #0
   d6a6e:	b107      	cbz	r7, d6a72 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6a70:	7463      	strb	r3, [r4, #17]
}
   d6a72:	4638      	mov	r0, r7
  _current_value = 0;
   d6a74:	7423      	strb	r3, [r4, #16]
}
   d6a76:	b003      	add	sp, #12
   d6a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d6a7c:	4601      	mov	r1, r0
   d6a7e:	4620      	mov	r0, r4
   d6a80:	f7ff fe4a 	bl	d6718 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6a84:	e7d9      	b.n	d6a3a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d6a86:	bf00      	nop
   d6a88:	000de4b3 	.word	0x000de4b3

000d6a8c <_ZN18UbiProtocolHandler4sendEv>:
bool UbiProtocolHandler::send() {
   d6a8c:	b510      	push	{r4, lr}
   d6a8e:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6a90:	2001      	movs	r0, #1
   d6a92:	f7fd fb00 	bl	d4096 <_Znwj>
   d6a96:	4603      	mov	r3, r0
   d6a98:	b110      	cbz	r0, d6aa0 <_ZN18UbiProtocolHandler4sendEv+0x14>
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d6a9a:	4a05      	ldr	r2, [pc, #20]	; (d6ab0 <_ZN18UbiProtocolHandler4sendEv+0x24>)
   d6a9c:	7812      	ldrb	r2, [r2, #0]
   d6a9e:	7002      	strb	r2, [r0, #0]
  return send(_default_device_label, _default_device_label, flags);
   d6aa0:	6822      	ldr	r2, [r4, #0]
   d6aa2:	4620      	mov	r0, r4
   d6aa4:	4611      	mov	r1, r2
}
   d6aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return send(_default_device_label, _default_device_label, flags);
   d6aaa:	f7ff bfb1 	b.w	d6a10 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>
   d6aae:	bf00      	nop
   d6ab0:	2003e5e8 	.word	0x2003e5e8

000d6ab4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6ab4:	b570      	push	{r4, r5, r6, lr}
   d6ab6:	4605      	mov	r5, r0
   d6ab8:	460c      	mov	r4, r1
      while (__x != 0)
   d6aba:	b184      	cbz	r4, d6ade <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6abc:	68e1      	ldr	r1, [r4, #12]
   d6abe:	4628      	mov	r0, r5
   d6ac0:	f7ff fff8 	bl	d6ab4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6ac4:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d6ac6:	68a6      	ldr	r6, [r4, #8]
   d6ac8:	b123      	cbz	r3, d6ad4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6aca:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ace:	2203      	movs	r2, #3
   d6ad0:	4608      	mov	r0, r1
   d6ad2:	4798      	blx	r3
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	f7fd fae2 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6ada:	4634      	mov	r4, r6
      }
   d6adc:	e7ed      	b.n	d6aba <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d6ade:	bd70      	pop	{r4, r5, r6, pc}

000d6ae0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ae2:	b08d      	sub	sp, #52	; 0x34
   d6ae4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d6ae6:	a801      	add	r0, sp, #4
   d6ae8:	460d      	mov	r5, r1
   d6aea:	4617      	mov	r7, r2
   d6aec:	461e      	mov	r6, r3
   d6aee:	f001 f97d 	bl	d7dec <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d6af2:	9803      	ldr	r0, [sp, #12]
   d6af4:	3001      	adds	r0, #1
   d6af6:	f7fd fad0 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d6afa:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d6afc:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d6afe:	f005 fba6 	bl	dc24e <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d6b02:	462a      	mov	r2, r5
   d6b04:	4633      	mov	r3, r6
   d6b06:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d6b08:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d6b0a:	a805      	add	r0, sp, #20
   d6b0c:	f000 fd4e 	bl	d75ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d6b10:	20c8      	movs	r0, #200	; 0xc8
   d6b12:	f001 f98b 	bl	d7e2c <malloc>
   d6b16:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d6b18:	a805      	add	r0, sp, #20
   d6b1a:	f000 fc6b 	bl	d73f4 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d6b1e:	2300      	movs	r3, #0
  _token = token;
   d6b20:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d6b24:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d6b26:	7423      	strb	r3, [r4, #16]
   d6b28:	a806      	add	r0, sp, #24
   d6b2a:	f7ff ffc3 	bl	d6ab4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d6b2e:	a801      	add	r0, sp, #4
   d6b30:	f001 fd0a 	bl	d8548 <_ZN6StringD1Ev>
}
   d6b34:	b00d      	add	sp, #52	; 0x34
   d6b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b38 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6b38:	b538      	push	{r3, r4, r5, lr}
   d6b3a:	2500      	movs	r5, #0
   d6b3c:	4604      	mov	r4, r0
   d6b3e:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6b40:	f7ff ffce 	bl	d6ae0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d6b44:	4620      	mov	r0, r4
   d6b46:	bd38      	pop	{r3, r4, r5, pc}

000d6b48 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6b48:	b510      	push	{r4, lr}
        val_(val) {
   d6b4a:	4b10      	ldr	r3, [pc, #64]	; (d6b8c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d6b4c:	4c10      	ldr	r4, [pc, #64]	; (d6b90 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d6b4e:	2200      	movs	r2, #0
   d6b50:	701a      	strb	r2, [r3, #0]
   d6b52:	4620      	mov	r0, r4
   d6b54:	f002 ffe4 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d6b58:	4620      	mov	r0, r4
   d6b5a:	4c0e      	ldr	r4, [pc, #56]	; (d6b94 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d6b5c:	4a0e      	ldr	r2, [pc, #56]	; (d6b98 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6b5e:	490f      	ldr	r1, [pc, #60]	; (d6b9c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6b60:	f003 fa1e 	bl	d9fa0 <__aeabi_atexit>
   d6b64:	4620      	mov	r0, r4
   d6b66:	f002 ffdb 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d6b6a:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d6b6c:	4c0c      	ldr	r4, [pc, #48]	; (d6ba0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d6b6e:	4a0a      	ldr	r2, [pc, #40]	; (d6b98 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6b70:	490a      	ldr	r1, [pc, #40]	; (d6b9c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6b72:	f003 fa15 	bl	d9fa0 <__aeabi_atexit>
   d6b76:	4620      	mov	r0, r4
   d6b78:	f001 fb86 	bl	d8288 <_ZN3UDPC1Ev>
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	4a06      	ldr	r2, [pc, #24]	; (d6b98 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6b80:	4908      	ldr	r1, [pc, #32]	; (d6ba4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d6b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6b86:	f003 ba0b 	b.w	d9fa0 <__aeabi_atexit>
   d6b8a:	bf00      	nop
   d6b8c:	2003e5e8 	.word	0x2003e5e8
   d6b90:	2003e5cc 	.word	0x2003e5cc
   d6b94:	2003e564 	.word	0x2003e564
   d6b98:	2003e280 	.word	0x2003e280
   d6b9c:	000d5ee5 	.word	0x000d5ee5
   d6ba0:	2003e580 	.word	0x2003e580
   d6ba4:	000d6601 	.word	0x000d6601

000d6ba8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d6baa:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6bac:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6bae:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6bb0:	e9cd 2100 	strd	r2, r1, [sp]
   d6bb4:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6bb6:	f001 f939 	bl	d7e2c <malloc>
   d6bba:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d6bbc:	2014      	movs	r0, #20
   d6bbe:	f7fd fa6a 	bl	d4096 <_Znwj>
   d6bc2:	4605      	mov	r5, r0
   d6bc4:	b120      	cbz	r0, d6bd0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d6bc6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6bca:	4633      	mov	r3, r6
   d6bcc:	f7ff ffb4 	bl	d6b38 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d6bd0:	6025      	str	r5, [r4, #0]
}
   d6bd2:	b002      	add	sp, #8
   d6bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6bd8 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d6bd8:	b538      	push	{r3, r4, r5, lr}
   d6bda:	2500      	movs	r5, #0
   d6bdc:	4604      	mov	r4, r0
   d6bde:	4613      	mov	r3, r2
   d6be0:	7245      	strb	r5, [r0, #9]
   d6be2:	7285      	strb	r5, [r0, #10]
   d6be4:	4a02      	ldr	r2, [pc, #8]	; (d6bf0 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d6be6:	f7ff ffdf 	bl	d6ba8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d6bea:	4620      	mov	r0, r4
   d6bec:	bd38      	pop	{r3, r4, r5, pc}
   d6bee:	bf00      	nop
   d6bf0:	000de4c3 	.word	0x000de4c3

000d6bf4 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d6bf4:	b538      	push	{r3, r4, r5, lr}
   d6bf6:	4604      	mov	r4, r0
  free(_context);
   d6bf8:	6840      	ldr	r0, [r0, #4]
   d6bfa:	f001 f91f 	bl	d7e3c <free>
  delete _cloudProtocol;
   d6bfe:	6825      	ldr	r5, [r4, #0]
   d6c00:	b135      	cbz	r5, d6c10 <_ZN7UbidotsD1Ev+0x1c>
   d6c02:	4628      	mov	r0, r5
   d6c04:	f7ff fd16 	bl	d6634 <_ZN18UbiProtocolHandlerD1Ev>
   d6c08:	2114      	movs	r1, #20
   d6c0a:	4628      	mov	r0, r5
   d6c0c:	f003 f9cd 	bl	d9faa <_ZdlPvj>
}
   d6c10:	4620      	mov	r0, r4
   d6c12:	bd38      	pop	{r3, r4, r5, pc}

000d6c14 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d6c14:	6800      	ldr	r0, [r0, #0]
   d6c16:	f7ff bd1d 	b.w	d6654 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d6c1a <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d6c1a:	b507      	push	{r0, r1, r2, lr}
   d6c1c:	2300      	movs	r3, #0
   d6c1e:	9300      	str	r3, [sp, #0]
   d6c20:	461a      	mov	r2, r3
   d6c22:	f7ff fff7 	bl	d6c14 <_ZN7Ubidots3addEPcfS0_mj>
   d6c26:	b003      	add	sp, #12
   d6c28:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c2c <_ZN7Ubidots4sendEv>:
 * @arg device_name [optional] Name of the device to be created (supported only
 * for TCP/UDP)
 * @arg flags [Optional] Particle publish flags for webhooks
 */

bool Ubidots::send() { return _cloudProtocol->send(); }
   d6c2c:	6800      	ldr	r0, [r0, #0]
   d6c2e:	f7ff bf2d 	b.w	d6a8c <_ZN18UbiProtocolHandler4sendEv>

000d6c32 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d6c32:	7501      	strb	r1, [r0, #20]
   d6c34:	4770      	bx	lr

000d6c36 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d6c36:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6c38:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6c3a:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6c3e:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6c42:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d6c44:	4770      	bx	lr
	...

000d6c48 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d6c48:	b570      	push	{r4, r5, r6, lr}
   d6c4a:	4606      	mov	r6, r0
   d6c4c:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d6c50:	2014      	movs	r0, #20
   d6c52:	f001 f8eb 	bl	d7e2c <malloc>
   d6c56:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d6c58:	2014      	movs	r0, #20
   d6c5a:	f001 f8e7 	bl	d7e2c <malloc>
   d6c5e:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d6c60:	4630      	mov	r0, r6
   d6c62:	f005 fb1a 	bl	dc29a <strlen>
    for (int i = 0; i < len - 2; i++) {
   d6c66:	4632      	mov	r2, r6
   d6c68:	2300      	movs	r3, #0
   d6c6a:	3802      	subs	r0, #2
   d6c6c:	4298      	cmp	r0, r3
   d6c6e:	dd14      	ble.n	d6c9a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d6c70:	f812 1b01 	ldrb.w	r1, [r2], #1
   d6c74:	290d      	cmp	r1, #13
   d6c76:	d13a      	bne.n	d6cee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6c78:	7811      	ldrb	r1, [r2, #0]
   d6c7a:	290a      	cmp	r1, #10
   d6c7c:	d137      	bne.n	d6cee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6c7e:	7851      	ldrb	r1, [r2, #1]
   d6c80:	290d      	cmp	r1, #13
   d6c82:	d134      	bne.n	d6cee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6c84:	7891      	ldrb	r1, [r2, #2]
   d6c86:	290a      	cmp	r1, #10
   d6c88:	d131      	bne.n	d6cee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d6c8a:	3304      	adds	r3, #4
   d6c8c:	18f1      	adds	r1, r6, r3
   d6c8e:	2214      	movs	r2, #20
   d6c90:	4628      	mov	r0, r5
   d6c92:	f005 fb1c 	bl	dc2ce <strncpy>
        parsed[20] = '\0';
   d6c96:	2300      	movs	r3, #0
   d6c98:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d6c9a:	210a      	movs	r1, #10
   d6c9c:	4628      	mov	r0, r5
   d6c9e:	f005 fabf 	bl	dc220 <strchr>
    if (pch == NULL) {
   d6ca2:	4606      	mov	r6, r0
   d6ca4:	b328      	cbz	r0, d6cf2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d6ca6:	210a      	movs	r1, #10
   d6ca8:	3001      	adds	r0, #1
   d6caa:	f005 fab9 	bl	dc220 <strchr>
    if (pch2 == NULL) {
   d6cae:	b300      	cbz	r0, d6cf2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d6cb0:	4631      	mov	r1, r6
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	f005 facb 	bl	dc24e <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f005 faee 	bl	dc29a <strlen>
   d6cbe:	4420      	add	r0, r4
   d6cc0:	2300      	movs	r3, #0
   d6cc2:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	f005 fa56 	bl	dc178 <atof>
   d6ccc:	ec51 0b10 	vmov	r0, r1, d0
   d6cd0:	f005 f9e4 	bl	dc09c <__aeabi_d2f>
   d6cd4:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d6cd8:	4620      	mov	r0, r4
   d6cda:	f001 f8af 	bl	d7e3c <free>
    free(parsed);
   d6cde:	4628      	mov	r0, r5
   d6ce0:	f001 f8ac 	bl	d7e3c <free>
}
   d6ce4:	eeb0 0a48 	vmov.f32	s0, s16
   d6ce8:	ecbd 8b02 	vpop	{d8}
   d6cec:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d6cee:	3301      	adds	r3, #1
   d6cf0:	e7bc      	b.n	d6c6c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d6cf2:	ed9f 8a01 	vldr	s16, [pc, #4]	; d6cf8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d6cf6:	e7f5      	b.n	d6ce4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d6cf8:	cda2425f 	.word	0xcda2425f

000d6cfc <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6cfc:	b530      	push	{r4, r5, lr}
   d6cfe:	4d07      	ldr	r5, [pc, #28]	; (d6d1c <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d6d00:	6005      	str	r5, [r0, #0]
   d6d02:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d6d04:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6d08:	7505      	strb	r5, [r0, #20]
  _token = token;
   d6d0a:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6d0c:	f241 3588 	movw	r5, #5000	; 0x1388
   d6d10:	6185      	str	r5, [r0, #24]
   d6d12:	2505      	movs	r5, #5
  _port = port;
   d6d14:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d6d18:	7705      	strb	r5, [r0, #28]
}
   d6d1a:	bd30      	pop	{r4, r5, pc}
   d6d1c:	000de668 	.word	0x000de668

000d6d20 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d6d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6d24:	f8df 808c 	ldr.w	r8, [pc, #140]	; d6db4 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d6d28:	f8df a08c 	ldr.w	sl, [pc, #140]	; d6db8 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d6d2c:	f8df b08c 	ldr.w	fp, [pc, #140]	; d6dbc <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d6d30:	4604      	mov	r4, r0
   d6d32:	460d      	mov	r5, r1
   d6d34:	4617      	mov	r7, r2
   d6d36:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6d38:	4640      	mov	r0, r8
   d6d3a:	fa5f f986 	uxtb.w	r9, r6
   d6d3e:	f002 fce2 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d6d42:	bb88      	cbnz	r0, d6da8 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d6d44:	7f23      	ldrb	r3, [r4, #28]
   d6d46:	454b      	cmp	r3, r9
   d6d48:	d92e      	bls.n	d6da8 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d6d4a:	7d23      	ldrb	r3, [r4, #20]
   d6d4c:	b1cb      	cbz	r3, d6d82 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d6d4e:	f002 fb2d 	bl	d93ac <_Z16_fetch_usbserialv>
   d6d52:	4651      	mov	r1, sl
   d6d54:	f001 fc78 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6d58:	f002 fb28 	bl	d93ac <_Z16_fetch_usbserialv>
   d6d5c:	4629      	mov	r1, r5
   d6d5e:	f001 fc73 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6d62:	f002 fb23 	bl	d93ac <_Z16_fetch_usbserialv>
   d6d66:	4659      	mov	r1, fp
   d6d68:	f001 fc6e 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6d6c:	f002 fb1e 	bl	d93ac <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d6d70:	220a      	movs	r2, #10
   d6d72:	4649      	mov	r1, r9
   d6d74:	9001      	str	r0, [sp, #4]
   d6d76:	f001 fc84 	bl	d8682 <_ZN5Print11printNumberEmh>
        n += println();
   d6d7a:	9b01      	ldr	r3, [sp, #4]
   d6d7c:	4618      	mov	r0, r3
   d6d7e:	f001 fc6a 	bl	d8656 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d6d82:	2300      	movs	r3, #0
   d6d84:	b2ba      	uxth	r2, r7
   d6d86:	4629      	mov	r1, r5
   d6d88:	4640      	mov	r0, r8
   d6d8a:	f002 fedd 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d6d8e:	7d23      	ldrb	r3, [r4, #20]
   d6d90:	b123      	cbz	r3, d6d9c <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d6d92:	f002 fb0b 	bl	d93ac <_Z16_fetch_usbserialv>
   d6d96:	4906      	ldr	r1, [pc, #24]	; (d6db0 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d6d98:	f001 fc69 	bl	d866e <_ZN5Print7printlnEPKc>
    delay(1000);
   d6d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6da0:	f001 fe1c 	bl	d89dc <delay>
   d6da4:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6da6:	e7c7      	b.n	d6d38 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d6da8:	b003      	add	sp, #12
   d6daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dae:	bf00      	nop
   d6db0:	000de4de 	.word	0x000de4de
   d6db4:	2003e5ec 	.word	0x2003e5ec
   d6db8:	000de2c4 	.word	0x000de2c4
   d6dbc:	000de2da 	.word	0x000de2da

000d6dc0 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d6dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dc4:	1e4b      	subs	r3, r1, #1
   d6dc6:	460c      	mov	r4, r1
   d6dc8:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d6dcc:	4605      	mov	r5, r0
    response[i] = '\0';
   d6dce:	2100      	movs	r1, #0
   d6dd0:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d6dd4:	4293      	cmp	r3, r2
   d6dd6:	d1fb      	bne.n	d6dd0 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d6dd8:	7d2b      	ldrb	r3, [r5, #20]
   d6dda:	b14b      	cbz	r3, d6df0 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d6ddc:	f002 fae6 	bl	d93ac <_Z16_fetch_usbserialv>
   d6de0:	4914      	ldr	r1, [pc, #80]	; (d6e34 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d6de2:	f001 fc44 	bl	d866e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6de6:	f002 fae1 	bl	d93ac <_Z16_fetch_usbserialv>
   d6dea:	4913      	ldr	r1, [pc, #76]	; (d6e38 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d6dec:	f001 fc3f 	bl	d866e <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d6df0:	4f12      	ldr	r7, [pc, #72]	; (d6e3c <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d6df2:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6df4:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d6df8:	4638      	mov	r0, r7
   d6dfa:	f002 fde7 	bl	d99cc <_ZN9TCPClient9availableEv>
   d6dfe:	b170      	cbz	r0, d6e1e <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d6e00:	4638      	mov	r0, r7
   d6e02:	f002 fd1c 	bl	d983e <_ZN9TCPClient4readEv>
   d6e06:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d6e08:	7d2b      	ldrb	r3, [r5, #20]
   d6e0a:	b12b      	cbz	r3, d6e18 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d6e0c:	f002 face 	bl	d93ac <_Z16_fetch_usbserialv>
   d6e10:	6803      	ldr	r3, [r0, #0]
   d6e12:	5da1      	ldrb	r1, [r4, r6]
   d6e14:	689b      	ldr	r3, [r3, #8]
   d6e16:	4798      	blx	r3
    j++;
   d6e18:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6e1a:	4546      	cmp	r6, r8
   d6e1c:	d1ec      	bne.n	d6df8 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d6e1e:	7d2b      	ldrb	r3, [r5, #20]
   d6e20:	b133      	cbz	r3, d6e30 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d6e22:	f002 fac3 	bl	d93ac <_Z16_fetch_usbserialv>
}
   d6e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d6e2a:	4905      	ldr	r1, [pc, #20]	; (d6e40 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d6e2c:	f001 bc1f 	b.w	d866e <_ZN5Print7printlnEPKc>
}
   d6e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e34:	000de355 	.word	0x000de355
   d6e38:	000de341 	.word	0x000de341
   d6e3c:	2003e5ec 	.word	0x2003e5ec
   d6e40:	000de354 	.word	0x000de354

000d6e44 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d6e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6e46:	4f0e      	ldr	r7, [pc, #56]	; (d6e80 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d6e48:	4604      	mov	r4, r0
  int timeout = 0;
   d6e4a:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6e4c:	4638      	mov	r0, r7
   d6e4e:	f002 fdbd 	bl	d99cc <_ZN9TCPClient9availableEv>
   d6e52:	4605      	mov	r5, r0
   d6e54:	b990      	cbnz	r0, d6e7c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d6e56:	69a3      	ldr	r3, [r4, #24]
   d6e58:	42b3      	cmp	r3, r6
   d6e5a:	dd0f      	ble.n	d6e7c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d6e5c:	2001      	movs	r0, #1
   d6e5e:	f001 fdbd 	bl	d89dc <delay>
    if (timeout > _timeout - 1) {
   d6e62:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6e64:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6e66:	42b3      	cmp	r3, r6
   d6e68:	dcf0      	bgt.n	d6e4c <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6e6a:	7d20      	ldrb	r0, [r4, #20]
   d6e6c:	b128      	cbz	r0, d6e7a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6e6e:	f002 fa9d 	bl	d93ac <_Z16_fetch_usbserialv>
   d6e72:	4904      	ldr	r1, [pc, #16]	; (d6e84 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d6e74:	f001 fbfb 	bl	d866e <_ZN5Print7printlnEPKc>
   d6e78:	4628      	mov	r0, r5
}
   d6e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6e7c:	2001      	movs	r0, #1
   d6e7e:	e7fc      	b.n	d6e7a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d6e80:	2003e5ec 	.word	0x2003e5ec
   d6e84:	000de30e 	.word	0x000de30e

000d6e88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e8a:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d6e8c:	6902      	ldr	r2, [r0, #16]
   d6e8e:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6e90:	4604      	mov	r4, r0
   d6e92:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d6e94:	f7ff ff44 	bl	d6d20 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d6e98:	4878      	ldr	r0, [pc, #480]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6e9a:	f002 fc34 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d6e9e:	4606      	mov	r6, r0
   d6ea0:	2800      	cmp	r0, #0
   d6ea2:	f000 80e1 	beq.w	d7068 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d6ea6:	4976      	ldr	r1, [pc, #472]	; (d7080 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6ea8:	4874      	ldr	r0, [pc, #464]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eaa:	f001 fbcd 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d6eae:	4639      	mov	r1, r7
   d6eb0:	4872      	ldr	r0, [pc, #456]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eb2:	f001 fbc9 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d6eb6:	4973      	ldr	r1, [pc, #460]	; (d7084 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6eb8:	4870      	ldr	r0, [pc, #448]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eba:	f001 fbc5 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d6ebe:	4972      	ldr	r1, [pc, #456]	; (d7088 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6ec0:	486e      	ldr	r0, [pc, #440]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ec2:	f001 fbc1 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d6ec6:	6861      	ldr	r1, [r4, #4]
   d6ec8:	486c      	ldr	r0, [pc, #432]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eca:	f001 fbbd 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6ece:	496f      	ldr	r1, [pc, #444]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6ed0:	486a      	ldr	r0, [pc, #424]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ed2:	f001 fbb9 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d6ed6:	496e      	ldr	r1, [pc, #440]	; (d7090 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6ed8:	4868      	ldr	r0, [pc, #416]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eda:	f001 fbb5 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d6ede:	68a1      	ldr	r1, [r4, #8]
   d6ee0:	4866      	ldr	r0, [pc, #408]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ee2:	f001 fbb1 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6ee6:	4969      	ldr	r1, [pc, #420]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6ee8:	4864      	ldr	r0, [pc, #400]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6eea:	f001 fbad 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d6eee:	4969      	ldr	r1, [pc, #420]	; (d7094 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6ef0:	4862      	ldr	r0, [pc, #392]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6ef2:	f001 fba9 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d6ef6:	68e1      	ldr	r1, [r4, #12]
   d6ef8:	4860      	ldr	r0, [pc, #384]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6efa:	f001 fba5 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6efe:	4963      	ldr	r1, [pc, #396]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6f00:	485e      	ldr	r0, [pc, #376]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f02:	f001 fba1 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d6f06:	4964      	ldr	r1, [pc, #400]	; (d7098 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d6f08:	485c      	ldr	r0, [pc, #368]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f0a:	f001 fb9d 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d6f0e:	4963      	ldr	r1, [pc, #396]	; (d709c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d6f10:	485a      	ldr	r0, [pc, #360]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f12:	f001 fb99 	bl	d8648 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d6f16:	4628      	mov	r0, r5
   d6f18:	f005 f9bf 	bl	dc29a <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d6f1c:	4960      	ldr	r1, [pc, #384]	; (d70a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d6f1e:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d6f20:	4856      	ldr	r0, [pc, #344]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f22:	f001 fb91 	bl	d8648 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d6f26:	220a      	movs	r2, #10
   d6f28:	4631      	mov	r1, r6
   d6f2a:	4854      	ldr	r0, [pc, #336]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f2c:	f001 fba9 	bl	d8682 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d6f30:	495c      	ldr	r1, [pc, #368]	; (d70a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d6f32:	4852      	ldr	r0, [pc, #328]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f34:	f001 fb88 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d6f38:	4629      	mov	r1, r5
   d6f3a:	4850      	ldr	r0, [pc, #320]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f3c:	f001 fb84 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6f40:	4952      	ldr	r1, [pc, #328]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6f42:	484e      	ldr	r0, [pc, #312]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f44:	f001 fb80 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d6f48:	484c      	ldr	r0, [pc, #304]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6f4a:	f002 fbdb 	bl	d9704 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d6f4e:	7d23      	ldrb	r3, [r4, #20]
   d6f50:	2b00      	cmp	r3, #0
   d6f52:	d069      	beq.n	d7028 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d6f54:	f002 fa2a 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f58:	4953      	ldr	r1, [pc, #332]	; (d70a8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d6f5a:	f001 fb88 	bl	d866e <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d6f5e:	f002 fa25 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f62:	4947      	ldr	r1, [pc, #284]	; (d7080 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6f64:	f001 fb70 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6f68:	f002 fa20 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f6c:	4639      	mov	r1, r7
   d6f6e:	f001 fb6b 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6f72:	f002 fa1b 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f76:	4943      	ldr	r1, [pc, #268]	; (d7084 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6f78:	f001 fb66 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6f7c:	f002 fa16 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f80:	4941      	ldr	r1, [pc, #260]	; (d7088 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6f82:	f001 fb61 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6f86:	f002 fa11 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f8a:	6861      	ldr	r1, [r4, #4]
   d6f8c:	f001 fb5c 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6f90:	f002 fa0c 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f94:	493d      	ldr	r1, [pc, #244]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6f96:	f001 fb57 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6f9a:	f002 fa07 	bl	d93ac <_Z16_fetch_usbserialv>
   d6f9e:	493c      	ldr	r1, [pc, #240]	; (d7090 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6fa0:	f001 fb52 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6fa4:	f002 fa02 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fa8:	68a1      	ldr	r1, [r4, #8]
   d6faa:	f001 fb4d 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6fae:	f002 f9fd 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fb2:	4936      	ldr	r1, [pc, #216]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6fb4:	f001 fb48 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6fb8:	f002 f9f8 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fbc:	4935      	ldr	r1, [pc, #212]	; (d7094 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6fbe:	f001 fb43 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6fc2:	f002 f9f3 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fc6:	68e1      	ldr	r1, [r4, #12]
   d6fc8:	f001 fb3e 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6fcc:	f002 f9ee 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fd0:	492e      	ldr	r1, [pc, #184]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6fd2:	f001 fb39 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d6fd6:	f002 f9e9 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fda:	492f      	ldr	r1, [pc, #188]	; (d7098 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d6fdc:	f001 fb34 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d6fe0:	f002 f9e4 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fe4:	492d      	ldr	r1, [pc, #180]	; (d709c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d6fe6:	f001 fb2f 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d6fea:	f002 f9df 	bl	d93ac <_Z16_fetch_usbserialv>
   d6fee:	492c      	ldr	r1, [pc, #176]	; (d70a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d6ff0:	f001 fb2a 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d6ff4:	f002 f9da 	bl	d93ac <_Z16_fetch_usbserialv>
   d6ff8:	220a      	movs	r2, #10
   d6ffa:	4631      	mov	r1, r6
   d6ffc:	f001 fb41 	bl	d8682 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d7000:	f002 f9d4 	bl	d93ac <_Z16_fetch_usbserialv>
   d7004:	4927      	ldr	r1, [pc, #156]	; (d70a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d7006:	f001 fb1f 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d700a:	f002 f9cf 	bl	d93ac <_Z16_fetch_usbserialv>
   d700e:	4629      	mov	r1, r5
   d7010:	f001 fb1a 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d7014:	f002 f9ca 	bl	d93ac <_Z16_fetch_usbserialv>
   d7018:	491c      	ldr	r1, [pc, #112]	; (d708c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d701a:	f001 fb15 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d701e:	f002 f9c5 	bl	d93ac <_Z16_fetch_usbserialv>
   d7022:	4922      	ldr	r1, [pc, #136]	; (d70ac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d7024:	f001 fb23 	bl	d866e <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d7028:	4620      	mov	r0, r4
   d702a:	f7ff ff0b 	bl	d6e44 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d702e:	7d23      	ldrb	r3, [r4, #20]
   d7030:	b92b      	cbnz	r3, d703e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d7032:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d7034:	4811      	ldr	r0, [pc, #68]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d7036:	f002 fd23 	bl	d9a80 <_ZN9TCPClient4stopEv>
}
   d703a:	4620      	mov	r0, r4
   d703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d703e:	f002 f9b5 	bl	d93ac <_Z16_fetch_usbserialv>
   d7042:	491b      	ldr	r1, [pc, #108]	; (d70b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d7044:	4d0d      	ldr	r5, [pc, #52]	; (d707c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d7046:	f001 fb12 	bl	d866e <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d704a:	4628      	mov	r0, r5
   d704c:	f002 fcbe 	bl	d99cc <_ZN9TCPClient9availableEv>
   d7050:	2800      	cmp	r0, #0
   d7052:	d0ee      	beq.n	d7032 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d7054:	4628      	mov	r0, r5
   d7056:	f002 fbf2 	bl	d983e <_ZN9TCPClient4readEv>
   d705a:	4604      	mov	r4, r0
        Serial.print(c);
   d705c:	f002 f9a6 	bl	d93ac <_Z16_fetch_usbserialv>
   d7060:	b2e1      	uxtb	r1, r4
   d7062:	f001 faf5 	bl	d8650 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d7066:	e7f0      	b.n	d704a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d7068:	7d24      	ldrb	r4, [r4, #20]
   d706a:	2c00      	cmp	r4, #0
   d706c:	d0e2      	beq.n	d7034 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d706e:	f002 f99d 	bl	d93ac <_Z16_fetch_usbserialv>
   d7072:	4910      	ldr	r1, [pc, #64]	; (d70b4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d7074:	f001 fafb 	bl	d866e <_ZN5Print7printlnEPKc>
  bool result = false;
   d7078:	4634      	mov	r4, r6
   d707a:	e7db      	b.n	d7034 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d707c:	2003e5ec 	.word	0x2003e5ec
   d7080:	000de4ef 	.word	0x000de4ef
   d7084:	000de507 	.word	0x000de507
   d7088:	000de513 	.word	0x000de513
   d708c:	000de637 	.word	0x000de637
   d7090:	000de51a 	.word	0x000de51a
   d7094:	000de527 	.word	0x000de527
   d7098:	000de536 	.word	0x000de536
   d709c:	000de54a 	.word	0x000de54a
   d70a0:	000de56b 	.word	0x000de56b
   d70a4:	000de635 	.word	0x000de635
   d70a8:	000de57c 	.word	0x000de57c
   d70ac:	000de598 	.word	0x000de598
   d70b0:	000de5b6 	.word	0x000de5b6
   d70b4:	000de5d2 	.word	0x000de5d2

000d70b8 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d70b8:	b570      	push	{r4, r5, r6, lr}
   d70ba:	ed2d 8b02 	vpush	{d8}
   d70be:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d70c0:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d70c2:	460e      	mov	r6, r1
   d70c4:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d70c6:	6841      	ldr	r1, [r0, #4]
   d70c8:	4866      	ldr	r0, [pc, #408]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d70ca:	2250      	movs	r2, #80	; 0x50
   d70cc:	f002 fd3c 	bl	d9b48 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d70d0:	4620      	mov	r0, r4
   d70d2:	6861      	ldr	r1, [r4, #4]
   d70d4:	2250      	movs	r2, #80	; 0x50
   d70d6:	f7ff fe23 	bl	d6d20 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d70da:	4862      	ldr	r0, [pc, #392]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d70dc:	f002 fb13 	bl	d9706 <_ZN9TCPClient9connectedEv>
   d70e0:	2800      	cmp	r0, #0
   d70e2:	f000 80b6 	beq.w	d7252 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d70e6:	4960      	ldr	r1, [pc, #384]	; (d7268 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d70e8:	485e      	ldr	r0, [pc, #376]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d70ea:	f001 faad 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d70ee:	4631      	mov	r1, r6
   d70f0:	485c      	ldr	r0, [pc, #368]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d70f2:	f001 faa9 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d70f6:	495d      	ldr	r1, [pc, #372]	; (d726c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d70f8:	485a      	ldr	r0, [pc, #360]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d70fa:	f001 faa5 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d70fe:	4629      	mov	r1, r5
   d7100:	4858      	ldr	r0, [pc, #352]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7102:	f001 faa1 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d7106:	495a      	ldr	r1, [pc, #360]	; (d7270 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d7108:	4856      	ldr	r0, [pc, #344]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d710a:	f001 fa9d 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d710e:	4959      	ldr	r1, [pc, #356]	; (d7274 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d7110:	4854      	ldr	r0, [pc, #336]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7112:	f001 fa99 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d7116:	4958      	ldr	r1, [pc, #352]	; (d7278 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d7118:	4852      	ldr	r0, [pc, #328]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d711a:	f001 fa95 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d711e:	6861      	ldr	r1, [r4, #4]
   d7120:	4850      	ldr	r0, [pc, #320]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7122:	f001 fa91 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d7126:	4955      	ldr	r1, [pc, #340]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d7128:	484e      	ldr	r0, [pc, #312]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d712a:	f001 fa8d 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d712e:	4954      	ldr	r1, [pc, #336]	; (d7280 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d7130:	484c      	ldr	r0, [pc, #304]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7132:	f001 fa89 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d7136:	68a1      	ldr	r1, [r4, #8]
   d7138:	484a      	ldr	r0, [pc, #296]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d713a:	f001 fa85 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d713e:	494f      	ldr	r1, [pc, #316]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d7140:	4848      	ldr	r0, [pc, #288]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7142:	f001 fa81 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d7146:	494f      	ldr	r1, [pc, #316]	; (d7284 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d7148:	4846      	ldr	r0, [pc, #280]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d714a:	f001 fa7d 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d714e:	68e1      	ldr	r1, [r4, #12]
   d7150:	4844      	ldr	r0, [pc, #272]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7152:	f001 fa79 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d7156:	4949      	ldr	r1, [pc, #292]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d7158:	4842      	ldr	r0, [pc, #264]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d715a:	f001 fa75 	bl	d8648 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d715e:	494a      	ldr	r1, [pc, #296]	; (d7288 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d7160:	4840      	ldr	r0, [pc, #256]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7162:	f001 fa71 	bl	d8648 <_ZN5Print5printEPKc>
    if (_debug) {
   d7166:	7d23      	ldrb	r3, [r4, #20]
   d7168:	2b00      	cmp	r3, #0
   d716a:	d04f      	beq.n	d720c <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d716c:	f002 f91e 	bl	d93ac <_Z16_fetch_usbserialv>
   d7170:	493d      	ldr	r1, [pc, #244]	; (d7268 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d7172:	f001 fa69 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d7176:	f002 f919 	bl	d93ac <_Z16_fetch_usbserialv>
   d717a:	4631      	mov	r1, r6
   d717c:	f001 fa64 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("/");
   d7180:	f002 f914 	bl	d93ac <_Z16_fetch_usbserialv>
   d7184:	4939      	ldr	r1, [pc, #228]	; (d726c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d7186:	f001 fa5f 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d718a:	f002 f90f 	bl	d93ac <_Z16_fetch_usbserialv>
   d718e:	4629      	mov	r1, r5
   d7190:	f001 fa5a 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d7194:	f002 f90a 	bl	d93ac <_Z16_fetch_usbserialv>
   d7198:	4935      	ldr	r1, [pc, #212]	; (d7270 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d719a:	f001 fa55 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d719e:	f002 f905 	bl	d93ac <_Z16_fetch_usbserialv>
   d71a2:	4934      	ldr	r1, [pc, #208]	; (d7274 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d71a4:	f001 fa50 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d71a8:	f002 f900 	bl	d93ac <_Z16_fetch_usbserialv>
   d71ac:	4932      	ldr	r1, [pc, #200]	; (d7278 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d71ae:	f001 fa4b 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d71b2:	f002 f8fb 	bl	d93ac <_Z16_fetch_usbserialv>
   d71b6:	6861      	ldr	r1, [r4, #4]
   d71b8:	f001 fa46 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d71bc:	f002 f8f6 	bl	d93ac <_Z16_fetch_usbserialv>
   d71c0:	492e      	ldr	r1, [pc, #184]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d71c2:	f001 fa41 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d71c6:	f002 f8f1 	bl	d93ac <_Z16_fetch_usbserialv>
   d71ca:	492d      	ldr	r1, [pc, #180]	; (d7280 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d71cc:	f001 fa3c 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d71d0:	f002 f8ec 	bl	d93ac <_Z16_fetch_usbserialv>
   d71d4:	68a1      	ldr	r1, [r4, #8]
   d71d6:	f001 fa37 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d71da:	f002 f8e7 	bl	d93ac <_Z16_fetch_usbserialv>
   d71de:	4927      	ldr	r1, [pc, #156]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d71e0:	f001 fa32 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d71e4:	f002 f8e2 	bl	d93ac <_Z16_fetch_usbserialv>
   d71e8:	4926      	ldr	r1, [pc, #152]	; (d7284 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d71ea:	f001 fa2d 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d71ee:	f002 f8dd 	bl	d93ac <_Z16_fetch_usbserialv>
   d71f2:	68e1      	ldr	r1, [r4, #12]
   d71f4:	f001 fa28 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d71f8:	f002 f8d8 	bl	d93ac <_Z16_fetch_usbserialv>
   d71fc:	491f      	ldr	r1, [pc, #124]	; (d727c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d71fe:	f001 fa23 	bl	d8648 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d7202:	f002 f8d3 	bl	d93ac <_Z16_fetch_usbserialv>
   d7206:	4920      	ldr	r1, [pc, #128]	; (d7288 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d7208:	f001 fa1e 	bl	d8648 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d720c:	4620      	mov	r0, r4
   d720e:	f7ff fe19 	bl	d6e44 <_ZN7UbiHTTP16waitServerAnswerEv>
   d7212:	b948      	cbnz	r0, d7228 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d7214:	4813      	ldr	r0, [pc, #76]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d7216:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d728c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d721a:	f002 fc31 	bl	d9a80 <_ZN9TCPClient4stopEv>
}
   d721e:	eeb0 0a48 	vmov.f32	s0, s16
   d7222:	ecbd 8b02 	vpop	{d8}
   d7226:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d7228:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d722c:	f000 fdfe 	bl	d7e2c <malloc>
    readServerAnswer(response);
   d7230:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d7232:	4605      	mov	r5, r0
    readServerAnswer(response);
   d7234:	4620      	mov	r0, r4
   d7236:	f7ff fdc3 	bl	d6dc0 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d723a:	4628      	mov	r0, r5
   d723c:	f7ff fd04 	bl	d6c48 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d7240:	4808      	ldr	r0, [pc, #32]	; (d7264 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d7242:	eeb0 8a40 	vmov.f32	s16, s0
   d7246:	f002 fc1b 	bl	d9a80 <_ZN9TCPClient4stopEv>
    free(response);
   d724a:	4628      	mov	r0, r5
   d724c:	f000 fdf6 	bl	d7e3c <free>
    return value;
   d7250:	e7e5      	b.n	d721e <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d7252:	7d23      	ldrb	r3, [r4, #20]
   d7254:	2b00      	cmp	r3, #0
   d7256:	d0dd      	beq.n	d7214 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d7258:	f002 f8a8 	bl	d93ac <_Z16_fetch_usbserialv>
   d725c:	490c      	ldr	r1, [pc, #48]	; (d7290 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d725e:	f001 fa06 	bl	d866e <_ZN5Print7printlnEPKc>
   d7262:	e7d7      	b.n	d7214 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d7264:	2003e5ec 	.word	0x2003e5ec
   d7268:	000de5fc 	.word	0x000de5fc
   d726c:	000de611 	.word	0x000de611
   d7270:	000de613 	.word	0x000de613
   d7274:	000de507 	.word	0x000de507
   d7278:	000de513 	.word	0x000de513
   d727c:	000de637 	.word	0x000de637
   d7280:	000de51a 	.word	0x000de51a
   d7284:	000de527 	.word	0x000de527
   d7288:	000de617 	.word	0x000de617
   d728c:	cda2425f 	.word	0xcda2425f
   d7290:	000de63a 	.word	0x000de63a

000d7294 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
}
   d7294:	b510      	push	{r4, lr}
   d7296:	4c05      	ldr	r4, [pc, #20]	; (d72ac <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d7298:	4620      	mov	r0, r4
   d729a:	f002 fc41 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d729e:	4620      	mov	r0, r4
   d72a0:	4a03      	ldr	r2, [pc, #12]	; (d72b0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d72a2:	4904      	ldr	r1, [pc, #16]	; (d72b4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d72a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d72a8:	f002 be7a 	b.w	d9fa0 <__aeabi_atexit>
   d72ac:	2003e5ec 	.word	0x2003e5ec
   d72b0:	2003e280 	.word	0x2003e280
   d72b4:	000d5ee5 	.word	0x000d5ee5

000d72b8 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
	return (*_Base::_M_get_pointer(__functor))(
   d72b8:	6803      	ldr	r3, [r0, #0]
   d72ba:	4718      	bx	r3

000d72bc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d72bc:	2a01      	cmp	r2, #1
   d72be:	d003      	beq.n	d72c8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d72c0:	2a02      	cmp	r2, #2
   d72c2:	d003      	beq.n	d72cc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d72c4:	2000      	movs	r0, #0
   d72c6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d72c8:	6001      	str	r1, [r0, #0]
	      break;
   d72ca:	e7fb      	b.n	d72c4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d72cc:	680b      	ldr	r3, [r1, #0]
   d72ce:	6003      	str	r3, [r0, #0]
	}
   d72d0:	e7f8      	b.n	d72c4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d72d4 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d72d4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d72d6:	201c      	movs	r0, #28
   d72d8:	f7fc fedd 	bl	d4096 <_Znwj>
   d72dc:	4604      	mov	r4, r0
   d72de:	b148      	cbz	r0, d72f4 <_Z10builderTcpv+0x20>
   d72e0:	4b06      	ldr	r3, [pc, #24]	; (d72fc <_Z10builderTcpv+0x28>)
   d72e2:	4907      	ldr	r1, [pc, #28]	; (d7300 <_Z10builderTcpv+0x2c>)
   d72e4:	681b      	ldr	r3, [r3, #0]
   d72e6:	9300      	str	r3, [sp, #0]
   d72e8:	6809      	ldr	r1, [r1, #0]
   d72ea:	4b06      	ldr	r3, [pc, #24]	; (d7304 <_Z10builderTcpv+0x30>)
   d72ec:	f242 3234 	movw	r2, #9012	; 0x2334
   d72f0:	f7fe fe1c 	bl	d5f2c <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d72f4:	4620      	mov	r0, r4
   d72f6:	b002      	add	sp, #8
   d72f8:	bd10      	pop	{r4, pc}
   d72fa:	bf00      	nop
   d72fc:	2003e690 	.word	0x2003e690
   d7300:	2003e68c 	.word	0x2003e68c
   d7304:	000de472 	.word	0x000de472

000d7308 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d7308:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d730a:	2020      	movs	r0, #32
   d730c:	f7fc fec3 	bl	d4096 <_Znwj>
   d7310:	4604      	mov	r4, r0
   d7312:	b140      	cbz	r0, d7326 <_Z11builderHttpv+0x1e>
   d7314:	4b05      	ldr	r3, [pc, #20]	; (d732c <_Z11builderHttpv+0x24>)
   d7316:	4906      	ldr	r1, [pc, #24]	; (d7330 <_Z11builderHttpv+0x28>)
   d7318:	681b      	ldr	r3, [r3, #0]
   d731a:	9300      	str	r3, [sp, #0]
   d731c:	6809      	ldr	r1, [r1, #0]
   d731e:	4b05      	ldr	r3, [pc, #20]	; (d7334 <_Z11builderHttpv+0x2c>)
   d7320:	2250      	movs	r2, #80	; 0x50
   d7322:	f7ff fceb 	bl	d6cfc <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d7326:	4620      	mov	r0, r4
   d7328:	b002      	add	sp, #8
   d732a:	bd10      	pop	{r4, pc}
   d732c:	2003e690 	.word	0x2003e690
   d7330:	2003e68c 	.word	0x2003e68c
   d7334:	000de472 	.word	0x000de472

000d7338 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d7338:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d733a:	201c      	movs	r0, #28
   d733c:	f7fc feab 	bl	d4096 <_Znwj>
   d7340:	4604      	mov	r4, r0
   d7342:	b148      	cbz	r0, d7358 <_Z10builderUdpv+0x20>
   d7344:	4b06      	ldr	r3, [pc, #24]	; (d7360 <_Z10builderUdpv+0x28>)
   d7346:	4907      	ldr	r1, [pc, #28]	; (d7364 <_Z10builderUdpv+0x2c>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	9300      	str	r3, [sp, #0]
   d734c:	6809      	ldr	r1, [r1, #0]
   d734e:	4b06      	ldr	r3, [pc, #24]	; (d7368 <_Z10builderUdpv+0x30>)
   d7350:	f242 3234 	movw	r2, #9012	; 0x2334
   d7354:	f000 f9b4 	bl	d76c0 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d7358:	4620      	mov	r0, r4
   d735a:	b002      	add	sp, #8
   d735c:	bd10      	pop	{r4, pc}
   d735e:	bf00      	nop
   d7360:	2003e690 	.word	0x2003e690
   d7364:	2003e68c 	.word	0x2003e68c
   d7368:	000de472 	.word	0x000de472

000d736c <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d736c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d736e:	2014      	movs	r0, #20
   d7370:	f7fc fe91 	bl	d4096 <_Znwj>
   d7374:	4604      	mov	r4, r0
   d7376:	b140      	cbz	r0, d738a <_Z15builderParticlev+0x1e>
   d7378:	4b05      	ldr	r3, [pc, #20]	; (d7390 <_Z15builderParticlev+0x24>)
   d737a:	4906      	ldr	r1, [pc, #24]	; (d7394 <_Z15builderParticlev+0x28>)
   d737c:	681b      	ldr	r3, [r3, #0]
   d737e:	9300      	str	r3, [sp, #0]
   d7380:	2300      	movs	r3, #0
   d7382:	6809      	ldr	r1, [r1, #0]
   d7384:	461a      	mov	r2, r3
   d7386:	f000 fa7d 	bl	d7884 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d738a:	4620      	mov	r0, r4
   d738c:	b002      	add	sp, #8
   d738e:	bd10      	pop	{r4, pc}
   d7390:	2003e690 	.word	0x2003e690
   d7394:	2003e68c 	.word	0x2003e68c

000d7398 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d7398:	b510      	push	{r4, lr}
      if (_M_manager)
   d739a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d739c:	4604      	mov	r4, r0
      if (_M_manager)
   d739e:	b113      	cbz	r3, d73a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d73a0:	2203      	movs	r2, #3
   d73a2:	4601      	mov	r1, r0
   d73a4:	4798      	blx	r3
    }
   d73a6:	4620      	mov	r0, r4
   d73a8:	bd10      	pop	{r4, pc}
	...

000d73ac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d73ac:	b510      	push	{r4, lr}
   d73ae:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73b0:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d73b2:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d73b4:	4604      	mov	r4, r0
   d73b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d73ba:	466a      	mov	r2, sp
   d73bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d73c0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d73c4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d73c8:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d73cc:	68a2      	ldr	r2, [r4, #8]
   d73ce:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d73d0:	4a06      	ldr	r2, [pc, #24]	; (d73ec <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d73d2:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d73d4:	68e2      	ldr	r2, [r4, #12]
   d73d6:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d73d8:	4a05      	ldr	r2, [pc, #20]	; (d73f0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d73da:	60e2      	str	r2, [r4, #12]
   d73dc:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d73e0:	4618      	mov	r0, r3
   d73e2:	f7ff ffd9 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d73e6:	4620      	mov	r0, r4
   d73e8:	b006      	add	sp, #24
   d73ea:	bd10      	pop	{r4, pc}
   d73ec:	000d72bd 	.word	0x000d72bd
   d73f0:	000d72b9 	.word	0x000d72b9

000d73f4 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d73f4:	b570      	push	{r4, r5, r6, lr}
      { return &this->_M_impl._M_header; }
   d73f6:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d73fa:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d73fc:	460b      	mov	r3, r1
      while (__x != 0)
   d73fe:	b13a      	cbz	r2, d7410 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d7400:	7c15      	ldrb	r5, [r2, #16]
   d7402:	7804      	ldrb	r4, [r0, #0]
   d7404:	42a5      	cmp	r5, r4
   d7406:	bf2a      	itet	cs
   d7408:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d740a:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d740c:	6892      	ldrcs	r2, [r2, #8]
   d740e:	e7f6      	b.n	d73fe <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d7410:	4299      	cmp	r1, r3
   d7412:	d004      	beq.n	d741e <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d7414:	7800      	ldrb	r0, [r0, #0]
   d7416:	7c1a      	ldrb	r2, [r3, #16]
   d7418:	4290      	cmp	r0, r2
   d741a:	bf38      	it	cc
   d741c:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d741e:	69da      	ldr	r2, [r3, #28]
   d7420:	b90a      	cbnz	r2, d7426 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d7422:	f002 fe78 	bl	da116 <_ZSt25__throw_bad_function_callv>
}
   d7426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d742a:	6a1a      	ldr	r2, [r3, #32]
   d742c:	f103 0014 	add.w	r0, r3, #20
   d7430:	4710      	bx	r2

000d7432 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d7432:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d7434:	b570      	push	{r4, r5, r6, lr}
   d7436:	4616      	mov	r6, r2
   d7438:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d743a:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d743c:	2201      	movs	r2, #1
      while (__x != 0)
   d743e:	b15b      	cbz	r3, d7458 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d7440:	7830      	ldrb	r0, [r6, #0]
   d7442:	7c1a      	ldrb	r2, [r3, #16]
   d7444:	4290      	cmp	r0, r2
   d7446:	bf34      	ite	cc
   d7448:	6898      	ldrcc	r0, [r3, #8]
   d744a:	68d8      	ldrcs	r0, [r3, #12]
   d744c:	461d      	mov	r5, r3
   d744e:	bf34      	ite	cc
   d7450:	2201      	movcc	r2, #1
   d7452:	2200      	movcs	r2, #0
   d7454:	4603      	mov	r3, r0
   d7456:	e7f2      	b.n	d743e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d7458:	b192      	cbz	r2, d7480 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d745a:	68ca      	ldr	r2, [r1, #12]
   d745c:	42aa      	cmp	r2, r5
   d745e:	d103      	bne.n	d7468 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d7460:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d7464:	4620      	mov	r0, r4
   d7466:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d7468:	4628      	mov	r0, r5
   d746a:	f002 fdf6 	bl	da05a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d746e:	7833      	ldrb	r3, [r6, #0]
   d7470:	7c02      	ldrb	r2, [r0, #16]
   d7472:	429a      	cmp	r2, r3
   d7474:	f04f 0300 	mov.w	r3, #0
   d7478:	d3f2      	bcc.n	d7460 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d747a:	e9c4 0300 	strd	r0, r3, [r4]
   d747e:	e7f1      	b.n	d7464 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d7480:	4628      	mov	r0, r5
   d7482:	e7f4      	b.n	d746e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d7484 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
      operator[](key_type&& __k)
   d7484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d7488:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d748c:	6885      	ldr	r5, [r0, #8]
   d748e:	b085      	sub	sp, #20
   d7490:	4606      	mov	r6, r0
   d7492:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d7494:	4644      	mov	r4, r8
      while (__x != 0)
   d7496:	b155      	cbz	r5, d74ae <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d7498:	f899 3000 	ldrb.w	r3, [r9]
   d749c:	7c2a      	ldrb	r2, [r5, #16]
   d749e:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d74a0:	bf36      	itet	cc
   d74a2:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d74a4:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d74a6:	4625      	movcc	r5, r4
   d74a8:	462c      	mov	r4, r5
   d74aa:	461d      	mov	r5, r3
   d74ac:	e7f3      	b.n	d7496 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	if (__i == end() || key_comp()(__k, (*__i).first))
   d74ae:	45a0      	cmp	r8, r4
   d74b0:	d004      	beq.n	d74bc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d74b2:	f899 2000 	ldrb.w	r2, [r9]
   d74b6:	7c23      	ldrb	r3, [r4, #16]
   d74b8:	429a      	cmp	r2, r3
   d74ba:	d22e      	bcs.n	d751a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74bc:	2024      	movs	r0, #36	; 0x24
   d74be:	f7fc fdea 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d74c2:	f899 9000 	ldrb.w	r9, [r9]
   d74c6:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d74ca:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d74cc:	45a0      	cmp	r8, r4
   d74ce:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d74d0:	f100 0210 	add.w	r2, r0, #16
   d74d4:	61c3      	str	r3, [r0, #28]
   d74d6:	d125      	bne.n	d7524 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d74d8:	6973      	ldr	r3, [r6, #20]
   d74da:	b11b      	cbz	r3, d74e4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d74dc:	6931      	ldr	r1, [r6, #16]
   d74de:	7c0b      	ldrb	r3, [r1, #16]
   d74e0:	454b      	cmp	r3, r9
   d74e2:	d309      	bcc.n	d74f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d74e4:	4631      	mov	r1, r6
   d74e6:	a802      	add	r0, sp, #8
   d74e8:	f7ff ffa3 	bl	d7432 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d74ec:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d74f0:	2900      	cmp	r1, #0
   d74f2:	d051      	beq.n	d7598 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d74f4:	2c00      	cmp	r4, #0
   d74f6:	d14d      	bne.n	d7594 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d74f8:	4588      	cmp	r8, r1
   d74fa:	d04b      	beq.n	d7594 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d74fc:	7c38      	ldrb	r0, [r7, #16]
   d74fe:	7c0b      	ldrb	r3, [r1, #16]
   d7500:	4298      	cmp	r0, r3
   d7502:	bf2c      	ite	cs
   d7504:	2000      	movcs	r0, #0
   d7506:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d7508:	4643      	mov	r3, r8
   d750a:	460a      	mov	r2, r1
   d750c:	4639      	mov	r1, r7
   d750e:	f002 fda6 	bl	da05e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d7512:	6973      	ldr	r3, [r6, #20]
   d7514:	3301      	adds	r3, #1
   d7516:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d7518:	463c      	mov	r4, r7
      }
   d751a:	f104 0014 	add.w	r0, r4, #20
   d751e:	b005      	add	sp, #20
   d7520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d7524:	7c23      	ldrb	r3, [r4, #16]
   d7526:	9201      	str	r2, [sp, #4]
   d7528:	454b      	cmp	r3, r9
   d752a:	d918      	bls.n	d755e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d752c:	68f3      	ldr	r3, [r6, #12]
   d752e:	429c      	cmp	r4, r3
   d7530:	d009      	beq.n	d7546 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d7532:	4620      	mov	r0, r4
   d7534:	f002 fd91 	bl	da05a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d7538:	7c03      	ldrb	r3, [r0, #16]
   d753a:	9a01      	ldr	r2, [sp, #4]
   d753c:	454b      	cmp	r3, r9
   d753e:	d205      	bcs.n	d754c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d7540:	68c3      	ldr	r3, [r0, #12]
   d7542:	b953      	cbnz	r3, d755a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d7544:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d7546:	4621      	mov	r1, r4
   d7548:	461c      	mov	r4, r3
   d754a:	e7d1      	b.n	d74f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d754c:	4631      	mov	r1, r6
   d754e:	a802      	add	r0, sp, #8
   d7550:	f7ff ff6f 	bl	d7432 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d7554:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d7558:	e7f5      	b.n	d7546 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d755a:	4623      	mov	r3, r4
   d755c:	e7f3      	b.n	d7546 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d755e:	d21b      	bcs.n	d7598 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d7560:	6931      	ldr	r1, [r6, #16]
   d7562:	428c      	cmp	r4, r1
   d7564:	d00b      	beq.n	d757e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d7566:	4620      	mov	r0, r4
   d7568:	f002 fd64 	bl	da034 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d756c:	7c03      	ldrb	r3, [r0, #16]
   d756e:	9a01      	ldr	r2, [sp, #4]
   d7570:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d7572:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d7574:	d905      	bls.n	d7582 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d7576:	68e3      	ldr	r3, [r4, #12]
   d7578:	b953      	cbnz	r3, d7590 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d757a:	4621      	mov	r1, r4
   d757c:	461d      	mov	r5, r3
   d757e:	462c      	mov	r4, r5
   d7580:	e7b6      	b.n	d74f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d7582:	4631      	mov	r1, r6
   d7584:	a802      	add	r0, sp, #8
   d7586:	f7ff ff54 	bl	d7432 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d758a:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d758e:	e7f6      	b.n	d757e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d7590:	4601      	mov	r1, r0
   d7592:	e7f4      	b.n	d757e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d7594:	2001      	movs	r0, #1
   d7596:	e7b7      	b.n	d7508 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d7598:	f107 0014 	add.w	r0, r7, #20
   d759c:	f7ff fefc 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
	::operator delete(__p);
   d75a0:	4638      	mov	r0, r7
   d75a2:	f7fc fd7c 	bl	d409e <_ZdlPv>
   d75a6:	4627      	mov	r7, r4
   d75a8:	e7b6      	b.n	d7518 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d75ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d75ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d75b0:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d75b2:	2600      	movs	r6, #0
   d75b4:	4617      	mov	r7, r2
	  : _Node_allocator()
   d75b6:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d75ba:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d75be:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d75c2:	4604      	mov	r4, r0
   d75c4:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d75c6:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d75c8:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d75ca:	f10d 0107 	add.w	r1, sp, #7
   d75ce:	2301      	movs	r3, #1
   d75d0:	4628      	mov	r0, r5
   d75d2:	f88d 3007 	strb.w	r3, [sp, #7]
   d75d6:	f7ff ff55 	bl	d7484 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d75da:	4916      	ldr	r1, [pc, #88]	; (d7634 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d75dc:	f7ff fee6 	bl	d73ac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d75e0:	f10d 0107 	add.w	r1, sp, #7
   d75e4:	4628      	mov	r0, r5
   d75e6:	f88d 6007 	strb.w	r6, [sp, #7]
   d75ea:	f7ff ff4b 	bl	d7484 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d75ee:	4912      	ldr	r1, [pc, #72]	; (d7638 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d75f0:	f7ff fedc 	bl	d73ac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d75f4:	2302      	movs	r3, #2
   d75f6:	f10d 0107 	add.w	r1, sp, #7
   d75fa:	4628      	mov	r0, r5
   d75fc:	f88d 3007 	strb.w	r3, [sp, #7]
   d7600:	f7ff ff40 	bl	d7484 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d7604:	490d      	ldr	r1, [pc, #52]	; (d763c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d7606:	f7ff fed1 	bl	d73ac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d760a:	2303      	movs	r3, #3
   d760c:	f10d 0107 	add.w	r1, sp, #7
   d7610:	4628      	mov	r0, r5
   d7612:	f88d 3007 	strb.w	r3, [sp, #7]
   d7616:	f7ff ff35 	bl	d7484 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d761a:	4909      	ldr	r1, [pc, #36]	; (d7640 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d761c:	f7ff fec6 	bl	d73ac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d7620:	4b08      	ldr	r3, [pc, #32]	; (d7644 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d7622:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d7626:	4b08      	ldr	r3, [pc, #32]	; (d7648 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d7628:	4620      	mov	r0, r4
  _token = token;
   d762a:	601f      	str	r7, [r3, #0]
}
   d762c:	b002      	add	sp, #8
   d762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7632:	bf00      	nop
   d7634:	000d72d5 	.word	0x000d72d5
   d7638:	000d7309 	.word	0x000d7309
   d763c:	000d7339 	.word	0x000d7339
   d7640:	000d736d 	.word	0x000d736d
   d7644:	2003e68c 	.word	0x2003e68c
   d7648:	2003e690 	.word	0x2003e690

000d764c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d764c:	b510      	push	{r4, lr}
   d764e:	4c0e      	ldr	r4, [pc, #56]	; (d7688 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d7650:	4620      	mov	r0, r4
   d7652:	f002 fa65 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d7656:	4620      	mov	r0, r4
   d7658:	4c0c      	ldr	r4, [pc, #48]	; (d768c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d765a:	4a0d      	ldr	r2, [pc, #52]	; (d7690 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d765c:	490d      	ldr	r1, [pc, #52]	; (d7694 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d765e:	f002 fc9f 	bl	d9fa0 <__aeabi_atexit>
   d7662:	4620      	mov	r0, r4
   d7664:	f002 fa5c 	bl	d9b20 <_ZN9TCPClientC1Ev>
   d7668:	4620      	mov	r0, r4
   d766a:	4c0b      	ldr	r4, [pc, #44]	; (d7698 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d766c:	4a08      	ldr	r2, [pc, #32]	; (d7690 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d766e:	4909      	ldr	r1, [pc, #36]	; (d7694 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d7670:	f002 fc96 	bl	d9fa0 <__aeabi_atexit>
   d7674:	4620      	mov	r0, r4
   d7676:	f000 fe07 	bl	d8288 <_ZN3UDPC1Ev>
   d767a:	4620      	mov	r0, r4
   d767c:	4a04      	ldr	r2, [pc, #16]	; (d7690 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d767e:	4907      	ldr	r1, [pc, #28]	; (d769c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d7680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7684:	f002 bc8c 	b.w	d9fa0 <__aeabi_atexit>
   d7688:	2003e670 	.word	0x2003e670
   d768c:	2003e608 	.word	0x2003e608
   d7690:	2003e280 	.word	0x2003e280
   d7694:	000d5ee5 	.word	0x000d5ee5
   d7698:	2003e624 	.word	0x2003e624
   d769c:	000d6601 	.word	0x000d6601

000d76a0 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d76a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d76a8 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d76a4:	4770      	bx	lr
   d76a6:	bf00      	nop
   d76a8:	cda2425f 	.word	0xcda2425f

000d76ac <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d76ac:	7501      	strb	r1, [r0, #20]
   d76ae:	4770      	bx	lr

000d76b0 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
   d76b0:	2200      	movs	r2, #0
	  : _Node_allocator()
   d76b2:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d76b4:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d76b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d76bc:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d76be:	4770      	bx	lr

000d76c0 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d76c0:	b530      	push	{r4, r5, lr}
   d76c2:	4d06      	ldr	r5, [pc, #24]	; (d76dc <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d76c4:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d76c6:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d76ca:	2500      	movs	r5, #0
  _token = token;
   d76cc:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d76ce:	7505      	strb	r5, [r0, #20]
   d76d0:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d76d4:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d76d8:	6185      	str	r5, [r0, #24]
}
   d76da:	bd30      	pop	{r4, r5, pc}
   d76dc:	000de72c 	.word	0x000de72c

000d76e0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
   d76e0:	b510      	push	{r4, lr}
   d76e2:	4c05      	ldr	r4, [pc, #20]	; (d76f8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d76e4:	4620      	mov	r0, r4
   d76e6:	f000 fdcf 	bl	d8288 <_ZN3UDPC1Ev>
   d76ea:	4620      	mov	r0, r4
   d76ec:	4a03      	ldr	r2, [pc, #12]	; (d76fc <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d76ee:	4904      	ldr	r1, [pc, #16]	; (d7700 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d76f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d76f4:	f002 bc54 	b.w	d9fa0 <__aeabi_atexit>
   d76f8:	2003e694 	.word	0x2003e694
   d76fc:	2003e280 	.word	0x2003e280
   d7700:	000d6601 	.word	0x000d6601

000d7704 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d7704:	b510      	push	{r4, lr}
   d7706:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d7708:	684a      	ldr	r2, [r1, #4]
   d770a:	4902      	ldr	r1, [pc, #8]	; (d7714 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d770c:	f002 fad6 	bl	d9cbc <_ZN5spark12NetworkClass7resolveEPKc>
}
   d7710:	4620      	mov	r0, r4
   d7712:	bd10      	pop	{r4, pc}
   d7714:	2003e770 	.word	0x2003e770

000d7718 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7718:	b5f0      	push	{r4, r5, r6, r7, lr}
   d771a:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d771c:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d771e:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d7720:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7722:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d7724:	f7ff ffee 	bl	d7704 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7728:	a802      	add	r0, sp, #8
   d772a:	f001 fd9d 	bl	d9268 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d772e:	b9a0      	cbnz	r0, d775a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d7730:	7d33      	ldrb	r3, [r6, #20]
   d7732:	b123      	cbz	r3, d773e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d7734:	f001 fe3a 	bl	d93ac <_Z16_fetch_usbserialv>
   d7738:	4927      	ldr	r1, [pc, #156]	; (d77d8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d773a:	f000 ff98 	bl	d866e <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d773e:	23f3      	movs	r3, #243	; 0xf3
   d7740:	9300      	str	r3, [sp, #0]
   d7742:	2237      	movs	r2, #55	; 0x37
   d7744:	233d      	movs	r3, #61	; 0x3d
   d7746:	21a9      	movs	r1, #169	; 0xa9
   d7748:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d774a:	ad09      	add	r5, sp, #36	; 0x24
   d774c:	f001 fdb0 	bl	d92b0 <_ZN9IPAddressC1Ehhhh>
   d7750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7752:	ac03      	add	r4, sp, #12
   d7754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7756:	682b      	ldr	r3, [r5, #0]
   d7758:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d775a:	2200      	movs	r2, #0
   d775c:	f240 21bd 	movw	r1, #701	; 0x2bd
   d7760:	481e      	ldr	r0, [pc, #120]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7762:	f000 fdc3 	bl	d82ec <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d7766:	2200      	movs	r2, #0
   d7768:	f242 3134 	movw	r1, #9012	; 0x2334
   d776c:	481b      	ldr	r0, [pc, #108]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d776e:	f000 fc65 	bl	d803c <_ZN3UDP5beginEtm>
   d7772:	ad03      	add	r5, sp, #12
   d7774:	4b1a      	ldr	r3, [pc, #104]	; (d77e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d7776:	9308      	str	r3, [sp, #32]
   d7778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d777a:	ac09      	add	r4, sp, #36	; 0x24
   d777c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d777e:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7780:	4816      	ldr	r0, [pc, #88]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7782:	7023      	strb	r3, [r4, #0]
   d7784:	f242 3234 	movw	r2, #9012	; 0x2334
   d7788:	a908      	add	r1, sp, #32
   d778a:	f000 fdcb 	bl	d8324 <_ZN3UDP11beginPacketE9IPAddresst>
   d778e:	b958      	cbnz	r0, d77a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d7790:	7d33      	ldrb	r3, [r6, #20]
   d7792:	b123      	cbz	r3, d779e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d7794:	f001 fe0a 	bl	d93ac <_Z16_fetch_usbserialv>
   d7798:	4912      	ldr	r1, [pc, #72]	; (d77e4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d779a:	f000 ff68 	bl	d866e <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d779e:	480f      	ldr	r0, [pc, #60]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d77a0:	f000 fc98 	bl	d80d4 <_ZN3UDP4stopEv>
    return false;
   d77a4:	2000      	movs	r0, #0
   d77a6:	e014      	b.n	d77d2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d77a8:	2f00      	cmp	r7, #0
   d77aa:	d0f1      	beq.n	d7790 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d77ac:	4638      	mov	r0, r7
   d77ae:	f004 fd74 	bl	dc29a <strlen>
   d77b2:	4639      	mov	r1, r7
   d77b4:	4602      	mov	r2, r0
   d77b6:	4809      	ldr	r0, [pc, #36]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d77b8:	f000 fc9a 	bl	d80f0 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d77bc:	2800      	cmp	r0, #0
   d77be:	d0e7      	beq.n	d7790 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d77c0:	4806      	ldr	r0, [pc, #24]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d77c2:	f000 fcf5 	bl	d81b0 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d77c6:	2800      	cmp	r0, #0
   d77c8:	d0e2      	beq.n	d7790 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d77ca:	4804      	ldr	r0, [pc, #16]	; (d77dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d77cc:	f000 fc82 	bl	d80d4 <_ZN3UDP4stopEv>
  return true;
   d77d0:	2001      	movs	r0, #1
}
   d77d2:	b00f      	add	sp, #60	; 0x3c
   d77d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d77d6:	bf00      	nop
   d77d8:	000de678 	.word	0x000de678
   d77dc:	2003e694 	.word	0x2003e694
   d77e0:	000dec94 	.word	0x000dec94
   d77e4:	000de704 	.word	0x000de704

000d77e8 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d77e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d77f0 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d77ec:	4770      	bx	lr
   d77ee:	bf00      	nop
   d77f0:	cda2425f 	.word	0xcda2425f

000d77f4 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d77f4:	7401      	strb	r1, [r0, #16]
   d77f6:	4770      	bx	lr

000d77f8 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d77f8:	2200      	movs	r2, #0
	  : _Node_allocator()
   d77fa:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d77fc:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d7800:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d7804:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d7806:	4770      	bx	lr

000d7808 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d7808:	b530      	push	{r4, r5, lr}
   d780a:	b085      	sub	sp, #20
   d780c:	461a      	mov	r2, r3
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d780e:	9b08      	ldr	r3, [sp, #32]
   d7810:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7812:	f88d 3000 	strb.w	r3, [sp]
   d7816:	a802      	add	r0, sp, #8
   d7818:	233c      	movs	r3, #60	; 0x3c
   d781a:	f001 fb55 	bl	d8ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d781e:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7820:	9c02      	ldr	r4, [sp, #8]
   d7822:	f000 fa47 	bl	d7cb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7826:	b120      	cbz	r0, d7832 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7828:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d782a:	b913      	cbnz	r3, d7832 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d782c:	f000 face 	bl	d7dcc <spark_process>
    }
   d7830:	e7fa      	b.n	d7828 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d7832:	7863      	ldrb	r3, [r4, #1]
   d7834:	f3bf 8f5b 	dmb	ish
   d7838:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d783a:	b9ab      	cbnz	r3, d7868 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d783c:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d783e:	9c03      	ldr	r4, [sp, #12]
   d7840:	b17c      	cbz	r4, d7862 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d7842:	6863      	ldr	r3, [r4, #4]
   d7844:	3b01      	subs	r3, #1
   d7846:	6063      	str	r3, [r4, #4]
   d7848:	b95b      	cbnz	r3, d7862 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d784a:	6823      	ldr	r3, [r4, #0]
   d784c:	4620      	mov	r0, r4
   d784e:	689b      	ldr	r3, [r3, #8]
   d7850:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7852:	68a3      	ldr	r3, [r4, #8]
   d7854:	3b01      	subs	r3, #1
   d7856:	60a3      	str	r3, [r4, #8]
   d7858:	b91b      	cbnz	r3, d7862 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d785a:	6823      	ldr	r3, [r4, #0]
   d785c:	4620      	mov	r0, r4
   d785e:	68db      	ldr	r3, [r3, #12]
   d7860:	4798      	blx	r3
}
   d7862:	4628      	mov	r0, r5
   d7864:	b005      	add	sp, #20
   d7866:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d7868:	2000      	movs	r0, #0
   d786a:	f000 fa23 	bl	d7cb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d786e:	b120      	cbz	r0, d787a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d7870:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7872:	b913      	cbnz	r3, d787a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d7874:	f000 faaa 	bl	d7dcc <spark_process>
    }
   d7878:	e7fa      	b.n	d7870 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d787a:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d787c:	2b01      	cmp	r3, #1
   d787e:	d1dd      	bne.n	d783c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d7880:	7b25      	ldrb	r5, [r4, #12]
   d7882:	e7dc      	b.n	d783e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d7884 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d7884:	b510      	push	{r4, lr}
   d7886:	4c04      	ldr	r4, [pc, #16]	; (d7898 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d7888:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d788a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d788e:	2400      	movs	r4, #0
  _token = token;
   d7890:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d7892:	7404      	strb	r4, [r0, #16]
  _token = token;
   d7894:	60c3      	str	r3, [r0, #12]
}
   d7896:	bd10      	pop	{r4, pc}
   d7898:	000de744 	.word	0x000de744

000d789c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d789c:	f001 b89e 	b.w	d89dc <delay>

000d78a0 <_Z11BlynkMillisv>:
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d78a0:	f000 b888 	b.w	d79b4 <HAL_Timer_Get_Milli_Seconds>

000d78a4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d78a4:	4770      	bx	lr

000d78a6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d78a6:	4770      	bx	lr

000d78a8 <BlynkNoOpCbk>:
{}
   d78a8:	4770      	bx	lr
	...

000d78ac <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d78ac:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d78ae:	bf5a      	itte	pl
   d78b0:	4b02      	ldrpl	r3, [pc, #8]	; (d78bc <GetReadHandler+0x10>)
   d78b2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d78b6:	2000      	movmi	r0, #0
#endif
}
   d78b8:	4770      	bx	lr
   d78ba:	bf00      	nop
   d78bc:	000de754 	.word	0x000de754

000d78c0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d78c0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d78c2:	bf5a      	itte	pl
   d78c4:	4b02      	ldrpl	r3, [pc, #8]	; (d78d0 <GetWriteHandler+0x10>)
   d78c6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d78ca:	2000      	movmi	r0, #0
#endif
}
   d78cc:	4770      	bx	lr
   d78ce:	bf00      	nop
   d78d0:	000de954 	.word	0x000de954

000d78d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d78d4:	b508      	push	{r3, lr}
   d78d6:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <netdb_freeaddrinfo+0xc>)
   d78d8:	681b      	ldr	r3, [r3, #0]
   d78da:	689b      	ldr	r3, [r3, #8]
   d78dc:	9301      	str	r3, [sp, #4]
   d78de:	bd08      	pop	{r3, pc}
   d78e0:	00030268 	.word	0x00030268

000d78e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d78e4:	b508      	push	{r3, lr}
   d78e6:	4b02      	ldr	r3, [pc, #8]	; (d78f0 <netdb_getaddrinfo+0xc>)
   d78e8:	681b      	ldr	r3, [r3, #0]
   d78ea:	68db      	ldr	r3, [r3, #12]
   d78ec:	9301      	str	r3, [sp, #4]
   d78ee:	bd08      	pop	{r3, pc}
   d78f0:	00030268 	.word	0x00030268

000d78f4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d78f4:	b508      	push	{r3, lr}
   d78f6:	4b02      	ldr	r3, [pc, #8]	; (d7900 <HAL_Validate_Pin_Function+0xc>)
   d78f8:	681b      	ldr	r3, [r3, #0]
   d78fa:	685b      	ldr	r3, [r3, #4]
   d78fc:	9301      	str	r3, [sp, #4]
   d78fe:	bd08      	pop	{r3, pc}
   d7900:	0003022c 	.word	0x0003022c

000d7904 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7904:	b508      	push	{r3, lr}
   d7906:	4b02      	ldr	r3, [pc, #8]	; (d7910 <HAL_Pin_Mode+0xc>)
   d7908:	681b      	ldr	r3, [r3, #0]
   d790a:	689b      	ldr	r3, [r3, #8]
   d790c:	9301      	str	r3, [sp, #4]
   d790e:	bd08      	pop	{r3, pc}
   d7910:	0003022c 	.word	0x0003022c

000d7914 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7914:	b508      	push	{r3, lr}
   d7916:	4b02      	ldr	r3, [pc, #8]	; (d7920 <HAL_Get_Pin_Mode+0xc>)
   d7918:	681b      	ldr	r3, [r3, #0]
   d791a:	68db      	ldr	r3, [r3, #12]
   d791c:	9301      	str	r3, [sp, #4]
   d791e:	bd08      	pop	{r3, pc}
   d7920:	0003022c 	.word	0x0003022c

000d7924 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7924:	b508      	push	{r3, lr}
   d7926:	4b02      	ldr	r3, [pc, #8]	; (d7930 <HAL_GPIO_Write+0xc>)
   d7928:	681b      	ldr	r3, [r3, #0]
   d792a:	691b      	ldr	r3, [r3, #16]
   d792c:	9301      	str	r3, [sp, #4]
   d792e:	bd08      	pop	{r3, pc}
   d7930:	0003022c 	.word	0x0003022c

000d7934 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7934:	b508      	push	{r3, lr}
   d7936:	4b02      	ldr	r3, [pc, #8]	; (d7940 <HAL_GPIO_Read+0xc>)
   d7938:	681b      	ldr	r3, [r3, #0]
   d793a:	695b      	ldr	r3, [r3, #20]
   d793c:	9301      	str	r3, [sp, #4]
   d793e:	bd08      	pop	{r3, pc}
   d7940:	0003022c 	.word	0x0003022c

000d7944 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d7944:	b508      	push	{r3, lr}
   d7946:	4b02      	ldr	r3, [pc, #8]	; (d7950 <HAL_DAC_Write+0xc>)
   d7948:	681b      	ldr	r3, [r3, #0]
   d794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d794c:	9301      	str	r3, [sp, #4]
   d794e:	bd08      	pop	{r3, pc}
   d7950:	0003022c 	.word	0x0003022c

000d7954 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7954:	b508      	push	{r3, lr}
   d7956:	4b02      	ldr	r3, [pc, #8]	; (d7960 <hal_adc_read+0xc>)
   d7958:	681b      	ldr	r3, [r3, #0]
   d795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d795c:	9301      	str	r3, [sp, #4]
   d795e:	bd08      	pop	{r3, pc}
   d7960:	0003022c 	.word	0x0003022c

000d7964 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d7964:	b508      	push	{r3, lr}
   d7966:	4b02      	ldr	r3, [pc, #8]	; (d7970 <hal_pwm_write_ext+0xc>)
   d7968:	681b      	ldr	r3, [r3, #0]
   d796a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	bd08      	pop	{r3, pc}
   d7970:	0003022c 	.word	0x0003022c

000d7974 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7974:	b508      	push	{r3, lr}
   d7976:	4b02      	ldr	r3, [pc, #8]	; (d7980 <if_index_to_name+0xc>)
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	695b      	ldr	r3, [r3, #20]
   d797c:	9301      	str	r3, [sp, #4]
   d797e:	bd08      	pop	{r3, pc}
   d7980:	0003026c 	.word	0x0003026c

000d7984 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7984:	b508      	push	{r3, lr}
   d7986:	4b02      	ldr	r3, [pc, #8]	; (d7990 <HAL_RNG_GetRandomNumber+0xc>)
   d7988:	681b      	ldr	r3, [r3, #0]
   d798a:	685b      	ldr	r3, [r3, #4]
   d798c:	9301      	str	r3, [sp, #4]
   d798e:	bd08      	pop	{r3, pc}
   d7990:	00030218 	.word	0x00030218

000d7994 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7994:	b508      	push	{r3, lr}
   d7996:	4b02      	ldr	r3, [pc, #8]	; (d79a0 <HAL_Delay_Microseconds+0xc>)
   d7998:	681b      	ldr	r3, [r3, #0]
   d799a:	68db      	ldr	r3, [r3, #12]
   d799c:	9301      	str	r3, [sp, #4]
   d799e:	bd08      	pop	{r3, pc}
   d79a0:	00030218 	.word	0x00030218

000d79a4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d79a4:	b508      	push	{r3, lr}
   d79a6:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d79a8:	681b      	ldr	r3, [r3, #0]
   d79aa:	691b      	ldr	r3, [r3, #16]
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	bd08      	pop	{r3, pc}
   d79b0:	00030218 	.word	0x00030218

000d79b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b02      	ldr	r3, [pc, #8]	; (d79c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d79b8:	681b      	ldr	r3, [r3, #0]
   d79ba:	695b      	ldr	r3, [r3, #20]
   d79bc:	9301      	str	r3, [sp, #4]
   d79be:	bd08      	pop	{r3, pc}
   d79c0:	00030218 	.word	0x00030218

000d79c4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <hal_rtc_time_is_valid+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	00030218 	.word	0x00030218

000d79d4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <hal_rtc_get_time+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	00030218 	.word	0x00030218

000d79e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <os_mutex_recursive_create+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	00030248 	.word	0x00030248

000d79f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <os_mutex_recursive_destroy+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	00030248 	.word	0x00030248

000d7a04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <inet_inet_ntop+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	695b      	ldr	r3, [r3, #20]
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	00030264 	.word	0x00030264

000d7a14 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <inet_htonl+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	6a1b      	ldr	r3, [r3, #32]
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	00030264 	.word	0x00030264

000d7a24 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <inet_ntohs+0xc>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a2c:	9301      	str	r3, [sp, #4]
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	00030264 	.word	0x00030264

000d7a34 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7a34:	b508      	push	{r3, lr}
   d7a36:	4b02      	ldr	r3, [pc, #8]	; (d7a40 <inet_htons+0xc>)
   d7a38:	681b      	ldr	r3, [r3, #0]
   d7a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7a3c:	9301      	str	r3, [sp, #4]
   d7a3e:	bd08      	pop	{r3, pc}
   d7a40:	00030264 	.word	0x00030264

000d7a44 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7a44:	b508      	push	{r3, lr}
   d7a46:	4b02      	ldr	r3, [pc, #8]	; (d7a50 <hal_usart_init+0xc>)
   d7a48:	681b      	ldr	r3, [r3, #0]
   d7a4a:	681b      	ldr	r3, [r3, #0]
   d7a4c:	9301      	str	r3, [sp, #4]
   d7a4e:	bd08      	pop	{r3, pc}
   d7a50:	0003023c 	.word	0x0003023c

000d7a54 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7a54:	b508      	push	{r3, lr}
   d7a56:	4b02      	ldr	r3, [pc, #8]	; (d7a60 <hal_usart_write+0xc>)
   d7a58:	681b      	ldr	r3, [r3, #0]
   d7a5a:	68db      	ldr	r3, [r3, #12]
   d7a5c:	9301      	str	r3, [sp, #4]
   d7a5e:	bd08      	pop	{r3, pc}
   d7a60:	0003023c 	.word	0x0003023c

000d7a64 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7a64:	b508      	push	{r3, lr}
   d7a66:	4b02      	ldr	r3, [pc, #8]	; (d7a70 <hal_usart_available+0xc>)
   d7a68:	681b      	ldr	r3, [r3, #0]
   d7a6a:	691b      	ldr	r3, [r3, #16]
   d7a6c:	9301      	str	r3, [sp, #4]
   d7a6e:	bd08      	pop	{r3, pc}
   d7a70:	0003023c 	.word	0x0003023c

000d7a74 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7a74:	b508      	push	{r3, lr}
   d7a76:	4b02      	ldr	r3, [pc, #8]	; (d7a80 <hal_usart_read+0xc>)
   d7a78:	681b      	ldr	r3, [r3, #0]
   d7a7a:	695b      	ldr	r3, [r3, #20]
   d7a7c:	9301      	str	r3, [sp, #4]
   d7a7e:	bd08      	pop	{r3, pc}
   d7a80:	0003023c 	.word	0x0003023c

000d7a84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7a84:	b508      	push	{r3, lr}
   d7a86:	4b02      	ldr	r3, [pc, #8]	; (d7a90 <hal_usart_peek+0xc>)
   d7a88:	681b      	ldr	r3, [r3, #0]
   d7a8a:	699b      	ldr	r3, [r3, #24]
   d7a8c:	9301      	str	r3, [sp, #4]
   d7a8e:	bd08      	pop	{r3, pc}
   d7a90:	0003023c 	.word	0x0003023c

000d7a94 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7a94:	b508      	push	{r3, lr}
   d7a96:	4b02      	ldr	r3, [pc, #8]	; (d7aa0 <hal_usart_flush+0xc>)
   d7a98:	681b      	ldr	r3, [r3, #0]
   d7a9a:	69db      	ldr	r3, [r3, #28]
   d7a9c:	9301      	str	r3, [sp, #4]
   d7a9e:	bd08      	pop	{r3, pc}
   d7aa0:	0003023c 	.word	0x0003023c

000d7aa4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7aa4:	b508      	push	{r3, lr}
   d7aa6:	4b02      	ldr	r3, [pc, #8]	; (d7ab0 <hal_usart_is_enabled+0xc>)
   d7aa8:	681b      	ldr	r3, [r3, #0]
   d7aaa:	6a1b      	ldr	r3, [r3, #32]
   d7aac:	9301      	str	r3, [sp, #4]
   d7aae:	bd08      	pop	{r3, pc}
   d7ab0:	0003023c 	.word	0x0003023c

000d7ab4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7ab4:	b508      	push	{r3, lr}
   d7ab6:	4b02      	ldr	r3, [pc, #8]	; (d7ac0 <hal_usart_available_data_for_write+0xc>)
   d7ab8:	681b      	ldr	r3, [r3, #0]
   d7aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7abc:	9301      	str	r3, [sp, #4]
   d7abe:	bd08      	pop	{r3, pc}
   d7ac0:	0003023c 	.word	0x0003023c

000d7ac4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7ac4:	b508      	push	{r3, lr}
   d7ac6:	4b02      	ldr	r3, [pc, #8]	; (d7ad0 <hal_i2c_write+0xc>)
   d7ac8:	681b      	ldr	r3, [r3, #0]
   d7aca:	6a1b      	ldr	r3, [r3, #32]
   d7acc:	9301      	str	r3, [sp, #4]
   d7ace:	bd08      	pop	{r3, pc}
   d7ad0:	00030228 	.word	0x00030228

000d7ad4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7ad4:	b508      	push	{r3, lr}
   d7ad6:	4b02      	ldr	r3, [pc, #8]	; (d7ae0 <hal_i2c_available+0xc>)
   d7ad8:	681b      	ldr	r3, [r3, #0]
   d7ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7adc:	9301      	str	r3, [sp, #4]
   d7ade:	bd08      	pop	{r3, pc}
   d7ae0:	00030228 	.word	0x00030228

000d7ae4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7ae4:	b508      	push	{r3, lr}
   d7ae6:	4b02      	ldr	r3, [pc, #8]	; (d7af0 <hal_i2c_read+0xc>)
   d7ae8:	681b      	ldr	r3, [r3, #0]
   d7aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7aec:	9301      	str	r3, [sp, #4]
   d7aee:	bd08      	pop	{r3, pc}
   d7af0:	00030228 	.word	0x00030228

000d7af4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7af4:	b508      	push	{r3, lr}
   d7af6:	4b02      	ldr	r3, [pc, #8]	; (d7b00 <hal_i2c_peek+0xc>)
   d7af8:	681b      	ldr	r3, [r3, #0]
   d7afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7afc:	9301      	str	r3, [sp, #4]
   d7afe:	bd08      	pop	{r3, pc}
   d7b00:	00030228 	.word	0x00030228

000d7b04 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7b04:	b508      	push	{r3, lr}
   d7b06:	4b02      	ldr	r3, [pc, #8]	; (d7b10 <hal_i2c_flush+0xc>)
   d7b08:	681b      	ldr	r3, [r3, #0]
   d7b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b0c:	9301      	str	r3, [sp, #4]
   d7b0e:	bd08      	pop	{r3, pc}
   d7b10:	00030228 	.word	0x00030228

000d7b14 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7b14:	b508      	push	{r3, lr}
   d7b16:	4b02      	ldr	r3, [pc, #8]	; (d7b20 <hal_i2c_is_enabled+0xc>)
   d7b18:	681b      	ldr	r3, [r3, #0]
   d7b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b1c:	9301      	str	r3, [sp, #4]
   d7b1e:	bd08      	pop	{r3, pc}
   d7b20:	00030228 	.word	0x00030228

000d7b24 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7b24:	b508      	push	{r3, lr}
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <hal_i2c_init+0xc>)
   d7b28:	681b      	ldr	r3, [r3, #0]
   d7b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7b2c:	9301      	str	r3, [sp, #4]
   d7b2e:	bd08      	pop	{r3, pc}
   d7b30:	00030228 	.word	0x00030228

000d7b34 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d7b34:	b508      	push	{r3, lr}
   d7b36:	4b02      	ldr	r3, [pc, #8]	; (d7b40 <sock_bind+0xc>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	685b      	ldr	r3, [r3, #4]
   d7b3c:	9301      	str	r3, [sp, #4]
   d7b3e:	bd08      	pop	{r3, pc}
   d7b40:	00030238 	.word	0x00030238

000d7b44 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7b44:	b508      	push	{r3, lr}
   d7b46:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <sock_setsockopt+0xc>)
   d7b48:	681b      	ldr	r3, [r3, #0]
   d7b4a:	699b      	ldr	r3, [r3, #24]
   d7b4c:	9301      	str	r3, [sp, #4]
   d7b4e:	bd08      	pop	{r3, pc}
   d7b50:	00030238 	.word	0x00030238

000d7b54 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7b54:	b508      	push	{r3, lr}
   d7b56:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <sock_close+0xc>)
   d7b58:	681b      	ldr	r3, [r3, #0]
   d7b5a:	69db      	ldr	r3, [r3, #28]
   d7b5c:	9301      	str	r3, [sp, #4]
   d7b5e:	bd08      	pop	{r3, pc}
   d7b60:	00030238 	.word	0x00030238

000d7b64 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7b64:	b508      	push	{r3, lr}
   d7b66:	4b02      	ldr	r3, [pc, #8]	; (d7b70 <sock_connect+0xc>)
   d7b68:	681b      	ldr	r3, [r3, #0]
   d7b6a:	6a1b      	ldr	r3, [r3, #32]
   d7b6c:	9301      	str	r3, [sp, #4]
   d7b6e:	bd08      	pop	{r3, pc}
   d7b70:	00030238 	.word	0x00030238

000d7b74 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7b74:	b508      	push	{r3, lr}
   d7b76:	4b02      	ldr	r3, [pc, #8]	; (d7b80 <sock_recv+0xc>)
   d7b78:	681b      	ldr	r3, [r3, #0]
   d7b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7b7c:	9301      	str	r3, [sp, #4]
   d7b7e:	bd08      	pop	{r3, pc}
   d7b80:	00030238 	.word	0x00030238

000d7b84 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d7b84:	b508      	push	{r3, lr}
   d7b86:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <sock_recvfrom+0xc>)
   d7b88:	681b      	ldr	r3, [r3, #0]
   d7b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7b8c:	9301      	str	r3, [sp, #4]
   d7b8e:	bd08      	pop	{r3, pc}
   d7b90:	00030238 	.word	0x00030238

000d7b94 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7b94:	b508      	push	{r3, lr}
   d7b96:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <sock_send+0xc>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b9c:	9301      	str	r3, [sp, #4]
   d7b9e:	bd08      	pop	{r3, pc}
   d7ba0:	00030238 	.word	0x00030238

000d7ba4 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d7ba4:	b508      	push	{r3, lr}
   d7ba6:	4b02      	ldr	r3, [pc, #8]	; (d7bb0 <sock_sendto+0xc>)
   d7ba8:	681b      	ldr	r3, [r3, #0]
   d7baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7bac:	9301      	str	r3, [sp, #4]
   d7bae:	bd08      	pop	{r3, pc}
   d7bb0:	00030238 	.word	0x00030238

000d7bb4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <sock_socket+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	00030238 	.word	0x00030238

000d7bc4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <hal_spi_init+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	69db      	ldr	r3, [r3, #28]
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	00030230 	.word	0x00030230

000d7bd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <hal_spi_is_enabled+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	6a1b      	ldr	r3, [r3, #32]
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	00030230 	.word	0x00030230

000d7be4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <cellular_signal+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	00030274 	.word	0x00030274

000d7bf4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <HAL_USB_USART_Init+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	681b      	ldr	r3, [r3, #0]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	0003024c 	.word	0x0003024c

000d7c04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <HAL_USB_USART_Begin+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	685b      	ldr	r3, [r3, #4]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	0003024c 	.word	0x0003024c

000d7c14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <HAL_USB_USART_Available_Data+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	691b      	ldr	r3, [r3, #16]
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	0003024c 	.word	0x0003024c

000d7c24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	695b      	ldr	r3, [r3, #20]
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	0003024c 	.word	0x0003024c

000d7c34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <HAL_USB_USART_Receive_Data+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	699b      	ldr	r3, [r3, #24]
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	0003024c 	.word	0x0003024c

000d7c44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <HAL_USB_USART_Send_Data+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	69db      	ldr	r3, [r3, #28]
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	0003024c 	.word	0x0003024c

000d7c54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <HAL_USB_USART_Flush_Data+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6a1b      	ldr	r3, [r3, #32]
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	0003024c 	.word	0x0003024c

000d7c64 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <HAL_USB_USART_Is_Enabled+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	0003024c 	.word	0x0003024c

000d7c74 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <log_message+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030260 	.word	0x00030260

000d7c84 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <system_mode+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	681b      	ldr	r3, [r3, #0]
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	00030220 	.word	0x00030220

000d7c94 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <set_system_mode+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	685b      	ldr	r3, [r3, #4]
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030220 	.word	0x00030220

000d7ca4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <system_delay_ms+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	695b      	ldr	r3, [r3, #20]
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030220 	.word	0x00030220

000d7cb4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <application_thread_current+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030220 	.word	0x00030220

000d7cc4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <application_thread_invoke+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030220 	.word	0x00030220

000d7cd4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <system_thread_get_state+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030220 	.word	0x00030220

000d7ce4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b03      	ldr	r3, [pc, #12]	; (d7cf4 <system_ctrl_set_app_request_handler+0x10>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7cee:	9301      	str	r3, [sp, #4]
   d7cf0:	bd08      	pop	{r3, pc}
   d7cf2:	0000      	.short	0x0000
   d7cf4:	00030220 	.word	0x00030220

000d7cf8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b03      	ldr	r3, [pc, #12]	; (d7d08 <system_ctrl_set_result+0x10>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7d02:	9301      	str	r3, [sp, #4]
   d7d04:	bd08      	pop	{r3, pc}
   d7d06:	0000      	.short	0x0000
   d7d08:	00030220 	.word	0x00030220

000d7d0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7d0c:	b508      	push	{r3, lr}
   d7d0e:	4b02      	ldr	r3, [pc, #8]	; (d7d18 <network_connect+0xc>)
   d7d10:	681b      	ldr	r3, [r3, #0]
   d7d12:	685b      	ldr	r3, [r3, #4]
   d7d14:	9301      	str	r3, [sp, #4]
   d7d16:	bd08      	pop	{r3, pc}
   d7d18:	00030240 	.word	0x00030240

000d7d1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7d1c:	b508      	push	{r3, lr}
   d7d1e:	4b02      	ldr	r3, [pc, #8]	; (d7d28 <network_connecting+0xc>)
   d7d20:	681b      	ldr	r3, [r3, #0]
   d7d22:	689b      	ldr	r3, [r3, #8]
   d7d24:	9301      	str	r3, [sp, #4]
   d7d26:	bd08      	pop	{r3, pc}
   d7d28:	00030240 	.word	0x00030240

000d7d2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7d2c:	b508      	push	{r3, lr}
   d7d2e:	4b02      	ldr	r3, [pc, #8]	; (d7d38 <network_disconnect+0xc>)
   d7d30:	681b      	ldr	r3, [r3, #0]
   d7d32:	68db      	ldr	r3, [r3, #12]
   d7d34:	9301      	str	r3, [sp, #4]
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	00030240 	.word	0x00030240

000d7d3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <network_ready+0xc>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	691b      	ldr	r3, [r3, #16]
   d7d44:	9301      	str	r3, [sp, #4]
   d7d46:	bd08      	pop	{r3, pc}
   d7d48:	00030240 	.word	0x00030240

000d7d4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7d4c:	b508      	push	{r3, lr}
   d7d4e:	4b02      	ldr	r3, [pc, #8]	; (d7d58 <network_on+0xc>)
   d7d50:	681b      	ldr	r3, [r3, #0]
   d7d52:	695b      	ldr	r3, [r3, #20]
   d7d54:	9301      	str	r3, [sp, #4]
   d7d56:	bd08      	pop	{r3, pc}
   d7d58:	00030240 	.word	0x00030240

000d7d5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7d5c:	b508      	push	{r3, lr}
   d7d5e:	4b02      	ldr	r3, [pc, #8]	; (d7d68 <network_off+0xc>)
   d7d60:	681b      	ldr	r3, [r3, #0]
   d7d62:	699b      	ldr	r3, [r3, #24]
   d7d64:	9301      	str	r3, [sp, #4]
   d7d66:	bd08      	pop	{r3, pc}
   d7d68:	00030240 	.word	0x00030240

000d7d6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7d6c:	b508      	push	{r3, lr}
   d7d6e:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <network_listen+0xc>)
   d7d70:	681b      	ldr	r3, [r3, #0]
   d7d72:	69db      	ldr	r3, [r3, #28]
   d7d74:	9301      	str	r3, [sp, #4]
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	00030240 	.word	0x00030240

000d7d7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7d7c:	b508      	push	{r3, lr}
   d7d7e:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <network_listening+0xc>)
   d7d80:	681b      	ldr	r3, [r3, #0]
   d7d82:	6a1b      	ldr	r3, [r3, #32]
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	bd08      	pop	{r3, pc}
   d7d88:	00030240 	.word	0x00030240

000d7d8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7d8c:	b508      	push	{r3, lr}
   d7d8e:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <network_set_listen_timeout+0xc>)
   d7d90:	681b      	ldr	r3, [r3, #0]
   d7d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d94:	9301      	str	r3, [sp, #4]
   d7d96:	bd08      	pop	{r3, pc}
   d7d98:	00030240 	.word	0x00030240

000d7d9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <network_get_listen_timeout+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	00030240 	.word	0x00030240

000d7dac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b02      	ldr	r3, [pc, #8]	; (d7db8 <network_is_on+0xc>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7db4:	9301      	str	r3, [sp, #4]
   d7db6:	bd08      	pop	{r3, pc}
   d7db8:	00030240 	.word	0x00030240

000d7dbc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7dbc:	b508      	push	{r3, lr}
   d7dbe:	4b02      	ldr	r3, [pc, #8]	; (d7dc8 <network_is_off+0xc>)
   d7dc0:	681b      	ldr	r3, [r3, #0]
   d7dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7dc4:	9301      	str	r3, [sp, #4]
   d7dc6:	bd08      	pop	{r3, pc}
   d7dc8:	00030240 	.word	0x00030240

000d7dcc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7dcc:	b508      	push	{r3, lr}
   d7dce:	4b02      	ldr	r3, [pc, #8]	; (d7dd8 <spark_process+0xc>)
   d7dd0:	681b      	ldr	r3, [r3, #0]
   d7dd2:	689b      	ldr	r3, [r3, #8]
   d7dd4:	9301      	str	r3, [sp, #4]
   d7dd6:	bd08      	pop	{r3, pc}
   d7dd8:	00030244 	.word	0x00030244

000d7ddc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7ddc:	b508      	push	{r3, lr}
   d7dde:	4b02      	ldr	r3, [pc, #8]	; (d7de8 <spark_cloud_flag_connected+0xc>)
   d7de0:	681b      	ldr	r3, [r3, #0]
   d7de2:	695b      	ldr	r3, [r3, #20]
   d7de4:	9301      	str	r3, [sp, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	00030244 	.word	0x00030244

000d7dec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7dec:	b508      	push	{r3, lr}
   d7dee:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <spark_deviceID+0xc>)
   d7df0:	681b      	ldr	r3, [r3, #0]
   d7df2:	69db      	ldr	r3, [r3, #28]
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	bd08      	pop	{r3, pc}
   d7df8:	00030244 	.word	0x00030244

000d7dfc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7dfc:	b508      	push	{r3, lr}
   d7dfe:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <spark_send_event+0xc>)
   d7e00:	681b      	ldr	r3, [r3, #0]
   d7e02:	6a1b      	ldr	r3, [r3, #32]
   d7e04:	9301      	str	r3, [sp, #4]
   d7e06:	bd08      	pop	{r3, pc}
   d7e08:	00030244 	.word	0x00030244

000d7e0c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7e0c:	b508      	push	{r3, lr}
   d7e0e:	4b02      	ldr	r3, [pc, #8]	; (d7e18 <spark_sync_time_pending+0xc>)
   d7e10:	681b      	ldr	r3, [r3, #0]
   d7e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e14:	9301      	str	r3, [sp, #4]
   d7e16:	bd08      	pop	{r3, pc}
   d7e18:	00030244 	.word	0x00030244

000d7e1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7e1c:	b508      	push	{r3, lr}
   d7e1e:	4b02      	ldr	r3, [pc, #8]	; (d7e28 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7e20:	681b      	ldr	r3, [r3, #0]
   d7e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e24:	9301      	str	r3, [sp, #4]
   d7e26:	bd08      	pop	{r3, pc}
   d7e28:	00030244 	.word	0x00030244

000d7e2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7e2c:	b508      	push	{r3, lr}
   d7e2e:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <malloc+0xc>)
   d7e30:	681b      	ldr	r3, [r3, #0]
   d7e32:	681b      	ldr	r3, [r3, #0]
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	bd08      	pop	{r3, pc}
   d7e38:	0003021c 	.word	0x0003021c

000d7e3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <free+0xc>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	685b      	ldr	r3, [r3, #4]
   d7e44:	9301      	str	r3, [sp, #4]
   d7e46:	bd08      	pop	{r3, pc}
   d7e48:	0003021c 	.word	0x0003021c

000d7e4c <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7e4c:	b508      	push	{r3, lr}
   d7e4e:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <sprintf+0xc>)
   d7e50:	681b      	ldr	r3, [r3, #0]
   d7e52:	68db      	ldr	r3, [r3, #12]
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	bd08      	pop	{r3, pc}
   d7e58:	0003021c 	.word	0x0003021c

000d7e5c <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7e5c:	b508      	push	{r3, lr}
   d7e5e:	4b02      	ldr	r3, [pc, #8]	; (d7e68 <snprintf+0xc>)
   d7e60:	681b      	ldr	r3, [r3, #0]
   d7e62:	69db      	ldr	r3, [r3, #28]
   d7e64:	9301      	str	r3, [sp, #4]
   d7e66:	bd08      	pop	{r3, pc}
   d7e68:	0003021c 	.word	0x0003021c

000d7e6c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7e6c:	b508      	push	{r3, lr}
   d7e6e:	4b02      	ldr	r3, [pc, #8]	; (d7e78 <abort+0xc>)
   d7e70:	681b      	ldr	r3, [r3, #0]
   d7e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e74:	9301      	str	r3, [sp, #4]
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	0003021c 	.word	0x0003021c

000d7e7c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7e7c:	b508      	push	{r3, lr}
   d7e7e:	4b02      	ldr	r3, [pc, #8]	; (d7e88 <_malloc_r+0xc>)
   d7e80:	681b      	ldr	r3, [r3, #0]
   d7e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e84:	9301      	str	r3, [sp, #4]
   d7e86:	bd08      	pop	{r3, pc}
   d7e88:	0003021c 	.word	0x0003021c

000d7e8c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7e8c:	b508      	push	{r3, lr}
   d7e8e:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <__errno+0xc>)
   d7e90:	681b      	ldr	r3, [r3, #0]
   d7e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e94:	9301      	str	r3, [sp, #4]
   d7e96:	bd08      	pop	{r3, pc}
   d7e98:	0003021c 	.word	0x0003021c

000d7e9c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7e9c:	b508      	push	{r3, lr}
   d7e9e:	4b02      	ldr	r3, [pc, #8]	; (d7ea8 <newlib_impure_ptr_callback+0xc>)
   d7ea0:	681b      	ldr	r3, [r3, #0]
   d7ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ea4:	9301      	str	r3, [sp, #4]
   d7ea6:	bd08      	pop	{r3, pc}
   d7ea8:	0003021c 	.word	0x0003021c

000d7eac <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7eac:	b508      	push	{r3, lr}
   d7eae:	4b02      	ldr	r3, [pc, #8]	; (d7eb8 <localtime_r+0xc>)
   d7eb0:	681b      	ldr	r3, [r3, #0]
   d7eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7eb4:	9301      	str	r3, [sp, #4]
   d7eb6:	bd08      	pop	{r3, pc}
   d7eb8:	0003021c 	.word	0x0003021c

000d7ebc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7ebc:	2200      	movs	r2, #0
   d7ebe:	6840      	ldr	r0, [r0, #4]
   d7ec0:	4611      	mov	r1, r2
   d7ec2:	f7ff bf5b 	b.w	d7d7c <network_listening>

000d7ec6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7ec6:	2200      	movs	r2, #0
   d7ec8:	6840      	ldr	r0, [r0, #4]
   d7eca:	4611      	mov	r1, r2
   d7ecc:	f7ff bf66 	b.w	d7d9c <network_get_listen_timeout>

000d7ed0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7ed0:	6840      	ldr	r0, [r0, #4]
   d7ed2:	2200      	movs	r2, #0
   d7ed4:	f7ff bf5a 	b.w	d7d8c <network_set_listen_timeout>

000d7ed8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ed8:	6840      	ldr	r0, [r0, #4]
   d7eda:	2200      	movs	r2, #0
   d7edc:	f081 0101 	eor.w	r1, r1, #1
   d7ee0:	f7ff bf44 	b.w	d7d6c <network_listen>

000d7ee4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7ee4:	2300      	movs	r3, #0
   d7ee6:	6840      	ldr	r0, [r0, #4]
   d7ee8:	461a      	mov	r2, r3
   d7eea:	4619      	mov	r1, r3
   d7eec:	f7ff bf36 	b.w	d7d5c <network_off>

000d7ef0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7ef0:	2300      	movs	r3, #0
   d7ef2:	6840      	ldr	r0, [r0, #4]
   d7ef4:	461a      	mov	r2, r3
   d7ef6:	4619      	mov	r1, r3
   d7ef8:	f7ff bf28 	b.w	d7d4c <network_on>

000d7efc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7efc:	2200      	movs	r2, #0
   d7efe:	6840      	ldr	r0, [r0, #4]
   d7f00:	4611      	mov	r1, r2
   d7f02:	f7ff bf1b 	b.w	d7d3c <network_ready>

000d7f06 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7f06:	2200      	movs	r2, #0
   d7f08:	6840      	ldr	r0, [r0, #4]
   d7f0a:	4611      	mov	r1, r2
   d7f0c:	f7ff bf06 	b.w	d7d1c <network_connecting>

000d7f10 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f10:	6840      	ldr	r0, [r0, #4]
   d7f12:	2200      	movs	r2, #0
   d7f14:	2102      	movs	r1, #2
   d7f16:	f7ff bf09 	b.w	d7d2c <network_disconnect>

000d7f1a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7f1a:	2300      	movs	r3, #0
   d7f1c:	6840      	ldr	r0, [r0, #4]
   d7f1e:	461a      	mov	r2, r3
   d7f20:	f7ff bef4 	b.w	d7d0c <network_connect>

000d7f24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7f24:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7f26:	2203      	movs	r2, #3
   d7f28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7f2a:	4a02      	ldr	r2, [pc, #8]	; (d7f34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7f2c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7f2e:	4770      	bx	lr
   d7f30:	2003e6e0 	.word	0x2003e6e0
   d7f34:	000deb5c 	.word	0x000deb5c

000d7f38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7f38:	b510      	push	{r4, lr}
   d7f3a:	4604      	mov	r4, r0
   d7f3c:	4608      	mov	r0, r1
{
    _spi = spi;
   d7f3e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7f40:	f7ff fe40 	bl	d7bc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7f44:	2300      	movs	r3, #0
   d7f46:	6063      	str	r3, [r4, #4]
}
   d7f48:	4620      	mov	r0, r4
   d7f4a:	bd10      	pop	{r4, pc}

000d7f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7f4c:	b510      	push	{r4, lr}
   d7f4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7f50:	6800      	ldr	r0, [r0, #0]
   d7f52:	b118      	cbz	r0, d7f5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7f54:	f7ff ff72 	bl	d7e3c <free>
            wakeupSource_ = nullptr;
   d7f58:	2300      	movs	r3, #0
   d7f5a:	6023      	str	r3, [r4, #0]
        }
    }
   d7f5c:	bd10      	pop	{r4, pc}

000d7f5e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7f5e:	b510      	push	{r4, lr}
   d7f60:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7f62:	f7ff fff3 	bl	d7f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d7f66:	4620      	mov	r0, r4
   d7f68:	bd10      	pop	{r4, pc}
	...

000d7f6c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7f6c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7f6e:	4b09      	ldr	r3, [pc, #36]	; (d7f94 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7f70:	4c09      	ldr	r4, [pc, #36]	; (d7f98 <_GLOBAL__sub_I_System+0x2c>)
   d7f72:	2202      	movs	r2, #2
   d7f74:	2000      	movs	r0, #0
   d7f76:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7f78:	4b08      	ldr	r3, [pc, #32]	; (d7f9c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7f7a:	6020      	str	r0, [r4, #0]
   d7f7c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7f7e:	71a0      	strb	r0, [r4, #6]
   d7f80:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7f82:	f7ff fe87 	bl	d7c94 <set_system_mode>
SystemClass System;
   d7f86:	4620      	mov	r0, r4
   d7f88:	4a05      	ldr	r2, [pc, #20]	; (d7fa0 <_GLOBAL__sub_I_System+0x34>)
   d7f8a:	4906      	ldr	r1, [pc, #24]	; (d7fa4 <_GLOBAL__sub_I_System+0x38>)
   d7f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7f90:	f002 b806 	b.w	d9fa0 <__aeabi_atexit>
   d7f94:	2003e6f4 	.word	0x2003e6f4
   d7f98:	2003e6e8 	.word	0x2003e6e8
   d7f9c:	ffff0000 	.word	0xffff0000
   d7fa0:	2003e280 	.word	0x2003e280
   d7fa4:	000d7f5f 	.word	0x000d7f5f

000d7fa8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7fa8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7faa:	6804      	ldr	r4, [r0, #0]
   d7fac:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7fae:	46a4      	mov	ip, r4
    }
   d7fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7fb4:	4760      	bx	ip

000d7fb6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d7fb6:	6803      	ldr	r3, [r0, #0]
   d7fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7fba:	4718      	bx	r3

000d7fbc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7fbc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7fbe:	4770      	bx	lr

000d7fc0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7fc0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d7fc2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d7fc4:	1a10      	subs	r0, r2, r0
   d7fc6:	4770      	bx	lr

000d7fc8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7fc8:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d7fca:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d7fcc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d7fd0:	68db      	ldr	r3, [r3, #12]
   d7fd2:	2201      	movs	r2, #1
   d7fd4:	f10d 0107 	add.w	r1, sp, #7
   d7fd8:	4798      	blx	r3
}
   d7fda:	b003      	add	sp, #12
   d7fdc:	f85d fb04 	ldr.w	pc, [sp], #4

000d7fe0 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7fe0:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7fe2:	6803      	ldr	r3, [r0, #0]
   d7fe4:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d7fe6:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d7fe8:	4798      	blx	r3
   d7fea:	b128      	cbz	r0, d7ff8 <_ZN3UDP4readEv+0x18>
   d7fec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7fee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7ff0:	1c59      	adds	r1, r3, #1
   d7ff2:	86e1      	strh	r1, [r4, #54]	; 0x36
   d7ff4:	5cd0      	ldrb	r0, [r2, r3]
}
   d7ff6:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d7ff8:	f04f 30ff 	mov.w	r0, #4294967295
   d7ffc:	e7fb      	b.n	d7ff6 <_ZN3UDP4readEv+0x16>

000d7ffe <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7ffe:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d8000:	6803      	ldr	r3, [r0, #0]
   d8002:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d8004:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d8006:	4798      	blx	r3
   d8008:	b118      	cbz	r0, d8012 <_ZN3UDP4peekEv+0x14>
   d800a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d800c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d800e:	5cd0      	ldrb	r0, [r2, r3]
}
   d8010:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d8012:	f04f 30ff 	mov.w	r0, #4294967295
   d8016:	e7fb      	b.n	d8010 <_ZN3UDP4peekEv+0x12>

000d8018 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d8018:	4770      	bx	lr

000d801a <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d801a:	b410      	push	{r4}
   d801c:	4603      	mov	r3, r0
   d801e:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d8020:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d8022:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d8024:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d8026:	6803      	ldr	r3, [r0, #0]
   d8028:	1a52      	subs	r2, r2, r1
   d802a:	68db      	ldr	r3, [r3, #12]
   d802c:	4421      	add	r1, r4
}
   d802e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d8032:	4718      	bx	r3

000d8034 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d8034:	f1a0 0010 	sub.w	r0, r0, #16
   d8038:	f7ff bfef 	b.w	d801a <_ZNK3UDP7printToER5Print>

000d803c <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d803c:	b570      	push	{r4, r5, r6, lr}
    stop();
   d803e:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8040:	b08c      	sub	sp, #48	; 0x30
    stop();
   d8042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8044:	4604      	mov	r4, r0
   d8046:	460e      	mov	r6, r1
   d8048:	4615      	mov	r5, r2
    stop();
   d804a:	4798      	blx	r3
    const int one = 1;
   d804c:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d804e:	221c      	movs	r2, #28
   d8050:	2100      	movs	r1, #0
   d8052:	a805      	add	r0, sp, #20
    const int one = 1;
   d8054:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d8056:	f004 f8b7 	bl	dc1c8 <memset>
    saddr.sin6_len = sizeof(saddr);
   d805a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d805e:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d8060:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d8064:	f7ff fce6 	bl	d7a34 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8068:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d806a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d806e:	2102      	movs	r1, #2
   d8070:	200a      	movs	r0, #10
   d8072:	f7ff fd9f 	bl	d7bb4 <sock_socket>
    if (_sock < 0) {
   d8076:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8078:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d807a:	db25      	blt.n	d80c8 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d807c:	2204      	movs	r2, #4
   d807e:	9200      	str	r2, [sp, #0]
   d8080:	ab02      	add	r3, sp, #8
   d8082:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8086:	f7ff fd5d 	bl	d7b44 <sock_setsockopt>
   d808a:	b9e8      	cbnz	r0, d80c8 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d808c:	b195      	cbz	r5, d80b4 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d808e:	9003      	str	r0, [sp, #12]
   d8090:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d8094:	a903      	add	r1, sp, #12
   d8096:	b2e8      	uxtb	r0, r5
   d8098:	f7ff fc6c 	bl	d7974 <if_index_to_name>
   d809c:	b9a0      	cbnz	r0, d80c8 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d809e:	2306      	movs	r3, #6
   d80a0:	9300      	str	r3, [sp, #0]
   d80a2:	6960      	ldr	r0, [r4, #20]
   d80a4:	ab03      	add	r3, sp, #12
   d80a6:	f241 020b 	movw	r2, #4107	; 0x100b
   d80aa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d80ae:	f7ff fd49 	bl	d7b44 <sock_setsockopt>
   d80b2:	b948      	cbnz	r0, d80c8 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d80b4:	6960      	ldr	r0, [r4, #20]
   d80b6:	221c      	movs	r2, #28
   d80b8:	a905      	add	r1, sp, #20
   d80ba:	f7ff fd3b 	bl	d7b34 <sock_bind>
   d80be:	b918      	cbnz	r0, d80c8 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d80c0:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d80c2:	2001      	movs	r0, #1
}
   d80c4:	b00c      	add	sp, #48	; 0x30
   d80c6:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d80c8:	6823      	ldr	r3, [r4, #0]
   d80ca:	4620      	mov	r0, r4
   d80cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80ce:	4798      	blx	r3
   d80d0:	2000      	movs	r0, #0
   d80d2:	e7f7      	b.n	d80c4 <_ZN3UDP5beginEtm+0x88>

000d80d4 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d80d4:	b510      	push	{r4, lr}
   d80d6:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d80d8:	6940      	ldr	r0, [r0, #20]
   d80da:	2800      	cmp	r0, #0
   d80dc:	db01      	blt.n	d80e2 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d80de:	f7ff fd39 	bl	d7b54 <sock_close>
    _sock = -1;
   d80e2:	f04f 33ff 	mov.w	r3, #4294967295
   d80e6:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d80e8:	2300      	movs	r3, #0
   d80ea:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d80ec:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d80ee:	bd10      	pop	{r4, pc}

000d80f0 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d80f0:	b570      	push	{r4, r5, r6, lr}
   d80f2:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d80f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d80f6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d80f8:	b168      	cbz	r0, d8116 <_ZN3UDP5writeEPKhj+0x26>
   d80fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d80fc:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d80fe:	4294      	cmp	r4, r2
   d8100:	bf28      	it	cs
   d8102:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d8104:	4622      	mov	r2, r4
   d8106:	4430      	add	r0, r6
   d8108:	f004 f850 	bl	dc1ac <memcpy>
    _offset += size;
   d810c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d810e:	4423      	add	r3, r4
   d8110:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d8112:	4620      	mov	r0, r4
   d8114:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8116:	4604      	mov	r4, r0
   d8118:	e7f1      	b.n	d80fe <_ZN3UDP5writeEPKhj+0xe>

000d811a <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d811a:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d811c:	6803      	ldr	r3, [r0, #0]
   d811e:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d8120:	4604      	mov	r4, r0
   d8122:	460f      	mov	r7, r1
   d8124:	4616      	mov	r6, r2
    if (available()) {
   d8126:	4798      	blx	r3
   d8128:	b190      	cbz	r0, d8150 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d812a:	6823      	ldr	r3, [r4, #0]
   d812c:	4620      	mov	r0, r4
   d812e:	691b      	ldr	r3, [r3, #16]
   d8130:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d8132:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8134:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8136:	4286      	cmp	r6, r0
   d8138:	bfa8      	it	ge
   d813a:	4606      	movge	r6, r0
   d813c:	4419      	add	r1, r3
   d813e:	4632      	mov	r2, r6
   d8140:	4638      	mov	r0, r7
   d8142:	f004 f833 	bl	dc1ac <memcpy>
        _offset += read;
   d8146:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8148:	4433      	add	r3, r6
   d814a:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d814c:	4630      	mov	r0, r6
   d814e:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d8150:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   d8154:	e7fa      	b.n	d814c <_ZN3UDP4readEPhj+0x32>
	...

000d8158 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d8158:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d815a:	4604      	mov	r4, r0
   d815c:	4b05      	ldr	r3, [pc, #20]	; (d8174 <_ZN3UDP8remoteIPEv+0x1c>)
   d815e:	f844 3b04 	str.w	r3, [r4], #4
   d8162:	f101 0520 	add.w	r5, r1, #32
   d8166:	4606      	mov	r6, r0
   d8168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d816a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d816c:	682b      	ldr	r3, [r5, #0]
   d816e:	7023      	strb	r3, [r4, #0]
   d8170:	4630      	mov	r0, r6
   d8172:	bd70      	pop	{r4, r5, r6, pc}
   d8174:	000dec94 	.word	0x000dec94

000d8178 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8178:	b5f0      	push	{r4, r5, r6, r7, lr}
   d817a:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d817c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d817e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8180:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d8182:	4a0a      	ldr	r2, [pc, #40]	; (d81ac <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d8184:	9202      	str	r2, [sp, #8]
   d8186:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8188:	468c      	mov	ip, r1
   d818a:	4606      	mov	r6, r0
   d818c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d818e:	ad03      	add	r5, sp, #12
   d8190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8192:	6823      	ldr	r3, [r4, #0]
   d8194:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8196:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d819a:	9300      	str	r3, [sp, #0]
   d819c:	4672      	mov	r2, lr
   d819e:	ab02      	add	r3, sp, #8
   d81a0:	4661      	mov	r1, ip
   d81a2:	4630      	mov	r0, r6
   d81a4:	47b8      	blx	r7
    }
   d81a6:	b009      	add	sp, #36	; 0x24
   d81a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d81aa:	bf00      	nop
   d81ac:	000dec94 	.word	0x000dec94

000d81b0 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d81b2:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d81b4:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d81b6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d81b8:	4b0c      	ldr	r3, [pc, #48]	; (d81ec <_ZN3UDP9endPacketEv+0x3c>)
   d81ba:	9302      	str	r3, [sp, #8]
   d81bc:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d81c0:	4604      	mov	r4, r0
   d81c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d81c4:	ad03      	add	r5, sp, #12
   d81c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d81c8:	6833      	ldr	r3, [r6, #0]
   d81ca:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d81cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d81ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d81d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d81d2:	9300      	str	r3, [sp, #0]
   d81d4:	4620      	mov	r0, r4
   d81d6:	ab02      	add	r3, sp, #8
   d81d8:	47b8      	blx	r7
    flush(); // wait for send to complete
   d81da:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d81dc:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d81de:	69db      	ldr	r3, [r3, #28]
   d81e0:	4620      	mov	r0, r4
   d81e2:	4798      	blx	r3
}
   d81e4:	4628      	mov	r0, r5
   d81e6:	b009      	add	sp, #36	; 0x24
   d81e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d81ea:	bf00      	nop
   d81ec:	000dec94 	.word	0x000dec94

000d81f0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d81f0:	b538      	push	{r3, r4, r5, lr}
   d81f2:	4605      	mov	r5, r0
   d81f4:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d81f6:	7d2b      	ldrb	r3, [r5, #20]
   d81f8:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d81fa:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d81fc:	d110      	bne.n	d8220 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d81fe:	f640 231c 	movw	r3, #2588	; 0xa1c
   d8202:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d8204:	f7ff fc16 	bl	d7a34 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8208:	3408      	adds	r4, #8
   d820a:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d820c:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8210:	3514      	adds	r5, #20
   d8212:	f853 2b04 	ldr.w	r2, [r3], #4
   d8216:	f844 2b04 	str.w	r2, [r4], #4
   d821a:	42ab      	cmp	r3, r5
   d821c:	d1f9      	bne.n	d8212 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d821e:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d8220:	2b04      	cmp	r3, #4
   d8222:	d1fc      	bne.n	d821e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d8224:	f44f 7304 	mov.w	r3, #528	; 0x210
   d8228:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d822a:	f7ff fc03 	bl	d7a34 <inet_htons>
   d822e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d8230:	6868      	ldr	r0, [r5, #4]
   d8232:	f7ff fbef 	bl	d7a14 <inet_htonl>
   d8236:	6060      	str	r0, [r4, #4]
}
   d8238:	e7f1      	b.n	d821e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d823a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d823a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d823e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d8240:	af03      	add	r7, sp, #12
   d8242:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8246:	4698      	mov	r8, r3
   d8248:	4604      	mov	r4, r0
   d824a:	460d      	mov	r5, r1
   d824c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d824e:	2100      	movs	r1, #0
   d8250:	464a      	mov	r2, r9
   d8252:	4638      	mov	r0, r7
   d8254:	f003 ffb8 	bl	dc1c8 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8258:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d825c:	463a      	mov	r2, r7
   d825e:	4640      	mov	r0, r8
   d8260:	f7ff ffc6 	bl	d81f0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d8264:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8268:	b153      	cbz	r3, d8280 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d826a:	e9cd 7900 	strd	r7, r9, [sp]
   d826e:	6960      	ldr	r0, [r4, #20]
   d8270:	2300      	movs	r3, #0
   d8272:	4632      	mov	r2, r6
   d8274:	4629      	mov	r1, r5
   d8276:	f7ff fc95 	bl	d7ba4 <sock_sendto>
}
   d827a:	b00b      	add	sp, #44	; 0x2c
   d827c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d8280:	f04f 30ff 	mov.w	r0, #4294967295
   d8284:	e7f9      	b.n	d827a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d8288 <_ZN3UDPC1Ev>:
UDP::UDP()
   d8288:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d828a:	2500      	movs	r5, #0
   d828c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8290:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d8294:	4b0b      	ldr	r3, [pc, #44]	; (d82c4 <_ZN3UDPC1Ev+0x3c>)
   d8296:	f103 0208 	add.w	r2, r3, #8
   d829a:	336c      	adds	r3, #108	; 0x6c
   d829c:	6103      	str	r3, [r0, #16]
   d829e:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   d82a2:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d82a4:	6002      	str	r2, [r0, #0]
   d82a6:	6143      	str	r3, [r0, #20]
   d82a8:	301c      	adds	r0, #28
   d82aa:	f000 ffbd 	bl	d9228 <_ZN9IPAddressC1Ev>
   d82ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   d82b2:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d82b6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d82b8:	8725      	strh	r5, [r4, #56]	; 0x38
   d82ba:	63e5      	str	r5, [r4, #60]	; 0x3c
   d82bc:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d82c0:	4620      	mov	r0, r4
   d82c2:	bd38      	pop	{r3, r4, r5, pc}
   d82c4:	000deb90 	.word	0x000deb90

000d82c8 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d82c8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d82ca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d82ce:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d82d0:	b123      	cbz	r3, d82dc <_ZN3UDP13releaseBufferEv+0x14>
   d82d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d82d4:	b110      	cbz	r0, d82dc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d82d6:	2101      	movs	r1, #1
   d82d8:	f001 fe67 	bl	d9faa <_ZdlPvj>
    _buffer = NULL;
   d82dc:	2300      	movs	r3, #0
   d82de:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d82e0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d82e4:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d82e6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d82e8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d82ea:	bd10      	pop	{r4, pc}

000d82ec <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d82ec:	b570      	push	{r4, r5, r6, lr}
   d82ee:	4604      	mov	r4, r0
   d82f0:	4616      	mov	r6, r2
   d82f2:	460d      	mov	r5, r1
    releaseBuffer();
   d82f4:	f7ff ffe8 	bl	d82c8 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d82f8:	2300      	movs	r3, #0
    _buffer = buffer;
   d82fa:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d82fc:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d82fe:	b12e      	cbz	r6, d830c <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d8300:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d8302:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8304:	3800      	subs	r0, #0
   d8306:	bf18      	it	ne
   d8308:	2001      	movne	r0, #1
   d830a:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d830c:	2d00      	cmp	r5, #0
   d830e:	d0f8      	beq.n	d8302 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d8310:	4628      	mov	r0, r5
   d8312:	f7fb fec2 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d8316:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d8318:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d831a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d831e:	2800      	cmp	r0, #0
   d8320:	d0ef      	beq.n	d8302 <_ZN3UDP9setBufferEjPh+0x16>
   d8322:	e7ed      	b.n	d8300 <_ZN3UDP9setBufferEjPh+0x14>

000d8324 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8326:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d8328:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d832a:	4605      	mov	r5, r0
   d832c:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d832e:	b91a      	cbnz	r2, d8338 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8330:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8332:	b109      	cbz	r1, d8338 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8334:	f7ff ffda 	bl	d82ec <_ZN3UDP9setBufferEjPh>
   d8338:	3404      	adds	r4, #4
   d833a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d833c:	f105 0620 	add.w	r6, r5, #32
   d8340:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8342:	6823      	ldr	r3, [r4, #0]
   d8344:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d8346:	2300      	movs	r3, #0
}
   d8348:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d834a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d834c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d834e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d8350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8352 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d8352:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d8354:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d8356:	4604      	mov	r4, r0
   d8358:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d835a:	b92a      	cbnz	r2, d8368 <_ZN3UDP11parsePacketEm+0x16>
   d835c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d835e:	b119      	cbz	r1, d8368 <_ZN3UDP11parsePacketEm+0x16>
   d8360:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d8362:	f7ff ffc3 	bl	d82ec <_ZN3UDP9setBufferEjPh>
   d8366:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d8368:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d836a:	2200      	movs	r2, #0
   d836c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d836e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d8370:	b141      	cbz	r1, d8384 <_ZN3UDP11parsePacketEm+0x32>
   d8372:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d8374:	b132      	cbz	r2, d8384 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d8376:	6820      	ldr	r0, [r4, #0]
   d8378:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d837a:	4620      	mov	r0, r4
   d837c:	47a8      	blx	r5
        if (result > 0) {
   d837e:	2800      	cmp	r0, #0
            _total = result;
   d8380:	bfc8      	it	gt
   d8382:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d8384:	6823      	ldr	r3, [r4, #0]
   d8386:	691b      	ldr	r3, [r3, #16]
   d8388:	4620      	mov	r0, r4
}
   d838a:	b003      	add	sp, #12
   d838c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d8390:	4718      	bx	r3

000d8392 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d8392:	b570      	push	{r4, r5, r6, lr}
   d8394:	b086      	sub	sp, #24
   d8396:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d8398:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d839a:	4668      	mov	r0, sp
   d839c:	f000 ff94 	bl	d92c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d83a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83a2:	1d34      	adds	r4, r6, #4
   d83a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83a6:	682b      	ldr	r3, [r5, #0]
   d83a8:	7023      	strb	r3, [r4, #0]
    }
   d83aa:	4630      	mov	r0, r6
   d83ac:	b006      	add	sp, #24
   d83ae:	bd70      	pop	{r4, r5, r6, pc}

000d83b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d83b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d83b2:	7843      	ldrb	r3, [r0, #1]
   d83b4:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d83b6:	b08d      	sub	sp, #52	; 0x34
   d83b8:	4605      	mov	r5, r0
   d83ba:	460c      	mov	r4, r1
   d83bc:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d83be:	d104      	bne.n	d83ca <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d83c0:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   d83c2:	4620      	mov	r0, r4
   d83c4:	f7ff ffe5 	bl	d8392 <_ZN9IPAddressaSIPKhEERS_T_>
   d83c8:	e022      	b.n	d8410 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d83ca:	2b0a      	cmp	r3, #10
   d83cc:	d125      	bne.n	d841a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d83ce:	2211      	movs	r2, #17
   d83d0:	2100      	movs	r1, #0
   d83d2:	a801      	add	r0, sp, #4
   d83d4:	f003 fef8 	bl	dc1c8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d83d8:	68ab      	ldr	r3, [r5, #8]
   d83da:	b303      	cbz	r3, d841e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d83dc:	f105 0308 	add.w	r3, r5, #8
   d83e0:	ae01      	add	r6, sp, #4
   d83e2:	f105 0c18 	add.w	ip, r5, #24
   d83e6:	6818      	ldr	r0, [r3, #0]
   d83e8:	6859      	ldr	r1, [r3, #4]
   d83ea:	4632      	mov	r2, r6
   d83ec:	c203      	stmia	r2!, {r0, r1}
   d83ee:	3308      	adds	r3, #8
   d83f0:	4563      	cmp	r3, ip
   d83f2:	4616      	mov	r6, r2
   d83f4:	d1f7      	bne.n	d83e6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d83f6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d83f8:	a901      	add	r1, sp, #4
   d83fa:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d83fc:	ae07      	add	r6, sp, #28
            a.v = 6;
   d83fe:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8402:	f000 ff1f 	bl	d9244 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8406:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8408:	3404      	adds	r4, #4
   d840a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d840c:	6833      	ldr	r3, [r6, #0]
   d840e:	7023      	strb	r3, [r4, #0]
        if (port) {
   d8410:	b11f      	cbz	r7, d841a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d8412:	8868      	ldrh	r0, [r5, #2]
   d8414:	f7ff fb06 	bl	d7a24 <inet_ntohs>
   d8418:	8038      	strh	r0, [r7, #0]
}
   d841a:	b00d      	add	sp, #52	; 0x34
   d841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d841e:	68eb      	ldr	r3, [r5, #12]
   d8420:	2b00      	cmp	r3, #0
   d8422:	d1db      	bne.n	d83dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d8424:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8428:	692e      	ldr	r6, [r5, #16]
   d842a:	f7ff faf3 	bl	d7a14 <inet_htonl>
   d842e:	4286      	cmp	r6, r0
   d8430:	d1d4      	bne.n	d83dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d8432:	f105 0114 	add.w	r1, r5, #20
   d8436:	e7c4      	b.n	d83c2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d8438 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d8438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d843c:	4617      	mov	r7, r2
   d843e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d8440:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d8442:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8444:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d8446:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8448:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d844a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d844c:	f7ff fa4a 	bl	d78e4 <netdb_getaddrinfo>
   d8450:	1e04      	subs	r4, r0, #0
   d8452:	db20      	blt.n	d8496 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d8454:	9b01      	ldr	r3, [sp, #4]
   d8456:	b32b      	cbz	r3, d84a4 <_ZN3UDP11beginPacketEPKct+0x6c>
   d8458:	695b      	ldr	r3, [r3, #20]
   d845a:	b31b      	cbz	r3, d84a4 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d845c:	a802      	add	r0, sp, #8
   d845e:	f000 fee3 	bl	d9228 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8462:	9b01      	ldr	r3, [sp, #4]
   d8464:	2200      	movs	r2, #0
   d8466:	6958      	ldr	r0, [r3, #20]
   d8468:	a902      	add	r1, sp, #8
   d846a:	f7ff ffa1 	bl	d83b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d846e:	a802      	add	r0, sp, #8
   d8470:	f000 fefa 	bl	d9268 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8474:	b1b0      	cbz	r0, d84a4 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d8476:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8478:	ad03      	add	r5, sp, #12
   d847a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d847e:	4b0b      	ldr	r3, [pc, #44]	; (d84ac <_ZN3UDP11beginPacketEPKct+0x74>)
   d8480:	9308      	str	r3, [sp, #32]
   d8482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8484:	ac09      	add	r4, sp, #36	; 0x24
   d8486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8488:	682b      	ldr	r3, [r5, #0]
   d848a:	7023      	strb	r3, [r4, #0]
   d848c:	463a      	mov	r2, r7
   d848e:	a908      	add	r1, sp, #32
   d8490:	4630      	mov	r0, r6
   d8492:	47c0      	blx	r8
   d8494:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d8496:	9801      	ldr	r0, [sp, #4]
   d8498:	f7ff fa1c 	bl	d78d4 <netdb_freeaddrinfo>
}
   d849c:	4620      	mov	r0, r4
   d849e:	b00e      	add	sp, #56	; 0x38
   d84a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d84a4:	f04f 34ff 	mov.w	r4, #4294967295
   d84a8:	e7f5      	b.n	d8496 <_ZN3UDP11beginPacketEPKct+0x5e>
   d84aa:	bf00      	nop
   d84ac:	000dec94 	.word	0x000dec94

000d84b0 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d84b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d84b4:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d84b8:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d84bc:	b090      	sub	sp, #64	; 0x40
   d84be:	4605      	mov	r5, r0
   d84c0:	460e      	mov	r6, r1
   d84c2:	4690      	mov	r8, r2
   d84c4:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d84c6:	db3c      	blt.n	d8542 <_ZN3UDP13receivePacketEPhjm+0x92>
   d84c8:	2900      	cmp	r1, #0
   d84ca:	d03a      	beq.n	d8542 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d84cc:	f04f 0a1c 	mov.w	sl, #28
   d84d0:	af09      	add	r7, sp, #36	; 0x24
   d84d2:	4652      	mov	r2, sl
   d84d4:	2100      	movs	r1, #0
   d84d6:	4638      	mov	r0, r7
   d84d8:	f003 fe76 	bl	dc1c8 <memset>
        socklen_t slen = sizeof(saddr);
   d84dc:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d84e0:	b1dc      	cbz	r4, d851a <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d84e2:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d84e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d84e8:	fbb4 f3f0 	udiv	r3, r4, r0
   d84ec:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d84f0:	fb00 4313 	mls	r3, r0, r3, r4
   d84f4:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d84f6:	2310      	movs	r3, #16
            struct timeval tv = {};
   d84f8:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d84fa:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d84fc:	9300      	str	r3, [sp, #0]
   d84fe:	f241 0206 	movw	r2, #4102	; 0x1006
   d8502:	446b      	add	r3, sp
   d8504:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8508:	4648      	mov	r0, r9
   d850a:	f7ff fb1b 	bl	d7b44 <sock_setsockopt>
            if (ret) {
   d850e:	4604      	mov	r4, r0
   d8510:	b120      	cbz	r0, d851c <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d8512:	4620      	mov	r0, r4
   d8514:	b010      	add	sp, #64	; 0x40
   d8516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d851a:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d851c:	ab03      	add	r3, sp, #12
   d851e:	e9cd 7300 	strd	r7, r3, [sp]
   d8522:	6968      	ldr	r0, [r5, #20]
   d8524:	4623      	mov	r3, r4
   d8526:	4642      	mov	r2, r8
   d8528:	4631      	mov	r1, r6
   d852a:	f7ff fb2b 	bl	d7b84 <sock_recvfrom>
        if (ret >= 0) {
   d852e:	1e04      	subs	r4, r0, #0
   d8530:	dbef      	blt.n	d8512 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d8532:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d8536:	f105 011c 	add.w	r1, r5, #28
   d853a:	4638      	mov	r0, r7
   d853c:	f7ff ff38 	bl	d83b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d8540:	e7e7      	b.n	d8512 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d8542:	f04f 34ff 	mov.w	r4, #4294967295
   d8546:	e7e4      	b.n	d8512 <_ZN3UDP13receivePacketEPhjm+0x62>

000d8548 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8548:	b510      	push	{r4, lr}
   d854a:	4604      	mov	r4, r0
{
	free(buffer);
   d854c:	6800      	ldr	r0, [r0, #0]
   d854e:	f7ff fc75 	bl	d7e3c <free>
}
   d8552:	4620      	mov	r0, r4
   d8554:	bd10      	pop	{r4, pc}

000d8556 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8556:	b510      	push	{r4, lr}
          _M_dispose();
   d8558:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d855a:	4604      	mov	r4, r0
          _M_dispose();
   d855c:	689b      	ldr	r3, [r3, #8]
   d855e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8560:	68a3      	ldr	r3, [r4, #8]
   d8562:	3b01      	subs	r3, #1
   d8564:	60a3      	str	r3, [r4, #8]
   d8566:	b92b      	cbnz	r3, d8574 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8568:	6823      	ldr	r3, [r4, #0]
   d856a:	4620      	mov	r0, r4
   d856c:	68db      	ldr	r3, [r3, #12]
    }
   d856e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8572:	4718      	bx	r3
    }
   d8574:	bd10      	pop	{r4, pc}

000d8576 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8576:	b510      	push	{r4, lr}
   d8578:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d857a:	6800      	ldr	r0, [r0, #0]
   d857c:	b108      	cbz	r0, d8582 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d857e:	f7ff fa39 	bl	d79f4 <os_mutex_recursive_destroy>
    }
   d8582:	4620      	mov	r0, r4
   d8584:	bd10      	pop	{r4, pc}

000d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8586:	680b      	ldr	r3, [r1, #0]
   d8588:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d858a:	b113      	cbz	r3, d8592 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d858c:	685a      	ldr	r2, [r3, #4]
   d858e:	3201      	adds	r2, #1
   d8590:	605a      	str	r2, [r3, #4]
      }
   d8592:	4770      	bx	lr

000d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8594:	b510      	push	{r4, lr}
   d8596:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8598:	6800      	ldr	r0, [r0, #0]
   d859a:	b128      	cbz	r0, d85a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d859c:	6843      	ldr	r3, [r0, #4]
   d859e:	3b01      	subs	r3, #1
   d85a0:	6043      	str	r3, [r0, #4]
   d85a2:	b90b      	cbnz	r3, d85a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d85a4:	f7ff ffd7 	bl	d8556 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d85a8:	4620      	mov	r0, r4
   d85aa:	bd10      	pop	{r4, pc}

000d85ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d85ac:	b513      	push	{r0, r1, r4, lr}
   d85ae:	460b      	mov	r3, r1
   d85b0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85b2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d85b6:	466c      	mov	r4, sp
   d85b8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d85bc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d85c0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d85c4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d85c8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d85cc:	b002      	add	sp, #8
   d85ce:	bd10      	pop	{r4, pc}

000d85d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d85d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d85d2:	4c06      	ldr	r4, [pc, #24]	; (d85ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d85d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d85d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d85d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d85da:	f7ff fa03 	bl	d79e4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d85de:	4620      	mov	r0, r4
   d85e0:	4a03      	ldr	r2, [pc, #12]	; (d85f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d85e2:	4904      	ldr	r1, [pc, #16]	; (d85f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d85e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d85e8:	f001 bcda 	b.w	d9fa0 <__aeabi_atexit>
   d85ec:	2003e6f8 	.word	0x2003e6f8
   d85f0:	2003e280 	.word	0x2003e280
   d85f4:	000d8577 	.word	0x000d8577

000d85f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d85f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85fa:	4606      	mov	r6, r0
   d85fc:	460d      	mov	r5, r1
  size_t n = 0;
   d85fe:	188f      	adds	r7, r1, r2
   d8600:	2400      	movs	r4, #0
  while (size--) {
   d8602:	42bd      	cmp	r5, r7
   d8604:	d00c      	beq.n	d8620 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8606:	6833      	ldr	r3, [r6, #0]
   d8608:	f815 1b01 	ldrb.w	r1, [r5], #1
   d860c:	689b      	ldr	r3, [r3, #8]
   d860e:	4630      	mov	r0, r6
   d8610:	4798      	blx	r3
     if (chunk>=0)
   d8612:	1e03      	subs	r3, r0, #0
   d8614:	db01      	blt.n	d861a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8616:	441c      	add	r4, r3
  while (size--) {
   d8618:	e7f3      	b.n	d8602 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d861a:	2c00      	cmp	r4, #0
   d861c:	bf08      	it	eq
   d861e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8620:	4620      	mov	r0, r4
   d8622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8624 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8624:	b513      	push	{r0, r1, r4, lr}
   d8626:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d8628:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d862a:	b159      	cbz	r1, d8644 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d862c:	9101      	str	r1, [sp, #4]
   d862e:	f003 fe34 	bl	dc29a <strlen>
   d8632:	6823      	ldr	r3, [r4, #0]
   d8634:	9901      	ldr	r1, [sp, #4]
   d8636:	68db      	ldr	r3, [r3, #12]
   d8638:	4602      	mov	r2, r0
   d863a:	4620      	mov	r0, r4
    }
   d863c:	b002      	add	sp, #8
   d863e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8642:	4718      	bx	r3
    }
   d8644:	b002      	add	sp, #8
   d8646:	bd10      	pop	{r4, pc}

000d8648 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8648:	b508      	push	{r3, lr}
  return write(str);
   d864a:	f7ff ffeb 	bl	d8624 <_ZN5Print5writeEPKc>
}
   d864e:	bd08      	pop	{r3, pc}

000d8650 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8650:	6803      	ldr	r3, [r0, #0]
   d8652:	689b      	ldr	r3, [r3, #8]
   d8654:	4718      	bx	r3

000d8656 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8656:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8658:	210d      	movs	r1, #13
{
   d865a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d865c:	f7ff fff8 	bl	d8650 <_ZN5Print5printEc>
  n += print('\n');
   d8660:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8662:	4604      	mov	r4, r0
  n += print('\n');
   d8664:	4628      	mov	r0, r5
   d8666:	f7ff fff3 	bl	d8650 <_ZN5Print5printEc>
  return n;
}
   d866a:	4420      	add	r0, r4
   d866c:	bd38      	pop	{r3, r4, r5, pc}

000d866e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d866e:	b538      	push	{r3, r4, r5, lr}
   d8670:	4605      	mov	r5, r0
  return write(str);
   d8672:	f7ff ffd7 	bl	d8624 <_ZN5Print5writeEPKc>
   d8676:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8678:	4628      	mov	r0, r5
   d867a:	f7ff ffec 	bl	d8656 <_ZN5Print7printlnEv>
  return n;
}
   d867e:	4420      	add	r0, r4
   d8680:	bd38      	pop	{r3, r4, r5, pc}

000d8682 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8682:	b530      	push	{r4, r5, lr}
   d8684:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8686:	2300      	movs	r3, #0
   d8688:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d868c:	2a01      	cmp	r2, #1
   d868e:	bf98      	it	ls
   d8690:	220a      	movls	r2, #10
   d8692:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8694:	460d      	mov	r5, r1
   d8696:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d869a:	fb01 5312 	mls	r3, r1, r2, r5
   d869e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86a2:	2b09      	cmp	r3, #9
   d86a4:	bf94      	ite	ls
   d86a6:	3330      	addls	r3, #48	; 0x30
   d86a8:	3337      	addhi	r3, #55	; 0x37
   d86aa:	b2db      	uxtb	r3, r3
  } while(n);
   d86ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d86b2:	d9ef      	bls.n	d8694 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d86b4:	4621      	mov	r1, r4
   d86b6:	f7ff ffb5 	bl	d8624 <_ZN5Print5writeEPKc>
}
   d86ba:	b00b      	add	sp, #44	; 0x2c
   d86bc:	bd30      	pop	{r4, r5, pc}
	...

000d86c0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d86c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86c4:	ec55 4b10 	vmov	r4, r5, d0
   d86c8:	4606      	mov	r6, r0
   d86ca:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d86cc:	ee10 2a10 	vmov	r2, s0
   d86d0:	ee10 0a10 	vmov	r0, s0
   d86d4:	462b      	mov	r3, r5
   d86d6:	4629      	mov	r1, r5
   d86d8:	f003 fc82 	bl	dbfe0 <__aeabi_dcmpun>
   d86dc:	b140      	cbz	r0, d86f0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d86de:	4953      	ldr	r1, [pc, #332]	; (d882c <_ZN5Print10printFloatEdh+0x16c>)
   d86e0:	4630      	mov	r0, r6
   d86e2:	f7ff ff9f 	bl	d8624 <_ZN5Print5writeEPKc>
   d86e6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d86e8:	4650      	mov	r0, sl
   d86ea:	b003      	add	sp, #12
   d86ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d86f0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d86f4:	4b4e      	ldr	r3, [pc, #312]	; (d8830 <_ZN5Print10printFloatEdh+0x170>)
   d86f6:	f04f 32ff 	mov.w	r2, #4294967295
   d86fa:	4620      	mov	r0, r4
   d86fc:	4649      	mov	r1, r9
   d86fe:	f003 fc6f 	bl	dbfe0 <__aeabi_dcmpun>
   d8702:	b948      	cbnz	r0, d8718 <_ZN5Print10printFloatEdh+0x58>
   d8704:	4b4a      	ldr	r3, [pc, #296]	; (d8830 <_ZN5Print10printFloatEdh+0x170>)
   d8706:	f04f 32ff 	mov.w	r2, #4294967295
   d870a:	4620      	mov	r0, r4
   d870c:	4649      	mov	r1, r9
   d870e:	f003 fc49 	bl	dbfa4 <__aeabi_dcmple>
   d8712:	b908      	cbnz	r0, d8718 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8714:	4947      	ldr	r1, [pc, #284]	; (d8834 <_ZN5Print10printFloatEdh+0x174>)
   d8716:	e7e3      	b.n	d86e0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8718:	4b47      	ldr	r3, [pc, #284]	; (d8838 <_ZN5Print10printFloatEdh+0x178>)
   d871a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d871e:	4620      	mov	r0, r4
   d8720:	4629      	mov	r1, r5
   d8722:	f003 fc53 	bl	dbfcc <__aeabi_dcmpgt>
   d8726:	b108      	cbz	r0, d872c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8728:	4944      	ldr	r1, [pc, #272]	; (d883c <_ZN5Print10printFloatEdh+0x17c>)
   d872a:	e7d9      	b.n	d86e0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d872c:	4b44      	ldr	r3, [pc, #272]	; (d8840 <_ZN5Print10printFloatEdh+0x180>)
   d872e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8732:	4620      	mov	r0, r4
   d8734:	4629      	mov	r1, r5
   d8736:	f003 fc2b 	bl	dbf90 <__aeabi_dcmplt>
   d873a:	2800      	cmp	r0, #0
   d873c:	d1f4      	bne.n	d8728 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d873e:	2200      	movs	r2, #0
   d8740:	2300      	movs	r3, #0
   d8742:	4620      	mov	r0, r4
   d8744:	4629      	mov	r1, r5
   d8746:	f003 fc23 	bl	dbf90 <__aeabi_dcmplt>
   d874a:	b1d0      	cbz	r0, d8782 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d874c:	212d      	movs	r1, #45	; 0x2d
   d874e:	4630      	mov	r0, r6
   d8750:	f7ff ff7e 	bl	d8650 <_ZN5Print5printEc>
     number = -number;
   d8754:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8758:	4682      	mov	sl, r0
     number = -number;
   d875a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d875c:	4939      	ldr	r1, [pc, #228]	; (d8844 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d875e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d884c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8762:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8766:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8768:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d876c:	fa5f f38b 	uxtb.w	r3, fp
   d8770:	429f      	cmp	r7, r3
   d8772:	d908      	bls.n	d8786 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8774:	4642      	mov	r2, r8
   d8776:	464b      	mov	r3, r9
   d8778:	f003 fac2 	bl	dbd00 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d877c:	f10b 0b01 	add.w	fp, fp, #1
   d8780:	e7f4      	b.n	d876c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d8782:	4682      	mov	sl, r0
   d8784:	e7ea      	b.n	d875c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8786:	4622      	mov	r2, r4
   d8788:	462b      	mov	r3, r5
   d878a:	f002 ffd9 	bl	db740 <__adddf3>
   d878e:	460d      	mov	r5, r1
   d8790:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8792:	f003 fc63 	bl	dc05c <__aeabi_d2uiz>
   d8796:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8798:	f003 f90e 	bl	db9b8 <__aeabi_ui2d>
   d879c:	4602      	mov	r2, r0
   d879e:	460b      	mov	r3, r1
   d87a0:	4620      	mov	r0, r4
   d87a2:	4629      	mov	r1, r5
   d87a4:	f002 ffca 	bl	db73c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d87a8:	220a      	movs	r2, #10
   d87aa:	4604      	mov	r4, r0
   d87ac:	460d      	mov	r5, r1
   d87ae:	4630      	mov	r0, r6
   d87b0:	4641      	mov	r1, r8
   d87b2:	f7ff ff66 	bl	d8682 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d87b6:	4482      	add	sl, r0
  if (digits > 0) {
   d87b8:	b127      	cbz	r7, d87c4 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d87ba:	4923      	ldr	r1, [pc, #140]	; (d8848 <_ZN5Print10printFloatEdh+0x188>)
   d87bc:	4630      	mov	r0, r6
   d87be:	f7ff ff31 	bl	d8624 <_ZN5Print5writeEPKc>
    n += print(".");
   d87c2:	4482      	add	sl, r0
    remainder *= 10.0;
   d87c4:	f8df 9084 	ldr.w	r9, [pc, #132]	; d884c <_ZN5Print10printFloatEdh+0x18c>
   d87c8:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d87cc:	3f01      	subs	r7, #1
   d87ce:	b2ff      	uxtb	r7, r7
   d87d0:	2fff      	cmp	r7, #255	; 0xff
   d87d2:	d089      	beq.n	d86e8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d87d4:	4642      	mov	r2, r8
   d87d6:	464b      	mov	r3, r9
   d87d8:	4620      	mov	r0, r4
   d87da:	4629      	mov	r1, r5
   d87dc:	f003 f966 	bl	dbaac <__aeabi_dmul>
   d87e0:	4604      	mov	r4, r0
   d87e2:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d87e4:	f003 fc12 	bl	dc00c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d87e8:	f1b0 0b00 	subs.w	fp, r0, #0
   d87ec:	da1a      	bge.n	d8824 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d87ee:	212d      	movs	r1, #45	; 0x2d
   d87f0:	4630      	mov	r0, r6
   d87f2:	f7ff ff2d 	bl	d8650 <_ZN5Print5printEc>
            val = -n;
   d87f6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d87fa:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d87fc:	220a      	movs	r2, #10
   d87fe:	4630      	mov	r0, r6
   d8800:	9301      	str	r3, [sp, #4]
   d8802:	f7ff ff3e 	bl	d8682 <_ZN5Print11printNumberEmh>
   d8806:	9b01      	ldr	r3, [sp, #4]
   d8808:	4418      	add	r0, r3
    n += print(toPrint);
   d880a:	4482      	add	sl, r0
    remainder -= toPrint;
   d880c:	4658      	mov	r0, fp
   d880e:	f003 f8e3 	bl	db9d8 <__aeabi_i2d>
   d8812:	4602      	mov	r2, r0
   d8814:	460b      	mov	r3, r1
   d8816:	4620      	mov	r0, r4
   d8818:	4629      	mov	r1, r5
   d881a:	f002 ff8f 	bl	db73c <__aeabi_dsub>
   d881e:	4604      	mov	r4, r0
   d8820:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8822:	e7d3      	b.n	d87cc <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8824:	4659      	mov	r1, fp
        size_t t = 0;
   d8826:	2300      	movs	r3, #0
   d8828:	e7e8      	b.n	d87fc <_ZN5Print10printFloatEdh+0x13c>
   d882a:	bf00      	nop
   d882c:	000dec08 	.word	0x000dec08
   d8830:	7fefffff 	.word	0x7fefffff
   d8834:	000dec0c 	.word	0x000dec0c
   d8838:	41efffff 	.word	0x41efffff
   d883c:	000dec10 	.word	0x000dec10
   d8840:	c1efffff 	.word	0xc1efffff
   d8844:	3fe00000 	.word	0x3fe00000
   d8848:	000de5b4 	.word	0x000de5b4
   d884c:	40240000 	.word	0x40240000

000d8850 <_ZN5Print5printEfi>:
{
   d8850:	b538      	push	{r3, r4, r5, lr}
   d8852:	4604      	mov	r4, r0
   d8854:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8858:	b2cd      	uxtb	r5, r1
   d885a:	f003 f8cf 	bl	db9fc <__aeabi_f2d>
   d885e:	ec41 0b10 	vmov	d0, r0, r1
   d8862:	4629      	mov	r1, r5
   d8864:	4620      	mov	r0, r4
}
   d8866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d886a:	f7ff bf29 	b.w	d86c0 <_ZN5Print10printFloatEdh>

000d886e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d886e:	b510      	push	{r4, lr}
   d8870:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8872:	f7ff f89f 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8876:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8878:	6823      	ldr	r3, [r4, #0]
   d887a:	4620      	mov	r0, r4
   d887c:	695b      	ldr	r3, [r3, #20]
   d887e:	4798      	blx	r3
    if (c >= 0) return c;
   d8880:	2800      	cmp	r0, #0
   d8882:	da08      	bge.n	d8896 <_ZN6Stream9timedReadEv+0x28>
   d8884:	f7ff f896 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d8888:	68e3      	ldr	r3, [r4, #12]
   d888a:	1ac0      	subs	r0, r0, r3
   d888c:	68a3      	ldr	r3, [r4, #8]
   d888e:	4298      	cmp	r0, r3
   d8890:	d3f2      	bcc.n	d8878 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d8892:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8896:	bd10      	pop	{r4, pc}

000d8898 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   d8898:	6081      	str	r1, [r0, #8]
}
   d889a:	4770      	bx	lr

000d889c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d889e:	4606      	mov	r6, r0
   d88a0:	460d      	mov	r5, r1
   d88a2:	4617      	mov	r7, r2
  size_t count = 0;
   d88a4:	2400      	movs	r4, #0
  while (count < length) {
   d88a6:	42bc      	cmp	r4, r7
   d88a8:	d007      	beq.n	d88ba <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d88aa:	4630      	mov	r0, r6
   d88ac:	f7ff ffdf 	bl	d886e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d88b0:	1e03      	subs	r3, r0, #0
   d88b2:	db02      	blt.n	d88ba <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d88b4:	552b      	strb	r3, [r5, r4]
    count++;
   d88b6:	3401      	adds	r4, #1
  while (count < length) {
   d88b8:	e7f5      	b.n	d88a6 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d88ba:	4620      	mov	r0, r4
   d88bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d88c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d88c0:	4b01      	ldr	r3, [pc, #4]	; (d88c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d88c2:	4a02      	ldr	r2, [pc, #8]	; (d88cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d88c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d88c6:	4770      	bx	lr
   d88c8:	2003e6fc 	.word	0x2003e6fc
   d88cc:	000dec14 	.word	0x000dec14

000d88d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d88d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d88d4:	4a15      	ldr	r2, [pc, #84]	; (d892c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d88d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8938 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d88da:	e9d2 3200 	ldrd	r3, r2, [r2]
   d88de:	18c0      	adds	r0, r0, r3
   d88e0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d88e4:	4a12      	ldr	r2, [pc, #72]	; (d8930 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d88e6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d88ea:	18c6      	adds	r6, r0, r3
   d88ec:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d88f0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d88f4:	42bb      	cmp	r3, r7
   d88f6:	bf08      	it	eq
   d88f8:	42b2      	cmpeq	r2, r6
{
   d88fa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d88fc:	d013      	beq.n	d8926 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d88fe:	a903      	add	r1, sp, #12
   d8900:	4668      	mov	r0, sp
   d8902:	e9cd 6700 	strd	r6, r7, [sp]
   d8906:	f7ff fad1 	bl	d7eac <localtime_r>
	calendar_time.tm_year += 1900;
   d890a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d890c:	4d09      	ldr	r5, [pc, #36]	; (d8934 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d890e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8912:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8914:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d891a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d891c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d891e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8922:	6823      	ldr	r3, [r4, #0]
   d8924:	602b      	str	r3, [r5, #0]
    }
}
   d8926:	b00c      	add	sp, #48	; 0x30
   d8928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d892c:	2003e730 	.word	0x2003e730
   d8930:	2003e728 	.word	0x2003e728
   d8934:	2003e704 	.word	0x2003e704
   d8938:	2003e738 	.word	0x2003e738

000d893c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d893c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d893e:	2000      	movs	r0, #0
   d8940:	f7ff fa64 	bl	d7e0c <spark_sync_time_pending>
   d8944:	b128      	cbz	r0, d8952 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8946:	f7ff fa49 	bl	d7ddc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d894a:	f080 0001 	eor.w	r0, r0, #1
   d894e:	b2c0      	uxtb	r0, r0
    }
   d8950:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8952:	2001      	movs	r0, #1
   d8954:	e7fc      	b.n	d8950 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8956 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8956:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8958:	2000      	movs	r0, #0
   d895a:	f7ff f833 	bl	d79c4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d895e:	4604      	mov	r4, r0
   d8960:	b9a0      	cbnz	r0, d898c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8962:	f7ff f98f 	bl	d7c84 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8966:	2801      	cmp	r0, #1
   d8968:	d110      	bne.n	d898c <_ZN9TimeClass7isValidEv+0x36>
   d896a:	4620      	mov	r0, r4
   d896c:	f7ff f9b2 	bl	d7cd4 <system_thread_get_state>
   d8970:	b960      	cbnz	r0, d898c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8972:	f7ff ffe3 	bl	d893c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8976:	b910      	cbnz	r0, d897e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8978:	f7ff fa28 	bl	d7dcc <spark_process>
        while (_while() && !_condition()) {
   d897c:	e7f9      	b.n	d8972 <_ZN9TimeClass7isValidEv+0x1c>
   d897e:	f7ff ffdd 	bl	d893c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8986:	2000      	movs	r0, #0
   d8988:	f7ff b81c 	b.w	d79c4 <hal_rtc_time_is_valid>
}
   d898c:	4620      	mov	r0, r4
   d898e:	bd10      	pop	{r4, pc}

000d8990 <_ZN9TimeClass3nowEv>:
{
   d8990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8992:	f7ff ffe0 	bl	d8956 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8996:	2210      	movs	r2, #16
   d8998:	2100      	movs	r1, #0
   d899a:	4668      	mov	r0, sp
   d899c:	f003 fc14 	bl	dc1c8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d89a0:	2100      	movs	r1, #0
   d89a2:	4668      	mov	r0, sp
   d89a4:	f7ff f816 	bl	d79d4 <hal_rtc_get_time>
}
   d89a8:	9800      	ldr	r0, [sp, #0]
   d89aa:	b005      	add	sp, #20
   d89ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d89b0 <_ZN9TimeClass6minuteEv>:
{
   d89b0:	b508      	push	{r3, lr}
	return minute(now());
   d89b2:	f7ff ffed 	bl	d8990 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d89b6:	17c1      	asrs	r1, r0, #31
   d89b8:	f7ff ff8a 	bl	d88d0 <_ZL22Refresh_UnixTime_Cachex>
}
   d89bc:	4b01      	ldr	r3, [pc, #4]	; (d89c4 <_ZN9TimeClass6minuteEv+0x14>)
   d89be:	6858      	ldr	r0, [r3, #4]
   d89c0:	bd08      	pop	{r3, pc}
   d89c2:	bf00      	nop
   d89c4:	2003e704 	.word	0x2003e704

000d89c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d89c8:	4b02      	ldr	r3, [pc, #8]	; (d89d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d89ca:	681a      	ldr	r2, [r3, #0]
   d89cc:	4b02      	ldr	r3, [pc, #8]	; (d89d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d89ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d89d0:	4770      	bx	lr
   d89d2:	bf00      	nop
   d89d4:	2003e0a4 	.word	0x2003e0a4
   d89d8:	2003e700 	.word	0x2003e700

000d89dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d89dc:	2100      	movs	r1, #0
   d89de:	f7ff b961 	b.w	d7ca4 <system_delay_ms>

000d89e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d89e2:	b510      	push	{r4, lr}
   d89e4:	4604      	mov	r4, r0
   d89e6:	f7fe fcd7 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
   d89ea:	4620      	mov	r0, r4
   d89ec:	bd10      	pop	{r4, pc}
	...

000d89f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d89f0:	4803      	ldr	r0, [pc, #12]	; (d8a00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d89f2:	4a04      	ldr	r2, [pc, #16]	; (d8a04 <_GLOBAL__sub_I_RGB+0x14>)
   d89f4:	4904      	ldr	r1, [pc, #16]	; (d8a08 <_GLOBAL__sub_I_RGB+0x18>)
   d89f6:	2300      	movs	r3, #0
   d89f8:	6083      	str	r3, [r0, #8]
   d89fa:	f001 bad1 	b.w	d9fa0 <__aeabi_atexit>
   d89fe:	bf00      	nop
   d8a00:	2003e740 	.word	0x2003e740
   d8a04:	2003e280 	.word	0x2003e280
   d8a08:	000d89e3 	.word	0x000d89e3

000d8a0c <_ZN14CellularSignalD1Ev>:
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8a0c:	4770      	bx	lr

000d8a0e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8a0e:	7b00      	ldrb	r0, [r0, #12]
   d8a10:	4770      	bx	lr

000d8a12 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8a12:	7b03      	ldrb	r3, [r0, #12]
   d8a14:	b14b      	cbz	r3, d8a2a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d8a16:	6903      	ldr	r3, [r0, #16]
   d8a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8a1c:	d005      	beq.n	d8a2a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8a1e:	6980      	ldr	r0, [r0, #24]
   d8a20:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d8a24:	bf18      	it	ne
   d8a26:	2001      	movne	r0, #1
   d8a28:	4770      	bx	lr
   d8a2a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d8a2c:	4770      	bx	lr

000d8a2e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d8a2e:	6803      	ldr	r3, [r0, #0]
   d8a30:	6a1b      	ldr	r3, [r3, #32]
   d8a32:	4718      	bx	r3

000d8a34 <_ZNK14CellularSignal7printToER5Print>:
{
   d8a34:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   d8a36:	6803      	ldr	r3, [r0, #0]
{
   d8a38:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   d8a3a:	691b      	ldr	r3, [r3, #16]
{
   d8a3c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   d8a3e:	4798      	blx	r3
   d8a40:	2102      	movs	r1, #2
   d8a42:	4628      	mov	r0, r5
   d8a44:	f7ff ff04 	bl	d8850 <_ZN5Print5printEfi>
    n += p.print(',');
   d8a48:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   d8a4a:	4604      	mov	r4, r0
    n += p.print(',');
   d8a4c:	4628      	mov	r0, r5
   d8a4e:	f7ff fdff 	bl	d8650 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   d8a52:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   d8a54:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   d8a56:	699b      	ldr	r3, [r3, #24]
   d8a58:	4630      	mov	r0, r6
   d8a5a:	4798      	blx	r3
   d8a5c:	2102      	movs	r1, #2
   d8a5e:	4628      	mov	r0, r5
   d8a60:	f7ff fef6 	bl	d8850 <_ZN5Print5printEfi>
}
   d8a64:	4420      	add	r0, r4
   d8a66:	bd70      	pop	{r4, r5, r6, pc}

000d8a68 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8a68:	f1a0 0004 	sub.w	r0, r0, #4
   d8a6c:	f7ff bfe2 	b.w	d8a34 <_ZNK14CellularSignal7printToER5Print>

000d8a70 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   d8a70:	b510      	push	{r4, lr}
   d8a72:	2120      	movs	r1, #32
   d8a74:	4604      	mov	r4, r0
   d8a76:	f001 fa98 	bl	d9faa <_ZdlPvj>
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	bd10      	pop	{r4, pc}
	...

000d8a80 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8a80:	7b03      	ldrb	r3, [r0, #12]
   d8a82:	b17b      	cbz	r3, d8aa4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8a84:	6943      	ldr	r3, [r0, #20]
   d8a86:	2b00      	cmp	r3, #0
   d8a88:	db0c      	blt.n	d8aa4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8a8a:	ee07 3a90 	vmov	s15, r3
   d8a8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8aac <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a96:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a9a:	eddf 7a05 	vldr	s15, [pc, #20]	; d8ab0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8a9e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8aa2:	4770      	bx	lr
    return -1.0f;
   d8aa4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8aa8:	4770      	bx	lr
   d8aaa:	bf00      	nop
   d8aac:	477fff00 	.word	0x477fff00
   d8ab0:	42c80000 	.word	0x42c80000

000d8ab4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8ab4:	7b03      	ldrb	r3, [r0, #12]
   d8ab6:	b163      	cbz	r3, d8ad2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8ab8:	6903      	ldr	r3, [r0, #16]
   d8aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8abe:	d008      	beq.n	d8ad2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8ac0:	ee07 3a90 	vmov	s15, r3
   d8ac4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8ad8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8acc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8ad0:	4770      	bx	lr
    return 0.0f;
   d8ad2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8adc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d8ad6:	4770      	bx	lr
   d8ad8:	42c80000 	.word	0x42c80000
   d8adc:	00000000 	.word	0x00000000

000d8ae0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8ae0:	7b03      	ldrb	r3, [r0, #12]
   d8ae2:	b17b      	cbz	r3, d8b04 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8ae4:	69c3      	ldr	r3, [r0, #28]
   d8ae6:	2b00      	cmp	r3, #0
   d8ae8:	db0c      	blt.n	d8b04 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8aea:	ee07 3a90 	vmov	s15, r3
   d8aee:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8b0c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8af6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8afa:	eddf 7a05 	vldr	s15, [pc, #20]	; d8b10 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8afe:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8b02:	4770      	bx	lr
    return -1.0f;
   d8b04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8b08:	4770      	bx	lr
   d8b0a:	bf00      	nop
   d8b0c:	477fff00 	.word	0x477fff00
   d8b10:	42c80000 	.word	0x42c80000

000d8b14 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8b14:	7b03      	ldrb	r3, [r0, #12]
   d8b16:	b163      	cbz	r3, d8b32 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8b18:	6983      	ldr	r3, [r0, #24]
   d8b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8b1e:	d008      	beq.n	d8b32 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8b20:	ee07 3a90 	vmov	s15, r3
   d8b24:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8b38 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8b2c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8b30:	4770      	bx	lr
    return 0.0f;
   d8b32:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8b3c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8b36:	4770      	bx	lr
   d8b38:	42c80000 	.word	0x42c80000
   d8b3c:	00000000 	.word	0x00000000

000d8b40 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8b40:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8b42:	460d      	mov	r5, r1
   d8b44:	f100 0408 	add.w	r4, r0, #8
   d8b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b4c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8b50:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8b54:	2001      	movs	r0, #1
   d8b56:	bd30      	pop	{r4, r5, pc}

000d8b58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8b58:	4b01      	ldr	r3, [pc, #4]	; (d8b60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8b5a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8b5c:	4770      	bx	lr
   d8b5e:	bf00      	nop
   d8b60:	2003e0ac 	.word	0x2003e0ac

000d8b64 <serialEventRun>:
{
   d8b64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8b66:	4b0b      	ldr	r3, [pc, #44]	; (d8b94 <serialEventRun+0x30>)
   d8b68:	b143      	cbz	r3, d8b7c <serialEventRun+0x18>
   d8b6a:	f000 fc1f 	bl	d93ac <_Z16_fetch_usbserialv>
   d8b6e:	6803      	ldr	r3, [r0, #0]
   d8b70:	691b      	ldr	r3, [r3, #16]
   d8b72:	4798      	blx	r3
   d8b74:	2800      	cmp	r0, #0
   d8b76:	dd01      	ble.n	d8b7c <serialEventRun+0x18>
        serialEvent();
   d8b78:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8b7c:	4b06      	ldr	r3, [pc, #24]	; (d8b98 <serialEventRun+0x34>)
   d8b7e:	b143      	cbz	r3, d8b92 <serialEventRun+0x2e>
   d8b80:	f000 fd08 	bl	d9594 <_Z22__fetch_global_Serial1v>
   d8b84:	6803      	ldr	r3, [r0, #0]
   d8b86:	691b      	ldr	r3, [r3, #16]
   d8b88:	4798      	blx	r3
   d8b8a:	2800      	cmp	r0, #0
   d8b8c:	dd01      	ble.n	d8b92 <serialEventRun+0x2e>
        serialEvent1();
   d8b8e:	f3af 8000 	nop.w
}
   d8b92:	bd08      	pop	{r3, pc}
	...

000d8b9c <_post_loop>:
{
   d8b9c:	b508      	push	{r3, lr}
	serialEventRun();
   d8b9e:	f7ff ffe1 	bl	d8b64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8ba2:	f7fe ff07 	bl	d79b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8ba6:	4b01      	ldr	r3, [pc, #4]	; (d8bac <_post_loop+0x10>)
   d8ba8:	6018      	str	r0, [r3, #0]
}
   d8baa:	bd08      	pop	{r3, pc}
   d8bac:	2003e7d4 	.word	0x2003e7d4

000d8bb0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8bb0:	4802      	ldr	r0, [pc, #8]	; (d8bbc <_Z33system_initialize_user_backup_ramv+0xc>)
   d8bb2:	4a03      	ldr	r2, [pc, #12]	; (d8bc0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8bb4:	4903      	ldr	r1, [pc, #12]	; (d8bc4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8bb6:	1a12      	subs	r2, r2, r0
   d8bb8:	f003 baf8 	b.w	dc1ac <memcpy>
   d8bbc:	2003f400 	.word	0x2003f400
   d8bc0:	2003f404 	.word	0x2003f404
   d8bc4:	000df1e0 	.word	0x000df1e0

000d8bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8bc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8bca:	2300      	movs	r3, #0
   d8bcc:	9300      	str	r3, [sp, #0]
   d8bce:	461a      	mov	r2, r3
   d8bd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8bd4:	f7ff f890 	bl	d7cf8 <system_ctrl_set_result>
}
   d8bd8:	b003      	add	sp, #12
   d8bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8be0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8be0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8be2:	8843      	ldrh	r3, [r0, #2]
   d8be4:	2b0a      	cmp	r3, #10
   d8be6:	d008      	beq.n	d8bfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8be8:	2b50      	cmp	r3, #80	; 0x50
   d8bea:	d10b      	bne.n	d8c04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8bec:	4b09      	ldr	r3, [pc, #36]	; (d8c14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8bee:	681b      	ldr	r3, [r3, #0]
   d8bf0:	b14b      	cbz	r3, d8c06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8bf2:	b003      	add	sp, #12
   d8bf4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8bf8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8bfa:	f7ff ffe5 	bl	d8bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8bfe:	b003      	add	sp, #12
   d8c00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8c04:	2300      	movs	r3, #0
   d8c06:	9300      	str	r3, [sp, #0]
   d8c08:	461a      	mov	r2, r3
   d8c0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8c0e:	f7ff f873 	bl	d7cf8 <system_ctrl_set_result>
}
   d8c12:	e7f4      	b.n	d8bfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8c14:	2003e754 	.word	0x2003e754

000d8c18 <module_user_init_hook>:
{
   d8c18:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8c1a:	4c12      	ldr	r4, [pc, #72]	; (d8c64 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8c1c:	4812      	ldr	r0, [pc, #72]	; (d8c68 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8c1e:	4d13      	ldr	r5, [pc, #76]	; (d8c6c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8c20:	2100      	movs	r1, #0
   d8c22:	f7ff f93b 	bl	d7e9c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8c26:	6823      	ldr	r3, [r4, #0]
   d8c28:	42ab      	cmp	r3, r5
   d8c2a:	4b11      	ldr	r3, [pc, #68]	; (d8c70 <module_user_init_hook+0x58>)
   d8c2c:	bf0c      	ite	eq
   d8c2e:	2201      	moveq	r2, #1
   d8c30:	2200      	movne	r2, #0
   d8c32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8c34:	d002      	beq.n	d8c3c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8c36:	f7ff ffbb 	bl	d8bb0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8c3a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8c3c:	f7fe fea2 	bl	d7984 <HAL_RNG_GetRandomNumber>
   d8c40:	4604      	mov	r4, r0
    srand(seed);
   d8c42:	f003 fac9 	bl	dc1d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8c46:	4b0b      	ldr	r3, [pc, #44]	; (d8c74 <module_user_init_hook+0x5c>)
   d8c48:	b113      	cbz	r3, d8c50 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d8c4a:	4620      	mov	r0, r4
   d8c4c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8c50:	2100      	movs	r1, #0
   d8c52:	4808      	ldr	r0, [pc, #32]	; (d8c74 <module_user_init_hook+0x5c>)
   d8c54:	f7ff f8e2 	bl	d7e1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8c5c:	4806      	ldr	r0, [pc, #24]	; (d8c78 <module_user_init_hook+0x60>)
   d8c5e:	2100      	movs	r1, #0
   d8c60:	f7ff b840 	b.w	d7ce4 <system_ctrl_set_app_request_handler>
   d8c64:	2003f400 	.word	0x2003f400
   d8c68:	000d8b59 	.word	0x000d8b59
   d8c6c:	9a271c1e 	.word	0x9a271c1e
   d8c70:	2003e750 	.word	0x2003e750
   d8c74:	00000000 	.word	0x00000000
   d8c78:	000d8be1 	.word	0x000d8be1

000d8c7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8c7c:	4770      	bx	lr

000d8c7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8c7e:	2000      	movs	r0, #0
   d8c80:	4770      	bx	lr

000d8c82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8c82:	b510      	push	{r4, lr}
   d8c84:	2110      	movs	r1, #16
   d8c86:	4604      	mov	r4, r0
   d8c88:	f001 f98f 	bl	d9faa <_ZdlPvj>
   d8c8c:	4620      	mov	r0, r4
   d8c8e:	bd10      	pop	{r4, pc}

000d8c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8c90:	b508      	push	{r3, lr}
      { delete this; }
   d8c92:	f7ff fff6 	bl	d8c82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8c96:	bd08      	pop	{r3, pc}

000d8c98 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8c98:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8ca0:	6002      	str	r2, [r0, #0]
   d8ca2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8ca4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8ca6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8ca8:	680c      	ldr	r4, [r1, #0]
   d8caa:	8085      	strh	r5, [r0, #4]
   d8cac:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cae:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8cb0:	bd30      	pop	{r4, r5, pc}

000d8cb2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8cb2:	b510      	push	{r4, lr}
   d8cb4:	4604      	mov	r4, r0
    free((void*)msg_);
   d8cb6:	6800      	ldr	r0, [r0, #0]
   d8cb8:	f7ff f8c0 	bl	d7e3c <free>
}
   d8cbc:	4620      	mov	r0, r4
   d8cbe:	bd10      	pop	{r4, pc}

000d8cc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8cc0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8cc2:	68c4      	ldr	r4, [r0, #12]
   d8cc4:	b1f4      	cbz	r4, d8d04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8cc6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8cc8:	2b02      	cmp	r3, #2
   d8cca:	d103      	bne.n	d8cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8ccc:	f104 000c 	add.w	r0, r4, #12
   d8cd0:	f7ff ffef 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8cd4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8cd6:	b135      	cbz	r5, d8ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8cd8:	4628      	mov	r0, r5
   d8cda:	f7fe fb5d 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
   d8cde:	2110      	movs	r1, #16
   d8ce0:	4628      	mov	r0, r5
   d8ce2:	f001 f962 	bl	d9faa <_ZdlPvj>
   d8ce6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8ce8:	b135      	cbz	r5, d8cf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8cea:	4628      	mov	r0, r5
   d8cec:	f7fe fb54 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
   d8cf0:	2110      	movs	r1, #16
   d8cf2:	4628      	mov	r0, r5
   d8cf4:	f001 f959 	bl	d9faa <_ZdlPvj>
   d8cf8:	4620      	mov	r0, r4
   d8cfa:	2114      	movs	r1, #20
   d8cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8d00:	f001 b953 	b.w	d9faa <_ZdlPvj>
   d8d04:	bd38      	pop	{r3, r4, r5, pc}

000d8d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d08:	460e      	mov	r6, r1
   d8d0a:	4604      	mov	r4, r0
   d8d0c:	f856 3b04 	ldr.w	r3, [r6], #4
   d8d10:	9300      	str	r3, [sp, #0]
   d8d12:	460d      	mov	r5, r1
   d8d14:	a801      	add	r0, sp, #4
   d8d16:	4631      	mov	r1, r6
   d8d18:	f7ff fc35 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8d1c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8d1e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8d20:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8d22:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8d24:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8d26:	2300      	movs	r3, #0
   d8d28:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8d2a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8d2c:	f7ff fc32 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d30:	4630      	mov	r0, r6
   d8d32:	f7ff fc2f 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8d36:	4628      	mov	r0, r5
   d8d38:	2108      	movs	r1, #8
   d8d3a:	f001 f936 	bl	d9faa <_ZdlPvj>
        return p;
    }
   d8d3e:	4620      	mov	r0, r4
   d8d40:	b002      	add	sp, #8
   d8d42:	bd70      	pop	{r4, r5, r6, pc}

000d8d44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8d44:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8d46:	b510      	push	{r4, lr}
      if (_M_empty())
   d8d48:	b90a      	cbnz	r2, d8d4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8d4a:	f001 f9e4 	bl	da116 <_ZSt25__throw_bad_function_callv>
    }
   d8d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8d52:	68c3      	ldr	r3, [r0, #12]
   d8d54:	4718      	bx	r3

000d8d56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8d56:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8d58:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8d5a:	f100 0110 	add.w	r1, r0, #16
   d8d5e:	f7ff fff1 	bl	d8d44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8d62:	bd08      	pop	{r3, pc}

000d8d64 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8d64:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8d66:	b510      	push	{r4, lr}
      if (_M_empty())
   d8d68:	b90a      	cbnz	r2, d8d6e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8d6a:	f001 f9d4 	bl	da116 <_ZSt25__throw_bad_function_callv>
    }
   d8d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8d72:	68c3      	ldr	r3, [r0, #12]
   d8d74:	4718      	bx	r3

000d8d76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8d76:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8d78:	6800      	ldr	r0, [r0, #0]
   d8d7a:	f100 0110 	add.w	r1, r0, #16
   d8d7e:	f7ff fff1 	bl	d8d64 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8d82:	bd08      	pop	{r3, pc}

000d8d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8d84:	b538      	push	{r3, r4, r5, lr}
   d8d86:	2300      	movs	r3, #0
   d8d88:	4604      	mov	r4, r0
   d8d8a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d8c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8d8e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d90:	f7fb f981 	bl	d4096 <_Znwj>
   d8d94:	b128      	cbz	r0, d8da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8d96:	2301      	movs	r3, #1
   d8d98:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8d9c:	4b02      	ldr	r3, [pc, #8]	; (d8da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8d9e:	6003      	str	r3, [r0, #0]
   d8da0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8da2:	6020      	str	r0, [r4, #0]
	}
   d8da4:	4620      	mov	r0, r4
   d8da6:	bd38      	pop	{r3, r4, r5, pc}
   d8da8:	000dec78 	.word	0x000dec78

000d8dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8dac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8dae:	2300      	movs	r3, #0
   d8db0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8db2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8db4:	4604      	mov	r4, r0
   d8db6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8db8:	b12b      	cbz	r3, d8dc6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8dba:	2202      	movs	r2, #2
   d8dbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8dbe:	68eb      	ldr	r3, [r5, #12]
   d8dc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8dc2:	68ab      	ldr	r3, [r5, #8]
   d8dc4:	60a3      	str	r3, [r4, #8]
    }
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dce:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8dd0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8dd2:	4668      	mov	r0, sp
   d8dd4:	f7ff ff60 	bl	d8c98 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8dd8:	f04f 0302 	mov.w	r3, #2
   d8ddc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8de0:	2a00      	cmp	r2, #0
   d8de2:	d103      	bne.n	d8dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8de4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8de8:	2900      	cmp	r1, #0
   d8dea:	d1f7      	bne.n	d8ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8dec:	d125      	bne.n	d8e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8dee:	f104 050c 	add.w	r5, r4, #12
   d8df2:	4669      	mov	r1, sp
   d8df4:	4628      	mov	r0, r5
   d8df6:	f7ff ff4f 	bl	d8c98 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8dfa:	f3bf 8f5b 	dmb	ish
   d8dfe:	2301      	movs	r3, #1
   d8e00:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8e02:	2000      	movs	r0, #0
   d8e04:	f104 0308 	add.w	r3, r4, #8
   d8e08:	f3bf 8f5b 	dmb	ish
   d8e0c:	e853 6f00 	ldrex	r6, [r3]
   d8e10:	e843 0200 	strex	r2, r0, [r3]
   d8e14:	2a00      	cmp	r2, #0
   d8e16:	d1f9      	bne.n	d8e0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8e18:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8e1c:	b16e      	cbz	r6, d8e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8e1e:	f7fe ff49 	bl	d7cb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8e22:	b178      	cbz	r0, d8e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8e24:	4629      	mov	r1, r5
   d8e26:	4630      	mov	r0, r6
   d8e28:	f7ff ff8c 	bl	d8d44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8e2c:	4630      	mov	r0, r6
   d8e2e:	f7fe fab3 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8e32:	2110      	movs	r1, #16
   d8e34:	4630      	mov	r0, r6
   d8e36:	f001 f8b8 	bl	d9faa <_ZdlPvj>
        p_->setError(std::move(error));
   d8e3a:	4668      	mov	r0, sp
   d8e3c:	f7ff ff39 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
    }
   d8e40:	b009      	add	sp, #36	; 0x24
   d8e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8e44:	4631      	mov	r1, r6
   d8e46:	a802      	add	r0, sp, #8
   d8e48:	f7ff ffb0 	bl	d8dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8e4c:	68e0      	ldr	r0, [r4, #12]
   d8e4e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8e52:	b108      	cbz	r0, d8e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8e54:	f003 fa04 	bl	dc260 <strdup>
        type_(type) {
   d8e58:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8e5a:	2010      	movs	r0, #16
   d8e5c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8e60:	f7fb f919 	bl	d4096 <_Znwj>
   d8e64:	4605      	mov	r5, r0
   d8e66:	b1e8      	cbz	r0, d8ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8e68:	2700      	movs	r7, #0
   d8e6a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e6c:	2018      	movs	r0, #24
   d8e6e:	f7fb f912 	bl	d4096 <_Znwj>
   d8e72:	4604      	mov	r4, r0
   d8e74:	b188      	cbz	r0, d8e9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8e76:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8e78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8e7a:	a802      	add	r0, sp, #8
   d8e7c:	f7ff fb96 	bl	d85ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8e82:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e84:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8e88:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8e8a:	a906      	add	r1, sp, #24
   d8e8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e8e:	60e3      	str	r3, [r4, #12]
   d8e90:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8e94:	9205      	str	r2, [sp, #20]
   d8e96:	f7ff feff 	bl	d8c98 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8e9a:	4b08      	ldr	r3, [pc, #32]	; (d8ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8e9c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8e9e:	4b08      	ldr	r3, [pc, #32]	; (d8ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ea0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8ea2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8ea4:	a806      	add	r0, sp, #24
   d8ea6:	f7ff ff04 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8eaa:	a802      	add	r0, sp, #8
   d8eac:	f7fe fa74 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8eb0:	2200      	movs	r2, #0
   d8eb2:	4629      	mov	r1, r5
   d8eb4:	4803      	ldr	r0, [pc, #12]	; (d8ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8eb6:	f7fe ff05 	bl	d7cc4 <application_thread_invoke>
   d8eba:	e7b7      	b.n	d8e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8ebc:	000d8d57 	.word	0x000d8d57
   d8ec0:	000d8fed 	.word	0x000d8fed
   d8ec4:	000d961d 	.word	0x000d961d

000d8ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ecc:	b08a      	sub	sp, #40	; 0x28
   d8ece:	4605      	mov	r5, r0
   d8ed0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8ed4:	460c      	mov	r4, r1
   d8ed6:	4617      	mov	r7, r2
   d8ed8:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8eda:	f7fe ff7f 	bl	d7ddc <spark_cloud_flag_connected>
   d8ede:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8ee0:	4682      	mov	sl, r0
   d8ee2:	bb38      	cbnz	r0, d8f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8ee4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8ee8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8eea:	a905      	add	r1, sp, #20
   d8eec:	4630      	mov	r0, r6
   d8eee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8ef2:	f7ff fed1 	bl	d8c98 <_ZN8particle5ErrorC1EOS0_>
   d8ef6:	2014      	movs	r0, #20
   d8ef8:	f7fb f8cd 	bl	d4096 <_Znwj>
   d8efc:	4604      	mov	r4, r0
   d8efe:	b148      	cbz	r0, d8f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8f00:	2302      	movs	r3, #2
   d8f02:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8f04:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8f06:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8f0a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8f0c:	4631      	mov	r1, r6
   d8f0e:	300c      	adds	r0, #12
   d8f10:	f7ff fec2 	bl	d8c98 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8f14:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8f16:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8f18:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8f1c:	f7ff ff32 	bl	d8d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8f20:	4630      	mov	r0, r6
   d8f22:	f7ff fec6 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8f26:	a805      	add	r0, sp, #20
   d8f28:	f7ff fec3 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8f2c:	4628      	mov	r0, r5
   d8f2e:	b00a      	add	sp, #40	; 0x28
   d8f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8f34:	230c      	movs	r3, #12
   d8f36:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8f3a:	2014      	movs	r0, #20
   d8f3c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8f40:	9307      	str	r3, [sp, #28]
   d8f42:	f7fb f8a8 	bl	d4096 <_Znwj>
   d8f46:	4601      	mov	r1, r0
   d8f48:	b128      	cbz	r0, d8f56 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8f4a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8f4e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8f52:	f880 a001 	strb.w	sl, [r0, #1]
   d8f56:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8f58:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8f5a:	f7ff ff13 	bl	d8d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8f5e:	4b22      	ldr	r3, [pc, #136]	; (d8fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8f60:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8f62:	2008      	movs	r0, #8
   d8f64:	f7fb f897 	bl	d4096 <_Znwj>
   d8f68:	4682      	mov	sl, r0
   d8f6a:	b128      	cbz	r0, d8f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f6c:	9b03      	ldr	r3, [sp, #12]
   d8f6e:	f840 3b04 	str.w	r3, [r0], #4
   d8f72:	a904      	add	r1, sp, #16
   d8f74:	f7ff fb07 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8f78:	9600      	str	r6, [sp, #0]
   d8f7a:	fa5f f389 	uxtb.w	r3, r9
   d8f7e:	4642      	mov	r2, r8
   d8f80:	4639      	mov	r1, r7
   d8f82:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8f84:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8f88:	f7fe ff38 	bl	d7dfc <spark_send_event>
   d8f8c:	b9b8      	cbnz	r0, d8fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8f8e:	9b03      	ldr	r3, [sp, #12]
   d8f90:	785b      	ldrb	r3, [r3, #1]
   d8f92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8f96:	b993      	cbnz	r3, d8fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8f98:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8f9c:	a905      	add	r1, sp, #20
   d8f9e:	a803      	add	r0, sp, #12
   d8fa0:	9205      	str	r2, [sp, #20]
   d8fa2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8fa6:	f7ff ff11 	bl	d8dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8faa:	a805      	add	r0, sp, #20
   d8fac:	f7ff fe81 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8fb0:	a805      	add	r0, sp, #20
   d8fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8fb4:	f7ff fea7 	bl	d8d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8fb8:	a806      	add	r0, sp, #24
   d8fba:	f7ff faeb 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8fbe:	9b03      	ldr	r3, [sp, #12]
   d8fc0:	9305      	str	r3, [sp, #20]
   d8fc2:	a904      	add	r1, sp, #16
   d8fc4:	a806      	add	r0, sp, #24
   d8fc6:	f7ff fade 	bl	d8586 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8fca:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8fcc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8fce:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8fd0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8fd2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8fd4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8fd6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8fd8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8fda:	f7ff fadb 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8fde:	a804      	add	r0, sp, #16
   d8fe0:	f7ff fad8 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8fe4:	e7a2      	b.n	d8f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8fe6:	bf00      	nop
   d8fe8:	000d90b1 	.word	0x000d90b1

000d8fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8fec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ff0:	4605      	mov	r5, r0
	  switch (__op)
   d8ff2:	d007      	beq.n	d9004 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8ff4:	2a03      	cmp	r2, #3
   d8ff6:	d018      	beq.n	d902a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8ff8:	2a01      	cmp	r2, #1
   d8ffa:	d101      	bne.n	d9000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8ffc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8ffe:	6003      	str	r3, [r0, #0]
	}
   d9000:	2000      	movs	r0, #0
   d9002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9004:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d9006:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9008:	f7fb f845 	bl	d4096 <_Znwj>
   d900c:	4604      	mov	r4, r0
   d900e:	b150      	cbz	r0, d9026 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9010:	4631      	mov	r1, r6
   d9012:	f7ff fecb 	bl	d8dac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9016:	6930      	ldr	r0, [r6, #16]
   d9018:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d901c:	b108      	cbz	r0, d9022 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d901e:	f003 f91f 	bl	dc260 <strdup>
        type_(type) {
   d9022:	6120      	str	r0, [r4, #16]
   d9024:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d9026:	602c      	str	r4, [r5, #0]
	}
   d9028:	e7ea      	b.n	d9000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d902a:	6804      	ldr	r4, [r0, #0]
   d902c:	2c00      	cmp	r4, #0
   d902e:	d0e7      	beq.n	d9000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9030:	f104 0010 	add.w	r0, r4, #16
   d9034:	f7ff fe3d 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d9038:	4620      	mov	r0, r4
   d903a:	f7fe f9ad 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d903e:	2118      	movs	r1, #24
   d9040:	4620      	mov	r0, r4
   d9042:	f000 ffb2 	bl	d9faa <_ZdlPvj>
   d9046:	e7db      	b.n	d9000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d9048 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d9048:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d904a:	2300      	movs	r3, #0
   d904c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d904e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9050:	4604      	mov	r4, r0
   d9052:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9054:	b12b      	cbz	r3, d9062 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9056:	2202      	movs	r2, #2
   d9058:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d905a:	68eb      	ldr	r3, [r5, #12]
   d905c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d905e:	68ab      	ldr	r3, [r5, #8]
   d9060:	60a3      	str	r3, [r4, #8]
    }
   d9062:	4620      	mov	r0, r4
   d9064:	bd38      	pop	{r3, r4, r5, pc}

000d9066 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d9066:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9068:	b570      	push	{r4, r5, r6, lr}
   d906a:	4604      	mov	r4, r0
	  switch (__op)
   d906c:	d007      	beq.n	d907e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d906e:	2a03      	cmp	r2, #3
   d9070:	d012      	beq.n	d9098 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d9072:	2a01      	cmp	r2, #1
   d9074:	d101      	bne.n	d907a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9076:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9078:	6003      	str	r3, [r0, #0]
	}
   d907a:	2000      	movs	r0, #0
   d907c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d907e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9080:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9082:	f7fb f808 	bl	d4096 <_Znwj>
   d9086:	4605      	mov	r5, r0
   d9088:	b120      	cbz	r0, d9094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d908a:	4631      	mov	r1, r6
   d908c:	f7ff ffdc 	bl	d9048 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9090:	7c33      	ldrb	r3, [r6, #16]
   d9092:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9094:	6025      	str	r5, [r4, #0]
	}
   d9096:	e7f0      	b.n	d907a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9098:	6804      	ldr	r4, [r0, #0]
   d909a:	2c00      	cmp	r4, #0
   d909c:	d0ed      	beq.n	d907a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d909e:	4620      	mov	r0, r4
   d90a0:	f7fe f97a 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d90a4:	2114      	movs	r1, #20
   d90a6:	4620      	mov	r0, r4
   d90a8:	f000 ff7f 	bl	d9faa <_ZdlPvj>
   d90ac:	e7e5      	b.n	d907a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d90b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d90b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90b2:	b089      	sub	sp, #36	; 0x24
   d90b4:	4604      	mov	r4, r0
   d90b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d90b8:	a801      	add	r0, sp, #4
   d90ba:	4611      	mov	r1, r2
   d90bc:	f7ff fe23 	bl	d8d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d90c0:	b1a4      	cbz	r4, d90ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d90c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d90c4:	b11d      	cbz	r5, d90ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d90c6:	4628      	mov	r0, r5
   d90c8:	f003 f8ca 	bl	dc260 <strdup>
   d90cc:	4605      	mov	r5, r0
   d90ce:	a801      	add	r0, sp, #4
   d90d0:	a903      	add	r1, sp, #12
        type_(type) {
   d90d2:	9503      	str	r5, [sp, #12]
   d90d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d90d8:	f7ff fe78 	bl	d8dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d90dc:	a803      	add	r0, sp, #12
   d90de:	f7ff fde8 	bl	d8cb2 <_ZN8particle5ErrorD1Ev>
   d90e2:	a802      	add	r0, sp, #8
   d90e4:	f7ff fa56 	bl	d8594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d90e8:	b009      	add	sp, #36	; 0x24
   d90ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d90ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d90ee:	2301      	movs	r3, #1
   d90f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d90f4:	2a00      	cmp	r2, #0
   d90f6:	d103      	bne.n	d9100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d90f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d90fc:	2900      	cmp	r1, #0
   d90fe:	d1f7      	bne.n	d90f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9100:	d1ef      	bne.n	d90e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9102:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9104:	f3bf 8f5b 	dmb	ish
   d9108:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d910a:	1d2b      	adds	r3, r5, #4
   d910c:	f3bf 8f5b 	dmb	ish
   d9110:	e853 6f00 	ldrex	r6, [r3]
   d9114:	e843 4200 	strex	r2, r4, [r3]
   d9118:	2a00      	cmp	r2, #0
   d911a:	d1f9      	bne.n	d9110 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d911c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9120:	2e00      	cmp	r6, #0
   d9122:	d0de      	beq.n	d90e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9124:	4620      	mov	r0, r4
   d9126:	f7fe fdc5 	bl	d7cb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d912a:	4607      	mov	r7, r0
   d912c:	b160      	cbz	r0, d9148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d912e:	f105 010c 	add.w	r1, r5, #12
   d9132:	4630      	mov	r0, r6
   d9134:	f7ff fe16 	bl	d8d64 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9138:	4630      	mov	r0, r6
   d913a:	f7fe f92d 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d913e:	2110      	movs	r1, #16
   d9140:	4630      	mov	r0, r6
   d9142:	f000 ff32 	bl	d9faa <_ZdlPvj>
   d9146:	e7cc      	b.n	d90e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9148:	4631      	mov	r1, r6
   d914a:	a803      	add	r0, sp, #12
   d914c:	f7ff ff7c 	bl	d9048 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9150:	7b2b      	ldrb	r3, [r5, #12]
   d9152:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9156:	2010      	movs	r0, #16
   d9158:	f7fa ff9d 	bl	d4096 <_Znwj>
   d915c:	4605      	mov	r5, r0
   d915e:	b1d0      	cbz	r0, d9196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9160:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9162:	2014      	movs	r0, #20
   d9164:	f7fa ff97 	bl	d4096 <_Znwj>
   d9168:	4604      	mov	r4, r0
   d916a:	b178      	cbz	r0, d918c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d916c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d916e:	4601      	mov	r1, r0
   d9170:	a803      	add	r0, sp, #12
   d9172:	f7ff fa1b 	bl	d85ac <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9176:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9178:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d917a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d917c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d917e:	9205      	str	r2, [sp, #20]
   d9180:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9182:	60e3      	str	r3, [r4, #12]
   d9184:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d9188:	9206      	str	r2, [sp, #24]
   d918a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d918c:	4b06      	ldr	r3, [pc, #24]	; (d91a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d918e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9190:	4b06      	ldr	r3, [pc, #24]	; (d91ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9192:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9194:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d9196:	a803      	add	r0, sp, #12
   d9198:	f7fe f8fe 	bl	d7398 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d919c:	2200      	movs	r2, #0
   d919e:	4629      	mov	r1, r5
   d91a0:	4803      	ldr	r0, [pc, #12]	; (d91b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d91a2:	f7fe fd8f 	bl	d7cc4 <application_thread_invoke>
   d91a6:	e7c7      	b.n	d9138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d91a8:	000d8d77 	.word	0x000d8d77
   d91ac:	000d9067 	.word	0x000d9067
   d91b0:	000d961d 	.word	0x000d961d

000d91b4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d91b4:	4770      	bx	lr

000d91b6 <_ZN9IPAddressD0Ev>:
   d91b6:	b510      	push	{r4, lr}
   d91b8:	2118      	movs	r1, #24
   d91ba:	4604      	mov	r4, r0
   d91bc:	f000 fef5 	bl	d9faa <_ZdlPvj>
   d91c0:	4620      	mov	r0, r4
   d91c2:	bd10      	pop	{r4, pc}

000d91c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d91c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d91c6:	7d03      	ldrb	r3, [r0, #20]
   d91c8:	2b06      	cmp	r3, #6
{
   d91ca:	b08d      	sub	sp, #52	; 0x34
   d91cc:	460e      	mov	r6, r1
   d91ce:	f100 0704 	add.w	r7, r0, #4
   d91d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d91d6:	d012      	beq.n	d91fe <_ZNK9IPAddress7printToER5Print+0x3a>
   d91d8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d91dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d91e0:	220a      	movs	r2, #10
   d91e2:	4630      	mov	r0, r6
   d91e4:	f7ff fa4d 	bl	d8682 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d91e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d91ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d91ec:	d019      	beq.n	d9222 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d91ee:	2c00      	cmp	r4, #0
   d91f0:	d0f4      	beq.n	d91dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d91f2:	212e      	movs	r1, #46	; 0x2e
   d91f4:	4630      	mov	r0, r6
   d91f6:	f7ff fa2b 	bl	d8650 <_ZN5Print5printEc>
   d91fa:	4404      	add	r4, r0
   d91fc:	e7ee      	b.n	d91dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d91fe:	232f      	movs	r3, #47	; 0x2f
   d9200:	466a      	mov	r2, sp
   d9202:	4639      	mov	r1, r7
   d9204:	200a      	movs	r0, #10
		buf[0] = 0;
   d9206:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d920a:	f7fe fbfb 	bl	d7a04 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d920e:	4668      	mov	r0, sp
   d9210:	f003 f843 	bl	dc29a <strlen>
   d9214:	6833      	ldr	r3, [r6, #0]
   d9216:	4602      	mov	r2, r0
   d9218:	68db      	ldr	r3, [r3, #12]
   d921a:	4669      	mov	r1, sp
   d921c:	4630      	mov	r0, r6
   d921e:	4798      	blx	r3
   d9220:	4604      	mov	r4, r0
    }
    return n;
}
   d9222:	4620      	mov	r0, r4
   d9224:	b00d      	add	sp, #52	; 0x34
   d9226:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9228 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9228:	b510      	push	{r4, lr}
   d922a:	4b05      	ldr	r3, [pc, #20]	; (d9240 <_ZN9IPAddressC1Ev+0x18>)
   d922c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d922e:	2211      	movs	r2, #17
   d9230:	f840 3b04 	str.w	r3, [r0], #4
   d9234:	2100      	movs	r1, #0
   d9236:	f002 ffc7 	bl	dc1c8 <memset>
}
   d923a:	4620      	mov	r0, r4
   d923c:	bd10      	pop	{r4, pc}
   d923e:	bf00      	nop
   d9240:	000dec94 	.word	0x000dec94

000d9244 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9244:	4603      	mov	r3, r0
   d9246:	4a07      	ldr	r2, [pc, #28]	; (d9264 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9248:	b510      	push	{r4, lr}
   d924a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d924e:	f101 0210 	add.w	r2, r1, #16
   d9252:	f851 4b04 	ldr.w	r4, [r1], #4
   d9256:	f843 4b04 	str.w	r4, [r3], #4
   d925a:	4291      	cmp	r1, r2
   d925c:	d1f9      	bne.n	d9252 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d925e:	780a      	ldrb	r2, [r1, #0]
   d9260:	701a      	strb	r2, [r3, #0]
}
   d9262:	bd10      	pop	{r4, pc}
   d9264:	000dec94 	.word	0x000dec94

000d9268 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d9268:	7d03      	ldrb	r3, [r0, #20]
   d926a:	2b04      	cmp	r3, #4
   d926c:	d104      	bne.n	d9278 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d926e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9270:	3800      	subs	r0, #0
   d9272:	bf18      	it	ne
   d9274:	2001      	movne	r0, #1
   d9276:	4770      	bx	lr
    } else if (version() == 6) {
   d9278:	2b06      	cmp	r3, #6
   d927a:	d107      	bne.n	d928c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d927c:	6843      	ldr	r3, [r0, #4]
   d927e:	b93b      	cbnz	r3, d9290 <_ZNK9IPAddresscvbEv+0x28>
   d9280:	6883      	ldr	r3, [r0, #8]
   d9282:	b92b      	cbnz	r3, d9290 <_ZNK9IPAddresscvbEv+0x28>
   d9284:	68c3      	ldr	r3, [r0, #12]
   d9286:	b91b      	cbnz	r3, d9290 <_ZNK9IPAddresscvbEv+0x28>
   d9288:	6900      	ldr	r0, [r0, #16]
   d928a:	e7f1      	b.n	d9270 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d928c:	2000      	movs	r0, #0
   d928e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9290:	2001      	movs	r0, #1
}
   d9292:	4770      	bx	lr

000d9294 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9294:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9296:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d929a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d929e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d92a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d92a6:	2304      	movs	r3, #4
   d92a8:	6041      	str	r1, [r0, #4]
   d92aa:	7503      	strb	r3, [r0, #20]
}
   d92ac:	bd10      	pop	{r4, pc}
	...

000d92b0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d92b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d92b2:	4d04      	ldr	r5, [pc, #16]	; (d92c4 <_ZN9IPAddressC1Ehhhh+0x14>)
   d92b4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d92b6:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d92ba:	9500      	str	r5, [sp, #0]
   d92bc:	f7ff ffea 	bl	d9294 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d92c0:	b003      	add	sp, #12
   d92c2:	bd30      	pop	{r4, r5, pc}
   d92c4:	000dec94 	.word	0x000dec94

000d92c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d92c8:	b513      	push	{r0, r1, r4, lr}
   d92ca:	4b05      	ldr	r3, [pc, #20]	; (d92e0 <_ZN9IPAddressC1EPKh+0x18>)
   d92cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d92ce:	78cb      	ldrb	r3, [r1, #3]
   d92d0:	9300      	str	r3, [sp, #0]
   d92d2:	788b      	ldrb	r3, [r1, #2]
   d92d4:	784a      	ldrb	r2, [r1, #1]
   d92d6:	7809      	ldrb	r1, [r1, #0]
   d92d8:	f7ff ffdc 	bl	d9294 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d92dc:	b002      	add	sp, #8
   d92de:	bd10      	pop	{r4, pc}
   d92e0:	000dec94 	.word	0x000dec94

000d92e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d92e4:	7441      	strb	r1, [r0, #17]
}
   d92e6:	4770      	bx	lr

000d92e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d92e8:	4770      	bx	lr

000d92ea <_ZN9USBSerial4readEv>:
{
   d92ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d92ec:	2100      	movs	r1, #0
   d92ee:	7c00      	ldrb	r0, [r0, #16]
   d92f0:	f7fe fca0 	bl	d7c34 <HAL_USB_USART_Receive_Data>
}
   d92f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d92f8:	bd08      	pop	{r3, pc}

000d92fa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d92fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d92fc:	2101      	movs	r1, #1
   d92fe:	7c00      	ldrb	r0, [r0, #16]
   d9300:	f7fe fc98 	bl	d7c34 <HAL_USB_USART_Receive_Data>
}
   d9304:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9308:	bd08      	pop	{r3, pc}

000d930a <_ZN9USBSerial17availableForWriteEv>:
{
   d930a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d930c:	7c00      	ldrb	r0, [r0, #16]
   d930e:	f7fe fc89 	bl	d7c24 <HAL_USB_USART_Available_Data_For_Write>
}
   d9312:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9316:	bd08      	pop	{r3, pc}

000d9318 <_ZN9USBSerial9availableEv>:
{
   d9318:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d931a:	7c00      	ldrb	r0, [r0, #16]
   d931c:	f7fe fc7a 	bl	d7c14 <HAL_USB_USART_Available_Data>
}
   d9320:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9324:	bd08      	pop	{r3, pc}

000d9326 <_ZN9USBSerial5writeEh>:
{
   d9326:	b513      	push	{r0, r1, r4, lr}
   d9328:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d932a:	7c00      	ldrb	r0, [r0, #16]
{
   d932c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d932e:	f7fe fc79 	bl	d7c24 <HAL_USB_USART_Available_Data_For_Write>
   d9332:	2800      	cmp	r0, #0
   d9334:	9901      	ldr	r1, [sp, #4]
   d9336:	dc01      	bgt.n	d933c <_ZN9USBSerial5writeEh+0x16>
   d9338:	7c60      	ldrb	r0, [r4, #17]
   d933a:	b120      	cbz	r0, d9346 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d933c:	7c20      	ldrb	r0, [r4, #16]
   d933e:	f7fe fc81 	bl	d7c44 <HAL_USB_USART_Send_Data>
   d9342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9346:	b002      	add	sp, #8
   d9348:	bd10      	pop	{r4, pc}

000d934a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d934a:	7c00      	ldrb	r0, [r0, #16]
   d934c:	f7fe bc82 	b.w	d7c54 <HAL_USB_USART_Flush_Data>

000d9350 <_ZN9USBSerialD0Ev>:
   d9350:	b510      	push	{r4, lr}
   d9352:	2114      	movs	r1, #20
   d9354:	4604      	mov	r4, r0
   d9356:	f000 fe28 	bl	d9faa <_ZdlPvj>
   d935a:	4620      	mov	r0, r4
   d935c:	bd10      	pop	{r4, pc}
	...

000d9360 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9360:	b510      	push	{r4, lr}
   d9362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9366:	4604      	mov	r4, r0
   d9368:	4608      	mov	r0, r1
   d936a:	2100      	movs	r1, #0
   d936c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9370:	4b04      	ldr	r3, [pc, #16]	; (d9384 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9372:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9374:	2301      	movs	r3, #1
  _serial = serial;
   d9376:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9378:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d937a:	4611      	mov	r1, r2
   d937c:	f7fe fc3a 	bl	d7bf4 <HAL_USB_USART_Init>
}
   d9380:	4620      	mov	r0, r4
   d9382:	bd10      	pop	{r4, pc}
   d9384:	000deca8 	.word	0x000deca8

000d9388 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9388:	7c00      	ldrb	r0, [r0, #16]
   d938a:	2200      	movs	r2, #0
   d938c:	f7fe bc3a 	b.w	d7c04 <HAL_USB_USART_Begin>

000d9390 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d9390:	7c00      	ldrb	r0, [r0, #16]
   d9392:	f7fe bc67 	b.w	d7c64 <HAL_USB_USART_Is_Enabled>

000d9396 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d9396:	f7ff bffb 	b.w	d9390 <_ZN9USBSerial9isEnabledEv>

000d939a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d939a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d939c:	2214      	movs	r2, #20
{
   d939e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d93a0:	2100      	movs	r1, #0
   d93a2:	f002 ff11 	bl	dc1c8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d93a6:	4620      	mov	r0, r4
   d93a8:	bd10      	pop	{r4, pc}
	...

000d93ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d93ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d93ae:	4c10      	ldr	r4, [pc, #64]	; (d93f0 <_Z16_fetch_usbserialv+0x44>)
{
   d93b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d93b2:	a803      	add	r0, sp, #12
   d93b4:	f7ff fff1 	bl	d939a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d93b8:	7821      	ldrb	r1, [r4, #0]
   d93ba:	f3bf 8f5b 	dmb	ish
   d93be:	f011 0101 	ands.w	r1, r1, #1
   d93c2:	d111      	bne.n	d93e8 <_Z16_fetch_usbserialv+0x3c>
   d93c4:	4620      	mov	r0, r4
   d93c6:	9101      	str	r1, [sp, #4]
   d93c8:	f7fa fe6d 	bl	d40a6 <__cxa_guard_acquire>
   d93cc:	9901      	ldr	r1, [sp, #4]
   d93ce:	b158      	cbz	r0, d93e8 <_Z16_fetch_usbserialv+0x3c>
   d93d0:	aa03      	add	r2, sp, #12
   d93d2:	4808      	ldr	r0, [pc, #32]	; (d93f4 <_Z16_fetch_usbserialv+0x48>)
   d93d4:	f7ff ffc4 	bl	d9360 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d93d8:	4620      	mov	r0, r4
   d93da:	f7fa fe69 	bl	d40b0 <__cxa_guard_release>
   d93de:	4a06      	ldr	r2, [pc, #24]	; (d93f8 <_Z16_fetch_usbserialv+0x4c>)
   d93e0:	4906      	ldr	r1, [pc, #24]	; (d93fc <_Z16_fetch_usbserialv+0x50>)
   d93e2:	4804      	ldr	r0, [pc, #16]	; (d93f4 <_Z16_fetch_usbserialv+0x48>)
   d93e4:	f000 fddc 	bl	d9fa0 <__aeabi_atexit>
	return _usbserial;
}
   d93e8:	4802      	ldr	r0, [pc, #8]	; (d93f4 <_Z16_fetch_usbserialv+0x48>)
   d93ea:	b008      	add	sp, #32
   d93ec:	bd10      	pop	{r4, pc}
   d93ee:	bf00      	nop
   d93f0:	2003e758 	.word	0x2003e758
   d93f4:	2003e75c 	.word	0x2003e75c
   d93f8:	2003e280 	.word	0x2003e280
   d93fc:	000d92e9 	.word	0x000d92e9

000d9400 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9400:	2200      	movs	r2, #0
   d9402:	6840      	ldr	r0, [r0, #4]
   d9404:	4611      	mov	r1, r2
   d9406:	f7fe bc99 	b.w	d7d3c <network_ready>

000d940a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d940a:	2200      	movs	r2, #0
   d940c:	6840      	ldr	r0, [r0, #4]
   d940e:	4611      	mov	r1, r2
   d9410:	f7fe bcb4 	b.w	d7d7c <network_listening>

000d9414 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9414:	2200      	movs	r2, #0
   d9416:	6840      	ldr	r0, [r0, #4]
   d9418:	4611      	mov	r1, r2
   d941a:	f7fe bcbf 	b.w	d7d9c <network_get_listen_timeout>

000d941e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d941e:	6840      	ldr	r0, [r0, #4]
   d9420:	2200      	movs	r2, #0
   d9422:	f7fe bcb3 	b.w	d7d8c <network_set_listen_timeout>

000d9426 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9426:	6840      	ldr	r0, [r0, #4]
   d9428:	2200      	movs	r2, #0
   d942a:	f081 0101 	eor.w	r1, r1, #1
   d942e:	f7fe bc9d 	b.w	d7d6c <network_listen>

000d9432 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9432:	2300      	movs	r3, #0
   d9434:	6840      	ldr	r0, [r0, #4]
   d9436:	461a      	mov	r2, r3
   d9438:	4619      	mov	r1, r3
   d943a:	f7fe bc8f 	b.w	d7d5c <network_off>

000d943e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d943e:	2300      	movs	r3, #0
   d9440:	6840      	ldr	r0, [r0, #4]
   d9442:	461a      	mov	r2, r3
   d9444:	4619      	mov	r1, r3
   d9446:	f7fe bc81 	b.w	d7d4c <network_on>

000d944a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d944a:	2200      	movs	r2, #0
   d944c:	6840      	ldr	r0, [r0, #4]
   d944e:	4611      	mov	r1, r2
   d9450:	f7fe bc64 	b.w	d7d1c <network_connecting>

000d9454 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9454:	6840      	ldr	r0, [r0, #4]
   d9456:	2200      	movs	r2, #0
   d9458:	2102      	movs	r1, #2
   d945a:	f7fe bc67 	b.w	d7d2c <network_disconnect>

000d945e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d945e:	2300      	movs	r3, #0
   d9460:	6840      	ldr	r0, [r0, #4]
   d9462:	461a      	mov	r2, r3
   d9464:	f7fe bc52 	b.w	d7d0c <network_connect>

000d9468 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d9468:	b570      	push	{r4, r5, r6, lr}
    CellularSignal() {}
   d946a:	4b13      	ldr	r3, [pc, #76]	; (d94b8 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   d946c:	6003      	str	r3, [r0, #0]
   d946e:	2518      	movs	r5, #24
   d9470:	3330      	adds	r3, #48	; 0x30
   d9472:	b086      	sub	sp, #24
   d9474:	460e      	mov	r6, r1
   d9476:	6043      	str	r3, [r0, #4]
   d9478:	462a      	mov	r2, r5
   d947a:	2100      	movs	r1, #0
   d947c:	4604      	mov	r4, r0
   d947e:	3008      	adds	r0, #8
   d9480:	f002 fea2 	bl	dc1c8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d9484:	2200      	movs	r2, #0
   d9486:	6870      	ldr	r0, [r6, #4]
   d9488:	4611      	mov	r1, r2
   d948a:	f7fe fc57 	bl	d7d3c <network_ready>
   d948e:	b178      	cbz	r0, d94b0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {0};
   d9490:	2100      	movs	r1, #0
   d9492:	462a      	mov	r2, r5
   d9494:	4668      	mov	r0, sp
   d9496:	f002 fe97 	bl	dc1c8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   d949a:	4669      	mov	r1, sp
   d949c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   d949e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   d94a2:	f7fe fb9f 	bl	d7be4 <cellular_signal>
   d94a6:	b918      	cbnz	r0, d94b0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   d94a8:	4669      	mov	r1, sp
   d94aa:	4620      	mov	r0, r4
   d94ac:	f7ff fb48 	bl	d8b40 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d94b0:	4620      	mov	r0, r4
   d94b2:	b006      	add	sp, #24
   d94b4:	bd70      	pop	{r4, r5, r6, pc}
   d94b6:	bf00      	nop
   d94b8:	000dec3c 	.word	0x000dec3c

000d94bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d94bc:	4b08      	ldr	r3, [pc, #32]	; (d94e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d94be:	b510      	push	{r4, lr}
   d94c0:	2428      	movs	r4, #40	; 0x28
   d94c2:	4622      	mov	r2, r4
   d94c4:	4618      	mov	r0, r3
   d94c6:	2100      	movs	r1, #0
   d94c8:	f002 fe7e 	bl	dc1c8 <memset>
   d94cc:	4b05      	ldr	r3, [pc, #20]	; (d94e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d94ce:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d94d0:	f04f 32ff 	mov.w	r2, #4294967295
   d94d4:	6042      	str	r2, [r0, #4]
   d94d6:	2204      	movs	r2, #4
   d94d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d94da:	4a03      	ldr	r2, [pc, #12]	; (d94e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d94dc:	601a      	str	r2, [r3, #0]
   d94de:	bd10      	pop	{r4, pc}
   d94e0:	2003e778 	.word	0x2003e778
   d94e4:	2003e770 	.word	0x2003e770
   d94e8:	000decd8 	.word	0x000decd8

000d94ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d94ec:	4770      	bx	lr

000d94ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d94ee:	7441      	strb	r1, [r0, #17]
}
   d94f0:	4770      	bx	lr

000d94f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d94f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d94f4:	7c00      	ldrb	r0, [r0, #16]
   d94f6:	f7fe fadd 	bl	d7ab4 <hal_usart_available_data_for_write>
}
   d94fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d94fe:	bd08      	pop	{r3, pc}

000d9500 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9500:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9502:	7c00      	ldrb	r0, [r0, #16]
   d9504:	f7fe faae 	bl	d7a64 <hal_usart_available>
}
   d9508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d950c:	bd08      	pop	{r3, pc}

000d950e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d950e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9510:	7c00      	ldrb	r0, [r0, #16]
   d9512:	f7fe fab7 	bl	d7a84 <hal_usart_peek>
}
   d9516:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d951a:	bd08      	pop	{r3, pc}

000d951c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d951c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d951e:	7c00      	ldrb	r0, [r0, #16]
   d9520:	f7fe faa8 	bl	d7a74 <hal_usart_read>
}
   d9524:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9528:	bd08      	pop	{r3, pc}

000d952a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d952a:	7c00      	ldrb	r0, [r0, #16]
   d952c:	f7fe bab2 	b.w	d7a94 <hal_usart_flush>

000d9530 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9530:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9532:	7c45      	ldrb	r5, [r0, #17]
{
   d9534:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9536:	b12d      	cbz	r5, d9544 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9538:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d953a:	b003      	add	sp, #12
   d953c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9540:	f7fe ba88 	b.w	d7a54 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9544:	7c00      	ldrb	r0, [r0, #16]
   d9546:	9101      	str	r1, [sp, #4]
   d9548:	f7fe fab4 	bl	d7ab4 <hal_usart_available_data_for_write>
   d954c:	2800      	cmp	r0, #0
   d954e:	9901      	ldr	r1, [sp, #4]
   d9550:	dcf2      	bgt.n	d9538 <_ZN11USARTSerial5writeEh+0x8>
}
   d9552:	4628      	mov	r0, r5
   d9554:	b003      	add	sp, #12
   d9556:	bd30      	pop	{r4, r5, pc}

000d9558 <_ZN11USARTSerialD0Ev>:
   d9558:	b510      	push	{r4, lr}
   d955a:	2114      	movs	r1, #20
   d955c:	4604      	mov	r4, r0
   d955e:	f000 fd24 	bl	d9faa <_ZdlPvj>
   d9562:	4620      	mov	r0, r4
   d9564:	bd10      	pop	{r4, pc}
	...

000d9568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9568:	b510      	push	{r4, lr}
   d956a:	f04f 0c00 	mov.w	ip, #0
   d956e:	4604      	mov	r4, r0
   d9570:	4608      	mov	r0, r1
   d9572:	4611      	mov	r1, r2
   d9574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9578:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d957c:	4a04      	ldr	r2, [pc, #16]	; (d9590 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d957e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9580:	2201      	movs	r2, #1
  _serial = serial;
   d9582:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9584:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9586:	461a      	mov	r2, r3
   d9588:	f7fe fa5c 	bl	d7a44 <hal_usart_init>
}
   d958c:	4620      	mov	r0, r4
   d958e:	bd10      	pop	{r4, pc}
   d9590:	000ded14 	.word	0x000ded14

000d9594 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d9596:	4c1b      	ldr	r4, [pc, #108]	; (d9604 <_Z22__fetch_global_Serial1v+0x70>)
   d9598:	6826      	ldr	r6, [r4, #0]
   d959a:	b94e      	cbnz	r6, d95b0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d959c:	2084      	movs	r0, #132	; 0x84
   d959e:	f7fa fd7a 	bl	d4096 <_Znwj>
   d95a2:	4605      	mov	r5, r0
   d95a4:	b118      	cbz	r0, d95ae <_Z22__fetch_global_Serial1v+0x1a>
   d95a6:	2284      	movs	r2, #132	; 0x84
   d95a8:	4631      	mov	r1, r6
   d95aa:	f002 fe0d 	bl	dc1c8 <memset>
   d95ae:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d95b0:	4d15      	ldr	r5, [pc, #84]	; (d9608 <_Z22__fetch_global_Serial1v+0x74>)
   d95b2:	682f      	ldr	r7, [r5, #0]
   d95b4:	b94f      	cbnz	r7, d95ca <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d95b6:	2084      	movs	r0, #132	; 0x84
   d95b8:	f7fa fd6d 	bl	d4096 <_Znwj>
   d95bc:	4606      	mov	r6, r0
   d95be:	b118      	cbz	r0, d95c8 <_Z22__fetch_global_Serial1v+0x34>
   d95c0:	2284      	movs	r2, #132	; 0x84
   d95c2:	4639      	mov	r1, r7
   d95c4:	f002 fe00 	bl	dc1c8 <memset>
   d95c8:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d95ca:	4e10      	ldr	r6, [pc, #64]	; (d960c <_Z22__fetch_global_Serial1v+0x78>)
   d95cc:	7831      	ldrb	r1, [r6, #0]
   d95ce:	f3bf 8f5b 	dmb	ish
   d95d2:	f011 0101 	ands.w	r1, r1, #1
   d95d6:	d112      	bne.n	d95fe <_Z22__fetch_global_Serial1v+0x6a>
   d95d8:	4630      	mov	r0, r6
   d95da:	9101      	str	r1, [sp, #4]
   d95dc:	f7fa fd63 	bl	d40a6 <__cxa_guard_acquire>
   d95e0:	9901      	ldr	r1, [sp, #4]
   d95e2:	b160      	cbz	r0, d95fe <_Z22__fetch_global_Serial1v+0x6a>
   d95e4:	6822      	ldr	r2, [r4, #0]
   d95e6:	682b      	ldr	r3, [r5, #0]
   d95e8:	4809      	ldr	r0, [pc, #36]	; (d9610 <_Z22__fetch_global_Serial1v+0x7c>)
   d95ea:	f7ff ffbd 	bl	d9568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d95ee:	4630      	mov	r0, r6
   d95f0:	f7fa fd5e 	bl	d40b0 <__cxa_guard_release>
   d95f4:	4a07      	ldr	r2, [pc, #28]	; (d9614 <_Z22__fetch_global_Serial1v+0x80>)
   d95f6:	4908      	ldr	r1, [pc, #32]	; (d9618 <_Z22__fetch_global_Serial1v+0x84>)
   d95f8:	4805      	ldr	r0, [pc, #20]	; (d9610 <_Z22__fetch_global_Serial1v+0x7c>)
   d95fa:	f000 fcd1 	bl	d9fa0 <__aeabi_atexit>
#endif
	return serial1;
}
   d95fe:	4804      	ldr	r0, [pc, #16]	; (d9610 <_Z22__fetch_global_Serial1v+0x7c>)
   d9600:	b003      	add	sp, #12
   d9602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9604:	2003e7a4 	.word	0x2003e7a4
   d9608:	2003e7a8 	.word	0x2003e7a8
   d960c:	2003e7a0 	.word	0x2003e7a0
   d9610:	2003e7ac 	.word	0x2003e7ac
   d9614:	2003e280 	.word	0x2003e280
   d9618:	000d94ed 	.word	0x000d94ed

000d961c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d961c:	b510      	push	{r4, lr}
      if (_M_empty())
   d961e:	6883      	ldr	r3, [r0, #8]
   d9620:	4604      	mov	r4, r0
   d9622:	b90b      	cbnz	r3, d9628 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9624:	f000 fd77 	bl	da116 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9628:	68c3      	ldr	r3, [r0, #12]
   d962a:	4798      	blx	r3
      if (_M_manager)
   d962c:	68a3      	ldr	r3, [r4, #8]
   d962e:	b11b      	cbz	r3, d9638 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9630:	2203      	movs	r2, #3
   d9632:	4621      	mov	r1, r4
   d9634:	4620      	mov	r0, r4
   d9636:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9638:	4620      	mov	r0, r4
   d963a:	2110      	movs	r1, #16
}
   d963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d9640:	f000 bcb3 	b.w	d9faa <_ZdlPvj>

000d9644 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9644:	4770      	bx	lr

000d9646 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9648:	4606      	mov	r6, r0
   d964a:	4615      	mov	r5, r2
   d964c:	460c      	mov	r4, r1
   d964e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9650:	42bc      	cmp	r4, r7
   d9652:	d006      	beq.n	d9662 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9654:	6833      	ldr	r3, [r6, #0]
   d9656:	f814 1b01 	ldrb.w	r1, [r4], #1
   d965a:	689b      	ldr	r3, [r3, #8]
   d965c:	4630      	mov	r0, r6
   d965e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9660:	e7f6      	b.n	d9650 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9662:	4628      	mov	r0, r5
   d9664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9666 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9666:	7c00      	ldrb	r0, [r0, #16]
   d9668:	2200      	movs	r2, #0
   d966a:	f7fe ba2b 	b.w	d7ac4 <hal_i2c_write>

000d966e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d966e:	7c00      	ldrb	r0, [r0, #16]
   d9670:	2100      	movs	r1, #0
   d9672:	f7fe ba2f 	b.w	d7ad4 <hal_i2c_available>

000d9676 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9676:	7c00      	ldrb	r0, [r0, #16]
   d9678:	2100      	movs	r1, #0
   d967a:	f7fe ba33 	b.w	d7ae4 <hal_i2c_read>

000d967e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d967e:	7c00      	ldrb	r0, [r0, #16]
   d9680:	2100      	movs	r1, #0
   d9682:	f7fe ba37 	b.w	d7af4 <hal_i2c_peek>

000d9686 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9686:	7c00      	ldrb	r0, [r0, #16]
   d9688:	2100      	movs	r1, #0
   d968a:	f7fe ba3b 	b.w	d7b04 <hal_i2c_flush>

000d968e <_ZN7TwoWireD0Ev>:
   d968e:	b510      	push	{r4, lr}
   d9690:	2114      	movs	r1, #20
   d9692:	4604      	mov	r4, r0
   d9694:	f000 fc89 	bl	d9faa <_ZdlPvj>
   d9698:	4620      	mov	r0, r4
   d969a:	bd10      	pop	{r4, pc}

000d969c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d969c:	b510      	push	{r4, lr}
   d969e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d96a2:	4604      	mov	r4, r0
   d96a4:	4608      	mov	r0, r1
   d96a6:	2100      	movs	r1, #0
   d96a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d96ac:	4b03      	ldr	r3, [pc, #12]	; (d96bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d96ae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d96b0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d96b2:	4611      	mov	r1, r2
   d96b4:	f7fe fa36 	bl	d7b24 <hal_i2c_init>
}
   d96b8:	4620      	mov	r0, r4
   d96ba:	bd10      	pop	{r4, pc}
   d96bc:	000ded44 	.word	0x000ded44

000d96c0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d96c0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d96c2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d96c4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d96c8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d96ca:	2201      	movs	r2, #1
   d96cc:	f04f 33ff 	mov.w	r3, #4294967295
   d96d0:	f10d 0107 	add.w	r1, sp, #7
   d96d4:	47a0      	blx	r4
}
   d96d6:	b002      	add	sp, #8
   d96d8:	bd10      	pop	{r4, pc}

000d96da <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d96da:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d96dc:	6803      	ldr	r3, [r0, #0]
   d96de:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d96e0:	f04f 33ff 	mov.w	r3, #4294967295
   d96e4:	46a4      	mov	ip, r4
}
   d96e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d96ea:	4760      	bx	ip

000d96ec <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d96ec:	b513      	push	{r0, r1, r4, lr}
   d96ee:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d96f0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d96f2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d96f6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d96f8:	f10d 0107 	add.w	r1, sp, #7
   d96fc:	2201      	movs	r2, #1
   d96fe:	47a0      	blx	r4
}
   d9700:	b002      	add	sp, #8
   d9702:	bd10      	pop	{r4, pc}

000d9704 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d9704:	4770      	bx	lr

000d9706 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d9706:	b538      	push	{r3, r4, r5, lr}
   d9708:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d970a:	681a      	ldr	r2, [r3, #0]
   d970c:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d970e:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d9710:	da10      	bge.n	d9734 <_ZN9TCPClient9connectedEv+0x2e>
   d9712:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9716:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d971a:	429a      	cmp	r2, r3
   d971c:	d10a      	bne.n	d9734 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d971e:	6803      	ldr	r3, [r0, #0]
   d9720:	691b      	ldr	r3, [r3, #16]
   d9722:	4798      	blx	r3
        if (!rv) {
   d9724:	4604      	mov	r4, r0
   d9726:	b928      	cbnz	r0, d9734 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d9728:	682b      	ldr	r3, [r5, #0]
   d972a:	4628      	mov	r0, r5
   d972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d972e:	4798      	blx	r3
        rv = available();
   d9730:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d9732:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d9734:	2001      	movs	r0, #1
   d9736:	e7fc      	b.n	d9732 <_ZN9TCPClient9connectedEv+0x2c>

000d9738 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d9738:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d973a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d973c:	43c0      	mvns	r0, r0
   d973e:	0fc0      	lsrs	r0, r0, #31
   d9740:	4770      	bx	lr

000d9742 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9742:	4770      	bx	lr

000d9744 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9744:	4b06      	ldr	r3, [pc, #24]	; (d9760 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9746:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9748:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d974a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d974e:	d005      	beq.n	d975c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d9750:	4608      	mov	r0, r1
   d9752:	f000 fce3 	bl	da11c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d9756:	2800      	cmp	r0, #0
	return nullptr;
   d9758:	bf08      	it	eq
   d975a:	2400      	moveq	r4, #0
      }
   d975c:	4620      	mov	r0, r4
   d975e:	bd10      	pop	{r4, pc}
   d9760:	000dec00 	.word	0x000dec00

000d9764 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9764:	b510      	push	{r4, lr}
   d9766:	21ac      	movs	r1, #172	; 0xac
   d9768:	4604      	mov	r4, r0
   d976a:	f000 fc1e 	bl	d9faa <_ZdlPvj>
   d976e:	4620      	mov	r0, r4
   d9770:	bd10      	pop	{r4, pc}

000d9772 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d9772:	f7fa bc94 	b.w	d409e <_ZdlPv>

000d9776 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d9776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d977a:	f04f 0800 	mov.w	r8, #0
   d977e:	b086      	sub	sp, #24
   d9780:	461d      	mov	r5, r3
   d9782:	f8c0 8004 	str.w	r8, [r0, #4]
   d9786:	4604      	mov	r4, r0
   d9788:	460e      	mov	r6, r1
   d978a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d978c:	4641      	mov	r1, r8
   d978e:	2210      	movs	r2, #16
   d9790:	a802      	add	r0, sp, #8
   d9792:	f002 fd19 	bl	dc1c8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d9796:	1c6b      	adds	r3, r5, #1
   d9798:	d009      	beq.n	d97ae <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d979a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d979e:	fbb5 f3f0 	udiv	r3, r5, r0
   d97a2:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d97a6:	fb00 5313 	mls	r3, r0, r3, r5
   d97aa:	4358      	muls	r0, r3
   d97ac:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d97ae:	6960      	ldr	r0, [r4, #20]
   d97b0:	2310      	movs	r3, #16
   d97b2:	9300      	str	r3, [sp, #0]
   d97b4:	6800      	ldr	r0, [r0, #0]
   d97b6:	ab02      	add	r3, sp, #8
   d97b8:	f241 0205 	movw	r2, #4101	; 0x1005
   d97bc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d97c0:	f7fe f9c0 	bl	d7b44 <sock_setsockopt>
    if (ret < 0) {
   d97c4:	2800      	cmp	r0, #0
   d97c6:	da07      	bge.n	d97d8 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d97c8:	f7fe fb60 	bl	d7e8c <__errno>
   d97cc:	6803      	ldr	r3, [r0, #0]
   d97ce:	6063      	str	r3, [r4, #4]
        return 0;
   d97d0:	2000      	movs	r0, #0
}
   d97d2:	b006      	add	sp, #24
   d97d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d97d8:	6960      	ldr	r0, [r4, #20]
   d97da:	2300      	movs	r3, #0
   d97dc:	6800      	ldr	r0, [r0, #0]
   d97de:	463a      	mov	r2, r7
   d97e0:	4631      	mov	r1, r6
   d97e2:	f7fe f9d7 	bl	d7b94 <sock_send>
    if (ret < 0) {
   d97e6:	1e03      	subs	r3, r0, #0
   d97e8:	dbee      	blt.n	d97c8 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d97ea:	4618      	mov	r0, r3
   d97ec:	e7f1      	b.n	d97d2 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d97f0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d97f0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d97f2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d97f4:	4b05      	ldr	r3, [pc, #20]	; (d980c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d97f6:	4604      	mov	r4, r0
   d97f8:	358c      	adds	r5, #140	; 0x8c
   d97fa:	f844 3b04 	str.w	r3, [r4], #4
   d97fe:	4606      	mov	r6, r0
   d9800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9804:	682b      	ldr	r3, [r5, #0]
   d9806:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d9808:	4630      	mov	r0, r6
   d980a:	bd70      	pop	{r4, r5, r6, pc}
   d980c:	000dec94 	.word	0x000dec94

000d9810 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d9810:	b510      	push	{r4, lr}
   d9812:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d9814:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9818:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d981c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d981e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d9820:	d005      	beq.n	d982e <_ZN9TCPClient4peekEv+0x1e>
   d9822:	6963      	ldr	r3, [r4, #20]
   d9824:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d9828:	4413      	add	r3, r2
   d982a:	7918      	ldrb	r0, [r3, #4]
}
   d982c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d982e:	6803      	ldr	r3, [r0, #0]
   d9830:	691b      	ldr	r3, [r3, #16]
   d9832:	4798      	blx	r3
   d9834:	2800      	cmp	r0, #0
   d9836:	d1f4      	bne.n	d9822 <_ZN9TCPClient4peekEv+0x12>
   d9838:	f04f 30ff 	mov.w	r0, #4294967295
   d983c:	e7f6      	b.n	d982c <_ZN9TCPClient4peekEv+0x1c>

000d983e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d983e:	b510      	push	{r4, lr}
   d9840:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9842:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9846:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d984a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d984c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d984e:	d008      	beq.n	d9862 <_ZN9TCPClient4readEv+0x24>
   d9850:	6963      	ldr	r3, [r4, #20]
   d9852:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d9856:	1c51      	adds	r1, r2, #1
   d9858:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d985c:	4413      	add	r3, r2
   d985e:	7918      	ldrb	r0, [r3, #4]
}
   d9860:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d9862:	6803      	ldr	r3, [r0, #0]
   d9864:	691b      	ldr	r3, [r3, #16]
   d9866:	4798      	blx	r3
   d9868:	2800      	cmp	r0, #0
   d986a:	d1f1      	bne.n	d9850 <_ZN9TCPClient4readEv+0x12>
   d986c:	f04f 30ff 	mov.w	r0, #4294967295
   d9870:	e7f6      	b.n	d9860 <_ZN9TCPClient4readEv+0x22>

000d9872 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d9872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9874:	6943      	ldr	r3, [r0, #20]
   d9876:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d9878:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d987c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9880:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d9882:	4605      	mov	r5, r0
   d9884:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d9886:	d016      	beq.n	d98b6 <_ZN9TCPClient4readEPhj+0x44>
   d9888:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d988a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d988e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d9892:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d9894:	42bc      	cmp	r4, r7
   d9896:	bf28      	it	cs
   d9898:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d989a:	3304      	adds	r3, #4
   d989c:	4622      	mov	r2, r4
   d989e:	4419      	add	r1, r3
   d98a0:	4630      	mov	r0, r6
   d98a2:	f002 fc83 	bl	dc1ac <memcpy>
   d98a6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d98a8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d98ac:	4423      	add	r3, r4
   d98ae:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d98b2:	4620      	mov	r0, r4
   d98b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d98b6:	6803      	ldr	r3, [r0, #0]
   d98b8:	691b      	ldr	r3, [r3, #16]
   d98ba:	4798      	blx	r3
   d98bc:	2800      	cmp	r0, #0
   d98be:	d1e3      	bne.n	d9888 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d98c0:	f04f 34ff 	mov.w	r4, #4294967295
   d98c4:	e7f5      	b.n	d98b2 <_ZN9TCPClient4readEPhj+0x40>

000d98c6 <_ZN9TCPClient12flush_bufferEv>:
   d98c6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d98c8:	2300      	movs	r3, #0
   d98ca:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d98ce:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d98d0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d98d4:	4770      	bx	lr

000d98d6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d98d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d98da:	461f      	mov	r7, r3
    stop();
   d98dc:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d98de:	460c      	mov	r4, r1
    stop();
   d98e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d98e2:	b08a      	sub	sp, #40	; 0x28
   d98e4:	4605      	mov	r5, r0
   d98e6:	4616      	mov	r6, r2
    stop();
   d98e8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d98ea:	7d23      	ldrb	r3, [r4, #20]
   d98ec:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d98f0:	2b04      	cmp	r3, #4
   d98f2:	bf0c      	ite	eq
   d98f4:	2002      	moveq	r0, #2
   d98f6:	200a      	movne	r0, #10
   d98f8:	2206      	movs	r2, #6
   d98fa:	2101      	movs	r1, #1
   d98fc:	f7fe f95a 	bl	d7bb4 <sock_socket>
   d9900:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d9904:	696b      	ldr	r3, [r5, #20]
   d9906:	681b      	ldr	r3, [r3, #0]
   d9908:	2b00      	cmp	r3, #0
   d990a:	da08      	bge.n	d991e <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d990c:	682b      	ldr	r3, [r5, #0]
   d990e:	4628      	mov	r0, r5
   d9910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9912:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d9914:	4798      	blx	r3
}
   d9916:	4620      	mov	r0, r4
   d9918:	b00a      	add	sp, #40	; 0x28
   d991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d991e:	4628      	mov	r0, r5
   d9920:	f7ff ffd1 	bl	d98c6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d9924:	b1b7      	cbz	r7, d9954 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d9926:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9928:	a903      	add	r1, sp, #12
   d992a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d992c:	9303      	str	r3, [sp, #12]
   d992e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9932:	f7fe f81f 	bl	d7974 <if_index_to_name>
   d9936:	2800      	cmp	r0, #0
   d9938:	d1e8      	bne.n	d990c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d993a:	6968      	ldr	r0, [r5, #20]
   d993c:	2306      	movs	r3, #6
   d993e:	9300      	str	r3, [sp, #0]
   d9940:	6800      	ldr	r0, [r0, #0]
   d9942:	ab03      	add	r3, sp, #12
   d9944:	f241 020b 	movw	r2, #4107	; 0x100b
   d9948:	f640 71ff 	movw	r1, #4095	; 0xfff
   d994c:	f7fe f8fa 	bl	d7b44 <sock_setsockopt>
   d9950:	2800      	cmp	r0, #0
   d9952:	d1db      	bne.n	d990c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d9954:	221c      	movs	r2, #28
   d9956:	2100      	movs	r1, #0
   d9958:	a803      	add	r0, sp, #12
   d995a:	f002 fc35 	bl	dc1c8 <memset>
    if (ip.version() == 4) {
   d995e:	7d23      	ldrb	r3, [r4, #20]
   d9960:	2b04      	cmp	r3, #4
   d9962:	d11d      	bne.n	d99a0 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d9964:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d9968:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d996a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d996e:	f7fe f861 	bl	d7a34 <inet_htons>
   d9972:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d9976:	6860      	ldr	r0, [r4, #4]
   d9978:	f7fe f84c 	bl	d7a14 <inet_htonl>
   d997c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d997e:	696b      	ldr	r3, [r5, #20]
   d9980:	221c      	movs	r2, #28
   d9982:	6818      	ldr	r0, [r3, #0]
   d9984:	a903      	add	r1, sp, #12
   d9986:	f7fe f8ed 	bl	d7b64 <sock_connect>
   d998a:	2800      	cmp	r0, #0
   d998c:	d1be      	bne.n	d990c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d998e:	3404      	adds	r4, #4
   d9990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9992:	696d      	ldr	r5, [r5, #20]
   d9994:	358c      	adds	r5, #140	; 0x8c
   d9996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9998:	6823      	ldr	r3, [r4, #0]
   d999a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d999c:	2401      	movs	r4, #1
   d999e:	e7ba      	b.n	d9916 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d99a0:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d99a4:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d99a6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d99aa:	f7fe f843 	bl	d7a34 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d99ae:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d99b0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d99b4:	1d23      	adds	r3, r4, #4
   d99b6:	f104 0714 	add.w	r7, r4, #20
   d99ba:	6818      	ldr	r0, [r3, #0]
   d99bc:	6859      	ldr	r1, [r3, #4]
   d99be:	4632      	mov	r2, r6
   d99c0:	c203      	stmia	r2!, {r0, r1}
   d99c2:	3308      	adds	r3, #8
   d99c4:	42bb      	cmp	r3, r7
   d99c6:	4616      	mov	r6, r2
   d99c8:	d1f7      	bne.n	d99ba <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d99ca:	e7d8      	b.n	d997e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d99cc <_ZN9TCPClient9availableEv>:
{
   d99cc:	b530      	push	{r4, r5, lr}
   d99ce:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d99d0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d99d4:	b08b      	sub	sp, #44	; 0x2c
   d99d6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d99d8:	b12b      	cbz	r3, d99e6 <_ZN9TCPClient9availableEv+0x1a>
   d99da:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d99de:	429a      	cmp	r2, r3
   d99e0:	d101      	bne.n	d99e6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d99e2:	f7ff ff70 	bl	d98c6 <_ZN9TCPClient12flush_bufferEv>
   d99e6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d99e8:	6808      	ldr	r0, [r1, #0]
   d99ea:	2800      	cmp	r0, #0
   d99ec:	db18      	blt.n	d9a20 <_ZN9TCPClient9availableEv+0x54>
   d99ee:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d99f2:	2d7f      	cmp	r5, #127	; 0x7f
   d99f4:	d814      	bhi.n	d9a20 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d99f6:	3104      	adds	r1, #4
   d99f8:	2308      	movs	r3, #8
   d99fa:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d99fe:	4429      	add	r1, r5
   d9a00:	f7fe f8b8 	bl	d7b74 <sock_recv>
            if (ret > 0) {
   d9a04:	2800      	cmp	r0, #0
   d9a06:	dd13      	ble.n	d9a30 <_ZN9TCPClient9availableEv+0x64>
   d9a08:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d9a0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9a0e:	b90a      	cbnz	r2, d9a14 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d9a10:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d9a14:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d9a16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9a1a:	4410      	add	r0, r2
   d9a1c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d9a20:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d9a22:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d9a26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d9a2a:	1ac0      	subs	r0, r0, r3
   d9a2c:	b00b      	add	sp, #44	; 0x2c
   d9a2e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d9a30:	f7fe fa2c 	bl	d7e8c <__errno>
   d9a34:	6803      	ldr	r3, [r0, #0]
   d9a36:	2b0b      	cmp	r3, #11
   d9a38:	d0f2      	beq.n	d9a20 <_ZN9TCPClient9availableEv+0x54>
   d9a3a:	f7fe fa27 	bl	d7e8c <__errno>
   d9a3e:	6803      	ldr	r3, [r0, #0]
   d9a40:	2b0b      	cmp	r3, #11
   d9a42:	d0ed      	beq.n	d9a20 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d9a44:	2320      	movs	r3, #32
   d9a46:	2500      	movs	r5, #0
   d9a48:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d9a4c:	f7fe fa1e 	bl	d7e8c <__errno>
   d9a50:	6803      	ldr	r3, [r0, #0]
   d9a52:	9301      	str	r3, [sp, #4]
   d9a54:	4b08      	ldr	r3, [pc, #32]	; (d9a78 <_ZN9TCPClient9availableEv+0xac>)
   d9a56:	4909      	ldr	r1, [pc, #36]	; (d9a7c <_ZN9TCPClient9availableEv+0xb0>)
   d9a58:	9300      	str	r3, [sp, #0]
   d9a5a:	aa02      	add	r2, sp, #8
   d9a5c:	462b      	mov	r3, r5
   d9a5e:	2032      	movs	r0, #50	; 0x32
   d9a60:	f7fe f908 	bl	d7c74 <log_message>
                    sock_close(d_->sock);
   d9a64:	6963      	ldr	r3, [r4, #20]
   d9a66:	6818      	ldr	r0, [r3, #0]
   d9a68:	f7fe f874 	bl	d7b54 <sock_close>
   d9a6c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9a6e:	f04f 32ff 	mov.w	r2, #4294967295
   d9a72:	601a      	str	r2, [r3, #0]
   d9a74:	e7d4      	b.n	d9a20 <_ZN9TCPClient9availableEv+0x54>
   d9a76:	bf00      	nop
   d9a78:	000ded6b 	.word	0x000ded6b
   d9a7c:	000ded64 	.word	0x000ded64

000d9a80 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d9a80:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9a82:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d9a84:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d9a86:	6818      	ldr	r0, [r3, #0]
   d9a88:	2800      	cmp	r0, #0
   d9a8a:	db01      	blt.n	d9a90 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d9a8c:	f7fe f862 	bl	d7b54 <sock_close>
   d9a90:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d9a92:	f04f 32ff 	mov.w	r2, #4294967295
   d9a96:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d9a98:	6960      	ldr	r0, [r4, #20]
   d9a9a:	2211      	movs	r2, #17
   d9a9c:	2100      	movs	r1, #0
   d9a9e:	308c      	adds	r0, #140	; 0x8c
   d9aa0:	f002 fb92 	bl	dc1c8 <memset>
    flush_buffer();
   d9aa4:	4620      	mov	r0, r4
}
   d9aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d9aaa:	f7ff bf0c 	b.w	d98c6 <_ZN9TCPClient12flush_bufferEv>

000d9aae <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d9aae:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d9ab0:	6818      	ldr	r0, [r3, #0]
}
   d9ab2:	43c0      	mvns	r0, r0
   d9ab4:	0fc0      	lsrs	r0, r0, #31
   d9ab6:	4770      	bx	lr

000d9ab8 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d9ab8:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d9aba:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d9abc:	4604      	mov	r4, r0
          total(0) {
   d9abe:	6001      	str	r1, [r0, #0]
   d9ac0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d9ac4:	3088      	adds	r0, #136	; 0x88
   d9ac6:	f7ff fbaf 	bl	d9228 <_ZN9IPAddressC1Ev>
}
   d9aca:	4620      	mov	r0, r4
   d9acc:	bd10      	pop	{r4, pc}
	...

000d9ad0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d9ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9ad2:	2300      	movs	r3, #0
   d9ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9ad8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d9adc:	4a0e      	ldr	r2, [pc, #56]	; (d9b18 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d9ade:	6103      	str	r3, [r0, #16]
   d9ae0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d9ae2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d9ae4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9ae6:	20ac      	movs	r0, #172	; 0xac
   d9ae8:	9101      	str	r1, [sp, #4]
   d9aea:	f7fa fad4 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d9aee:	1e05      	subs	r5, r0, #0
   d9af0:	f105 060c 	add.w	r6, r5, #12
   d9af4:	d008      	beq.n	d9b08 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d9af6:	2301      	movs	r3, #1
   d9af8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d9afc:	4b07      	ldr	r3, [pc, #28]	; (d9b1c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9afe:	9901      	ldr	r1, [sp, #4]
   d9b00:	602b      	str	r3, [r5, #0]
   d9b02:	4630      	mov	r0, r6
   d9b04:	f7ff ffd8 	bl	d9ab8 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d9b08:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d9b0a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d9b0e:	f7ff feda 	bl	d98c6 <_ZN9TCPClient12flush_bufferEv>
}
   d9b12:	b002      	add	sp, #8
   d9b14:	bd70      	pop	{r4, r5, r6, pc}
   d9b16:	bf00      	nop
   d9b18:	000deda0 	.word	0x000deda0
   d9b1c:	000ded84 	.word	0x000ded84

000d9b20 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d9b20:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d9b22:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d9b26:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d9b28:	f7ff ffd2 	bl	d9ad0 <_ZN9TCPClientC1Ei>
}
   d9b2c:	4620      	mov	r0, r4
   d9b2e:	bd10      	pop	{r4, pc}

000d9b30 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d9b30:	b510      	push	{r4, lr}
   d9b32:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d9b34:	6800      	ldr	r0, [r0, #0]
   d9b36:	2800      	cmp	r0, #0
   d9b38:	db01      	blt.n	d9b3e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d9b3a:	f7fe f80b 	bl	d7b54 <sock_close>
    }
}
   d9b3e:	4620      	mov	r0, r4
   d9b40:	bd10      	pop	{r4, pc}

000d9b42 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d9b42:	300c      	adds	r0, #12
   d9b44:	f7ff bff4 	b.w	d9b30 <_ZN9TCPClient4DataD1Ev>

000d9b48 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9b4c:	4698      	mov	r8, r3
    stop();
   d9b4e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9b50:	b093      	sub	sp, #76	; 0x4c
   d9b52:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d9b54:	2400      	movs	r4, #0
    stop();
   d9b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9b58:	4606      	mov	r6, r0
   d9b5a:	4617      	mov	r7, r2
    stop();
   d9b5c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9b5e:	4628      	mov	r0, r5
   d9b60:	466b      	mov	r3, sp
   d9b62:	4622      	mov	r2, r4
   d9b64:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d9b66:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9b68:	f7fd febc 	bl	d78e4 <netdb_getaddrinfo>
   d9b6c:	4605      	mov	r5, r0
   d9b6e:	2800      	cmp	r0, #0
   d9b70:	d163      	bne.n	d9c3a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d9b72:	9b00      	ldr	r3, [sp, #0]
   d9b74:	2b00      	cmp	r3, #0
   d9b76:	d04b      	beq.n	d9c10 <_ZN9TCPClient7connectEPKctm+0xc8>
   d9b78:	695b      	ldr	r3, [r3, #20]
   d9b7a:	2b00      	cmp	r3, #0
   d9b7c:	d048      	beq.n	d9c10 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d9b7e:	a806      	add	r0, sp, #24
   d9b80:	f7ff fb52 	bl	d9228 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d9b84:	9b00      	ldr	r3, [sp, #0]
   d9b86:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   d9b88:	7863      	ldrb	r3, [r4, #1]
   d9b8a:	2b02      	cmp	r3, #2
   d9b8c:	d104      	bne.n	d9b98 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d9b8e:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   d9b90:	a806      	add	r0, sp, #24
   d9b92:	f7fe fbfe 	bl	d8392 <_ZN9IPAddressaSIPKhEERS_T_>
        if (port) {
   d9b96:	e026      	b.n	d9be6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d9b98:	2b0a      	cmp	r3, #10
   d9b9a:	d124      	bne.n	d9be6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d9b9c:	2211      	movs	r2, #17
   d9b9e:	4629      	mov	r1, r5
   d9ba0:	a801      	add	r0, sp, #4
   d9ba2:	f002 fb11 	bl	dc1c8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9ba6:	68a3      	ldr	r3, [r4, #8]
   d9ba8:	2b00      	cmp	r3, #0
   d9baa:	d038      	beq.n	d9c1e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9bac:	f104 0308 	add.w	r3, r4, #8
   d9bb0:	f10d 0c04 	add.w	ip, sp, #4
   d9bb4:	3418      	adds	r4, #24
   d9bb6:	6818      	ldr	r0, [r3, #0]
   d9bb8:	6859      	ldr	r1, [r3, #4]
   d9bba:	4662      	mov	r2, ip
   d9bbc:	c203      	stmia	r2!, {r0, r1}
   d9bbe:	3308      	adds	r3, #8
   d9bc0:	42a3      	cmp	r3, r4
   d9bc2:	4694      	mov	ip, r2
   d9bc4:	d1f7      	bne.n	d9bb6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d9bc6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d9bc8:	a901      	add	r1, sp, #4
   d9bca:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d9bcc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d9bd0:	f7ff fb38 	bl	d9244 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d9bd4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d9bd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d9bdc:	ac07      	add	r4, sp, #28
   d9bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9be0:	f8dc 3000 	ldr.w	r3, [ip]
   d9be4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d9be6:	a806      	add	r0, sp, #24
   d9be8:	f7ff fb3e 	bl	d9268 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d9bec:	b180      	cbz	r0, d9c10 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d9bee:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d9bf0:	ad07      	add	r5, sp, #28
   d9bf2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d9bf6:	4b12      	ldr	r3, [pc, #72]	; (d9c40 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d9bf8:	930c      	str	r3, [sp, #48]	; 0x30
   d9bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9bfc:	ac0d      	add	r4, sp, #52	; 0x34
   d9bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9c00:	682b      	ldr	r3, [r5, #0]
   d9c02:	7023      	strb	r3, [r4, #0]
   d9c04:	463a      	mov	r2, r7
   d9c06:	4643      	mov	r3, r8
   d9c08:	a90c      	add	r1, sp, #48	; 0x30
   d9c0a:	4630      	mov	r0, r6
   d9c0c:	47c8      	blx	r9
   d9c0e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d9c10:	9800      	ldr	r0, [sp, #0]
   d9c12:	f7fd fe5f 	bl	d78d4 <netdb_freeaddrinfo>
}
   d9c16:	4628      	mov	r0, r5
   d9c18:	b013      	add	sp, #76	; 0x4c
   d9c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9c1e:	68e3      	ldr	r3, [r4, #12]
   d9c20:	2b00      	cmp	r3, #0
   d9c22:	d1c3      	bne.n	d9bac <_ZN9TCPClient7connectEPKctm+0x64>
   d9c24:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d9c28:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9c2c:	f7fd fef2 	bl	d7a14 <inet_htonl>
   d9c30:	4581      	cmp	r9, r0
   d9c32:	d1bb      	bne.n	d9bac <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d9c34:	f104 0114 	add.w	r1, r4, #20
   d9c38:	e7aa      	b.n	d9b90 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9c3a:	4625      	mov	r5, r4
   d9c3c:	e7e8      	b.n	d9c10 <_ZN9TCPClient7connectEPKctm+0xc8>
   d9c3e:	bf00      	nop
   d9c40:	000dec94 	.word	0x000dec94

000d9c44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9c44:	2300      	movs	r3, #0
   d9c46:	6840      	ldr	r0, [r0, #4]
   d9c48:	461a      	mov	r2, r3
   d9c4a:	f7fe b85f 	b.w	d7d0c <network_connect>

000d9c4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9c4e:	6840      	ldr	r0, [r0, #4]
   d9c50:	2200      	movs	r2, #0
   d9c52:	2102      	movs	r1, #2
   d9c54:	f7fe b86a 	b.w	d7d2c <network_disconnect>

000d9c58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9c58:	2200      	movs	r2, #0
   d9c5a:	6840      	ldr	r0, [r0, #4]
   d9c5c:	4611      	mov	r1, r2
   d9c5e:	f7fe b85d 	b.w	d7d1c <network_connecting>

000d9c62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9c62:	2200      	movs	r2, #0
   d9c64:	6840      	ldr	r0, [r0, #4]
   d9c66:	4611      	mov	r1, r2
   d9c68:	f7fe b868 	b.w	d7d3c <network_ready>

000d9c6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9c6c:	2300      	movs	r3, #0
   d9c6e:	6840      	ldr	r0, [r0, #4]
   d9c70:	461a      	mov	r2, r3
   d9c72:	4619      	mov	r1, r3
   d9c74:	f7fe b86a 	b.w	d7d4c <network_on>

000d9c78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9c78:	2300      	movs	r3, #0
   d9c7a:	6840      	ldr	r0, [r0, #4]
   d9c7c:	461a      	mov	r2, r3
   d9c7e:	4619      	mov	r1, r3
   d9c80:	f7fe b86c 	b.w	d7d5c <network_off>

000d9c84 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9c84:	6840      	ldr	r0, [r0, #4]
   d9c86:	2100      	movs	r1, #0
   d9c88:	f7fe b890 	b.w	d7dac <network_is_on>

000d9c8c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9c8c:	6840      	ldr	r0, [r0, #4]
   d9c8e:	2100      	movs	r1, #0
   d9c90:	f7fe b894 	b.w	d7dbc <network_is_off>

000d9c94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9c94:	6840      	ldr	r0, [r0, #4]
   d9c96:	2200      	movs	r2, #0
   d9c98:	f081 0101 	eor.w	r1, r1, #1
   d9c9c:	f7fe b866 	b.w	d7d6c <network_listen>

000d9ca0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9ca0:	6840      	ldr	r0, [r0, #4]
   d9ca2:	2200      	movs	r2, #0
   d9ca4:	f7fe b872 	b.w	d7d8c <network_set_listen_timeout>

000d9ca8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9ca8:	2200      	movs	r2, #0
   d9caa:	6840      	ldr	r0, [r0, #4]
   d9cac:	4611      	mov	r1, r2
   d9cae:	f7fe b875 	b.w	d7d9c <network_get_listen_timeout>

000d9cb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9cb2:	2200      	movs	r2, #0
   d9cb4:	6840      	ldr	r0, [r0, #4]
   d9cb6:	4611      	mov	r1, r2
   d9cb8:	f7fe b860 	b.w	d7d7c <network_listening>

000d9cbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9cc0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9cc2:	b095      	sub	sp, #84	; 0x54
   d9cc4:	4616      	mov	r6, r2
   d9cc6:	460d      	mov	r5, r1
   d9cc8:	4607      	mov	r7, r0
    IPAddress addr;
   d9cca:	f7ff faad 	bl	d9228 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9cce:	4621      	mov	r1, r4
   d9cd0:	2218      	movs	r2, #24
   d9cd2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9cd4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9cd6:	f002 fa77 	bl	dc1c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9cda:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9cdc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9ce0:	4621      	mov	r1, r4
   d9ce2:	466b      	mov	r3, sp
   d9ce4:	aa0c      	add	r2, sp, #48	; 0x30
   d9ce6:	4630      	mov	r0, r6
   d9ce8:	f7fd fdfc 	bl	d78e4 <netdb_getaddrinfo>
    if (!r) {
   d9cec:	4604      	mov	r4, r0
   d9cee:	2800      	cmp	r0, #0
   d9cf0:	d14c      	bne.n	d9d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9cf2:	4602      	mov	r2, r0
   d9cf4:	2101      	movs	r1, #1
   d9cf6:	6868      	ldr	r0, [r5, #4]
   d9cf8:	f7fe f820 	bl	d7d3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9cfc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9cfe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9d00:	4622      	mov	r2, r4
   d9d02:	6868      	ldr	r0, [r5, #4]
   d9d04:	f7fe f81a 	bl	d7d3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9d08:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9d0a:	4681      	mov	r9, r0
        bool ok = false;
   d9d0c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9d0e:	2e00      	cmp	r6, #0
   d9d10:	d03c      	beq.n	d9d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d9d12:	2900      	cmp	r1, #0
   d9d14:	d13a      	bne.n	d9d8c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9d16:	6873      	ldr	r3, [r6, #4]
   d9d18:	2b02      	cmp	r3, #2
   d9d1a:	d003      	beq.n	d9d24 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9d1c:	2b0a      	cmp	r3, #10
   d9d1e:	d011      	beq.n	d9d44 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9d20:	69f6      	ldr	r6, [r6, #28]
   d9d22:	e7f4      	b.n	d9d0e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9d24:	f1b8 0f00 	cmp.w	r8, #0
   d9d28:	d00a      	beq.n	d9d40 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9d2a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d9d2c:	a806      	add	r0, sp, #24
   d9d2e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d9d30:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d9d32:	f7ff fac9 	bl	d92c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d9d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9d38:	1d3c      	adds	r4, r7, #4
   d9d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9d3c:	682b      	ldr	r3, [r5, #0]
   d9d3e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d9d40:	4641      	mov	r1, r8
   d9d42:	e7ed      	b.n	d9d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9d44:	f1b9 0f00 	cmp.w	r9, #0
   d9d48:	d101      	bne.n	d9d4e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9d4a:	4649      	mov	r1, r9
   d9d4c:	e7e8      	b.n	d9d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9d4e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9d50:	2210      	movs	r2, #16
   d9d52:	a801      	add	r0, sp, #4
   d9d54:	f002 fa38 	bl	dc1c8 <memset>
                    a.v = 6;
   d9d58:	2306      	movs	r3, #6
   d9d5a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9d5e:	ad01      	add	r5, sp, #4
   d9d60:	f104 0308 	add.w	r3, r4, #8
   d9d64:	3418      	adds	r4, #24
   d9d66:	6818      	ldr	r0, [r3, #0]
   d9d68:	6859      	ldr	r1, [r3, #4]
   d9d6a:	462a      	mov	r2, r5
   d9d6c:	c203      	stmia	r2!, {r0, r1}
   d9d6e:	3308      	adds	r3, #8
   d9d70:	42a3      	cmp	r3, r4
   d9d72:	4615      	mov	r5, r2
   d9d74:	d1f7      	bne.n	d9d66 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d9d76:	a901      	add	r1, sp, #4
   d9d78:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9d7a:	ad07      	add	r5, sp, #28
   d9d7c:	f7ff fa62 	bl	d9244 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9d82:	1d3c      	adds	r4, r7, #4
   d9d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9d86:	682b      	ldr	r3, [r5, #0]
   d9d88:	7023      	strb	r3, [r4, #0]
   d9d8a:	e7de      	b.n	d9d4a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9d8c:	9800      	ldr	r0, [sp, #0]
   d9d8e:	f7fd fda1 	bl	d78d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9d92:	4638      	mov	r0, r7
   d9d94:	b015      	add	sp, #84	; 0x54
   d9d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9d9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9d9c:	4b02      	ldr	r3, [pc, #8]	; (d9da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9d9e:	4a03      	ldr	r2, [pc, #12]	; (d9dac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9da0:	601a      	str	r2, [r3, #0]
   d9da2:	2200      	movs	r2, #0
   d9da4:	605a      	str	r2, [r3, #4]

} // spark
   d9da6:	4770      	bx	lr
   d9da8:	2003e7c0 	.word	0x2003e7c0
   d9dac:	000dedec 	.word	0x000dedec

000d9db0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9db0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9db2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9db4:	d902      	bls.n	d9dbc <pinAvailable+0xc>
    return false;
   d9db6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9db8:	b002      	add	sp, #8
   d9dba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9dbc:	f1a0 030b 	sub.w	r3, r0, #11
   d9dc0:	2b02      	cmp	r3, #2
   d9dc2:	d81a      	bhi.n	d9dfa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9dc4:	4c17      	ldr	r4, [pc, #92]	; (d9e24 <pinAvailable+0x74>)
   d9dc6:	7821      	ldrb	r1, [r4, #0]
   d9dc8:	f3bf 8f5b 	dmb	ish
   d9dcc:	f011 0101 	ands.w	r1, r1, #1
   d9dd0:	d10b      	bne.n	d9dea <pinAvailable+0x3a>
   d9dd2:	4620      	mov	r0, r4
   d9dd4:	9101      	str	r1, [sp, #4]
   d9dd6:	f7fa f966 	bl	d40a6 <__cxa_guard_acquire>
   d9dda:	9901      	ldr	r1, [sp, #4]
   d9ddc:	b128      	cbz	r0, d9dea <pinAvailable+0x3a>
   d9dde:	4812      	ldr	r0, [pc, #72]	; (d9e28 <pinAvailable+0x78>)
   d9de0:	f7fe f8aa 	bl	d7f38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9de4:	4620      	mov	r0, r4
   d9de6:	f7fa f963 	bl	d40b0 <__cxa_guard_release>
   d9dea:	4b0f      	ldr	r3, [pc, #60]	; (d9e28 <pinAvailable+0x78>)
   d9dec:	7818      	ldrb	r0, [r3, #0]
   d9dee:	f7fd fef1 	bl	d7bd4 <hal_spi_is_enabled>
   d9df2:	2800      	cmp	r0, #0
   d9df4:	d1df      	bne.n	d9db6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9df6:	2001      	movs	r0, #1
   d9df8:	e7de      	b.n	d9db8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9dfa:	2801      	cmp	r0, #1
   d9dfc:	d809      	bhi.n	d9e12 <pinAvailable+0x62>
   d9dfe:	f000 f8a7 	bl	d9f50 <_Z19__fetch_global_Wirev>
   d9e02:	2100      	movs	r1, #0
   d9e04:	7c00      	ldrb	r0, [r0, #16]
   d9e06:	f7fd fe85 	bl	d7b14 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9e0a:	f080 0001 	eor.w	r0, r0, #1
   d9e0e:	b2c0      	uxtb	r0, r0
   d9e10:	e7d2      	b.n	d9db8 <pinAvailable+0x8>
   d9e12:	3809      	subs	r0, #9
   d9e14:	2801      	cmp	r0, #1
   d9e16:	d8ee      	bhi.n	d9df6 <pinAvailable+0x46>
   d9e18:	f7ff fbbc 	bl	d9594 <_Z22__fetch_global_Serial1v>
   d9e1c:	7c00      	ldrb	r0, [r0, #16]
   d9e1e:	f7fd fe41 	bl	d7aa4 <hal_usart_is_enabled>
   d9e22:	e7f2      	b.n	d9e0a <pinAvailable+0x5a>
   d9e24:	2003e7c8 	.word	0x2003e7c8
   d9e28:	2003e7cc 	.word	0x2003e7cc

000d9e2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e2c:	2823      	cmp	r0, #35	; 0x23
{
   d9e2e:	b538      	push	{r3, r4, r5, lr}
   d9e30:	4604      	mov	r4, r0
   d9e32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e34:	d80a      	bhi.n	d9e4c <pinMode+0x20>
   d9e36:	29ff      	cmp	r1, #255	; 0xff
   d9e38:	d008      	beq.n	d9e4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9e3a:	f7ff ffb9 	bl	d9db0 <pinAvailable>
   d9e3e:	b128      	cbz	r0, d9e4c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9e40:	4629      	mov	r1, r5
   d9e42:	4620      	mov	r0, r4
}
   d9e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9e48:	f7fd bd5c 	b.w	d7904 <HAL_Pin_Mode>
}
   d9e4c:	bd38      	pop	{r3, r4, r5, pc}

000d9e4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9e4e:	b538      	push	{r3, r4, r5, lr}
   d9e50:	4604      	mov	r4, r0
   d9e52:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e54:	f7fd fd5e 	bl	d7914 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9e58:	28ff      	cmp	r0, #255	; 0xff
   d9e5a:	d010      	beq.n	d9e7e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9e5c:	2806      	cmp	r0, #6
   d9e5e:	d804      	bhi.n	d9e6a <digitalWrite+0x1c>
   d9e60:	234d      	movs	r3, #77	; 0x4d
   d9e62:	fa23 f000 	lsr.w	r0, r3, r0
   d9e66:	07c3      	lsls	r3, r0, #31
   d9e68:	d409      	bmi.n	d9e7e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9e6a:	4620      	mov	r0, r4
   d9e6c:	f7ff ffa0 	bl	d9db0 <pinAvailable>
   d9e70:	b128      	cbz	r0, d9e7e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9e72:	4629      	mov	r1, r5
   d9e74:	4620      	mov	r0, r4
}
   d9e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9e7a:	f7fd bd53 	b.w	d7924 <HAL_GPIO_Write>
}
   d9e7e:	bd38      	pop	{r3, r4, r5, pc}

000d9e80 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9e80:	b510      	push	{r4, lr}
   d9e82:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e84:	f7fd fd46 	bl	d7914 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9e88:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9e8a:	b2db      	uxtb	r3, r3
   d9e8c:	2b01      	cmp	r3, #1
   d9e8e:	d908      	bls.n	d9ea2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9e90:	4620      	mov	r0, r4
   d9e92:	f7ff ff8d 	bl	d9db0 <pinAvailable>
   d9e96:	b120      	cbz	r0, d9ea2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9e98:	4620      	mov	r0, r4
}
   d9e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9e9e:	f7fd bd49 	b.w	d7934 <HAL_GPIO_Read>
}
   d9ea2:	2000      	movs	r0, #0
   d9ea4:	bd10      	pop	{r4, pc}

000d9ea6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9ea6:	280d      	cmp	r0, #13
{
   d9ea8:	b510      	push	{r4, lr}
   d9eaa:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9eac:	bf9c      	itt	ls
   d9eae:	340e      	addls	r4, #14
   d9eb0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9eb2:	4620      	mov	r0, r4
   d9eb4:	f7ff ff7c 	bl	d9db0 <pinAvailable>
   d9eb8:	b150      	cbz	r0, d9ed0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9eba:	2103      	movs	r1, #3
   d9ebc:	4620      	mov	r0, r4
   d9ebe:	f7fd fd19 	bl	d78f4 <HAL_Validate_Pin_Function>
   d9ec2:	2803      	cmp	r0, #3
   d9ec4:	d104      	bne.n	d9ed0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d9ec6:	4620      	mov	r0, r4
}
   d9ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9ecc:	f7fd bd42 	b.w	d7954 <hal_adc_read>
}
   d9ed0:	2000      	movs	r0, #0
   d9ed2:	bd10      	pop	{r4, pc}

000d9ed4 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d9ed4:	b538      	push	{r3, r4, r5, lr}
   d9ed6:	4604      	mov	r4, r0
   d9ed8:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d9eda:	f7ff ff69 	bl	d9db0 <pinAvailable>
   d9ede:	b1f0      	cbz	r0, d9f1e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d9ee0:	2104      	movs	r1, #4
   d9ee2:	4620      	mov	r0, r4
   d9ee4:	f7fd fd06 	bl	d78f4 <HAL_Validate_Pin_Function>
   d9ee8:	2804      	cmp	r0, #4
   d9eea:	d105      	bne.n	d9ef8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d9eec:	b2a9      	uxth	r1, r5
   d9eee:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d9ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d9ef4:	f7fd bd26 	b.w	d7944 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d9ef8:	2102      	movs	r1, #2
   d9efa:	4620      	mov	r0, r4
   d9efc:	f7fd fcfa 	bl	d78f4 <HAL_Validate_Pin_Function>
   d9f00:	2802      	cmp	r0, #2
   d9f02:	d10c      	bne.n	d9f1e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d9f04:	4620      	mov	r0, r4
   d9f06:	f7fd fd05 	bl	d7914 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d9f0a:	2801      	cmp	r0, #1
   d9f0c:	d001      	beq.n	d9f12 <_Z11analogWritetm+0x3e>
   d9f0e:	2804      	cmp	r0, #4
   d9f10:	d105      	bne.n	d9f1e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d9f12:	4629      	mov	r1, r5
   d9f14:	4620      	mov	r0, r4
}
   d9f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d9f1a:	f7fd bd23 	b.w	d7964 <hal_pwm_write_ext>
}
   d9f1e:	bd38      	pop	{r3, r4, r5, pc}

000d9f20 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9f20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9f22:	2300      	movs	r3, #0
   d9f24:	2520      	movs	r5, #32
   d9f26:	8043      	strh	r3, [r0, #2]
   d9f28:	2314      	movs	r3, #20
{
   d9f2a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9f2c:	8003      	strh	r3, [r0, #0]
   d9f2e:	6085      	str	r5, [r0, #8]
   d9f30:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f32:	4906      	ldr	r1, [pc, #24]	; (d9f4c <_Z17acquireWireBufferv+0x2c>)
   d9f34:	4628      	mov	r0, r5
   d9f36:	f000 f83a 	bl	d9fae <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f3a:	4904      	ldr	r1, [pc, #16]	; (d9f4c <_Z17acquireWireBufferv+0x2c>)
	};
   d9f3c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f3e:	4628      	mov	r0, r5
   d9f40:	f000 f835 	bl	d9fae <_ZnajRKSt9nothrow_t>
	};
   d9f44:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9f46:	4620      	mov	r0, r4
   d9f48:	bd38      	pop	{r3, r4, r5, pc}
   d9f4a:	bf00      	nop
   d9f4c:	000dee20 	.word	0x000dee20

000d9f50 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9f50:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f52:	4d0f      	ldr	r5, [pc, #60]	; (d9f90 <_Z19__fetch_global_Wirev+0x40>)
   d9f54:	7829      	ldrb	r1, [r5, #0]
   d9f56:	f3bf 8f5b 	dmb	ish
   d9f5a:	f011 0401 	ands.w	r4, r1, #1
{
   d9f5e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f60:	d113      	bne.n	d9f8a <_Z19__fetch_global_Wirev+0x3a>
   d9f62:	4628      	mov	r0, r5
   d9f64:	f7fa f89f 	bl	d40a6 <__cxa_guard_acquire>
   d9f68:	b178      	cbz	r0, d9f8a <_Z19__fetch_global_Wirev+0x3a>
   d9f6a:	a801      	add	r0, sp, #4
   d9f6c:	f7ff ffd8 	bl	d9f20 <_Z17acquireWireBufferv>
   d9f70:	aa01      	add	r2, sp, #4
   d9f72:	4621      	mov	r1, r4
   d9f74:	4807      	ldr	r0, [pc, #28]	; (d9f94 <_Z19__fetch_global_Wirev+0x44>)
   d9f76:	f7ff fb91 	bl	d969c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9f7a:	4628      	mov	r0, r5
   d9f7c:	f7fa f898 	bl	d40b0 <__cxa_guard_release>
   d9f80:	4a05      	ldr	r2, [pc, #20]	; (d9f98 <_Z19__fetch_global_Wirev+0x48>)
   d9f82:	4906      	ldr	r1, [pc, #24]	; (d9f9c <_Z19__fetch_global_Wirev+0x4c>)
   d9f84:	4803      	ldr	r0, [pc, #12]	; (d9f94 <_Z19__fetch_global_Wirev+0x44>)
   d9f86:	f000 f80b 	bl	d9fa0 <__aeabi_atexit>
	return wire;
}
   d9f8a:	4802      	ldr	r0, [pc, #8]	; (d9f94 <_Z19__fetch_global_Wirev+0x44>)
   d9f8c:	b007      	add	sp, #28
   d9f8e:	bd30      	pop	{r4, r5, pc}
   d9f90:	2003e7d8 	.word	0x2003e7d8
   d9f94:	2003e7dc 	.word	0x2003e7dc
   d9f98:	2003e280 	.word	0x2003e280
   d9f9c:	000d9645 	.word	0x000d9645

000d9fa0 <__aeabi_atexit>:
   d9fa0:	460b      	mov	r3, r1
   d9fa2:	4601      	mov	r1, r0
   d9fa4:	4618      	mov	r0, r3
   d9fa6:	f002 b8f3 	b.w	dc190 <__cxa_atexit>

000d9faa <_ZdlPvj>:
   d9faa:	f7fa b878 	b.w	d409e <_ZdlPv>

000d9fae <_ZnajRKSt9nothrow_t>:
   d9fae:	f7fa b874 	b.w	d409a <_Znaj>

000d9fb2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d9fb2:	68c3      	ldr	r3, [r0, #12]
   d9fb4:	689a      	ldr	r2, [r3, #8]
   d9fb6:	60c2      	str	r2, [r0, #12]
   d9fb8:	b510      	push	{r4, lr}
   d9fba:	b102      	cbz	r2, d9fbe <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d9fbc:	6050      	str	r0, [r2, #4]
   d9fbe:	6842      	ldr	r2, [r0, #4]
   d9fc0:	605a      	str	r2, [r3, #4]
   d9fc2:	680c      	ldr	r4, [r1, #0]
   d9fc4:	4284      	cmp	r4, r0
   d9fc6:	d103      	bne.n	d9fd0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9fc8:	600b      	str	r3, [r1, #0]
   d9fca:	6098      	str	r0, [r3, #8]
   d9fcc:	6043      	str	r3, [r0, #4]
   d9fce:	bd10      	pop	{r4, pc}
   d9fd0:	6891      	ldr	r1, [r2, #8]
   d9fd2:	4281      	cmp	r1, r0
   d9fd4:	bf0c      	ite	eq
   d9fd6:	6093      	streq	r3, [r2, #8]
   d9fd8:	60d3      	strne	r3, [r2, #12]
   d9fda:	e7f6      	b.n	d9fca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d9fdc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d9fdc:	6883      	ldr	r3, [r0, #8]
   d9fde:	68da      	ldr	r2, [r3, #12]
   d9fe0:	6082      	str	r2, [r0, #8]
   d9fe2:	b510      	push	{r4, lr}
   d9fe4:	b102      	cbz	r2, d9fe8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d9fe6:	6050      	str	r0, [r2, #4]
   d9fe8:	6842      	ldr	r2, [r0, #4]
   d9fea:	605a      	str	r2, [r3, #4]
   d9fec:	680c      	ldr	r4, [r1, #0]
   d9fee:	4284      	cmp	r4, r0
   d9ff0:	d103      	bne.n	d9ffa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9ff2:	600b      	str	r3, [r1, #0]
   d9ff4:	60d8      	str	r0, [r3, #12]
   d9ff6:	6043      	str	r3, [r0, #4]
   d9ff8:	bd10      	pop	{r4, pc}
   d9ffa:	68d1      	ldr	r1, [r2, #12]
   d9ffc:	4281      	cmp	r1, r0
   d9ffe:	bf0c      	ite	eq
   da000:	60d3      	streq	r3, [r2, #12]
   da002:	6093      	strne	r3, [r2, #8]
   da004:	e7f6      	b.n	d9ff4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000da006 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   da006:	7803      	ldrb	r3, [r0, #0]
   da008:	b933      	cbnz	r3, da018 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   da00a:	6843      	ldr	r3, [r0, #4]
   da00c:	685b      	ldr	r3, [r3, #4]
   da00e:	4283      	cmp	r3, r0
   da010:	d102      	bne.n	da018 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   da012:	68db      	ldr	r3, [r3, #12]
   da014:	4618      	mov	r0, r3
   da016:	4770      	bx	lr
   da018:	6882      	ldr	r2, [r0, #8]
   da01a:	b122      	cbz	r2, da026 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   da01c:	4613      	mov	r3, r2
   da01e:	68d2      	ldr	r2, [r2, #12]
   da020:	2a00      	cmp	r2, #0
   da022:	d1fb      	bne.n	da01c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   da024:	e7f6      	b.n	da014 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   da026:	6843      	ldr	r3, [r0, #4]
   da028:	689a      	ldr	r2, [r3, #8]
   da02a:	4282      	cmp	r2, r0
   da02c:	d1f2      	bne.n	da014 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   da02e:	4618      	mov	r0, r3
   da030:	685b      	ldr	r3, [r3, #4]
   da032:	e7f9      	b.n	da028 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000da034 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   da034:	68c3      	ldr	r3, [r0, #12]
   da036:	b123      	cbz	r3, da042 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   da038:	4618      	mov	r0, r3
   da03a:	689b      	ldr	r3, [r3, #8]
   da03c:	2b00      	cmp	r3, #0
   da03e:	d1fb      	bne.n	da038 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   da040:	4770      	bx	lr
   da042:	6843      	ldr	r3, [r0, #4]
   da044:	68da      	ldr	r2, [r3, #12]
   da046:	4282      	cmp	r2, r0
   da048:	d102      	bne.n	da050 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   da04a:	4618      	mov	r0, r3
   da04c:	685b      	ldr	r3, [r3, #4]
   da04e:	e7f9      	b.n	da044 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   da050:	68c2      	ldr	r2, [r0, #12]
   da052:	4293      	cmp	r3, r2
   da054:	bf18      	it	ne
   da056:	4618      	movne	r0, r3
   da058:	4770      	bx	lr

000da05a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   da05a:	f7ff bfd4 	b.w	da006 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000da05e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   da05e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da062:	461e      	mov	r6, r3
   da064:	f103 0804 	add.w	r8, r3, #4
   da068:	2300      	movs	r3, #0
   da06a:	e9c1 3302 	strd	r3, r3, [r1, #8]
   da06e:	460c      	mov	r4, r1
   da070:	604a      	str	r2, [r1, #4]
   da072:	700b      	strb	r3, [r1, #0]
   da074:	b300      	cbz	r0, da0b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   da076:	4296      	cmp	r6, r2
   da078:	6091      	str	r1, [r2, #8]
   da07a:	d118      	bne.n	da0ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   da07c:	6071      	str	r1, [r6, #4]
   da07e:	60f4      	str	r4, [r6, #12]
   da080:	2701      	movs	r7, #1
   da082:	f04f 0900 	mov.w	r9, #0
   da086:	6873      	ldr	r3, [r6, #4]
   da088:	42a3      	cmp	r3, r4
   da08a:	d03f      	beq.n	da10c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   da08c:	6860      	ldr	r0, [r4, #4]
   da08e:	7802      	ldrb	r2, [r0, #0]
   da090:	2a00      	cmp	r2, #0
   da092:	d13c      	bne.n	da10e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   da094:	6845      	ldr	r5, [r0, #4]
   da096:	68ab      	ldr	r3, [r5, #8]
   da098:	4298      	cmp	r0, r3
   da09a:	d123      	bne.n	da0e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   da09c:	68eb      	ldr	r3, [r5, #12]
   da09e:	b183      	cbz	r3, da0c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   da0a0:	781a      	ldrb	r2, [r3, #0]
   da0a2:	b972      	cbnz	r2, da0c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   da0a4:	7007      	strb	r7, [r0, #0]
   da0a6:	701f      	strb	r7, [r3, #0]
   da0a8:	702a      	strb	r2, [r5, #0]
   da0aa:	462c      	mov	r4, r5
   da0ac:	e7eb      	b.n	da086 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   da0ae:	68b3      	ldr	r3, [r6, #8]
   da0b0:	4293      	cmp	r3, r2
   da0b2:	d1e5      	bne.n	da080 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   da0b4:	60b1      	str	r1, [r6, #8]
   da0b6:	e7e3      	b.n	da080 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   da0b8:	60d1      	str	r1, [r2, #12]
   da0ba:	68f3      	ldr	r3, [r6, #12]
   da0bc:	4293      	cmp	r3, r2
   da0be:	d1df      	bne.n	da080 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   da0c0:	e7dd      	b.n	da07e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   da0c2:	68c3      	ldr	r3, [r0, #12]
   da0c4:	42a3      	cmp	r3, r4
   da0c6:	d103      	bne.n	da0d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   da0c8:	4641      	mov	r1, r8
   da0ca:	f7ff ff72 	bl	d9fb2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da0ce:	4604      	mov	r4, r0
   da0d0:	6863      	ldr	r3, [r4, #4]
   da0d2:	4641      	mov	r1, r8
   da0d4:	701f      	strb	r7, [r3, #0]
   da0d6:	4628      	mov	r0, r5
   da0d8:	f885 9000 	strb.w	r9, [r5]
   da0dc:	f7ff ff7e 	bl	d9fdc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da0e0:	4625      	mov	r5, r4
   da0e2:	e7e2      	b.n	da0aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   da0e4:	b113      	cbz	r3, da0ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   da0e6:	781a      	ldrb	r2, [r3, #0]
   da0e8:	2a00      	cmp	r2, #0
   da0ea:	d0db      	beq.n	da0a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   da0ec:	6883      	ldr	r3, [r0, #8]
   da0ee:	42a3      	cmp	r3, r4
   da0f0:	d103      	bne.n	da0fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   da0f2:	4641      	mov	r1, r8
   da0f4:	f7ff ff72 	bl	d9fdc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da0f8:	4604      	mov	r4, r0
   da0fa:	6863      	ldr	r3, [r4, #4]
   da0fc:	4641      	mov	r1, r8
   da0fe:	701f      	strb	r7, [r3, #0]
   da100:	4628      	mov	r0, r5
   da102:	f885 9000 	strb.w	r9, [r5]
   da106:	f7ff ff54 	bl	d9fb2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da10a:	e7e9      	b.n	da0e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   da10c:	4623      	mov	r3, r4
   da10e:	2201      	movs	r2, #1
   da110:	701a      	strb	r2, [r3, #0]
   da112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da116 <_ZSt25__throw_bad_function_callv>:
   da116:	b508      	push	{r3, lr}
   da118:	f7fd fea8 	bl	d7e6c <abort>

000da11c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   da11c:	4901      	ldr	r1, [pc, #4]	; (da124 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   da11e:	f000 b8f9 	b.w	da314 <_ZNKSt9type_infoeqERKS_>
   da122:	bf00      	nop
   da124:	000dee3c 	.word	0x000dee3c

000da128 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   da128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da12a:	2400      	movs	r4, #0
   da12c:	2310      	movs	r3, #16
   da12e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   da132:	6803      	ldr	r3, [r0, #0]
   da134:	9400      	str	r4, [sp, #0]
   da136:	699e      	ldr	r6, [r3, #24]
   da138:	f88d 4004 	strb.w	r4, [sp, #4]
   da13c:	4615      	mov	r5, r2
   da13e:	466b      	mov	r3, sp
   da140:	6812      	ldr	r2, [r2, #0]
   da142:	47b0      	blx	r6
   da144:	f89d 3004 	ldrb.w	r3, [sp, #4]
   da148:	f003 0306 	and.w	r3, r3, #6
   da14c:	2b06      	cmp	r3, #6
   da14e:	bf03      	ittte	eq
   da150:	9b00      	ldreq	r3, [sp, #0]
   da152:	602b      	streq	r3, [r5, #0]
   da154:	2001      	moveq	r0, #1
   da156:	4620      	movne	r0, r4
   da158:	b004      	add	sp, #16
   da15a:	bd70      	pop	{r4, r5, r6, pc}

000da15c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   da15c:	9800      	ldr	r0, [sp, #0]
   da15e:	4290      	cmp	r0, r2
   da160:	bf14      	ite	ne
   da162:	2001      	movne	r0, #1
   da164:	2006      	moveq	r0, #6
   da166:	4770      	bx	lr

000da168 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   da168:	b510      	push	{r4, lr}
   da16a:	4b03      	ldr	r3, [pc, #12]	; (da178 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   da16c:	6003      	str	r3, [r0, #0]
   da16e:	4604      	mov	r4, r0
   da170:	f000 f8cd 	bl	da30e <_ZNSt9type_infoD1Ev>
   da174:	4620      	mov	r0, r4
   da176:	bd10      	pop	{r4, pc}
   da178:	000dee7c 	.word	0x000dee7c

000da17c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   da17c:	b510      	push	{r4, lr}
   da17e:	4604      	mov	r4, r0
   da180:	f7ff fff2 	bl	da168 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   da184:	4620      	mov	r0, r4
   da186:	2108      	movs	r1, #8
   da188:	f7ff ff0f 	bl	d9faa <_ZdlPvj>
   da18c:	4620      	mov	r0, r4
   da18e:	bd10      	pop	{r4, pc}

000da190 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   da190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da194:	461f      	mov	r7, r3
   da196:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   da19a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   da19e:	4598      	cmp	r8, r3
   da1a0:	4606      	mov	r6, r0
   da1a2:	4615      	mov	r5, r2
   da1a4:	d107      	bne.n	da1b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   da1a6:	9907      	ldr	r1, [sp, #28]
   da1a8:	f000 f8b4 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da1ac:	b118      	cbz	r0, da1b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   da1ae:	7165      	strb	r5, [r4, #5]
   da1b0:	2000      	movs	r0, #0
   da1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1b6:	4639      	mov	r1, r7
   da1b8:	4630      	mov	r0, r6
   da1ba:	f000 f8ab 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da1be:	2800      	cmp	r0, #0
   da1c0:	d0f6      	beq.n	da1b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   da1c2:	2301      	movs	r3, #1
   da1c4:	f8c4 8000 	str.w	r8, [r4]
   da1c8:	7125      	strb	r5, [r4, #4]
   da1ca:	71a3      	strb	r3, [r4, #6]
   da1cc:	e7f0      	b.n	da1b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000da1ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   da1ce:	b538      	push	{r3, r4, r5, lr}
   da1d0:	4615      	mov	r5, r2
   da1d2:	461c      	mov	r4, r3
   da1d4:	f000 f89e 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da1d8:	b120      	cbz	r0, da1e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   da1da:	2308      	movs	r3, #8
   da1dc:	60e3      	str	r3, [r4, #12]
   da1de:	2306      	movs	r3, #6
   da1e0:	6025      	str	r5, [r4, #0]
   da1e2:	7123      	strb	r3, [r4, #4]
   da1e4:	bd38      	pop	{r3, r4, r5, pc}

000da1e6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   da1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da1e8:	4605      	mov	r5, r0
   da1ea:	460c      	mov	r4, r1
   da1ec:	9201      	str	r2, [sp, #4]
   da1ee:	461e      	mov	r6, r3
   da1f0:	f000 f890 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da1f4:	b950      	cbnz	r0, da20c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   da1f6:	2e03      	cmp	r6, #3
   da1f8:	d808      	bhi.n	da20c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   da1fa:	6823      	ldr	r3, [r4, #0]
   da1fc:	9a01      	ldr	r2, [sp, #4]
   da1fe:	695b      	ldr	r3, [r3, #20]
   da200:	4629      	mov	r1, r5
   da202:	4620      	mov	r0, r4
   da204:	b002      	add	sp, #8
   da206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da20a:	4718      	bx	r3
   da20c:	b002      	add	sp, #8
   da20e:	bd70      	pop	{r4, r5, r6, pc}

000da210 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   da210:	b510      	push	{r4, lr}
   da212:	4b03      	ldr	r3, [pc, #12]	; (da220 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   da214:	6003      	str	r3, [r0, #0]
   da216:	4604      	mov	r4, r0
   da218:	f7ff ffa6 	bl	da168 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   da21c:	4620      	mov	r0, r4
   da21e:	bd10      	pop	{r4, pc}
   da220:	000deedc 	.word	0x000deedc

000da224 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   da224:	b510      	push	{r4, lr}
   da226:	4604      	mov	r4, r0
   da228:	f7ff fff2 	bl	da210 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   da22c:	4620      	mov	r0, r4
   da22e:	210c      	movs	r1, #12
   da230:	f7ff febb 	bl	d9faa <_ZdlPvj>
   da234:	4620      	mov	r0, r4
   da236:	bd10      	pop	{r4, pc}

000da238 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   da238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da23a:	9f08      	ldr	r7, [sp, #32]
   da23c:	4297      	cmp	r7, r2
   da23e:	4605      	mov	r5, r0
   da240:	460e      	mov	r6, r1
   da242:	4614      	mov	r4, r2
   da244:	d00a      	beq.n	da25c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   da246:	68a8      	ldr	r0, [r5, #8]
   da248:	6802      	ldr	r2, [r0, #0]
   da24a:	9708      	str	r7, [sp, #32]
   da24c:	6a15      	ldr	r5, [r2, #32]
   da24e:	4631      	mov	r1, r6
   da250:	4622      	mov	r2, r4
   da252:	46ac      	mov	ip, r5
   da254:	b003      	add	sp, #12
   da256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da25a:	4760      	bx	ip
   da25c:	4619      	mov	r1, r3
   da25e:	9301      	str	r3, [sp, #4]
   da260:	f000 f858 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da264:	9b01      	ldr	r3, [sp, #4]
   da266:	2800      	cmp	r0, #0
   da268:	d0ed      	beq.n	da246 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   da26a:	2006      	movs	r0, #6
   da26c:	b003      	add	sp, #12
   da26e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da270 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   da270:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da274:	460d      	mov	r5, r1
   da276:	4619      	mov	r1, r3
   da278:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   da27c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   da280:	4681      	mov	r9, r0
   da282:	4617      	mov	r7, r2
   da284:	4698      	mov	r8, r3
   da286:	f000 f845 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da28a:	b190      	cbz	r0, da2b2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   da28c:	2d00      	cmp	r5, #0
   da28e:	6034      	str	r4, [r6, #0]
   da290:	7137      	strb	r7, [r6, #4]
   da292:	db09      	blt.n	da2a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   da294:	1961      	adds	r1, r4, r5
   da296:	458a      	cmp	sl, r1
   da298:	bf0c      	ite	eq
   da29a:	2106      	moveq	r1, #6
   da29c:	2101      	movne	r1, #1
   da29e:	71b1      	strb	r1, [r6, #6]
   da2a0:	2000      	movs	r0, #0
   da2a2:	b001      	add	sp, #4
   da2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da2a8:	3502      	adds	r5, #2
   da2aa:	d1f9      	bne.n	da2a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da2ac:	2301      	movs	r3, #1
   da2ae:	71b3      	strb	r3, [r6, #6]
   da2b0:	e7f6      	b.n	da2a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da2b2:	4554      	cmp	r4, sl
   da2b4:	d106      	bne.n	da2c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   da2b6:	4659      	mov	r1, fp
   da2b8:	4648      	mov	r0, r9
   da2ba:	f000 f82b 	bl	da314 <_ZNKSt9type_infoeqERKS_>
   da2be:	b108      	cbz	r0, da2c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   da2c0:	7177      	strb	r7, [r6, #5]
   da2c2:	e7ed      	b.n	da2a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   da2c4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   da2c8:	6803      	ldr	r3, [r0, #0]
   da2ca:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   da2ce:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   da2d2:	69dc      	ldr	r4, [r3, #28]
   da2d4:	463a      	mov	r2, r7
   da2d6:	4643      	mov	r3, r8
   da2d8:	4629      	mov	r1, r5
   da2da:	46a4      	mov	ip, r4
   da2dc:	b001      	add	sp, #4
   da2de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2e2:	4760      	bx	ip

000da2e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   da2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2e8:	4607      	mov	r7, r0
   da2ea:	460c      	mov	r4, r1
   da2ec:	4615      	mov	r5, r2
   da2ee:	461e      	mov	r6, r3
   da2f0:	f7ff ff6d 	bl	da1ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   da2f4:	b948      	cbnz	r0, da30a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   da2f6:	68b8      	ldr	r0, [r7, #8]
   da2f8:	6803      	ldr	r3, [r0, #0]
   da2fa:	699f      	ldr	r7, [r3, #24]
   da2fc:	462a      	mov	r2, r5
   da2fe:	4633      	mov	r3, r6
   da300:	4621      	mov	r1, r4
   da302:	46bc      	mov	ip, r7
   da304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da308:	4760      	bx	ip
   da30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da30e <_ZNSt9type_infoD1Ev>:
   da30e:	4770      	bx	lr

000da310 <_ZNKSt9type_info14__is_pointer_pEv>:
   da310:	2000      	movs	r0, #0
   da312:	4770      	bx	lr

000da314 <_ZNKSt9type_infoeqERKS_>:
   da314:	4281      	cmp	r1, r0
   da316:	b508      	push	{r3, lr}
   da318:	d00e      	beq.n	da338 <_ZNKSt9type_infoeqERKS_+0x24>
   da31a:	6840      	ldr	r0, [r0, #4]
   da31c:	7803      	ldrb	r3, [r0, #0]
   da31e:	2b2a      	cmp	r3, #42	; 0x2a
   da320:	d00c      	beq.n	da33c <_ZNKSt9type_infoeqERKS_+0x28>
   da322:	6849      	ldr	r1, [r1, #4]
   da324:	780b      	ldrb	r3, [r1, #0]
   da326:	2b2a      	cmp	r3, #42	; 0x2a
   da328:	bf08      	it	eq
   da32a:	3101      	addeq	r1, #1
   da32c:	f001 ff85 	bl	dc23a <strcmp>
   da330:	fab0 f080 	clz	r0, r0
   da334:	0940      	lsrs	r0, r0, #5
   da336:	bd08      	pop	{r3, pc}
   da338:	2001      	movs	r0, #1
   da33a:	e7fc      	b.n	da336 <_ZNKSt9type_infoeqERKS_+0x22>
   da33c:	2000      	movs	r0, #0
   da33e:	e7fa      	b.n	da336 <_ZNKSt9type_infoeqERKS_+0x22>

000da340 <pow>:
   da340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da344:	ed2d 8b02 	vpush	{d8}
   da348:	b08d      	sub	sp, #52	; 0x34
   da34a:	ec57 6b10 	vmov	r6, r7, d0
   da34e:	ec55 4b11 	vmov	r4, r5, d1
   da352:	f000 fa09 	bl	da768 <__ieee754_pow>
   da356:	4bae      	ldr	r3, [pc, #696]	; (da610 <pow+0x2d0>)
   da358:	eeb0 8a40 	vmov.f32	s16, s0
   da35c:	eef0 8a60 	vmov.f32	s17, s1
   da360:	f993 9000 	ldrsb.w	r9, [r3]
   da364:	f1b9 3fff 	cmp.w	r9, #4294967295
   da368:	d037      	beq.n	da3da <pow+0x9a>
   da36a:	4622      	mov	r2, r4
   da36c:	462b      	mov	r3, r5
   da36e:	4620      	mov	r0, r4
   da370:	4629      	mov	r1, r5
   da372:	f001 fe35 	bl	dbfe0 <__aeabi_dcmpun>
   da376:	4683      	mov	fp, r0
   da378:	bb78      	cbnz	r0, da3da <pow+0x9a>
   da37a:	4632      	mov	r2, r6
   da37c:	463b      	mov	r3, r7
   da37e:	4630      	mov	r0, r6
   da380:	4639      	mov	r1, r7
   da382:	f001 fe2d 	bl	dbfe0 <__aeabi_dcmpun>
   da386:	4680      	mov	r8, r0
   da388:	2800      	cmp	r0, #0
   da38a:	f040 8093 	bne.w	da4b4 <pow+0x174>
   da38e:	f04f 0a00 	mov.w	sl, #0
   da392:	f04f 0b00 	mov.w	fp, #0
   da396:	4630      	mov	r0, r6
   da398:	4639      	mov	r1, r7
   da39a:	4652      	mov	r2, sl
   da39c:	465b      	mov	r3, fp
   da39e:	f001 fded 	bl	dbf7c <__aeabi_dcmpeq>
   da3a2:	b318      	cbz	r0, da3ec <pow+0xac>
   da3a4:	4652      	mov	r2, sl
   da3a6:	465b      	mov	r3, fp
   da3a8:	4620      	mov	r0, r4
   da3aa:	4629      	mov	r1, r5
   da3ac:	f001 fde6 	bl	dbf7c <__aeabi_dcmpeq>
   da3b0:	9000      	str	r0, [sp, #0]
   da3b2:	2800      	cmp	r0, #0
   da3b4:	d057      	beq.n	da466 <pow+0x126>
   da3b6:	4b97      	ldr	r3, [pc, #604]	; (da614 <pow+0x2d4>)
   da3b8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da3bc:	2201      	movs	r2, #1
   da3be:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da3c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da3c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da3ca:	9202      	str	r2, [sp, #8]
   da3cc:	9303      	str	r3, [sp, #12]
   da3ce:	f1b9 0f00 	cmp.w	r9, #0
   da3d2:	f000 8089 	beq.w	da4e8 <pow+0x1a8>
   da3d6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; da600 <pow+0x2c0>
   da3da:	eeb0 0a48 	vmov.f32	s0, s16
   da3de:	eef0 0a68 	vmov.f32	s1, s17
   da3e2:	b00d      	add	sp, #52	; 0x34
   da3e4:	ecbd 8b02 	vpop	{d8}
   da3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3ec:	eeb0 0a48 	vmov.f32	s0, s16
   da3f0:	eef0 0a68 	vmov.f32	s1, s17
   da3f4:	f001 f860 	bl	db4b8 <finite>
   da3f8:	4680      	mov	r8, r0
   da3fa:	2800      	cmp	r0, #0
   da3fc:	f000 8082 	beq.w	da504 <pow+0x1c4>
   da400:	f04f 0800 	mov.w	r8, #0
   da404:	f04f 0900 	mov.w	r9, #0
   da408:	ec51 0b18 	vmov	r0, r1, d8
   da40c:	4642      	mov	r2, r8
   da40e:	464b      	mov	r3, r9
   da410:	f001 fdb4 	bl	dbf7c <__aeabi_dcmpeq>
   da414:	2800      	cmp	r0, #0
   da416:	d0e0      	beq.n	da3da <pow+0x9a>
   da418:	ec47 6b10 	vmov	d0, r6, r7
   da41c:	f001 f84c 	bl	db4b8 <finite>
   da420:	2800      	cmp	r0, #0
   da422:	d0da      	beq.n	da3da <pow+0x9a>
   da424:	ec45 4b10 	vmov	d0, r4, r5
   da428:	f001 f846 	bl	db4b8 <finite>
   da42c:	2800      	cmp	r0, #0
   da42e:	d0d4      	beq.n	da3da <pow+0x9a>
   da430:	4b77      	ldr	r3, [pc, #476]	; (da610 <pow+0x2d0>)
   da432:	4a78      	ldr	r2, [pc, #480]	; (da614 <pow+0x2d4>)
   da434:	f993 3000 	ldrsb.w	r3, [r3]
   da438:	9203      	str	r2, [sp, #12]
   da43a:	2104      	movs	r1, #4
   da43c:	2200      	movs	r2, #0
   da43e:	2b02      	cmp	r3, #2
   da440:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da444:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da448:	e9cd 8908 	strd	r8, r9, [sp, #32]
   da44c:	9102      	str	r1, [sp, #8]
   da44e:	920a      	str	r2, [sp, #40]	; 0x28
   da450:	d004      	beq.n	da45c <pow+0x11c>
   da452:	a802      	add	r0, sp, #8
   da454:	f001 f83c 	bl	db4d0 <matherr>
   da458:	2800      	cmp	r0, #0
   da45a:	d14a      	bne.n	da4f2 <pow+0x1b2>
   da45c:	f7fd fd16 	bl	d7e8c <__errno>
   da460:	2322      	movs	r3, #34	; 0x22
   da462:	6003      	str	r3, [r0, #0]
   da464:	e045      	b.n	da4f2 <pow+0x1b2>
   da466:	ec45 4b10 	vmov	d0, r4, r5
   da46a:	f001 f825 	bl	db4b8 <finite>
   da46e:	2800      	cmp	r0, #0
   da470:	d0b3      	beq.n	da3da <pow+0x9a>
   da472:	4652      	mov	r2, sl
   da474:	465b      	mov	r3, fp
   da476:	4620      	mov	r0, r4
   da478:	4629      	mov	r1, r5
   da47a:	f001 fd89 	bl	dbf90 <__aeabi_dcmplt>
   da47e:	2800      	cmp	r0, #0
   da480:	d0ab      	beq.n	da3da <pow+0x9a>
   da482:	4b63      	ldr	r3, [pc, #396]	; (da610 <pow+0x2d0>)
   da484:	9900      	ldr	r1, [sp, #0]
   da486:	4a63      	ldr	r2, [pc, #396]	; (da614 <pow+0x2d4>)
   da488:	f993 3000 	ldrsb.w	r3, [r3]
   da48c:	910a      	str	r1, [sp, #40]	; 0x28
   da48e:	2101      	movs	r1, #1
   da490:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da494:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da498:	e9cd 1202 	strd	r1, r2, [sp, #8]
   da49c:	2b00      	cmp	r3, #0
   da49e:	d16f      	bne.n	da580 <pow+0x240>
   da4a0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da4a4:	a802      	add	r0, sp, #8
   da4a6:	f001 f813 	bl	db4d0 <matherr>
   da4aa:	2800      	cmp	r0, #0
   da4ac:	d06e      	beq.n	da58c <pow+0x24c>
   da4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4b0:	b32b      	cbz	r3, da4fe <pow+0x1be>
   da4b2:	e020      	b.n	da4f6 <pow+0x1b6>
   da4b4:	2200      	movs	r2, #0
   da4b6:	2300      	movs	r3, #0
   da4b8:	4620      	mov	r0, r4
   da4ba:	4629      	mov	r1, r5
   da4bc:	f001 fd5e 	bl	dbf7c <__aeabi_dcmpeq>
   da4c0:	2800      	cmp	r0, #0
   da4c2:	d08a      	beq.n	da3da <pow+0x9a>
   da4c4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; da600 <pow+0x2c0>
   da4c8:	4b52      	ldr	r3, [pc, #328]	; (da614 <pow+0x2d4>)
   da4ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   da4ce:	2201      	movs	r2, #1
   da4d0:	f1b9 0f02 	cmp.w	r9, #2
   da4d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da4d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da4dc:	ed8d 8b08 	vstr	d8, [sp, #32]
   da4e0:	9202      	str	r2, [sp, #8]
   da4e2:	9303      	str	r3, [sp, #12]
   da4e4:	f43f af79 	beq.w	da3da <pow+0x9a>
   da4e8:	a802      	add	r0, sp, #8
   da4ea:	f000 fff1 	bl	db4d0 <matherr>
   da4ee:	2800      	cmp	r0, #0
   da4f0:	d051      	beq.n	da596 <pow+0x256>
   da4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4f4:	b11b      	cbz	r3, da4fe <pow+0x1be>
   da4f6:	f7fd fcc9 	bl	d7e8c <__errno>
   da4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4fc:	6003      	str	r3, [r0, #0]
   da4fe:	ed9d 8b08 	vldr	d8, [sp, #32]
   da502:	e76a      	b.n	da3da <pow+0x9a>
   da504:	ec47 6b10 	vmov	d0, r6, r7
   da508:	f000 ffd6 	bl	db4b8 <finite>
   da50c:	2800      	cmp	r0, #0
   da50e:	f43f af77 	beq.w	da400 <pow+0xc0>
   da512:	ec45 4b10 	vmov	d0, r4, r5
   da516:	f000 ffcf 	bl	db4b8 <finite>
   da51a:	2800      	cmp	r0, #0
   da51c:	f43f af70 	beq.w	da400 <pow+0xc0>
   da520:	ec53 2b18 	vmov	r2, r3, d8
   da524:	ee18 0a10 	vmov	r0, s16
   da528:	4619      	mov	r1, r3
   da52a:	f001 fd59 	bl	dbfe0 <__aeabi_dcmpun>
   da52e:	4b38      	ldr	r3, [pc, #224]	; (da610 <pow+0x2d0>)
   da530:	2800      	cmp	r0, #0
   da532:	f040 8096 	bne.w	da662 <pow+0x322>
   da536:	f993 8000 	ldrsb.w	r8, [r3]
   da53a:	900a      	str	r0, [sp, #40]	; 0x28
   da53c:	2303      	movs	r3, #3
   da53e:	9302      	str	r3, [sp, #8]
   da540:	4b34      	ldr	r3, [pc, #208]	; (da614 <pow+0x2d4>)
   da542:	9303      	str	r3, [sp, #12]
   da544:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da548:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da54c:	f1b8 0f00 	cmp.w	r8, #0
   da550:	d126      	bne.n	da5a0 <pow+0x260>
   da552:	f8df 90d0 	ldr.w	r9, [pc, #208]	; da624 <pow+0x2e4>
   da556:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   da55a:	4652      	mov	r2, sl
   da55c:	465b      	mov	r3, fp
   da55e:	4630      	mov	r0, r6
   da560:	4639      	mov	r1, r7
   da562:	e9cd 8908 	strd	r8, r9, [sp, #32]
   da566:	f001 fd13 	bl	dbf90 <__aeabi_dcmplt>
   da56a:	bb48      	cbnz	r0, da5c0 <pow+0x280>
   da56c:	a802      	add	r0, sp, #8
   da56e:	f000 ffaf 	bl	db4d0 <matherr>
   da572:	2800      	cmp	r0, #0
   da574:	d19b      	bne.n	da4ae <pow+0x16e>
   da576:	f7fd fc89 	bl	d7e8c <__errno>
   da57a:	2322      	movs	r3, #34	; 0x22
   da57c:	6003      	str	r3, [r0, #0]
   da57e:	e796      	b.n	da4ae <pow+0x16e>
   da580:	4925      	ldr	r1, [pc, #148]	; (da618 <pow+0x2d8>)
   da582:	2000      	movs	r0, #0
   da584:	2b02      	cmp	r3, #2
   da586:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da58a:	d18b      	bne.n	da4a4 <pow+0x164>
   da58c:	f7fd fc7e 	bl	d7e8c <__errno>
   da590:	2321      	movs	r3, #33	; 0x21
   da592:	6003      	str	r3, [r0, #0]
   da594:	e78b      	b.n	da4ae <pow+0x16e>
   da596:	f7fd fc79 	bl	d7e8c <__errno>
   da59a:	2321      	movs	r3, #33	; 0x21
   da59c:	6003      	str	r3, [r0, #0]
   da59e:	e7a8      	b.n	da4f2 <pow+0x1b2>
   da5a0:	ed9f 7b19 	vldr	d7, [pc, #100]	; da608 <pow+0x2c8>
   da5a4:	4652      	mov	r2, sl
   da5a6:	465b      	mov	r3, fp
   da5a8:	4630      	mov	r0, r6
   da5aa:	4639      	mov	r1, r7
   da5ac:	ed8d 7b08 	vstr	d7, [sp, #32]
   da5b0:	f001 fcee 	bl	dbf90 <__aeabi_dcmplt>
   da5b4:	2800      	cmp	r0, #0
   da5b6:	d137      	bne.n	da628 <pow+0x2e8>
   da5b8:	f1b8 0f02 	cmp.w	r8, #2
   da5bc:	d0db      	beq.n	da576 <pow+0x236>
   da5be:	e7d5      	b.n	da56c <pow+0x22c>
   da5c0:	4b16      	ldr	r3, [pc, #88]	; (da61c <pow+0x2dc>)
   da5c2:	2200      	movs	r2, #0
   da5c4:	4620      	mov	r0, r4
   da5c6:	4629      	mov	r1, r5
   da5c8:	f001 fa70 	bl	dbaac <__aeabi_dmul>
   da5cc:	4602      	mov	r2, r0
   da5ce:	460b      	mov	r3, r1
   da5d0:	ec43 2b10 	vmov	d0, r2, r3
   da5d4:	e9cd 2300 	strd	r2, r3, [sp]
   da5d8:	f000 ff86 	bl	db4e8 <rint>
   da5dc:	e9dd 2300 	ldrd	r2, r3, [sp]
   da5e0:	ec51 0b10 	vmov	r0, r1, d0
   da5e4:	f001 fcca 	bl	dbf7c <__aeabi_dcmpeq>
   da5e8:	2800      	cmp	r0, #0
   da5ea:	d136      	bne.n	da65a <pow+0x31a>
   da5ec:	4b0c      	ldr	r3, [pc, #48]	; (da620 <pow+0x2e0>)
   da5ee:	4908      	ldr	r1, [pc, #32]	; (da610 <pow+0x2d0>)
   da5f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da5f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da5f8:	f991 8000 	ldrsb.w	r8, [r1]
   da5fc:	e7dc      	b.n	da5b8 <pow+0x278>
   da5fe:	bf00      	nop
   da600:	00000000 	.word	0x00000000
   da604:	3ff00000 	.word	0x3ff00000
   da608:	00000000 	.word	0x00000000
   da60c:	7ff00000 	.word	0x7ff00000
   da610:	2003e0a8 	.word	0x2003e0a8
   da614:	000def18 	.word	0x000def18
   da618:	fff00000 	.word	0xfff00000
   da61c:	3fe00000 	.word	0x3fe00000
   da620:	c7efffff 	.word	0xc7efffff
   da624:	47efffff 	.word	0x47efffff
   da628:	4b1c      	ldr	r3, [pc, #112]	; (da69c <pow+0x35c>)
   da62a:	2200      	movs	r2, #0
   da62c:	4620      	mov	r0, r4
   da62e:	4629      	mov	r1, r5
   da630:	f001 fa3c 	bl	dbaac <__aeabi_dmul>
   da634:	4602      	mov	r2, r0
   da636:	460b      	mov	r3, r1
   da638:	ec43 2b10 	vmov	d0, r2, r3
   da63c:	e9cd 2300 	strd	r2, r3, [sp]
   da640:	f000 ff52 	bl	db4e8 <rint>
   da644:	e9dd 2300 	ldrd	r2, r3, [sp]
   da648:	ec51 0b10 	vmov	r0, r1, d0
   da64c:	f001 fc96 	bl	dbf7c <__aeabi_dcmpeq>
   da650:	b918      	cbnz	r0, da65a <pow+0x31a>
   da652:	4b13      	ldr	r3, [pc, #76]	; (da6a0 <pow+0x360>)
   da654:	2200      	movs	r2, #0
   da656:	e9cd 2308 	strd	r2, r3, [sp, #32]
   da65a:	4b12      	ldr	r3, [pc, #72]	; (da6a4 <pow+0x364>)
   da65c:	f993 8000 	ldrsb.w	r8, [r3]
   da660:	e7aa      	b.n	da5b8 <pow+0x278>
   da662:	f993 9000 	ldrsb.w	r9, [r3]
   da666:	4b10      	ldr	r3, [pc, #64]	; (da6a8 <pow+0x368>)
   da668:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   da66c:	2201      	movs	r2, #1
   da66e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   da672:	e9cd 4506 	strd	r4, r5, [sp, #24]
   da676:	e9cd 2302 	strd	r2, r3, [sp, #8]
   da67a:	f1b9 0f00 	cmp.w	r9, #0
   da67e:	f43f af0f 	beq.w	da4a0 <pow+0x160>
   da682:	4652      	mov	r2, sl
   da684:	465b      	mov	r3, fp
   da686:	4650      	mov	r0, sl
   da688:	4659      	mov	r1, fp
   da68a:	f001 fb39 	bl	dbd00 <__aeabi_ddiv>
   da68e:	f1b9 0f02 	cmp.w	r9, #2
   da692:	e9cd 0108 	strd	r0, r1, [sp, #32]
   da696:	f43f af79 	beq.w	da58c <pow+0x24c>
   da69a:	e703      	b.n	da4a4 <pow+0x164>
   da69c:	3fe00000 	.word	0x3fe00000
   da6a0:	fff00000 	.word	0xfff00000
   da6a4:	2003e0a8 	.word	0x2003e0a8
   da6a8:	000def18 	.word	0x000def18

000da6ac <sqrt>:
   da6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da6b0:	ed2d 8b02 	vpush	{d8}
   da6b4:	b08b      	sub	sp, #44	; 0x2c
   da6b6:	ec55 4b10 	vmov	r4, r5, d0
   da6ba:	f000 fe2f 	bl	db31c <__ieee754_sqrt>
   da6be:	4b28      	ldr	r3, [pc, #160]	; (da760 <sqrt+0xb4>)
   da6c0:	eeb0 8a40 	vmov.f32	s16, s0
   da6c4:	eef0 8a60 	vmov.f32	s17, s1
   da6c8:	f993 7000 	ldrsb.w	r7, [r3]
   da6cc:	1c7b      	adds	r3, r7, #1
   da6ce:	d012      	beq.n	da6f6 <sqrt+0x4a>
   da6d0:	4622      	mov	r2, r4
   da6d2:	462b      	mov	r3, r5
   da6d4:	4620      	mov	r0, r4
   da6d6:	4629      	mov	r1, r5
   da6d8:	f001 fc82 	bl	dbfe0 <__aeabi_dcmpun>
   da6dc:	4606      	mov	r6, r0
   da6de:	b950      	cbnz	r0, da6f6 <sqrt+0x4a>
   da6e0:	f04f 0800 	mov.w	r8, #0
   da6e4:	f04f 0900 	mov.w	r9, #0
   da6e8:	4620      	mov	r0, r4
   da6ea:	4629      	mov	r1, r5
   da6ec:	4642      	mov	r2, r8
   da6ee:	464b      	mov	r3, r9
   da6f0:	f001 fc4e 	bl	dbf90 <__aeabi_dcmplt>
   da6f4:	b940      	cbnz	r0, da708 <sqrt+0x5c>
   da6f6:	eeb0 0a48 	vmov.f32	s0, s16
   da6fa:	eef0 0a68 	vmov.f32	s1, s17
   da6fe:	b00b      	add	sp, #44	; 0x2c
   da700:	ecbd 8b02 	vpop	{d8}
   da704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da708:	4b16      	ldr	r3, [pc, #88]	; (da764 <sqrt+0xb8>)
   da70a:	9608      	str	r6, [sp, #32]
   da70c:	2201      	movs	r2, #1
   da70e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da712:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da716:	9200      	str	r2, [sp, #0]
   da718:	9301      	str	r3, [sp, #4]
   da71a:	b197      	cbz	r7, da742 <sqrt+0x96>
   da71c:	4642      	mov	r2, r8
   da71e:	464b      	mov	r3, r9
   da720:	4640      	mov	r0, r8
   da722:	4649      	mov	r1, r9
   da724:	f001 faec 	bl	dbd00 <__aeabi_ddiv>
   da728:	2f02      	cmp	r7, #2
   da72a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da72e:	d10a      	bne.n	da746 <sqrt+0x9a>
   da730:	f7fd fbac 	bl	d7e8c <__errno>
   da734:	2321      	movs	r3, #33	; 0x21
   da736:	6003      	str	r3, [r0, #0]
   da738:	9b08      	ldr	r3, [sp, #32]
   da73a:	b963      	cbnz	r3, da756 <sqrt+0xaa>
   da73c:	ed9d 8b06 	vldr	d8, [sp, #24]
   da740:	e7d9      	b.n	da6f6 <sqrt+0x4a>
   da742:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da746:	4668      	mov	r0, sp
   da748:	f000 fec2 	bl	db4d0 <matherr>
   da74c:	2800      	cmp	r0, #0
   da74e:	d0ef      	beq.n	da730 <sqrt+0x84>
   da750:	9b08      	ldr	r3, [sp, #32]
   da752:	2b00      	cmp	r3, #0
   da754:	d0f2      	beq.n	da73c <sqrt+0x90>
   da756:	f7fd fb99 	bl	d7e8c <__errno>
   da75a:	9b08      	ldr	r3, [sp, #32]
   da75c:	6003      	str	r3, [r0, #0]
   da75e:	e7ed      	b.n	da73c <sqrt+0x90>
   da760:	2003e0a8 	.word	0x2003e0a8
   da764:	000def1c 	.word	0x000def1c

000da768 <__ieee754_pow>:
   da768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da76c:	ec57 6b11 	vmov	r6, r7, d1
   da770:	ed2d 8b0a 	vpush	{d8-d12}
   da774:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   da778:	ea5a 0206 	orrs.w	r2, sl, r6
   da77c:	b089      	sub	sp, #36	; 0x24
   da77e:	d03d      	beq.n	da7fc <__ieee754_pow+0x94>
   da780:	ec55 4b10 	vmov	r4, r5, d0
   da784:	4976      	ldr	r1, [pc, #472]	; (da960 <__ieee754_pow+0x1f8>)
   da786:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   da78a:	4588      	cmp	r8, r1
   da78c:	ee10 2a10 	vmov	r2, s0
   da790:	46a9      	mov	r9, r5
   da792:	dc2c      	bgt.n	da7ee <__ieee754_pow+0x86>
   da794:	ee11 3a10 	vmov	r3, s2
   da798:	46bb      	mov	fp, r7
   da79a:	d03a      	beq.n	da812 <__ieee754_pow+0xaa>
   da79c:	458a      	cmp	sl, r1
   da79e:	dc26      	bgt.n	da7ee <__ieee754_pow+0x86>
   da7a0:	496f      	ldr	r1, [pc, #444]	; (da960 <__ieee754_pow+0x1f8>)
   da7a2:	458a      	cmp	sl, r1
   da7a4:	d021      	beq.n	da7ea <__ieee754_pow+0x82>
   da7a6:	f1b9 0f00 	cmp.w	r9, #0
   da7aa:	db3d      	blt.n	da828 <__ieee754_pow+0xc0>
   da7ac:	2100      	movs	r1, #0
   da7ae:	9103      	str	r1, [sp, #12]
   da7b0:	2b00      	cmp	r3, #0
   da7b2:	d155      	bne.n	da860 <__ieee754_pow+0xf8>
   da7b4:	4b6a      	ldr	r3, [pc, #424]	; (da960 <__ieee754_pow+0x1f8>)
   da7b6:	459a      	cmp	sl, r3
   da7b8:	f000 80a8 	beq.w	da90c <__ieee754_pow+0x1a4>
   da7bc:	4b69      	ldr	r3, [pc, #420]	; (da964 <__ieee754_pow+0x1fc>)
   da7be:	459a      	cmp	sl, r3
   da7c0:	f000 80b6 	beq.w	da930 <__ieee754_pow+0x1c8>
   da7c4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   da7c8:	f000 8501 	beq.w	db1ce <__ieee754_pow+0xa66>
   da7cc:	4b66      	ldr	r3, [pc, #408]	; (da968 <__ieee754_pow+0x200>)
   da7ce:	459b      	cmp	fp, r3
   da7d0:	d146      	bne.n	da860 <__ieee754_pow+0xf8>
   da7d2:	f1b9 0f00 	cmp.w	r9, #0
   da7d6:	db43      	blt.n	da860 <__ieee754_pow+0xf8>
   da7d8:	ec45 4b10 	vmov	d0, r4, r5
   da7dc:	b009      	add	sp, #36	; 0x24
   da7de:	ecbd 8b0a 	vpop	{d8-d12}
   da7e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7e6:	f000 bd99 	b.w	db31c <__ieee754_sqrt>
   da7ea:	2b00      	cmp	r3, #0
   da7ec:	d0db      	beq.n	da7a6 <__ieee754_pow+0x3e>
   da7ee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da7f2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da7f6:	ea58 0302 	orrs.w	r3, r8, r2
   da7fa:	d10d      	bne.n	da818 <__ieee754_pow+0xb0>
   da7fc:	ed9f 7b54 	vldr	d7, [pc, #336]	; da950 <__ieee754_pow+0x1e8>
   da800:	ed8d 7b00 	vstr	d7, [sp]
   da804:	ed9d 0b00 	vldr	d0, [sp]
   da808:	b009      	add	sp, #36	; 0x24
   da80a:	ecbd 8b0a 	vpop	{d8-d12}
   da80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da812:	b90c      	cbnz	r4, da818 <__ieee754_pow+0xb0>
   da814:	45c2      	cmp	sl, r8
   da816:	ddc3      	ble.n	da7a0 <__ieee754_pow+0x38>
   da818:	4854      	ldr	r0, [pc, #336]	; (da96c <__ieee754_pow+0x204>)
   da81a:	b009      	add	sp, #36	; 0x24
   da81c:	ecbd 8b0a 	vpop	{d8-d12}
   da820:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da824:	f000 be58 	b.w	db4d8 <nan>
   da828:	4951      	ldr	r1, [pc, #324]	; (da970 <__ieee754_pow+0x208>)
   da82a:	458a      	cmp	sl, r1
   da82c:	f300 8087 	bgt.w	da93e <__ieee754_pow+0x1d6>
   da830:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   da834:	458a      	cmp	sl, r1
   da836:	dd0f      	ble.n	da858 <__ieee754_pow+0xf0>
   da838:	ea4f 512a 	mov.w	r1, sl, asr #20
   da83c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   da840:	2914      	cmp	r1, #20
   da842:	f340 84ce 	ble.w	db1e2 <__ieee754_pow+0xa7a>
   da846:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   da84a:	fa23 f001 	lsr.w	r0, r3, r1
   da84e:	fa00 f101 	lsl.w	r1, r0, r1
   da852:	4299      	cmp	r1, r3
   da854:	f000 8520 	beq.w	db298 <__ieee754_pow+0xb30>
   da858:	2100      	movs	r1, #0
   da85a:	9103      	str	r1, [sp, #12]
   da85c:	2b00      	cmp	r3, #0
   da85e:	d0ad      	beq.n	da7bc <__ieee754_pow+0x54>
   da860:	ec45 4b10 	vmov	d0, r4, r5
   da864:	9206      	str	r2, [sp, #24]
   da866:	f000 fe1d 	bl	db4a4 <fabs>
   da86a:	9a06      	ldr	r2, [sp, #24]
   da86c:	ed8d 0b00 	vstr	d0, [sp]
   da870:	bb5a      	cbnz	r2, da8ca <__ieee754_pow+0x162>
   da872:	f1b8 0f00 	cmp.w	r8, #0
   da876:	d004      	beq.n	da882 <__ieee754_pow+0x11a>
   da878:	4b3a      	ldr	r3, [pc, #232]	; (da964 <__ieee754_pow+0x1fc>)
   da87a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   da87e:	429a      	cmp	r2, r3
   da880:	d123      	bne.n	da8ca <__ieee754_pow+0x162>
   da882:	f1bb 0f00 	cmp.w	fp, #0
   da886:	da07      	bge.n	da898 <__ieee754_pow+0x130>
   da888:	e9dd 2300 	ldrd	r2, r3, [sp]
   da88c:	4935      	ldr	r1, [pc, #212]	; (da964 <__ieee754_pow+0x1fc>)
   da88e:	2000      	movs	r0, #0
   da890:	f001 fa36 	bl	dbd00 <__aeabi_ddiv>
   da894:	e9cd 0100 	strd	r0, r1, [sp]
   da898:	f1b9 0f00 	cmp.w	r9, #0
   da89c:	dab2      	bge.n	da804 <__ieee754_pow+0x9c>
   da89e:	9b03      	ldr	r3, [sp, #12]
   da8a0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   da8a4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   da8a8:	ea58 0303 	orrs.w	r3, r8, r3
   da8ac:	f040 84be 	bne.w	db22c <__ieee754_pow+0xac4>
   da8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   da8b4:	4610      	mov	r0, r2
   da8b6:	4619      	mov	r1, r3
   da8b8:	f000 ff40 	bl	db73c <__aeabi_dsub>
   da8bc:	4602      	mov	r2, r0
   da8be:	460b      	mov	r3, r1
   da8c0:	f001 fa1e 	bl	dbd00 <__aeabi_ddiv>
   da8c4:	e9cd 0100 	strd	r0, r1, [sp]
   da8c8:	e79c      	b.n	da804 <__ieee754_pow+0x9c>
   da8ca:	9a03      	ldr	r2, [sp, #12]
   da8cc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   da8d0:	3b01      	subs	r3, #1
   da8d2:	9306      	str	r3, [sp, #24]
   da8d4:	4313      	orrs	r3, r2
   da8d6:	d035      	beq.n	da944 <__ieee754_pow+0x1dc>
   da8d8:	4b26      	ldr	r3, [pc, #152]	; (da974 <__ieee754_pow+0x20c>)
   da8da:	459a      	cmp	sl, r3
   da8dc:	dd4e      	ble.n	da97c <__ieee754_pow+0x214>
   da8de:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   da8e2:	459a      	cmp	sl, r3
   da8e4:	4b24      	ldr	r3, [pc, #144]	; (da978 <__ieee754_pow+0x210>)
   da8e6:	f340 83ed 	ble.w	db0c4 <__ieee754_pow+0x95c>
   da8ea:	4598      	cmp	r8, r3
   da8ec:	f340 836b 	ble.w	dafc6 <__ieee754_pow+0x85e>
   da8f0:	f1bb 0f00 	cmp.w	fp, #0
   da8f4:	f340 836b 	ble.w	dafce <__ieee754_pow+0x866>
   da8f8:	a317      	add	r3, pc, #92	; (adr r3, da958 <__ieee754_pow+0x1f0>)
   da8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8fe:	4610      	mov	r0, r2
   da900:	4619      	mov	r1, r3
   da902:	f001 f8d3 	bl	dbaac <__aeabi_dmul>
   da906:	e9cd 0100 	strd	r0, r1, [sp]
   da90a:	e77b      	b.n	da804 <__ieee754_pow+0x9c>
   da90c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   da910:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   da914:	4313      	orrs	r3, r2
   da916:	f43f af71 	beq.w	da7fc <__ieee754_pow+0x94>
   da91a:	4b17      	ldr	r3, [pc, #92]	; (da978 <__ieee754_pow+0x210>)
   da91c:	4598      	cmp	r8, r3
   da91e:	f340 8388 	ble.w	db032 <__ieee754_pow+0x8ca>
   da922:	f1bb 0f00 	cmp.w	fp, #0
   da926:	f2c0 8352 	blt.w	dafce <__ieee754_pow+0x866>
   da92a:	e9cd 6700 	strd	r6, r7, [sp]
   da92e:	e769      	b.n	da804 <__ieee754_pow+0x9c>
   da930:	f1bb 0f00 	cmp.w	fp, #0
   da934:	f2c0 8441 	blt.w	db1ba <__ieee754_pow+0xa52>
   da938:	e9cd 4500 	strd	r4, r5, [sp]
   da93c:	e762      	b.n	da804 <__ieee754_pow+0x9c>
   da93e:	2102      	movs	r1, #2
   da940:	9103      	str	r1, [sp, #12]
   da942:	e735      	b.n	da7b0 <__ieee754_pow+0x48>
   da944:	4622      	mov	r2, r4
   da946:	462b      	mov	r3, r5
   da948:	e7b4      	b.n	da8b4 <__ieee754_pow+0x14c>
   da94a:	bf00      	nop
   da94c:	f3af 8000 	nop.w
   da950:	00000000 	.word	0x00000000
   da954:	3ff00000 	.word	0x3ff00000
   da958:	8800759c 	.word	0x8800759c
   da95c:	7e37e43c 	.word	0x7e37e43c
   da960:	7ff00000 	.word	0x7ff00000
   da964:	3ff00000 	.word	0x3ff00000
   da968:	3fe00000 	.word	0x3fe00000
   da96c:	000def20 	.word	0x000def20
   da970:	433fffff 	.word	0x433fffff
   da974:	41e00000 	.word	0x41e00000
   da978:	3fefffff 	.word	0x3fefffff
   da97c:	4be4      	ldr	r3, [pc, #912]	; (dad10 <__ieee754_pow+0x5a8>)
   da97e:	ea09 0303 	and.w	r3, r9, r3
   da982:	2b00      	cmp	r3, #0
   da984:	f040 8416 	bne.w	db1b4 <__ieee754_pow+0xa4c>
   da988:	e9dd 0100 	ldrd	r0, r1, [sp]
   da98c:	4be1      	ldr	r3, [pc, #900]	; (dad14 <__ieee754_pow+0x5ac>)
   da98e:	2200      	movs	r2, #0
   da990:	f001 f88c 	bl	dbaac <__aeabi_dmul>
   da994:	e9cd 0100 	strd	r0, r1, [sp]
   da998:	f8dd 8004 	ldr.w	r8, [sp, #4]
   da99c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   da9a0:	ea4f 5328 	mov.w	r3, r8, asr #20
   da9a4:	49dc      	ldr	r1, [pc, #880]	; (dad18 <__ieee754_pow+0x5b0>)
   da9a6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   da9aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   da9ae:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   da9b2:	1818      	adds	r0, r3, r0
   da9b4:	428a      	cmp	r2, r1
   da9b6:	9007      	str	r0, [sp, #28]
   da9b8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   da9bc:	f340 83e9 	ble.w	db192 <__ieee754_pow+0xa2a>
   da9c0:	4bd6      	ldr	r3, [pc, #856]	; (dad1c <__ieee754_pow+0x5b4>)
   da9c2:	429a      	cmp	r2, r3
   da9c4:	f340 843e 	ble.w	db244 <__ieee754_pow+0xadc>
   da9c8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; dacb8 <__ieee754_pow+0x550>
   da9cc:	eeb0 ba47 	vmov.f32	s22, s14
   da9d0:	eef0 ba67 	vmov.f32	s23, s15
   da9d4:	eeb0 ca47 	vmov.f32	s24, s14
   da9d8:	eef0 ca67 	vmov.f32	s25, s15
   da9dc:	ed9f 7bb8 	vldr	d7, [pc, #736]	; dacc0 <__ieee754_pow+0x558>
   da9e0:	3001      	adds	r0, #1
   da9e2:	ec54 3b17 	vmov	r3, r4, d7
   da9e6:	9007      	str	r0, [sp, #28]
   da9e8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   da9ec:	f04f 0900 	mov.w	r9, #0
   da9f0:	e9dd ab00 	ldrd	sl, fp, [sp]
   da9f4:	ec44 3b18 	vmov	d8, r3, r4
   da9f8:	461a      	mov	r2, r3
   da9fa:	4650      	mov	r0, sl
   da9fc:	4623      	mov	r3, r4
   da9fe:	4641      	mov	r1, r8
   daa00:	f000 fe9c 	bl	db73c <__aeabi_dsub>
   daa04:	ec53 2b18 	vmov	r2, r3, d8
   daa08:	4604      	mov	r4, r0
   daa0a:	460d      	mov	r5, r1
   daa0c:	4650      	mov	r0, sl
   daa0e:	4641      	mov	r1, r8
   daa10:	f000 fe96 	bl	db740 <__adddf3>
   daa14:	4602      	mov	r2, r0
   daa16:	460b      	mov	r3, r1
   daa18:	2000      	movs	r0, #0
   daa1a:	49c1      	ldr	r1, [pc, #772]	; (dad20 <__ieee754_pow+0x5b8>)
   daa1c:	f001 f970 	bl	dbd00 <__aeabi_ddiv>
   daa20:	ec45 4b1a 	vmov	d10, r4, r5
   daa24:	ec41 0b19 	vmov	d9, r0, r1
   daa28:	ec51 0b1a 	vmov	r0, r1, d10
   daa2c:	ec53 2b19 	vmov	r2, r3, d9
   daa30:	f001 f83c 	bl	dbaac <__aeabi_dmul>
   daa34:	46c3      	mov	fp, r8
   daa36:	ea4f 0868 	mov.w	r8, r8, asr #1
   daa3a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   daa3e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   daa42:	eb03 0509 	add.w	r5, r3, r9
   daa46:	460a      	mov	r2, r1
   daa48:	2300      	movs	r3, #0
   daa4a:	4601      	mov	r1, r0
   daa4c:	e9cd 1200 	strd	r1, r2, [sp]
   daa50:	9300      	str	r3, [sp, #0]
   daa52:	e9dd 8900 	ldrd	r8, r9, [sp]
   daa56:	2400      	movs	r4, #0
   daa58:	e9cd 1204 	strd	r1, r2, [sp, #16]
   daa5c:	462b      	mov	r3, r5
   daa5e:	4622      	mov	r2, r4
   daa60:	4640      	mov	r0, r8
   daa62:	4649      	mov	r1, r9
   daa64:	f001 f822 	bl	dbaac <__aeabi_dmul>
   daa68:	4602      	mov	r2, r0
   daa6a:	460b      	mov	r3, r1
   daa6c:	ec51 0b1a 	vmov	r0, r1, d10
   daa70:	f000 fe64 	bl	db73c <__aeabi_dsub>
   daa74:	ec41 0b17 	vmov	d7, r0, r1
   daa78:	ec53 2b18 	vmov	r2, r3, d8
   daa7c:	4620      	mov	r0, r4
   daa7e:	4629      	mov	r1, r5
   daa80:	ec55 4b17 	vmov	r4, r5, d7
   daa84:	f000 fe5a 	bl	db73c <__aeabi_dsub>
   daa88:	4602      	mov	r2, r0
   daa8a:	460b      	mov	r3, r1
   daa8c:	4650      	mov	r0, sl
   daa8e:	4659      	mov	r1, fp
   daa90:	f000 fe54 	bl	db73c <__aeabi_dsub>
   daa94:	4642      	mov	r2, r8
   daa96:	464b      	mov	r3, r9
   daa98:	f001 f808 	bl	dbaac <__aeabi_dmul>
   daa9c:	4602      	mov	r2, r0
   daa9e:	460b      	mov	r3, r1
   daaa0:	4620      	mov	r0, r4
   daaa2:	4629      	mov	r1, r5
   daaa4:	f000 fe4a 	bl	db73c <__aeabi_dsub>
   daaa8:	ec53 2b19 	vmov	r2, r3, d9
   daaac:	f000 fffe 	bl	dbaac <__aeabi_dmul>
   daab0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   daab4:	4604      	mov	r4, r0
   daab6:	460d      	mov	r5, r1
   daab8:	4652      	mov	r2, sl
   daaba:	465b      	mov	r3, fp
   daabc:	4650      	mov	r0, sl
   daabe:	4659      	mov	r1, fp
   daac0:	f000 fff4 	bl	dbaac <__aeabi_dmul>
   daac4:	a380      	add	r3, pc, #512	; (adr r3, dacc8 <__ieee754_pow+0x560>)
   daac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   daaca:	ec45 4b1a 	vmov	d10, r4, r5
   daace:	4604      	mov	r4, r0
   daad0:	460d      	mov	r5, r1
   daad2:	f000 ffeb 	bl	dbaac <__aeabi_dmul>
   daad6:	a37e      	add	r3, pc, #504	; (adr r3, dacd0 <__ieee754_pow+0x568>)
   daad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   daadc:	f000 fe30 	bl	db740 <__adddf3>
   daae0:	4622      	mov	r2, r4
   daae2:	462b      	mov	r3, r5
   daae4:	f000 ffe2 	bl	dbaac <__aeabi_dmul>
   daae8:	a37b      	add	r3, pc, #492	; (adr r3, dacd8 <__ieee754_pow+0x570>)
   daaea:	e9d3 2300 	ldrd	r2, r3, [r3]
   daaee:	f000 fe27 	bl	db740 <__adddf3>
   daaf2:	4622      	mov	r2, r4
   daaf4:	462b      	mov	r3, r5
   daaf6:	f000 ffd9 	bl	dbaac <__aeabi_dmul>
   daafa:	a379      	add	r3, pc, #484	; (adr r3, dace0 <__ieee754_pow+0x578>)
   daafc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab00:	f000 fe1e 	bl	db740 <__adddf3>
   dab04:	4622      	mov	r2, r4
   dab06:	462b      	mov	r3, r5
   dab08:	f000 ffd0 	bl	dbaac <__aeabi_dmul>
   dab0c:	a376      	add	r3, pc, #472	; (adr r3, dace8 <__ieee754_pow+0x580>)
   dab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab12:	f000 fe15 	bl	db740 <__adddf3>
   dab16:	4622      	mov	r2, r4
   dab18:	462b      	mov	r3, r5
   dab1a:	f000 ffc7 	bl	dbaac <__aeabi_dmul>
   dab1e:	a374      	add	r3, pc, #464	; (adr r3, dacf0 <__ieee754_pow+0x588>)
   dab20:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab24:	f000 fe0c 	bl	db740 <__adddf3>
   dab28:	4622      	mov	r2, r4
   dab2a:	462b      	mov	r3, r5
   dab2c:	4604      	mov	r4, r0
   dab2e:	460d      	mov	r5, r1
   dab30:	4610      	mov	r0, r2
   dab32:	4619      	mov	r1, r3
   dab34:	f000 ffba 	bl	dbaac <__aeabi_dmul>
   dab38:	4602      	mov	r2, r0
   dab3a:	460b      	mov	r3, r1
   dab3c:	4620      	mov	r0, r4
   dab3e:	4629      	mov	r1, r5
   dab40:	f000 ffb4 	bl	dbaac <__aeabi_dmul>
   dab44:	4642      	mov	r2, r8
   dab46:	4604      	mov	r4, r0
   dab48:	460d      	mov	r5, r1
   dab4a:	464b      	mov	r3, r9
   dab4c:	4650      	mov	r0, sl
   dab4e:	4659      	mov	r1, fp
   dab50:	e9cd ab04 	strd	sl, fp, [sp, #16]
   dab54:	f000 fdf4 	bl	db740 <__adddf3>
   dab58:	ec53 2b1a 	vmov	r2, r3, d10
   dab5c:	f000 ffa6 	bl	dbaac <__aeabi_dmul>
   dab60:	4622      	mov	r2, r4
   dab62:	462b      	mov	r3, r5
   dab64:	f000 fdec 	bl	db740 <__adddf3>
   dab68:	4642      	mov	r2, r8
   dab6a:	4604      	mov	r4, r0
   dab6c:	460d      	mov	r5, r1
   dab6e:	464b      	mov	r3, r9
   dab70:	4640      	mov	r0, r8
   dab72:	4649      	mov	r1, r9
   dab74:	f000 ff9a 	bl	dbaac <__aeabi_dmul>
   dab78:	ec45 4b19 	vmov	d9, r4, r5
   dab7c:	4b69      	ldr	r3, [pc, #420]	; (dad24 <__ieee754_pow+0x5bc>)
   dab7e:	2200      	movs	r2, #0
   dab80:	4682      	mov	sl, r0
   dab82:	468b      	mov	fp, r1
   dab84:	f000 fddc 	bl	db740 <__adddf3>
   dab88:	ec53 2b19 	vmov	r2, r3, d9
   dab8c:	f000 fdd8 	bl	db740 <__adddf3>
   dab90:	9c00      	ldr	r4, [sp, #0]
   dab92:	460d      	mov	r5, r1
   dab94:	4622      	mov	r2, r4
   dab96:	462b      	mov	r3, r5
   dab98:	4640      	mov	r0, r8
   dab9a:	4649      	mov	r1, r9
   dab9c:	f000 ff86 	bl	dbaac <__aeabi_dmul>
   daba0:	4b60      	ldr	r3, [pc, #384]	; (dad24 <__ieee754_pow+0x5bc>)
   daba2:	4680      	mov	r8, r0
   daba4:	4689      	mov	r9, r1
   daba6:	2200      	movs	r2, #0
   daba8:	4620      	mov	r0, r4
   dabaa:	4629      	mov	r1, r5
   dabac:	f000 fdc6 	bl	db73c <__aeabi_dsub>
   dabb0:	4652      	mov	r2, sl
   dabb2:	465b      	mov	r3, fp
   dabb4:	f000 fdc2 	bl	db73c <__aeabi_dsub>
   dabb8:	4602      	mov	r2, r0
   dabba:	460b      	mov	r3, r1
   dabbc:	ec51 0b19 	vmov	r0, r1, d9
   dabc0:	f000 fdbc 	bl	db73c <__aeabi_dsub>
   dabc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dabc8:	f000 ff70 	bl	dbaac <__aeabi_dmul>
   dabcc:	ec49 8b18 	vmov	d8, r8, r9
   dabd0:	4622      	mov	r2, r4
   dabd2:	4680      	mov	r8, r0
   dabd4:	4689      	mov	r9, r1
   dabd6:	462b      	mov	r3, r5
   dabd8:	ec51 0b1a 	vmov	r0, r1, d10
   dabdc:	f000 ff66 	bl	dbaac <__aeabi_dmul>
   dabe0:	4602      	mov	r2, r0
   dabe2:	460b      	mov	r3, r1
   dabe4:	4640      	mov	r0, r8
   dabe6:	4649      	mov	r1, r9
   dabe8:	f000 fdaa 	bl	db740 <__adddf3>
   dabec:	4682      	mov	sl, r0
   dabee:	468b      	mov	fp, r1
   dabf0:	4652      	mov	r2, sl
   dabf2:	465b      	mov	r3, fp
   dabf4:	ec51 0b18 	vmov	r0, r1, d8
   dabf8:	f000 fda2 	bl	db740 <__adddf3>
   dabfc:	9c00      	ldr	r4, [sp, #0]
   dabfe:	a33e      	add	r3, pc, #248	; (adr r3, dacf8 <__ieee754_pow+0x590>)
   dac00:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac04:	4620      	mov	r0, r4
   dac06:	460d      	mov	r5, r1
   dac08:	f000 ff50 	bl	dbaac <__aeabi_dmul>
   dac0c:	ec53 2b18 	vmov	r2, r3, d8
   dac10:	4680      	mov	r8, r0
   dac12:	4689      	mov	r9, r1
   dac14:	4620      	mov	r0, r4
   dac16:	4629      	mov	r1, r5
   dac18:	f000 fd90 	bl	db73c <__aeabi_dsub>
   dac1c:	4602      	mov	r2, r0
   dac1e:	460b      	mov	r3, r1
   dac20:	4650      	mov	r0, sl
   dac22:	4659      	mov	r1, fp
   dac24:	f000 fd8a 	bl	db73c <__aeabi_dsub>
   dac28:	a335      	add	r3, pc, #212	; (adr r3, dad00 <__ieee754_pow+0x598>)
   dac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac2e:	f000 ff3d 	bl	dbaac <__aeabi_dmul>
   dac32:	ec49 8b19 	vmov	d9, r8, r9
   dac36:	a334      	add	r3, pc, #208	; (adr r3, dad08 <__ieee754_pow+0x5a0>)
   dac38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac3c:	4680      	mov	r8, r0
   dac3e:	4689      	mov	r9, r1
   dac40:	4620      	mov	r0, r4
   dac42:	4629      	mov	r1, r5
   dac44:	f000 ff32 	bl	dbaac <__aeabi_dmul>
   dac48:	4602      	mov	r2, r0
   dac4a:	460b      	mov	r3, r1
   dac4c:	4640      	mov	r0, r8
   dac4e:	4649      	mov	r1, r9
   dac50:	f000 fd76 	bl	db740 <__adddf3>
   dac54:	ec53 2b1c 	vmov	r2, r3, d12
   dac58:	f000 fd72 	bl	db740 <__adddf3>
   dac5c:	4682      	mov	sl, r0
   dac5e:	9807      	ldr	r0, [sp, #28]
   dac60:	468b      	mov	fp, r1
   dac62:	f000 feb9 	bl	db9d8 <__aeabi_i2d>
   dac66:	4652      	mov	r2, sl
   dac68:	4680      	mov	r8, r0
   dac6a:	4689      	mov	r9, r1
   dac6c:	465b      	mov	r3, fp
   dac6e:	ec51 0b19 	vmov	r0, r1, d9
   dac72:	f000 fd65 	bl	db740 <__adddf3>
   dac76:	ec53 2b1b 	vmov	r2, r3, d11
   dac7a:	f000 fd61 	bl	db740 <__adddf3>
   dac7e:	4642      	mov	r2, r8
   dac80:	464b      	mov	r3, r9
   dac82:	f000 fd5d 	bl	db740 <__adddf3>
   dac86:	9c00      	ldr	r4, [sp, #0]
   dac88:	4642      	mov	r2, r8
   dac8a:	464b      	mov	r3, r9
   dac8c:	4620      	mov	r0, r4
   dac8e:	460d      	mov	r5, r1
   dac90:	f000 fd54 	bl	db73c <__aeabi_dsub>
   dac94:	ec53 2b1b 	vmov	r2, r3, d11
   dac98:	f000 fd50 	bl	db73c <__aeabi_dsub>
   dac9c:	ec53 2b19 	vmov	r2, r3, d9
   daca0:	f000 fd4c 	bl	db73c <__aeabi_dsub>
   daca4:	4602      	mov	r2, r0
   daca6:	460b      	mov	r3, r1
   daca8:	4650      	mov	r0, sl
   dacaa:	4659      	mov	r1, fp
   dacac:	f000 fd46 	bl	db73c <__aeabi_dsub>
   dacb0:	4682      	mov	sl, r0
   dacb2:	468b      	mov	fp, r1
   dacb4:	e038      	b.n	dad28 <__ieee754_pow+0x5c0>
   dacb6:	bf00      	nop
	...
   dacc4:	3ff00000 	.word	0x3ff00000
   dacc8:	4a454eef 	.word	0x4a454eef
   daccc:	3fca7e28 	.word	0x3fca7e28
   dacd0:	93c9db65 	.word	0x93c9db65
   dacd4:	3fcd864a 	.word	0x3fcd864a
   dacd8:	a91d4101 	.word	0xa91d4101
   dacdc:	3fd17460 	.word	0x3fd17460
   dace0:	518f264d 	.word	0x518f264d
   dace4:	3fd55555 	.word	0x3fd55555
   dace8:	db6fabff 	.word	0xdb6fabff
   dacec:	3fdb6db6 	.word	0x3fdb6db6
   dacf0:	33333303 	.word	0x33333303
   dacf4:	3fe33333 	.word	0x3fe33333
   dacf8:	e0000000 	.word	0xe0000000
   dacfc:	3feec709 	.word	0x3feec709
   dad00:	dc3a03fd 	.word	0xdc3a03fd
   dad04:	3feec709 	.word	0x3feec709
   dad08:	145b01f5 	.word	0x145b01f5
   dad0c:	be3e2fe0 	.word	0xbe3e2fe0
   dad10:	7ff00000 	.word	0x7ff00000
   dad14:	43400000 	.word	0x43400000
   dad18:	0003988e 	.word	0x0003988e
   dad1c:	000bb679 	.word	0x000bb679
   dad20:	3ff00000 	.word	0x3ff00000
   dad24:	40080000 	.word	0x40080000
   dad28:	9b03      	ldr	r3, [sp, #12]
   dad2a:	9a06      	ldr	r2, [sp, #24]
   dad2c:	3b01      	subs	r3, #1
   dad2e:	4313      	orrs	r3, r2
   dad30:	f040 8178 	bne.w	db024 <__ieee754_pow+0x8bc>
   dad34:	ed9f 7bc4 	vldr	d7, [pc, #784]	; db048 <__ieee754_pow+0x8e0>
   dad38:	eeb0 9a47 	vmov.f32	s18, s14
   dad3c:	eef0 9a67 	vmov.f32	s19, s15
   dad40:	2300      	movs	r3, #0
   dad42:	e9cd 6700 	strd	r6, r7, [sp]
   dad46:	9300      	str	r3, [sp, #0]
   dad48:	e9dd 8900 	ldrd	r8, r9, [sp]
   dad4c:	4630      	mov	r0, r6
   dad4e:	4642      	mov	r2, r8
   dad50:	4639      	mov	r1, r7
   dad52:	464b      	mov	r3, r9
   dad54:	f000 fcf2 	bl	db73c <__aeabi_dsub>
   dad58:	4622      	mov	r2, r4
   dad5a:	462b      	mov	r3, r5
   dad5c:	f000 fea6 	bl	dbaac <__aeabi_dmul>
   dad60:	4632      	mov	r2, r6
   dad62:	463b      	mov	r3, r7
   dad64:	4606      	mov	r6, r0
   dad66:	460f      	mov	r7, r1
   dad68:	4650      	mov	r0, sl
   dad6a:	4659      	mov	r1, fp
   dad6c:	f000 fe9e 	bl	dbaac <__aeabi_dmul>
   dad70:	4602      	mov	r2, r0
   dad72:	460b      	mov	r3, r1
   dad74:	4630      	mov	r0, r6
   dad76:	4639      	mov	r1, r7
   dad78:	f000 fce2 	bl	db740 <__adddf3>
   dad7c:	4642      	mov	r2, r8
   dad7e:	4682      	mov	sl, r0
   dad80:	468b      	mov	fp, r1
   dad82:	464b      	mov	r3, r9
   dad84:	4620      	mov	r0, r4
   dad86:	4629      	mov	r1, r5
   dad88:	f000 fe90 	bl	dbaac <__aeabi_dmul>
   dad8c:	4606      	mov	r6, r0
   dad8e:	460f      	mov	r7, r1
   dad90:	463b      	mov	r3, r7
   dad92:	4650      	mov	r0, sl
   dad94:	4659      	mov	r1, fp
   dad96:	4632      	mov	r2, r6
   dad98:	f000 fcd2 	bl	db740 <__adddf3>
   dad9c:	4bc4      	ldr	r3, [pc, #784]	; (db0b0 <__ieee754_pow+0x948>)
   dad9e:	4299      	cmp	r1, r3
   dada0:	4604      	mov	r4, r0
   dada2:	460d      	mov	r5, r1
   dada4:	4688      	mov	r8, r1
   dada6:	f340 8117 	ble.w	dafd8 <__ieee754_pow+0x870>
   dadaa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   dadae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   dadb2:	4303      	orrs	r3, r0
   dadb4:	f040 822a 	bne.w	db20c <__ieee754_pow+0xaa4>
   dadb8:	a3a5      	add	r3, pc, #660	; (adr r3, db050 <__ieee754_pow+0x8e8>)
   dadba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dadbe:	4650      	mov	r0, sl
   dadc0:	4659      	mov	r1, fp
   dadc2:	f000 fcbd 	bl	db740 <__adddf3>
   dadc6:	4632      	mov	r2, r6
   dadc8:	ec41 0b18 	vmov	d8, r0, r1
   dadcc:	463b      	mov	r3, r7
   dadce:	4620      	mov	r0, r4
   dadd0:	4629      	mov	r1, r5
   dadd2:	f000 fcb3 	bl	db73c <__aeabi_dsub>
   dadd6:	4602      	mov	r2, r0
   dadd8:	460b      	mov	r3, r1
   dadda:	ec51 0b18 	vmov	r0, r1, d8
   dadde:	f001 f8f5 	bl	dbfcc <__aeabi_dcmpgt>
   dade2:	2800      	cmp	r0, #0
   dade4:	f040 8212 	bne.w	db20c <__ieee754_pow+0xaa4>
   dade8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   dadec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   dadf0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   dadf4:	fa42 f303 	asr.w	r3, r2, r3
   dadf8:	4443      	add	r3, r8
   dadfa:	49ae      	ldr	r1, [pc, #696]	; (db0b4 <__ieee754_pow+0x94c>)
   dadfc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   dae00:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   dae04:	fa41 fc02 	asr.w	ip, r1, r2
   dae08:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dae0c:	ea23 010c 	bic.w	r1, r3, ip
   dae10:	f1c2 0414 	rsb	r4, r2, #20
   dae14:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dae18:	f1b8 0f00 	cmp.w	r8, #0
   dae1c:	460b      	mov	r3, r1
   dae1e:	fa45 f104 	asr.w	r1, r5, r4
   dae22:	9103      	str	r1, [sp, #12]
   dae24:	f04f 0000 	mov.w	r0, #0
   dae28:	bfb8      	it	lt
   dae2a:	4249      	neglt	r1, r1
   dae2c:	4602      	mov	r2, r0
   dae2e:	bfb8      	it	lt
   dae30:	9103      	strlt	r1, [sp, #12]
   dae32:	4630      	mov	r0, r6
   dae34:	4639      	mov	r1, r7
   dae36:	f000 fc81 	bl	db73c <__aeabi_dsub>
   dae3a:	4606      	mov	r6, r0
   dae3c:	460f      	mov	r7, r1
   dae3e:	463b      	mov	r3, r7
   dae40:	4650      	mov	r0, sl
   dae42:	4659      	mov	r1, fp
   dae44:	4632      	mov	r2, r6
   dae46:	f000 fc7b 	bl	db740 <__adddf3>
   dae4a:	9b03      	ldr	r3, [sp, #12]
   dae4c:	051b      	lsls	r3, r3, #20
   dae4e:	9300      	str	r3, [sp, #0]
   dae50:	460d      	mov	r5, r1
   dae52:	2400      	movs	r4, #0
   dae54:	a380      	add	r3, pc, #512	; (adr r3, db058 <__ieee754_pow+0x8f0>)
   dae56:	e9d3 2300 	ldrd	r2, r3, [r3]
   dae5a:	4620      	mov	r0, r4
   dae5c:	4629      	mov	r1, r5
   dae5e:	f000 fe25 	bl	dbaac <__aeabi_dmul>
   dae62:	4632      	mov	r2, r6
   dae64:	4680      	mov	r8, r0
   dae66:	4689      	mov	r9, r1
   dae68:	463b      	mov	r3, r7
   dae6a:	4620      	mov	r0, r4
   dae6c:	4629      	mov	r1, r5
   dae6e:	f000 fc65 	bl	db73c <__aeabi_dsub>
   dae72:	4602      	mov	r2, r0
   dae74:	460b      	mov	r3, r1
   dae76:	4650      	mov	r0, sl
   dae78:	4659      	mov	r1, fp
   dae7a:	f000 fc5f 	bl	db73c <__aeabi_dsub>
   dae7e:	a378      	add	r3, pc, #480	; (adr r3, db060 <__ieee754_pow+0x8f8>)
   dae80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dae84:	f000 fe12 	bl	dbaac <__aeabi_dmul>
   dae88:	a377      	add	r3, pc, #476	; (adr r3, db068 <__ieee754_pow+0x900>)
   dae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dae8e:	4606      	mov	r6, r0
   dae90:	460f      	mov	r7, r1
   dae92:	4620      	mov	r0, r4
   dae94:	4629      	mov	r1, r5
   dae96:	f000 fe09 	bl	dbaac <__aeabi_dmul>
   dae9a:	4602      	mov	r2, r0
   dae9c:	460b      	mov	r3, r1
   dae9e:	4630      	mov	r0, r6
   daea0:	4639      	mov	r1, r7
   daea2:	f000 fc4d 	bl	db740 <__adddf3>
   daea6:	4606      	mov	r6, r0
   daea8:	460f      	mov	r7, r1
   daeaa:	4632      	mov	r2, r6
   daeac:	463b      	mov	r3, r7
   daeae:	4640      	mov	r0, r8
   daeb0:	4649      	mov	r1, r9
   daeb2:	f000 fc45 	bl	db740 <__adddf3>
   daeb6:	4642      	mov	r2, r8
   daeb8:	464b      	mov	r3, r9
   daeba:	4604      	mov	r4, r0
   daebc:	460d      	mov	r5, r1
   daebe:	f000 fc3d 	bl	db73c <__aeabi_dsub>
   daec2:	4602      	mov	r2, r0
   daec4:	460b      	mov	r3, r1
   daec6:	4630      	mov	r0, r6
   daec8:	4639      	mov	r1, r7
   daeca:	f000 fc37 	bl	db73c <__aeabi_dsub>
   daece:	4622      	mov	r2, r4
   daed0:	4682      	mov	sl, r0
   daed2:	468b      	mov	fp, r1
   daed4:	462b      	mov	r3, r5
   daed6:	4620      	mov	r0, r4
   daed8:	4629      	mov	r1, r5
   daeda:	f000 fde7 	bl	dbaac <__aeabi_dmul>
   daede:	a364      	add	r3, pc, #400	; (adr r3, db070 <__ieee754_pow+0x908>)
   daee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   daee4:	4606      	mov	r6, r0
   daee6:	460f      	mov	r7, r1
   daee8:	f000 fde0 	bl	dbaac <__aeabi_dmul>
   daeec:	a362      	add	r3, pc, #392	; (adr r3, db078 <__ieee754_pow+0x910>)
   daeee:	e9d3 2300 	ldrd	r2, r3, [r3]
   daef2:	f000 fc23 	bl	db73c <__aeabi_dsub>
   daef6:	4632      	mov	r2, r6
   daef8:	463b      	mov	r3, r7
   daefa:	f000 fdd7 	bl	dbaac <__aeabi_dmul>
   daefe:	a360      	add	r3, pc, #384	; (adr r3, db080 <__ieee754_pow+0x918>)
   daf00:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf04:	f000 fc1c 	bl	db740 <__adddf3>
   daf08:	4632      	mov	r2, r6
   daf0a:	463b      	mov	r3, r7
   daf0c:	f000 fdce 	bl	dbaac <__aeabi_dmul>
   daf10:	a35d      	add	r3, pc, #372	; (adr r3, db088 <__ieee754_pow+0x920>)
   daf12:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf16:	f000 fc11 	bl	db73c <__aeabi_dsub>
   daf1a:	4632      	mov	r2, r6
   daf1c:	463b      	mov	r3, r7
   daf1e:	f000 fdc5 	bl	dbaac <__aeabi_dmul>
   daf22:	a35b      	add	r3, pc, #364	; (adr r3, db090 <__ieee754_pow+0x928>)
   daf24:	e9d3 2300 	ldrd	r2, r3, [r3]
   daf28:	f000 fc0a 	bl	db740 <__adddf3>
   daf2c:	4632      	mov	r2, r6
   daf2e:	463b      	mov	r3, r7
   daf30:	f000 fdbc 	bl	dbaac <__aeabi_dmul>
   daf34:	4602      	mov	r2, r0
   daf36:	460b      	mov	r3, r1
   daf38:	4620      	mov	r0, r4
   daf3a:	4629      	mov	r1, r5
   daf3c:	f000 fbfe 	bl	db73c <__aeabi_dsub>
   daf40:	4606      	mov	r6, r0
   daf42:	460f      	mov	r7, r1
   daf44:	4632      	mov	r2, r6
   daf46:	463b      	mov	r3, r7
   daf48:	4620      	mov	r0, r4
   daf4a:	4629      	mov	r1, r5
   daf4c:	f000 fdae 	bl	dbaac <__aeabi_dmul>
   daf50:	2200      	movs	r2, #0
   daf52:	4680      	mov	r8, r0
   daf54:	4689      	mov	r9, r1
   daf56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daf5a:	4630      	mov	r0, r6
   daf5c:	4639      	mov	r1, r7
   daf5e:	f000 fbed 	bl	db73c <__aeabi_dsub>
   daf62:	4602      	mov	r2, r0
   daf64:	460b      	mov	r3, r1
   daf66:	4640      	mov	r0, r8
   daf68:	4649      	mov	r1, r9
   daf6a:	f000 fec9 	bl	dbd00 <__aeabi_ddiv>
   daf6e:	4652      	mov	r2, sl
   daf70:	4606      	mov	r6, r0
   daf72:	460f      	mov	r7, r1
   daf74:	465b      	mov	r3, fp
   daf76:	4620      	mov	r0, r4
   daf78:	4629      	mov	r1, r5
   daf7a:	f000 fd97 	bl	dbaac <__aeabi_dmul>
   daf7e:	4652      	mov	r2, sl
   daf80:	465b      	mov	r3, fp
   daf82:	f000 fbdd 	bl	db740 <__adddf3>
   daf86:	4602      	mov	r2, r0
   daf88:	460b      	mov	r3, r1
   daf8a:	4630      	mov	r0, r6
   daf8c:	4639      	mov	r1, r7
   daf8e:	f000 fbd5 	bl	db73c <__aeabi_dsub>
   daf92:	4622      	mov	r2, r4
   daf94:	462b      	mov	r3, r5
   daf96:	f000 fbd1 	bl	db73c <__aeabi_dsub>
   daf9a:	4602      	mov	r2, r0
   daf9c:	460b      	mov	r3, r1
   daf9e:	2000      	movs	r0, #0
   dafa0:	4945      	ldr	r1, [pc, #276]	; (db0b8 <__ieee754_pow+0x950>)
   dafa2:	f000 fbcb 	bl	db73c <__aeabi_dsub>
   dafa6:	460b      	mov	r3, r1
   dafa8:	9900      	ldr	r1, [sp, #0]
   dafaa:	4419      	add	r1, r3
   dafac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dafb0:	4602      	mov	r2, r0
   dafb2:	f2c0 8169 	blt.w	db288 <__ieee754_pow+0xb20>
   dafb6:	4610      	mov	r0, r2
   dafb8:	ec53 2b19 	vmov	r2, r3, d9
   dafbc:	f000 fd76 	bl	dbaac <__aeabi_dmul>
   dafc0:	e9cd 0100 	strd	r0, r1, [sp]
   dafc4:	e41e      	b.n	da804 <__ieee754_pow+0x9c>
   dafc6:	f1bb 0f00 	cmp.w	fp, #0
   dafca:	f6ff ac95 	blt.w	da8f8 <__ieee754_pow+0x190>
   dafce:	ed9f 7b32 	vldr	d7, [pc, #200]	; db098 <__ieee754_pow+0x930>
   dafd2:	ed8d 7b00 	vstr	d7, [sp]
   dafd6:	e415      	b.n	da804 <__ieee754_pow+0x9c>
   dafd8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; db0c0 <__ieee754_pow+0x958>
   dafdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dafe0:	4563      	cmp	r3, ip
   dafe2:	f340 810b 	ble.w	db1fc <__ieee754_pow+0xa94>
   dafe6:	4b35      	ldr	r3, [pc, #212]	; (db0bc <__ieee754_pow+0x954>)
   dafe8:	440b      	add	r3, r1
   dafea:	4303      	orrs	r3, r0
   dafec:	d10a      	bne.n	db004 <__ieee754_pow+0x89c>
   dafee:	4632      	mov	r2, r6
   daff0:	463b      	mov	r3, r7
   daff2:	f000 fba3 	bl	db73c <__aeabi_dsub>
   daff6:	4652      	mov	r2, sl
   daff8:	465b      	mov	r3, fp
   daffa:	f000 ffdd 	bl	dbfb8 <__aeabi_dcmpge>
   daffe:	2800      	cmp	r0, #0
   db000:	f43f aef2 	beq.w	dade8 <__ieee754_pow+0x680>
   db004:	a326      	add	r3, pc, #152	; (adr r3, db0a0 <__ieee754_pow+0x938>)
   db006:	e9d3 2300 	ldrd	r2, r3, [r3]
   db00a:	ec51 0b19 	vmov	r0, r1, d9
   db00e:	f000 fd4d 	bl	dbaac <__aeabi_dmul>
   db012:	a323      	add	r3, pc, #140	; (adr r3, db0a0 <__ieee754_pow+0x938>)
   db014:	e9d3 2300 	ldrd	r2, r3, [r3]
   db018:	f000 fd48 	bl	dbaac <__aeabi_dmul>
   db01c:	e9cd 0100 	strd	r0, r1, [sp]
   db020:	f7ff bbf0 	b.w	da804 <__ieee754_pow+0x9c>
   db024:	ed9f 7b20 	vldr	d7, [pc, #128]	; db0a8 <__ieee754_pow+0x940>
   db028:	eeb0 9a47 	vmov.f32	s18, s14
   db02c:	eef0 9a67 	vmov.f32	s19, s15
   db030:	e686      	b.n	dad40 <__ieee754_pow+0x5d8>
   db032:	f1bb 0f00 	cmp.w	fp, #0
   db036:	daca      	bge.n	dafce <__ieee754_pow+0x866>
   db038:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db03c:	9600      	str	r6, [sp, #0]
   db03e:	9301      	str	r3, [sp, #4]
   db040:	f7ff bbe0 	b.w	da804 <__ieee754_pow+0x9c>
   db044:	f3af 8000 	nop.w
   db048:	00000000 	.word	0x00000000
   db04c:	bff00000 	.word	0xbff00000
   db050:	652b82fe 	.word	0x652b82fe
   db054:	3c971547 	.word	0x3c971547
   db058:	00000000 	.word	0x00000000
   db05c:	3fe62e43 	.word	0x3fe62e43
   db060:	fefa39ef 	.word	0xfefa39ef
   db064:	3fe62e42 	.word	0x3fe62e42
   db068:	0ca86c39 	.word	0x0ca86c39
   db06c:	be205c61 	.word	0xbe205c61
   db070:	72bea4d0 	.word	0x72bea4d0
   db074:	3e663769 	.word	0x3e663769
   db078:	c5d26bf1 	.word	0xc5d26bf1
   db07c:	3ebbbd41 	.word	0x3ebbbd41
   db080:	af25de2c 	.word	0xaf25de2c
   db084:	3f11566a 	.word	0x3f11566a
   db088:	16bebd93 	.word	0x16bebd93
   db08c:	3f66c16c 	.word	0x3f66c16c
   db090:	5555553e 	.word	0x5555553e
   db094:	3fc55555 	.word	0x3fc55555
	...
   db0a0:	c2f8f359 	.word	0xc2f8f359
   db0a4:	01a56e1f 	.word	0x01a56e1f
   db0a8:	00000000 	.word	0x00000000
   db0ac:	3ff00000 	.word	0x3ff00000
   db0b0:	408fffff 	.word	0x408fffff
   db0b4:	000fffff 	.word	0x000fffff
   db0b8:	3ff00000 	.word	0x3ff00000
   db0bc:	3f6f3400 	.word	0x3f6f3400
   db0c0:	4090cbff 	.word	0x4090cbff
   db0c4:	4598      	cmp	r8, r3
   db0c6:	f6ff af7e 	blt.w	dafc6 <__ieee754_pow+0x85e>
   db0ca:	4b91      	ldr	r3, [pc, #580]	; (db310 <__ieee754_pow+0xba8>)
   db0cc:	4598      	cmp	r8, r3
   db0ce:	f73f ac0f 	bgt.w	da8f0 <__ieee754_pow+0x188>
   db0d2:	4b8f      	ldr	r3, [pc, #572]	; (db310 <__ieee754_pow+0xba8>)
   db0d4:	2200      	movs	r2, #0
   db0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   db0da:	f000 fb2f 	bl	db73c <__aeabi_dsub>
   db0de:	a378      	add	r3, pc, #480	; (adr r3, db2c0 <__ieee754_pow+0xb58>)
   db0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0e4:	4604      	mov	r4, r0
   db0e6:	460d      	mov	r5, r1
   db0e8:	f000 fce0 	bl	dbaac <__aeabi_dmul>
   db0ec:	a376      	add	r3, pc, #472	; (adr r3, db2c8 <__ieee754_pow+0xb60>)
   db0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0f2:	4682      	mov	sl, r0
   db0f4:	468b      	mov	fp, r1
   db0f6:	4620      	mov	r0, r4
   db0f8:	4629      	mov	r1, r5
   db0fa:	f000 fcd7 	bl	dbaac <__aeabi_dmul>
   db0fe:	4b85      	ldr	r3, [pc, #532]	; (db314 <__ieee754_pow+0xbac>)
   db100:	4680      	mov	r8, r0
   db102:	4689      	mov	r9, r1
   db104:	2200      	movs	r2, #0
   db106:	4620      	mov	r0, r4
   db108:	4629      	mov	r1, r5
   db10a:	f000 fccf 	bl	dbaac <__aeabi_dmul>
   db10e:	4602      	mov	r2, r0
   db110:	460b      	mov	r3, r1
   db112:	a16f      	add	r1, pc, #444	; (adr r1, db2d0 <__ieee754_pow+0xb68>)
   db114:	e9d1 0100 	ldrd	r0, r1, [r1]
   db118:	f000 fb10 	bl	db73c <__aeabi_dsub>
   db11c:	4622      	mov	r2, r4
   db11e:	462b      	mov	r3, r5
   db120:	f000 fcc4 	bl	dbaac <__aeabi_dmul>
   db124:	4602      	mov	r2, r0
   db126:	460b      	mov	r3, r1
   db128:	2000      	movs	r0, #0
   db12a:	497b      	ldr	r1, [pc, #492]	; (db318 <__ieee754_pow+0xbb0>)
   db12c:	f000 fb06 	bl	db73c <__aeabi_dsub>
   db130:	4622      	mov	r2, r4
   db132:	462b      	mov	r3, r5
   db134:	4604      	mov	r4, r0
   db136:	460d      	mov	r5, r1
   db138:	4610      	mov	r0, r2
   db13a:	4619      	mov	r1, r3
   db13c:	f000 fcb6 	bl	dbaac <__aeabi_dmul>
   db140:	4602      	mov	r2, r0
   db142:	460b      	mov	r3, r1
   db144:	4620      	mov	r0, r4
   db146:	4629      	mov	r1, r5
   db148:	f000 fcb0 	bl	dbaac <__aeabi_dmul>
   db14c:	a362      	add	r3, pc, #392	; (adr r3, db2d8 <__ieee754_pow+0xb70>)
   db14e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db152:	f000 fcab 	bl	dbaac <__aeabi_dmul>
   db156:	4602      	mov	r2, r0
   db158:	460b      	mov	r3, r1
   db15a:	4640      	mov	r0, r8
   db15c:	4649      	mov	r1, r9
   db15e:	f000 faed 	bl	db73c <__aeabi_dsub>
   db162:	4680      	mov	r8, r0
   db164:	4689      	mov	r9, r1
   db166:	4650      	mov	r0, sl
   db168:	4659      	mov	r1, fp
   db16a:	4642      	mov	r2, r8
   db16c:	464b      	mov	r3, r9
   db16e:	f000 fae7 	bl	db740 <__adddf3>
   db172:	2400      	movs	r4, #0
   db174:	4652      	mov	r2, sl
   db176:	465b      	mov	r3, fp
   db178:	4620      	mov	r0, r4
   db17a:	460d      	mov	r5, r1
   db17c:	f000 fade 	bl	db73c <__aeabi_dsub>
   db180:	4602      	mov	r2, r0
   db182:	460b      	mov	r3, r1
   db184:	4640      	mov	r0, r8
   db186:	4649      	mov	r1, r9
   db188:	f000 fad8 	bl	db73c <__aeabi_dsub>
   db18c:	4682      	mov	sl, r0
   db18e:	468b      	mov	fp, r1
   db190:	e5ca      	b.n	dad28 <__ieee754_pow+0x5c0>
   db192:	ed9f 7b53 	vldr	d7, [pc, #332]	; db2e0 <__ieee754_pow+0xb78>
   db196:	eeb0 ba47 	vmov.f32	s22, s14
   db19a:	eef0 ba67 	vmov.f32	s23, s15
   db19e:	eeb0 ca47 	vmov.f32	s24, s14
   db1a2:	eef0 ca67 	vmov.f32	s25, s15
   db1a6:	ed9f 7b50 	vldr	d7, [pc, #320]	; db2e8 <__ieee754_pow+0xb80>
   db1aa:	f04f 0900 	mov.w	r9, #0
   db1ae:	ec54 3b17 	vmov	r3, r4, d7
   db1b2:	e41d      	b.n	da9f0 <__ieee754_pow+0x288>
   db1b4:	2000      	movs	r0, #0
   db1b6:	f7ff bbf3 	b.w	da9a0 <__ieee754_pow+0x238>
   db1ba:	4955      	ldr	r1, [pc, #340]	; (db310 <__ieee754_pow+0xba8>)
   db1bc:	4622      	mov	r2, r4
   db1be:	462b      	mov	r3, r5
   db1c0:	2000      	movs	r0, #0
   db1c2:	f000 fd9d 	bl	dbd00 <__aeabi_ddiv>
   db1c6:	e9cd 0100 	strd	r0, r1, [sp]
   db1ca:	f7ff bb1b 	b.w	da804 <__ieee754_pow+0x9c>
   db1ce:	4622      	mov	r2, r4
   db1d0:	462b      	mov	r3, r5
   db1d2:	4620      	mov	r0, r4
   db1d4:	4629      	mov	r1, r5
   db1d6:	f000 fc69 	bl	dbaac <__aeabi_dmul>
   db1da:	e9cd 0100 	strd	r0, r1, [sp]
   db1de:	f7ff bb11 	b.w	da804 <__ieee754_pow+0x9c>
   db1e2:	2b00      	cmp	r3, #0
   db1e4:	d142      	bne.n	db26c <__ieee754_pow+0xb04>
   db1e6:	f1c1 0114 	rsb	r1, r1, #20
   db1ea:	fa4a f001 	asr.w	r0, sl, r1
   db1ee:	fa00 f101 	lsl.w	r1, r0, r1
   db1f2:	4551      	cmp	r1, sl
   db1f4:	d05a      	beq.n	db2ac <__ieee754_pow+0xb44>
   db1f6:	9303      	str	r3, [sp, #12]
   db1f8:	f7ff bae0 	b.w	da7bc <__ieee754_pow+0x54>
   db1fc:	4a46      	ldr	r2, [pc, #280]	; (db318 <__ieee754_pow+0xbb0>)
   db1fe:	4293      	cmp	r3, r2
   db200:	dc5b      	bgt.n	db2ba <__ieee754_pow+0xb52>
   db202:	e9dd 1200 	ldrd	r1, r2, [sp]
   db206:	9100      	str	r1, [sp, #0]
   db208:	9103      	str	r1, [sp, #12]
   db20a:	e622      	b.n	dae52 <__ieee754_pow+0x6ea>
   db20c:	a338      	add	r3, pc, #224	; (adr r3, db2f0 <__ieee754_pow+0xb88>)
   db20e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db212:	ec51 0b19 	vmov	r0, r1, d9
   db216:	f000 fc49 	bl	dbaac <__aeabi_dmul>
   db21a:	a335      	add	r3, pc, #212	; (adr r3, db2f0 <__ieee754_pow+0xb88>)
   db21c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db220:	f000 fc44 	bl	dbaac <__aeabi_dmul>
   db224:	e9cd 0100 	strd	r0, r1, [sp]
   db228:	f7ff baec 	b.w	da804 <__ieee754_pow+0x9c>
   db22c:	9b03      	ldr	r3, [sp, #12]
   db22e:	2b01      	cmp	r3, #1
   db230:	f47f aae8 	bne.w	da804 <__ieee754_pow+0x9c>
   db234:	e9dd 2100 	ldrd	r2, r1, [sp]
   db238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db23c:	e9cd 2300 	strd	r2, r3, [sp]
   db240:	f7ff bae0 	b.w	da804 <__ieee754_pow+0x9c>
   db244:	ed9f 7b2c 	vldr	d7, [pc, #176]	; db2f8 <__ieee754_pow+0xb90>
   db248:	eeb0 ba47 	vmov.f32	s22, s14
   db24c:	eef0 ba67 	vmov.f32	s23, s15
   db250:	ed9f 7b2b 	vldr	d7, [pc, #172]	; db300 <__ieee754_pow+0xb98>
   db254:	eeb0 ca47 	vmov.f32	s24, s14
   db258:	eef0 ca67 	vmov.f32	s25, s15
   db25c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; db308 <__ieee754_pow+0xba0>
   db260:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   db264:	ec54 3b17 	vmov	r3, r4, d7
   db268:	f7ff bbc2 	b.w	da9f0 <__ieee754_pow+0x288>
   db26c:	ec45 4b10 	vmov	d0, r4, r5
   db270:	9203      	str	r2, [sp, #12]
   db272:	f000 f917 	bl	db4a4 <fabs>
   db276:	9a03      	ldr	r2, [sp, #12]
   db278:	ed8d 0b00 	vstr	d0, [sp]
   db27c:	2a00      	cmp	r2, #0
   db27e:	f47f ab61 	bne.w	da944 <__ieee754_pow+0x1dc>
   db282:	9203      	str	r2, [sp, #12]
   db284:	f7ff baf5 	b.w	da872 <__ieee754_pow+0x10a>
   db288:	9803      	ldr	r0, [sp, #12]
   db28a:	ec43 2b10 	vmov	d0, r2, r3
   db28e:	f000 f9bf 	bl	db610 <scalbn>
   db292:	ec51 0b10 	vmov	r0, r1, d0
   db296:	e68f      	b.n	dafb8 <__ieee754_pow+0x850>
   db298:	f000 0001 	and.w	r0, r0, #1
   db29c:	f1c0 0102 	rsb	r1, r0, #2
   db2a0:	9103      	str	r1, [sp, #12]
   db2a2:	2b00      	cmp	r3, #0
   db2a4:	f43f aa8a 	beq.w	da7bc <__ieee754_pow+0x54>
   db2a8:	f7ff bada 	b.w	da860 <__ieee754_pow+0xf8>
   db2ac:	f000 0001 	and.w	r0, r0, #1
   db2b0:	f1c0 0302 	rsb	r3, r0, #2
   db2b4:	9303      	str	r3, [sp, #12]
   db2b6:	f7ff ba81 	b.w	da7bc <__ieee754_pow+0x54>
   db2ba:	151b      	asrs	r3, r3, #20
   db2bc:	e596      	b.n	dadec <__ieee754_pow+0x684>
   db2be:	bf00      	nop
   db2c0:	60000000 	.word	0x60000000
   db2c4:	3ff71547 	.word	0x3ff71547
   db2c8:	f85ddf44 	.word	0xf85ddf44
   db2cc:	3e54ae0b 	.word	0x3e54ae0b
   db2d0:	55555555 	.word	0x55555555
   db2d4:	3fd55555 	.word	0x3fd55555
   db2d8:	652b82fe 	.word	0x652b82fe
   db2dc:	3ff71547 	.word	0x3ff71547
	...
   db2ec:	3ff00000 	.word	0x3ff00000
   db2f0:	8800759c 	.word	0x8800759c
   db2f4:	7e37e43c 	.word	0x7e37e43c
   db2f8:	40000000 	.word	0x40000000
   db2fc:	3fe2b803 	.word	0x3fe2b803
   db300:	43cfd006 	.word	0x43cfd006
   db304:	3e4cfdeb 	.word	0x3e4cfdeb
   db308:	00000000 	.word	0x00000000
   db30c:	3ff80000 	.word	0x3ff80000
   db310:	3ff00000 	.word	0x3ff00000
   db314:	3fd00000 	.word	0x3fd00000
   db318:	3fe00000 	.word	0x3fe00000

000db31c <__ieee754_sqrt>:
   db31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db320:	4a5f      	ldr	r2, [pc, #380]	; (db4a0 <__ieee754_sqrt+0x184>)
   db322:	ec57 6b10 	vmov	r6, r7, d0
   db326:	43ba      	bics	r2, r7
   db328:	f000 8098 	beq.w	db45c <__ieee754_sqrt+0x140>
   db32c:	2f00      	cmp	r7, #0
   db32e:	ee10 4a10 	vmov	r4, s0
   db332:	463b      	mov	r3, r7
   db334:	dd4e      	ble.n	db3d4 <__ieee754_sqrt+0xb8>
   db336:	1539      	asrs	r1, r7, #20
   db338:	d05b      	beq.n	db3f2 <__ieee754_sqrt+0xd6>
   db33a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   db33e:	07ca      	lsls	r2, r1, #31
   db340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db344:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   db348:	d403      	bmi.n	db352 <__ieee754_sqrt+0x36>
   db34a:	005b      	lsls	r3, r3, #1
   db34c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   db350:	0064      	lsls	r4, r4, #1
   db352:	0fe2      	lsrs	r2, r4, #31
   db354:	f04f 0c00 	mov.w	ip, #0
   db358:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   db35c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   db360:	0064      	lsls	r4, r4, #1
   db362:	4666      	mov	r6, ip
   db364:	2516      	movs	r5, #22
   db366:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   db36a:	18b1      	adds	r1, r6, r2
   db36c:	4299      	cmp	r1, r3
   db36e:	dc02      	bgt.n	db376 <__ieee754_sqrt+0x5a>
   db370:	1a5b      	subs	r3, r3, r1
   db372:	188e      	adds	r6, r1, r2
   db374:	4494      	add	ip, r2
   db376:	005b      	lsls	r3, r3, #1
   db378:	3d01      	subs	r5, #1
   db37a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   db37e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   db382:	ea4f 0444 	mov.w	r4, r4, lsl #1
   db386:	d1f0      	bne.n	db36a <__ieee754_sqrt+0x4e>
   db388:	462f      	mov	r7, r5
   db38a:	2020      	movs	r0, #32
   db38c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   db390:	e009      	b.n	db3a6 <__ieee754_sqrt+0x8a>
   db392:	d03e      	beq.n	db412 <__ieee754_sqrt+0xf6>
   db394:	0fe1      	lsrs	r1, r4, #31
   db396:	3801      	subs	r0, #1
   db398:	ea4f 0252 	mov.w	r2, r2, lsr #1
   db39c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   db3a0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   db3a4:	d03e      	beq.n	db424 <__ieee754_sqrt+0x108>
   db3a6:	42b3      	cmp	r3, r6
   db3a8:	eb02 0105 	add.w	r1, r2, r5
   db3ac:	ddf1      	ble.n	db392 <__ieee754_sqrt+0x76>
   db3ae:	2900      	cmp	r1, #0
   db3b0:	eb01 0502 	add.w	r5, r1, r2
   db3b4:	db09      	blt.n	db3ca <__ieee754_sqrt+0xae>
   db3b6:	46b0      	mov	r8, r6
   db3b8:	1b9b      	subs	r3, r3, r6
   db3ba:	42a1      	cmp	r1, r4
   db3bc:	bf88      	it	hi
   db3be:	f103 33ff 	addhi.w	r3, r3, #4294967295
   db3c2:	1a64      	subs	r4, r4, r1
   db3c4:	4417      	add	r7, r2
   db3c6:	4646      	mov	r6, r8
   db3c8:	e7e4      	b.n	db394 <__ieee754_sqrt+0x78>
   db3ca:	2d00      	cmp	r5, #0
   db3cc:	dbf3      	blt.n	db3b6 <__ieee754_sqrt+0x9a>
   db3ce:	f106 0801 	add.w	r8, r6, #1
   db3d2:	e7f1      	b.n	db3b8 <__ieee754_sqrt+0x9c>
   db3d4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   db3d8:	4332      	orrs	r2, r6
   db3da:	d036      	beq.n	db44a <__ieee754_sqrt+0x12e>
   db3dc:	2f00      	cmp	r7, #0
   db3de:	d14d      	bne.n	db47c <__ieee754_sqrt+0x160>
   db3e0:	4639      	mov	r1, r7
   db3e2:	0ae2      	lsrs	r2, r4, #11
   db3e4:	3915      	subs	r1, #21
   db3e6:	0564      	lsls	r4, r4, #21
   db3e8:	4613      	mov	r3, r2
   db3ea:	2a00      	cmp	r2, #0
   db3ec:	d0f9      	beq.n	db3e2 <__ieee754_sqrt+0xc6>
   db3ee:	02d7      	lsls	r7, r2, #11
   db3f0:	d451      	bmi.n	db496 <__ieee754_sqrt+0x17a>
   db3f2:	2000      	movs	r0, #0
   db3f4:	005b      	lsls	r3, r3, #1
   db3f6:	02de      	lsls	r6, r3, #11
   db3f8:	4605      	mov	r5, r0
   db3fa:	f100 0001 	add.w	r0, r0, #1
   db3fe:	d5f9      	bpl.n	db3f4 <__ieee754_sqrt+0xd8>
   db400:	461a      	mov	r2, r3
   db402:	4623      	mov	r3, r4
   db404:	4084      	lsls	r4, r0
   db406:	f1c0 0020 	rsb	r0, r0, #32
   db40a:	40c3      	lsrs	r3, r0
   db40c:	4313      	orrs	r3, r2
   db40e:	1b49      	subs	r1, r1, r5
   db410:	e793      	b.n	db33a <__ieee754_sqrt+0x1e>
   db412:	42a1      	cmp	r1, r4
   db414:	d8be      	bhi.n	db394 <__ieee754_sqrt+0x78>
   db416:	2900      	cmp	r1, #0
   db418:	eb01 0502 	add.w	r5, r1, r2
   db41c:	dbd5      	blt.n	db3ca <__ieee754_sqrt+0xae>
   db41e:	4698      	mov	r8, r3
   db420:	2300      	movs	r3, #0
   db422:	e7ce      	b.n	db3c2 <__ieee754_sqrt+0xa6>
   db424:	4323      	orrs	r3, r4
   db426:	d112      	bne.n	db44e <__ieee754_sqrt+0x132>
   db428:	0878      	lsrs	r0, r7, #1
   db42a:	ea4f 016c 	mov.w	r1, ip, asr #1
   db42e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   db432:	f01c 0f01 	tst.w	ip, #1
   db436:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   db43a:	bf18      	it	ne
   db43c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   db440:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   db444:	4602      	mov	r2, r0
   db446:	ec43 2b10 	vmov	d0, r2, r3
   db44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db44e:	1c7b      	adds	r3, r7, #1
   db450:	bf16      	itet	ne
   db452:	1c78      	addne	r0, r7, #1
   db454:	f10c 0c01 	addeq.w	ip, ip, #1
   db458:	0840      	lsrne	r0, r0, #1
   db45a:	e7e6      	b.n	db42a <__ieee754_sqrt+0x10e>
   db45c:	ee10 2a10 	vmov	r2, s0
   db460:	ee10 0a10 	vmov	r0, s0
   db464:	463b      	mov	r3, r7
   db466:	4639      	mov	r1, r7
   db468:	f000 fb20 	bl	dbaac <__aeabi_dmul>
   db46c:	4632      	mov	r2, r6
   db46e:	463b      	mov	r3, r7
   db470:	f000 f966 	bl	db740 <__adddf3>
   db474:	ec41 0b10 	vmov	d0, r0, r1
   db478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db47c:	ee10 2a10 	vmov	r2, s0
   db480:	4630      	mov	r0, r6
   db482:	4639      	mov	r1, r7
   db484:	f000 f95a 	bl	db73c <__aeabi_dsub>
   db488:	4602      	mov	r2, r0
   db48a:	460b      	mov	r3, r1
   db48c:	f000 fc38 	bl	dbd00 <__aeabi_ddiv>
   db490:	ec41 0b10 	vmov	d0, r0, r1
   db494:	e7d9      	b.n	db44a <__ieee754_sqrt+0x12e>
   db496:	4623      	mov	r3, r4
   db498:	2020      	movs	r0, #32
   db49a:	f04f 35ff 	mov.w	r5, #4294967295
   db49e:	e7b4      	b.n	db40a <__ieee754_sqrt+0xee>
   db4a0:	7ff00000 	.word	0x7ff00000

000db4a4 <fabs>:
   db4a4:	ec51 0b10 	vmov	r0, r1, d0
   db4a8:	ee10 2a10 	vmov	r2, s0
   db4ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db4b0:	ec43 2b10 	vmov	d0, r2, r3
   db4b4:	4770      	bx	lr
   db4b6:	bf00      	nop

000db4b8 <finite>:
   db4b8:	b082      	sub	sp, #8
   db4ba:	ed8d 0b00 	vstr	d0, [sp]
   db4be:	9801      	ldr	r0, [sp, #4]
   db4c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   db4c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   db4c8:	0fc0      	lsrs	r0, r0, #31
   db4ca:	b002      	add	sp, #8
   db4cc:	4770      	bx	lr
   db4ce:	bf00      	nop

000db4d0 <matherr>:
   db4d0:	2000      	movs	r0, #0
   db4d2:	4770      	bx	lr
   db4d4:	0000      	movs	r0, r0
	...

000db4d8 <nan>:
   db4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; db4e0 <nan+0x8>
   db4dc:	4770      	bx	lr
   db4de:	bf00      	nop
   db4e0:	00000000 	.word	0x00000000
   db4e4:	7ff80000 	.word	0x7ff80000

000db4e8 <rint>:
   db4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   db4ea:	ec53 2b10 	vmov	r2, r3, d0
   db4ee:	f3c3 560a 	ubfx	r6, r3, #20, #11
   db4f2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   db4f6:	2813      	cmp	r0, #19
   db4f8:	ee10 5a10 	vmov	r5, s0
   db4fc:	b083      	sub	sp, #12
   db4fe:	4619      	mov	r1, r3
   db500:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   db504:	dc31      	bgt.n	db56a <rint+0x82>
   db506:	2800      	cmp	r0, #0
   db508:	db4c      	blt.n	db5a4 <rint+0xbc>
   db50a:	4e3e      	ldr	r6, [pc, #248]	; (db604 <rint+0x11c>)
   db50c:	4106      	asrs	r6, r0
   db50e:	ea03 0706 	and.w	r7, r3, r6
   db512:	4317      	orrs	r7, r2
   db514:	d02e      	beq.n	db574 <rint+0x8c>
   db516:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   db51a:	431d      	orrs	r5, r3
   db51c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   db520:	d00c      	beq.n	db53c <rint+0x54>
   db522:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   db526:	2813      	cmp	r0, #19
   db528:	ea21 0606 	bic.w	r6, r1, r6
   db52c:	fa43 f100 	asr.w	r1, r3, r0
   db530:	ea41 0106 	orr.w	r1, r1, r6
   db534:	bf0c      	ite	eq
   db536:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   db53a:	2500      	movne	r5, #0
   db53c:	4832      	ldr	r0, [pc, #200]	; (db608 <rint+0x120>)
   db53e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   db542:	462a      	mov	r2, r5
   db544:	e9d4 4500 	ldrd	r4, r5, [r4]
   db548:	460b      	mov	r3, r1
   db54a:	4620      	mov	r0, r4
   db54c:	4629      	mov	r1, r5
   db54e:	f000 f8f7 	bl	db740 <__adddf3>
   db552:	e9cd 0100 	strd	r0, r1, [sp]
   db556:	e9dd 0100 	ldrd	r0, r1, [sp]
   db55a:	4622      	mov	r2, r4
   db55c:	462b      	mov	r3, r5
   db55e:	f000 f8ed 	bl	db73c <__aeabi_dsub>
   db562:	ec41 0b10 	vmov	d0, r0, r1
   db566:	b003      	add	sp, #12
   db568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db56a:	2833      	cmp	r0, #51	; 0x33
   db56c:	dd06      	ble.n	db57c <rint+0x94>
   db56e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   db572:	d040      	beq.n	db5f6 <rint+0x10e>
   db574:	ec43 2b10 	vmov	d0, r2, r3
   db578:	b003      	add	sp, #12
   db57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db57c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   db580:	f04f 30ff 	mov.w	r0, #4294967295
   db584:	40f0      	lsrs	r0, r6
   db586:	4202      	tst	r2, r0
   db588:	d0f4      	beq.n	db574 <rint+0x8c>
   db58a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   db58e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   db592:	d0d3      	beq.n	db53c <rint+0x54>
   db594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   db598:	ea25 0503 	bic.w	r5, r5, r3
   db59c:	fa42 f606 	asr.w	r6, r2, r6
   db5a0:	4335      	orrs	r5, r6
   db5a2:	e7cb      	b.n	db53c <rint+0x54>
   db5a4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   db5a8:	4310      	orrs	r0, r2
   db5aa:	d0e3      	beq.n	db574 <rint+0x8c>
   db5ac:	f3c3 0013 	ubfx	r0, r3, #0, #20
   db5b0:	4310      	orrs	r0, r2
   db5b2:	4245      	negs	r5, r0
   db5b4:	4305      	orrs	r5, r0
   db5b6:	4814      	ldr	r0, [pc, #80]	; (db608 <rint+0x120>)
   db5b8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   db5bc:	e9d0 6700 	ldrd	r6, r7, [r0]
   db5c0:	0c59      	lsrs	r1, r3, #17
   db5c2:	0b2d      	lsrs	r5, r5, #12
   db5c4:	0449      	lsls	r1, r1, #17
   db5c6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   db5ca:	ea45 0301 	orr.w	r3, r5, r1
   db5ce:	4630      	mov	r0, r6
   db5d0:	4639      	mov	r1, r7
   db5d2:	f000 f8b5 	bl	db740 <__adddf3>
   db5d6:	e9cd 0100 	strd	r0, r1, [sp]
   db5da:	463b      	mov	r3, r7
   db5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   db5e0:	4632      	mov	r2, r6
   db5e2:	f000 f8ab 	bl	db73c <__aeabi_dsub>
   db5e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db5ea:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   db5ee:	ec41 0b10 	vmov	d0, r0, r1
   db5f2:	b003      	add	sp, #12
   db5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db5f6:	ee10 0a10 	vmov	r0, s0
   db5fa:	f000 f8a1 	bl	db740 <__adddf3>
   db5fe:	ec41 0b10 	vmov	d0, r0, r1
   db602:	e7b9      	b.n	db578 <rint+0x90>
   db604:	000fffff 	.word	0x000fffff
   db608:	000def28 	.word	0x000def28
   db60c:	00000000 	.word	0x00000000

000db610 <scalbn>:
   db610:	b538      	push	{r3, r4, r5, lr}
   db612:	ec53 2b10 	vmov	r2, r3, d0
   db616:	f3c3 510a 	ubfx	r1, r3, #20, #11
   db61a:	461c      	mov	r4, r3
   db61c:	4605      	mov	r5, r0
   db61e:	bb81      	cbnz	r1, db682 <scalbn+0x72>
   db620:	ee10 1a10 	vmov	r1, s0
   db624:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   db628:	4321      	orrs	r1, r4
   db62a:	d029      	beq.n	db680 <scalbn+0x70>
   db62c:	4619      	mov	r1, r3
   db62e:	2200      	movs	r2, #0
   db630:	4b3d      	ldr	r3, [pc, #244]	; (db728 <scalbn+0x118>)
   db632:	4c3e      	ldr	r4, [pc, #248]	; (db72c <scalbn+0x11c>)
   db634:	ee10 0a10 	vmov	r0, s0
   db638:	f000 fa38 	bl	dbaac <__aeabi_dmul>
   db63c:	42a5      	cmp	r5, r4
   db63e:	4602      	mov	r2, r0
   db640:	460b      	mov	r3, r1
   db642:	db16      	blt.n	db672 <scalbn+0x62>
   db644:	460c      	mov	r4, r1
   db646:	f3c1 510a 	ubfx	r1, r1, #20, #11
   db64a:	3936      	subs	r1, #54	; 0x36
   db64c:	4429      	add	r1, r5
   db64e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   db652:	4281      	cmp	r1, r0
   db654:	dc21      	bgt.n	db69a <scalbn+0x8a>
   db656:	2900      	cmp	r1, #0
   db658:	dc47      	bgt.n	db6ea <scalbn+0xda>
   db65a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   db65e:	da34      	bge.n	db6ca <scalbn+0xba>
   db660:	f24c 3150 	movw	r1, #50000	; 0xc350
   db664:	428d      	cmp	r5, r1
   db666:	dc18      	bgt.n	db69a <scalbn+0x8a>
   db668:	2b00      	cmp	r3, #0
   db66a:	a127      	add	r1, pc, #156	; (adr r1, db708 <scalbn+0xf8>)
   db66c:	e9d1 0100 	ldrd	r0, r1, [r1]
   db670:	db44      	blt.n	db6fc <scalbn+0xec>
   db672:	a325      	add	r3, pc, #148	; (adr r3, db708 <scalbn+0xf8>)
   db674:	e9d3 2300 	ldrd	r2, r3, [r3]
   db678:	f000 fa18 	bl	dbaac <__aeabi_dmul>
   db67c:	ec41 0b10 	vmov	d0, r0, r1
   db680:	bd38      	pop	{r3, r4, r5, pc}
   db682:	f240 70ff 	movw	r0, #2047	; 0x7ff
   db686:	4281      	cmp	r1, r0
   db688:	d1e0      	bne.n	db64c <scalbn+0x3c>
   db68a:	ee10 0a10 	vmov	r0, s0
   db68e:	4619      	mov	r1, r3
   db690:	f000 f856 	bl	db740 <__adddf3>
   db694:	ec41 0b10 	vmov	d0, r0, r1
   db698:	bd38      	pop	{r3, r4, r5, pc}
   db69a:	2b00      	cmp	r3, #0
   db69c:	a11c      	add	r1, pc, #112	; (adr r1, db710 <scalbn+0x100>)
   db69e:	e9d1 0100 	ldrd	r0, r1, [r1]
   db6a2:	db07      	blt.n	db6b4 <scalbn+0xa4>
   db6a4:	a31a      	add	r3, pc, #104	; (adr r3, db710 <scalbn+0x100>)
   db6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6aa:	f000 f9ff 	bl	dbaac <__aeabi_dmul>
   db6ae:	ec41 0b10 	vmov	d0, r0, r1
   db6b2:	bd38      	pop	{r3, r4, r5, pc}
   db6b4:	a118      	add	r1, pc, #96	; (adr r1, db718 <scalbn+0x108>)
   db6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   db6ba:	a315      	add	r3, pc, #84	; (adr r3, db710 <scalbn+0x100>)
   db6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6c0:	f000 f9f4 	bl	dbaac <__aeabi_dmul>
   db6c4:	ec41 0b10 	vmov	d0, r0, r1
   db6c8:	e7f3      	b.n	db6b2 <scalbn+0xa2>
   db6ca:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db6ce:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db6d2:	3136      	adds	r1, #54	; 0x36
   db6d4:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db6d8:	4610      	mov	r0, r2
   db6da:	4619      	mov	r1, r3
   db6dc:	2200      	movs	r2, #0
   db6de:	4b14      	ldr	r3, [pc, #80]	; (db730 <scalbn+0x120>)
   db6e0:	f000 f9e4 	bl	dbaac <__aeabi_dmul>
   db6e4:	ec41 0b10 	vmov	d0, r0, r1
   db6e8:	bd38      	pop	{r3, r4, r5, pc}
   db6ea:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   db6ee:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   db6f2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   db6f6:	ec43 2b10 	vmov	d0, r2, r3
   db6fa:	bd38      	pop	{r3, r4, r5, pc}
   db6fc:	a108      	add	r1, pc, #32	; (adr r1, db720 <scalbn+0x110>)
   db6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   db702:	e7b6      	b.n	db672 <scalbn+0x62>
   db704:	f3af 8000 	nop.w
   db708:	c2f8f359 	.word	0xc2f8f359
   db70c:	01a56e1f 	.word	0x01a56e1f
   db710:	8800759c 	.word	0x8800759c
   db714:	7e37e43c 	.word	0x7e37e43c
   db718:	8800759c 	.word	0x8800759c
   db71c:	fe37e43c 	.word	0xfe37e43c
   db720:	c2f8f359 	.word	0xc2f8f359
   db724:	81a56e1f 	.word	0x81a56e1f
   db728:	43500000 	.word	0x43500000
   db72c:	ffff3cb0 	.word	0xffff3cb0
   db730:	3c900000 	.word	0x3c900000

000db734 <__aeabi_drsub>:
   db734:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db738:	e002      	b.n	db740 <__adddf3>
   db73a:	bf00      	nop

000db73c <__aeabi_dsub>:
   db73c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db740 <__adddf3>:
   db740:	b530      	push	{r4, r5, lr}
   db742:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db746:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db74a:	ea94 0f05 	teq	r4, r5
   db74e:	bf08      	it	eq
   db750:	ea90 0f02 	teqeq	r0, r2
   db754:	bf1f      	itttt	ne
   db756:	ea54 0c00 	orrsne.w	ip, r4, r0
   db75a:	ea55 0c02 	orrsne.w	ip, r5, r2
   db75e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db766:	f000 80e2 	beq.w	db92e <__adddf3+0x1ee>
   db76a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db76e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db772:	bfb8      	it	lt
   db774:	426d      	neglt	r5, r5
   db776:	dd0c      	ble.n	db792 <__adddf3+0x52>
   db778:	442c      	add	r4, r5
   db77a:	ea80 0202 	eor.w	r2, r0, r2
   db77e:	ea81 0303 	eor.w	r3, r1, r3
   db782:	ea82 0000 	eor.w	r0, r2, r0
   db786:	ea83 0101 	eor.w	r1, r3, r1
   db78a:	ea80 0202 	eor.w	r2, r0, r2
   db78e:	ea81 0303 	eor.w	r3, r1, r3
   db792:	2d36      	cmp	r5, #54	; 0x36
   db794:	bf88      	it	hi
   db796:	bd30      	pophi	{r4, r5, pc}
   db798:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db79c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db7a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db7a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db7a8:	d002      	beq.n	db7b0 <__adddf3+0x70>
   db7aa:	4240      	negs	r0, r0
   db7ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db7b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db7b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db7b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db7bc:	d002      	beq.n	db7c4 <__adddf3+0x84>
   db7be:	4252      	negs	r2, r2
   db7c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db7c4:	ea94 0f05 	teq	r4, r5
   db7c8:	f000 80a7 	beq.w	db91a <__adddf3+0x1da>
   db7cc:	f1a4 0401 	sub.w	r4, r4, #1
   db7d0:	f1d5 0e20 	rsbs	lr, r5, #32
   db7d4:	db0d      	blt.n	db7f2 <__adddf3+0xb2>
   db7d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   db7da:	fa22 f205 	lsr.w	r2, r2, r5
   db7de:	1880      	adds	r0, r0, r2
   db7e0:	f141 0100 	adc.w	r1, r1, #0
   db7e4:	fa03 f20e 	lsl.w	r2, r3, lr
   db7e8:	1880      	adds	r0, r0, r2
   db7ea:	fa43 f305 	asr.w	r3, r3, r5
   db7ee:	4159      	adcs	r1, r3
   db7f0:	e00e      	b.n	db810 <__adddf3+0xd0>
   db7f2:	f1a5 0520 	sub.w	r5, r5, #32
   db7f6:	f10e 0e20 	add.w	lr, lr, #32
   db7fa:	2a01      	cmp	r2, #1
   db7fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   db800:	bf28      	it	cs
   db802:	f04c 0c02 	orrcs.w	ip, ip, #2
   db806:	fa43 f305 	asr.w	r3, r3, r5
   db80a:	18c0      	adds	r0, r0, r3
   db80c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db814:	d507      	bpl.n	db826 <__adddf3+0xe6>
   db816:	f04f 0e00 	mov.w	lr, #0
   db81a:	f1dc 0c00 	rsbs	ip, ip, #0
   db81e:	eb7e 0000 	sbcs.w	r0, lr, r0
   db822:	eb6e 0101 	sbc.w	r1, lr, r1
   db826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db82a:	d31b      	bcc.n	db864 <__adddf3+0x124>
   db82c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db830:	d30c      	bcc.n	db84c <__adddf3+0x10c>
   db832:	0849      	lsrs	r1, r1, #1
   db834:	ea5f 0030 	movs.w	r0, r0, rrx
   db838:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db83c:	f104 0401 	add.w	r4, r4, #1
   db840:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db844:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db848:	f080 809a 	bcs.w	db980 <__adddf3+0x240>
   db84c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db850:	bf08      	it	eq
   db852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db856:	f150 0000 	adcs.w	r0, r0, #0
   db85a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db85e:	ea41 0105 	orr.w	r1, r1, r5
   db862:	bd30      	pop	{r4, r5, pc}
   db864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db868:	4140      	adcs	r0, r0
   db86a:	eb41 0101 	adc.w	r1, r1, r1
   db86e:	3c01      	subs	r4, #1
   db870:	bf28      	it	cs
   db872:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db876:	d2e9      	bcs.n	db84c <__adddf3+0x10c>
   db878:	f091 0f00 	teq	r1, #0
   db87c:	bf04      	itt	eq
   db87e:	4601      	moveq	r1, r0
   db880:	2000      	moveq	r0, #0
   db882:	fab1 f381 	clz	r3, r1
   db886:	bf08      	it	eq
   db888:	3320      	addeq	r3, #32
   db88a:	f1a3 030b 	sub.w	r3, r3, #11
   db88e:	f1b3 0220 	subs.w	r2, r3, #32
   db892:	da0c      	bge.n	db8ae <__adddf3+0x16e>
   db894:	320c      	adds	r2, #12
   db896:	dd08      	ble.n	db8aa <__adddf3+0x16a>
   db898:	f102 0c14 	add.w	ip, r2, #20
   db89c:	f1c2 020c 	rsb	r2, r2, #12
   db8a0:	fa01 f00c 	lsl.w	r0, r1, ip
   db8a4:	fa21 f102 	lsr.w	r1, r1, r2
   db8a8:	e00c      	b.n	db8c4 <__adddf3+0x184>
   db8aa:	f102 0214 	add.w	r2, r2, #20
   db8ae:	bfd8      	it	le
   db8b0:	f1c2 0c20 	rsble	ip, r2, #32
   db8b4:	fa01 f102 	lsl.w	r1, r1, r2
   db8b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   db8bc:	bfdc      	itt	le
   db8be:	ea41 010c 	orrle.w	r1, r1, ip
   db8c2:	4090      	lslle	r0, r2
   db8c4:	1ae4      	subs	r4, r4, r3
   db8c6:	bfa2      	ittt	ge
   db8c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db8cc:	4329      	orrge	r1, r5
   db8ce:	bd30      	popge	{r4, r5, pc}
   db8d0:	ea6f 0404 	mvn.w	r4, r4
   db8d4:	3c1f      	subs	r4, #31
   db8d6:	da1c      	bge.n	db912 <__adddf3+0x1d2>
   db8d8:	340c      	adds	r4, #12
   db8da:	dc0e      	bgt.n	db8fa <__adddf3+0x1ba>
   db8dc:	f104 0414 	add.w	r4, r4, #20
   db8e0:	f1c4 0220 	rsb	r2, r4, #32
   db8e4:	fa20 f004 	lsr.w	r0, r0, r4
   db8e8:	fa01 f302 	lsl.w	r3, r1, r2
   db8ec:	ea40 0003 	orr.w	r0, r0, r3
   db8f0:	fa21 f304 	lsr.w	r3, r1, r4
   db8f4:	ea45 0103 	orr.w	r1, r5, r3
   db8f8:	bd30      	pop	{r4, r5, pc}
   db8fa:	f1c4 040c 	rsb	r4, r4, #12
   db8fe:	f1c4 0220 	rsb	r2, r4, #32
   db902:	fa20 f002 	lsr.w	r0, r0, r2
   db906:	fa01 f304 	lsl.w	r3, r1, r4
   db90a:	ea40 0003 	orr.w	r0, r0, r3
   db90e:	4629      	mov	r1, r5
   db910:	bd30      	pop	{r4, r5, pc}
   db912:	fa21 f004 	lsr.w	r0, r1, r4
   db916:	4629      	mov	r1, r5
   db918:	bd30      	pop	{r4, r5, pc}
   db91a:	f094 0f00 	teq	r4, #0
   db91e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db922:	bf06      	itte	eq
   db924:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db928:	3401      	addeq	r4, #1
   db92a:	3d01      	subne	r5, #1
   db92c:	e74e      	b.n	db7cc <__adddf3+0x8c>
   db92e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db932:	bf18      	it	ne
   db934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db938:	d029      	beq.n	db98e <__adddf3+0x24e>
   db93a:	ea94 0f05 	teq	r4, r5
   db93e:	bf08      	it	eq
   db940:	ea90 0f02 	teqeq	r0, r2
   db944:	d005      	beq.n	db952 <__adddf3+0x212>
   db946:	ea54 0c00 	orrs.w	ip, r4, r0
   db94a:	bf04      	itt	eq
   db94c:	4619      	moveq	r1, r3
   db94e:	4610      	moveq	r0, r2
   db950:	bd30      	pop	{r4, r5, pc}
   db952:	ea91 0f03 	teq	r1, r3
   db956:	bf1e      	ittt	ne
   db958:	2100      	movne	r1, #0
   db95a:	2000      	movne	r0, #0
   db95c:	bd30      	popne	{r4, r5, pc}
   db95e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db962:	d105      	bne.n	db970 <__adddf3+0x230>
   db964:	0040      	lsls	r0, r0, #1
   db966:	4149      	adcs	r1, r1
   db968:	bf28      	it	cs
   db96a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db96e:	bd30      	pop	{r4, r5, pc}
   db970:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db974:	bf3c      	itt	cc
   db976:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db97a:	bd30      	popcc	{r4, r5, pc}
   db97c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db980:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db988:	f04f 0000 	mov.w	r0, #0
   db98c:	bd30      	pop	{r4, r5, pc}
   db98e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db992:	bf1a      	itte	ne
   db994:	4619      	movne	r1, r3
   db996:	4610      	movne	r0, r2
   db998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db99c:	bf1c      	itt	ne
   db99e:	460b      	movne	r3, r1
   db9a0:	4602      	movne	r2, r0
   db9a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db9a6:	bf06      	itte	eq
   db9a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db9ac:	ea91 0f03 	teqeq	r1, r3
   db9b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db9b4:	bd30      	pop	{r4, r5, pc}
   db9b6:	bf00      	nop

000db9b8 <__aeabi_ui2d>:
   db9b8:	f090 0f00 	teq	r0, #0
   db9bc:	bf04      	itt	eq
   db9be:	2100      	moveq	r1, #0
   db9c0:	4770      	bxeq	lr
   db9c2:	b530      	push	{r4, r5, lr}
   db9c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db9c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db9cc:	f04f 0500 	mov.w	r5, #0
   db9d0:	f04f 0100 	mov.w	r1, #0
   db9d4:	e750      	b.n	db878 <__adddf3+0x138>
   db9d6:	bf00      	nop

000db9d8 <__aeabi_i2d>:
   db9d8:	f090 0f00 	teq	r0, #0
   db9dc:	bf04      	itt	eq
   db9de:	2100      	moveq	r1, #0
   db9e0:	4770      	bxeq	lr
   db9e2:	b530      	push	{r4, r5, lr}
   db9e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db9e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db9ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db9f0:	bf48      	it	mi
   db9f2:	4240      	negmi	r0, r0
   db9f4:	f04f 0100 	mov.w	r1, #0
   db9f8:	e73e      	b.n	db878 <__adddf3+0x138>
   db9fa:	bf00      	nop

000db9fc <__aeabi_f2d>:
   db9fc:	0042      	lsls	r2, r0, #1
   db9fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dba02:	ea4f 0131 	mov.w	r1, r1, rrx
   dba06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dba0a:	bf1f      	itttt	ne
   dba0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dba10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dba14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dba18:	4770      	bxne	lr
   dba1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dba1e:	bf08      	it	eq
   dba20:	4770      	bxeq	lr
   dba22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dba26:	bf04      	itt	eq
   dba28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dba2c:	4770      	bxeq	lr
   dba2e:	b530      	push	{r4, r5, lr}
   dba30:	f44f 7460 	mov.w	r4, #896	; 0x380
   dba34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dba38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dba3c:	e71c      	b.n	db878 <__adddf3+0x138>
   dba3e:	bf00      	nop

000dba40 <__aeabi_ul2d>:
   dba40:	ea50 0201 	orrs.w	r2, r0, r1
   dba44:	bf08      	it	eq
   dba46:	4770      	bxeq	lr
   dba48:	b530      	push	{r4, r5, lr}
   dba4a:	f04f 0500 	mov.w	r5, #0
   dba4e:	e00a      	b.n	dba66 <__aeabi_l2d+0x16>

000dba50 <__aeabi_l2d>:
   dba50:	ea50 0201 	orrs.w	r2, r0, r1
   dba54:	bf08      	it	eq
   dba56:	4770      	bxeq	lr
   dba58:	b530      	push	{r4, r5, lr}
   dba5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dba5e:	d502      	bpl.n	dba66 <__aeabi_l2d+0x16>
   dba60:	4240      	negs	r0, r0
   dba62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dba66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dba6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dba6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dba72:	f43f aed8 	beq.w	db826 <__adddf3+0xe6>
   dba76:	f04f 0203 	mov.w	r2, #3
   dba7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dba7e:	bf18      	it	ne
   dba80:	3203      	addne	r2, #3
   dba82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dba86:	bf18      	it	ne
   dba88:	3203      	addne	r2, #3
   dba8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dba8e:	f1c2 0320 	rsb	r3, r2, #32
   dba92:	fa00 fc03 	lsl.w	ip, r0, r3
   dba96:	fa20 f002 	lsr.w	r0, r0, r2
   dba9a:	fa01 fe03 	lsl.w	lr, r1, r3
   dba9e:	ea40 000e 	orr.w	r0, r0, lr
   dbaa2:	fa21 f102 	lsr.w	r1, r1, r2
   dbaa6:	4414      	add	r4, r2
   dbaa8:	e6bd      	b.n	db826 <__adddf3+0xe6>
   dbaaa:	bf00      	nop

000dbaac <__aeabi_dmul>:
   dbaac:	b570      	push	{r4, r5, r6, lr}
   dbaae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbaba:	bf1d      	ittte	ne
   dbabc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbac0:	ea94 0f0c 	teqne	r4, ip
   dbac4:	ea95 0f0c 	teqne	r5, ip
   dbac8:	f000 f8de 	bleq	dbc88 <__aeabi_dmul+0x1dc>
   dbacc:	442c      	add	r4, r5
   dbace:	ea81 0603 	eor.w	r6, r1, r3
   dbad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbade:	bf18      	it	ne
   dbae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbaec:	d038      	beq.n	dbb60 <__aeabi_dmul+0xb4>
   dbaee:	fba0 ce02 	umull	ip, lr, r0, r2
   dbaf2:	f04f 0500 	mov.w	r5, #0
   dbaf6:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbafa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbafe:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbb02:	f04f 0600 	mov.w	r6, #0
   dbb06:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbb0a:	f09c 0f00 	teq	ip, #0
   dbb0e:	bf18      	it	ne
   dbb10:	f04e 0e01 	orrne.w	lr, lr, #1
   dbb14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbb18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbb1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbb20:	d204      	bcs.n	dbb2c <__aeabi_dmul+0x80>
   dbb22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbb26:	416d      	adcs	r5, r5
   dbb28:	eb46 0606 	adc.w	r6, r6, r6
   dbb2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbb30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbb34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbb38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbb3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbb40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbb44:	bf88      	it	hi
   dbb46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbb4a:	d81e      	bhi.n	dbb8a <__aeabi_dmul+0xde>
   dbb4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbb50:	bf08      	it	eq
   dbb52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbb56:	f150 0000 	adcs.w	r0, r0, #0
   dbb5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbb5e:	bd70      	pop	{r4, r5, r6, pc}
   dbb60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbb64:	ea46 0101 	orr.w	r1, r6, r1
   dbb68:	ea40 0002 	orr.w	r0, r0, r2
   dbb6c:	ea81 0103 	eor.w	r1, r1, r3
   dbb70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbb74:	bfc2      	ittt	gt
   dbb76:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbb7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbb7e:	bd70      	popgt	{r4, r5, r6, pc}
   dbb80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbb84:	f04f 0e00 	mov.w	lr, #0
   dbb88:	3c01      	subs	r4, #1
   dbb8a:	f300 80ab 	bgt.w	dbce4 <__aeabi_dmul+0x238>
   dbb8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbb92:	bfde      	ittt	le
   dbb94:	2000      	movle	r0, #0
   dbb96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbb9a:	bd70      	pople	{r4, r5, r6, pc}
   dbb9c:	f1c4 0400 	rsb	r4, r4, #0
   dbba0:	3c20      	subs	r4, #32
   dbba2:	da35      	bge.n	dbc10 <__aeabi_dmul+0x164>
   dbba4:	340c      	adds	r4, #12
   dbba6:	dc1b      	bgt.n	dbbe0 <__aeabi_dmul+0x134>
   dbba8:	f104 0414 	add.w	r4, r4, #20
   dbbac:	f1c4 0520 	rsb	r5, r4, #32
   dbbb0:	fa00 f305 	lsl.w	r3, r0, r5
   dbbb4:	fa20 f004 	lsr.w	r0, r0, r4
   dbbb8:	fa01 f205 	lsl.w	r2, r1, r5
   dbbbc:	ea40 0002 	orr.w	r0, r0, r2
   dbbc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbbc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbbc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbbcc:	fa21 f604 	lsr.w	r6, r1, r4
   dbbd0:	eb42 0106 	adc.w	r1, r2, r6
   dbbd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbbd8:	bf08      	it	eq
   dbbda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbbde:	bd70      	pop	{r4, r5, r6, pc}
   dbbe0:	f1c4 040c 	rsb	r4, r4, #12
   dbbe4:	f1c4 0520 	rsb	r5, r4, #32
   dbbe8:	fa00 f304 	lsl.w	r3, r0, r4
   dbbec:	fa20 f005 	lsr.w	r0, r0, r5
   dbbf0:	fa01 f204 	lsl.w	r2, r1, r4
   dbbf4:	ea40 0002 	orr.w	r0, r0, r2
   dbbf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbbfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbc00:	f141 0100 	adc.w	r1, r1, #0
   dbc04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbc08:	bf08      	it	eq
   dbc0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbc0e:	bd70      	pop	{r4, r5, r6, pc}
   dbc10:	f1c4 0520 	rsb	r5, r4, #32
   dbc14:	fa00 f205 	lsl.w	r2, r0, r5
   dbc18:	ea4e 0e02 	orr.w	lr, lr, r2
   dbc1c:	fa20 f304 	lsr.w	r3, r0, r4
   dbc20:	fa01 f205 	lsl.w	r2, r1, r5
   dbc24:	ea43 0302 	orr.w	r3, r3, r2
   dbc28:	fa21 f004 	lsr.w	r0, r1, r4
   dbc2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbc30:	fa21 f204 	lsr.w	r2, r1, r4
   dbc34:	ea20 0002 	bic.w	r0, r0, r2
   dbc38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbc3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbc40:	bf08      	it	eq
   dbc42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbc46:	bd70      	pop	{r4, r5, r6, pc}
   dbc48:	f094 0f00 	teq	r4, #0
   dbc4c:	d10f      	bne.n	dbc6e <__aeabi_dmul+0x1c2>
   dbc4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbc52:	0040      	lsls	r0, r0, #1
   dbc54:	eb41 0101 	adc.w	r1, r1, r1
   dbc58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbc5c:	bf08      	it	eq
   dbc5e:	3c01      	subeq	r4, #1
   dbc60:	d0f7      	beq.n	dbc52 <__aeabi_dmul+0x1a6>
   dbc62:	ea41 0106 	orr.w	r1, r1, r6
   dbc66:	f095 0f00 	teq	r5, #0
   dbc6a:	bf18      	it	ne
   dbc6c:	4770      	bxne	lr
   dbc6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbc72:	0052      	lsls	r2, r2, #1
   dbc74:	eb43 0303 	adc.w	r3, r3, r3
   dbc78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbc7c:	bf08      	it	eq
   dbc7e:	3d01      	subeq	r5, #1
   dbc80:	d0f7      	beq.n	dbc72 <__aeabi_dmul+0x1c6>
   dbc82:	ea43 0306 	orr.w	r3, r3, r6
   dbc86:	4770      	bx	lr
   dbc88:	ea94 0f0c 	teq	r4, ip
   dbc8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbc90:	bf18      	it	ne
   dbc92:	ea95 0f0c 	teqne	r5, ip
   dbc96:	d00c      	beq.n	dbcb2 <__aeabi_dmul+0x206>
   dbc98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbc9c:	bf18      	it	ne
   dbc9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbca2:	d1d1      	bne.n	dbc48 <__aeabi_dmul+0x19c>
   dbca4:	ea81 0103 	eor.w	r1, r1, r3
   dbca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbcac:	f04f 0000 	mov.w	r0, #0
   dbcb0:	bd70      	pop	{r4, r5, r6, pc}
   dbcb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbcb6:	bf06      	itte	eq
   dbcb8:	4610      	moveq	r0, r2
   dbcba:	4619      	moveq	r1, r3
   dbcbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbcc0:	d019      	beq.n	dbcf6 <__aeabi_dmul+0x24a>
   dbcc2:	ea94 0f0c 	teq	r4, ip
   dbcc6:	d102      	bne.n	dbcce <__aeabi_dmul+0x222>
   dbcc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbccc:	d113      	bne.n	dbcf6 <__aeabi_dmul+0x24a>
   dbcce:	ea95 0f0c 	teq	r5, ip
   dbcd2:	d105      	bne.n	dbce0 <__aeabi_dmul+0x234>
   dbcd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbcd8:	bf1c      	itt	ne
   dbcda:	4610      	movne	r0, r2
   dbcdc:	4619      	movne	r1, r3
   dbcde:	d10a      	bne.n	dbcf6 <__aeabi_dmul+0x24a>
   dbce0:	ea81 0103 	eor.w	r1, r1, r3
   dbce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbcec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbcf0:	f04f 0000 	mov.w	r0, #0
   dbcf4:	bd70      	pop	{r4, r5, r6, pc}
   dbcf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbcfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbcfe:	bd70      	pop	{r4, r5, r6, pc}

000dbd00 <__aeabi_ddiv>:
   dbd00:	b570      	push	{r4, r5, r6, lr}
   dbd02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbd06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbd0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbd0e:	bf1d      	ittte	ne
   dbd10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbd14:	ea94 0f0c 	teqne	r4, ip
   dbd18:	ea95 0f0c 	teqne	r5, ip
   dbd1c:	f000 f8a7 	bleq	dbe6e <__aeabi_ddiv+0x16e>
   dbd20:	eba4 0405 	sub.w	r4, r4, r5
   dbd24:	ea81 0e03 	eor.w	lr, r1, r3
   dbd28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbd2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbd30:	f000 8088 	beq.w	dbe44 <__aeabi_ddiv+0x144>
   dbd34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbd38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbd3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbd40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbd44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbd48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbd4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbd50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbd54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbd58:	429d      	cmp	r5, r3
   dbd5a:	bf08      	it	eq
   dbd5c:	4296      	cmpeq	r6, r2
   dbd5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbd62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbd66:	d202      	bcs.n	dbd6e <__aeabi_ddiv+0x6e>
   dbd68:	085b      	lsrs	r3, r3, #1
   dbd6a:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd6e:	1ab6      	subs	r6, r6, r2
   dbd70:	eb65 0503 	sbc.w	r5, r5, r3
   dbd74:	085b      	lsrs	r3, r3, #1
   dbd76:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbd7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbd82:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd86:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbd8a:	bf22      	ittt	cs
   dbd8c:	1ab6      	subcs	r6, r6, r2
   dbd8e:	4675      	movcs	r5, lr
   dbd90:	ea40 000c 	orrcs.w	r0, r0, ip
   dbd94:	085b      	lsrs	r3, r3, #1
   dbd96:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd9a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbda2:	bf22      	ittt	cs
   dbda4:	1ab6      	subcs	r6, r6, r2
   dbda6:	4675      	movcs	r5, lr
   dbda8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbdac:	085b      	lsrs	r3, r3, #1
   dbdae:	ea4f 0232 	mov.w	r2, r2, rrx
   dbdb2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbdb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbdba:	bf22      	ittt	cs
   dbdbc:	1ab6      	subcs	r6, r6, r2
   dbdbe:	4675      	movcs	r5, lr
   dbdc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbdc4:	085b      	lsrs	r3, r3, #1
   dbdc6:	ea4f 0232 	mov.w	r2, r2, rrx
   dbdca:	ebb6 0e02 	subs.w	lr, r6, r2
   dbdce:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbdd2:	bf22      	ittt	cs
   dbdd4:	1ab6      	subcs	r6, r6, r2
   dbdd6:	4675      	movcs	r5, lr
   dbdd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbddc:	ea55 0e06 	orrs.w	lr, r5, r6
   dbde0:	d018      	beq.n	dbe14 <__aeabi_ddiv+0x114>
   dbde2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbde6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbdea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbdee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbdf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbdf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbdfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbdfe:	d1c0      	bne.n	dbd82 <__aeabi_ddiv+0x82>
   dbe00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbe04:	d10b      	bne.n	dbe1e <__aeabi_ddiv+0x11e>
   dbe06:	ea41 0100 	orr.w	r1, r1, r0
   dbe0a:	f04f 0000 	mov.w	r0, #0
   dbe0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbe12:	e7b6      	b.n	dbd82 <__aeabi_ddiv+0x82>
   dbe14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbe18:	bf04      	itt	eq
   dbe1a:	4301      	orreq	r1, r0
   dbe1c:	2000      	moveq	r0, #0
   dbe1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbe22:	bf88      	it	hi
   dbe24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbe28:	f63f aeaf 	bhi.w	dbb8a <__aeabi_dmul+0xde>
   dbe2c:	ebb5 0c03 	subs.w	ip, r5, r3
   dbe30:	bf04      	itt	eq
   dbe32:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbe36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbe3a:	f150 0000 	adcs.w	r0, r0, #0
   dbe3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbe42:	bd70      	pop	{r4, r5, r6, pc}
   dbe44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbe48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbe4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbe50:	bfc2      	ittt	gt
   dbe52:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbe56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbe5a:	bd70      	popgt	{r4, r5, r6, pc}
   dbe5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbe60:	f04f 0e00 	mov.w	lr, #0
   dbe64:	3c01      	subs	r4, #1
   dbe66:	e690      	b.n	dbb8a <__aeabi_dmul+0xde>
   dbe68:	ea45 0e06 	orr.w	lr, r5, r6
   dbe6c:	e68d      	b.n	dbb8a <__aeabi_dmul+0xde>
   dbe6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbe72:	ea94 0f0c 	teq	r4, ip
   dbe76:	bf08      	it	eq
   dbe78:	ea95 0f0c 	teqeq	r5, ip
   dbe7c:	f43f af3b 	beq.w	dbcf6 <__aeabi_dmul+0x24a>
   dbe80:	ea94 0f0c 	teq	r4, ip
   dbe84:	d10a      	bne.n	dbe9c <__aeabi_ddiv+0x19c>
   dbe86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbe8a:	f47f af34 	bne.w	dbcf6 <__aeabi_dmul+0x24a>
   dbe8e:	ea95 0f0c 	teq	r5, ip
   dbe92:	f47f af25 	bne.w	dbce0 <__aeabi_dmul+0x234>
   dbe96:	4610      	mov	r0, r2
   dbe98:	4619      	mov	r1, r3
   dbe9a:	e72c      	b.n	dbcf6 <__aeabi_dmul+0x24a>
   dbe9c:	ea95 0f0c 	teq	r5, ip
   dbea0:	d106      	bne.n	dbeb0 <__aeabi_ddiv+0x1b0>
   dbea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbea6:	f43f aefd 	beq.w	dbca4 <__aeabi_dmul+0x1f8>
   dbeaa:	4610      	mov	r0, r2
   dbeac:	4619      	mov	r1, r3
   dbeae:	e722      	b.n	dbcf6 <__aeabi_dmul+0x24a>
   dbeb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbeb4:	bf18      	it	ne
   dbeb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbeba:	f47f aec5 	bne.w	dbc48 <__aeabi_dmul+0x19c>
   dbebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbec2:	f47f af0d 	bne.w	dbce0 <__aeabi_dmul+0x234>
   dbec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbeca:	f47f aeeb 	bne.w	dbca4 <__aeabi_dmul+0x1f8>
   dbece:	e712      	b.n	dbcf6 <__aeabi_dmul+0x24a>

000dbed0 <__gedf2>:
   dbed0:	f04f 3cff 	mov.w	ip, #4294967295
   dbed4:	e006      	b.n	dbee4 <__cmpdf2+0x4>
   dbed6:	bf00      	nop

000dbed8 <__ledf2>:
   dbed8:	f04f 0c01 	mov.w	ip, #1
   dbedc:	e002      	b.n	dbee4 <__cmpdf2+0x4>
   dbede:	bf00      	nop

000dbee0 <__cmpdf2>:
   dbee0:	f04f 0c01 	mov.w	ip, #1
   dbee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   dbee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbeec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbef4:	bf18      	it	ne
   dbef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dbefa:	d01b      	beq.n	dbf34 <__cmpdf2+0x54>
   dbefc:	b001      	add	sp, #4
   dbefe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dbf02:	bf0c      	ite	eq
   dbf04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dbf08:	ea91 0f03 	teqne	r1, r3
   dbf0c:	bf02      	ittt	eq
   dbf0e:	ea90 0f02 	teqeq	r0, r2
   dbf12:	2000      	moveq	r0, #0
   dbf14:	4770      	bxeq	lr
   dbf16:	f110 0f00 	cmn.w	r0, #0
   dbf1a:	ea91 0f03 	teq	r1, r3
   dbf1e:	bf58      	it	pl
   dbf20:	4299      	cmppl	r1, r3
   dbf22:	bf08      	it	eq
   dbf24:	4290      	cmpeq	r0, r2
   dbf26:	bf2c      	ite	cs
   dbf28:	17d8      	asrcs	r0, r3, #31
   dbf2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dbf2e:	f040 0001 	orr.w	r0, r0, #1
   dbf32:	4770      	bx	lr
   dbf34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbf38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbf3c:	d102      	bne.n	dbf44 <__cmpdf2+0x64>
   dbf3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dbf42:	d107      	bne.n	dbf54 <__cmpdf2+0x74>
   dbf44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbf48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbf4c:	d1d6      	bne.n	dbefc <__cmpdf2+0x1c>
   dbf4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dbf52:	d0d3      	beq.n	dbefc <__cmpdf2+0x1c>
   dbf54:	f85d 0b04 	ldr.w	r0, [sp], #4
   dbf58:	4770      	bx	lr
   dbf5a:	bf00      	nop

000dbf5c <__aeabi_cdrcmple>:
   dbf5c:	4684      	mov	ip, r0
   dbf5e:	4610      	mov	r0, r2
   dbf60:	4662      	mov	r2, ip
   dbf62:	468c      	mov	ip, r1
   dbf64:	4619      	mov	r1, r3
   dbf66:	4663      	mov	r3, ip
   dbf68:	e000      	b.n	dbf6c <__aeabi_cdcmpeq>
   dbf6a:	bf00      	nop

000dbf6c <__aeabi_cdcmpeq>:
   dbf6c:	b501      	push	{r0, lr}
   dbf6e:	f7ff ffb7 	bl	dbee0 <__cmpdf2>
   dbf72:	2800      	cmp	r0, #0
   dbf74:	bf48      	it	mi
   dbf76:	f110 0f00 	cmnmi.w	r0, #0
   dbf7a:	bd01      	pop	{r0, pc}

000dbf7c <__aeabi_dcmpeq>:
   dbf7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbf80:	f7ff fff4 	bl	dbf6c <__aeabi_cdcmpeq>
   dbf84:	bf0c      	ite	eq
   dbf86:	2001      	moveq	r0, #1
   dbf88:	2000      	movne	r0, #0
   dbf8a:	f85d fb08 	ldr.w	pc, [sp], #8
   dbf8e:	bf00      	nop

000dbf90 <__aeabi_dcmplt>:
   dbf90:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbf94:	f7ff ffea 	bl	dbf6c <__aeabi_cdcmpeq>
   dbf98:	bf34      	ite	cc
   dbf9a:	2001      	movcc	r0, #1
   dbf9c:	2000      	movcs	r0, #0
   dbf9e:	f85d fb08 	ldr.w	pc, [sp], #8
   dbfa2:	bf00      	nop

000dbfa4 <__aeabi_dcmple>:
   dbfa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbfa8:	f7ff ffe0 	bl	dbf6c <__aeabi_cdcmpeq>
   dbfac:	bf94      	ite	ls
   dbfae:	2001      	movls	r0, #1
   dbfb0:	2000      	movhi	r0, #0
   dbfb2:	f85d fb08 	ldr.w	pc, [sp], #8
   dbfb6:	bf00      	nop

000dbfb8 <__aeabi_dcmpge>:
   dbfb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbfbc:	f7ff ffce 	bl	dbf5c <__aeabi_cdrcmple>
   dbfc0:	bf94      	ite	ls
   dbfc2:	2001      	movls	r0, #1
   dbfc4:	2000      	movhi	r0, #0
   dbfc6:	f85d fb08 	ldr.w	pc, [sp], #8
   dbfca:	bf00      	nop

000dbfcc <__aeabi_dcmpgt>:
   dbfcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbfd0:	f7ff ffc4 	bl	dbf5c <__aeabi_cdrcmple>
   dbfd4:	bf34      	ite	cc
   dbfd6:	2001      	movcc	r0, #1
   dbfd8:	2000      	movcs	r0, #0
   dbfda:	f85d fb08 	ldr.w	pc, [sp], #8
   dbfde:	bf00      	nop

000dbfe0 <__aeabi_dcmpun>:
   dbfe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbfe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbfe8:	d102      	bne.n	dbff0 <__aeabi_dcmpun+0x10>
   dbfea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dbfee:	d10a      	bne.n	dc006 <__aeabi_dcmpun+0x26>
   dbff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbff8:	d102      	bne.n	dc000 <__aeabi_dcmpun+0x20>
   dbffa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dbffe:	d102      	bne.n	dc006 <__aeabi_dcmpun+0x26>
   dc000:	f04f 0000 	mov.w	r0, #0
   dc004:	4770      	bx	lr
   dc006:	f04f 0001 	mov.w	r0, #1
   dc00a:	4770      	bx	lr

000dc00c <__aeabi_d2iz>:
   dc00c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc014:	d215      	bcs.n	dc042 <__aeabi_d2iz+0x36>
   dc016:	d511      	bpl.n	dc03c <__aeabi_d2iz+0x30>
   dc018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc01c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc020:	d912      	bls.n	dc048 <__aeabi_d2iz+0x3c>
   dc022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc02a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc02e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc032:	fa23 f002 	lsr.w	r0, r3, r2
   dc036:	bf18      	it	ne
   dc038:	4240      	negne	r0, r0
   dc03a:	4770      	bx	lr
   dc03c:	f04f 0000 	mov.w	r0, #0
   dc040:	4770      	bx	lr
   dc042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc046:	d105      	bne.n	dc054 <__aeabi_d2iz+0x48>
   dc048:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc04c:	bf08      	it	eq
   dc04e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc052:	4770      	bx	lr
   dc054:	f04f 0000 	mov.w	r0, #0
   dc058:	4770      	bx	lr
   dc05a:	bf00      	nop

000dc05c <__aeabi_d2uiz>:
   dc05c:	004a      	lsls	r2, r1, #1
   dc05e:	d211      	bcs.n	dc084 <__aeabi_d2uiz+0x28>
   dc060:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc064:	d211      	bcs.n	dc08a <__aeabi_d2uiz+0x2e>
   dc066:	d50d      	bpl.n	dc084 <__aeabi_d2uiz+0x28>
   dc068:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc06c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc070:	d40e      	bmi.n	dc090 <__aeabi_d2uiz+0x34>
   dc072:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc07a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc07e:	fa23 f002 	lsr.w	r0, r3, r2
   dc082:	4770      	bx	lr
   dc084:	f04f 0000 	mov.w	r0, #0
   dc088:	4770      	bx	lr
   dc08a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc08e:	d102      	bne.n	dc096 <__aeabi_d2uiz+0x3a>
   dc090:	f04f 30ff 	mov.w	r0, #4294967295
   dc094:	4770      	bx	lr
   dc096:	f04f 0000 	mov.w	r0, #0
   dc09a:	4770      	bx	lr

000dc09c <__aeabi_d2f>:
   dc09c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc0a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc0a4:	bf24      	itt	cs
   dc0a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc0aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc0ae:	d90d      	bls.n	dc0cc <__aeabi_d2f+0x30>
   dc0b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc0b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc0b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc0bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc0c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc0c4:	bf08      	it	eq
   dc0c6:	f020 0001 	biceq.w	r0, r0, #1
   dc0ca:	4770      	bx	lr
   dc0cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc0d0:	d121      	bne.n	dc116 <__aeabi_d2f+0x7a>
   dc0d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc0d6:	bfbc      	itt	lt
   dc0d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc0dc:	4770      	bxlt	lr
   dc0de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc0e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc0e6:	f1c2 0218 	rsb	r2, r2, #24
   dc0ea:	f1c2 0c20 	rsb	ip, r2, #32
   dc0ee:	fa10 f30c 	lsls.w	r3, r0, ip
   dc0f2:	fa20 f002 	lsr.w	r0, r0, r2
   dc0f6:	bf18      	it	ne
   dc0f8:	f040 0001 	orrne.w	r0, r0, #1
   dc0fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc100:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc104:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc108:	ea40 000c 	orr.w	r0, r0, ip
   dc10c:	fa23 f302 	lsr.w	r3, r3, r2
   dc110:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc114:	e7cc      	b.n	dc0b0 <__aeabi_d2f+0x14>
   dc116:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc11a:	d107      	bne.n	dc12c <__aeabi_d2f+0x90>
   dc11c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc120:	bf1e      	ittt	ne
   dc122:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc126:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc12a:	4770      	bxne	lr
   dc12c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc130:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc134:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc138:	4770      	bx	lr
   dc13a:	bf00      	nop

000dc13c <__aeabi_d2ulz>:
   dc13c:	b5d0      	push	{r4, r6, r7, lr}
   dc13e:	4b0c      	ldr	r3, [pc, #48]	; (dc170 <__aeabi_d2ulz+0x34>)
   dc140:	2200      	movs	r2, #0
   dc142:	4606      	mov	r6, r0
   dc144:	460f      	mov	r7, r1
   dc146:	f7ff fcb1 	bl	dbaac <__aeabi_dmul>
   dc14a:	f7ff ff87 	bl	dc05c <__aeabi_d2uiz>
   dc14e:	4604      	mov	r4, r0
   dc150:	f7ff fc32 	bl	db9b8 <__aeabi_ui2d>
   dc154:	4b07      	ldr	r3, [pc, #28]	; (dc174 <__aeabi_d2ulz+0x38>)
   dc156:	2200      	movs	r2, #0
   dc158:	f7ff fca8 	bl	dbaac <__aeabi_dmul>
   dc15c:	4602      	mov	r2, r0
   dc15e:	460b      	mov	r3, r1
   dc160:	4630      	mov	r0, r6
   dc162:	4639      	mov	r1, r7
   dc164:	f7ff faea 	bl	db73c <__aeabi_dsub>
   dc168:	f7ff ff78 	bl	dc05c <__aeabi_d2uiz>
   dc16c:	4621      	mov	r1, r4
   dc16e:	bdd0      	pop	{r4, r6, r7, pc}
   dc170:	3df00000 	.word	0x3df00000
   dc174:	41f00000 	.word	0x41f00000

000dc178 <atof>:
   dc178:	2100      	movs	r1, #0
   dc17a:	f000 befb 	b.w	dcf74 <strtod>

000dc17e <atoi>:
   dc17e:	220a      	movs	r2, #10
   dc180:	2100      	movs	r1, #0
   dc182:	f000 bfcf 	b.w	dd124 <strtol>

000dc186 <atol>:
   dc186:	220a      	movs	r2, #10
   dc188:	2100      	movs	r1, #0
   dc18a:	f000 bfcb 	b.w	dd124 <strtol>
	...

000dc190 <__cxa_atexit>:
   dc190:	b510      	push	{r4, lr}
   dc192:	4c05      	ldr	r4, [pc, #20]	; (dc1a8 <__cxa_atexit+0x18>)
   dc194:	4613      	mov	r3, r2
   dc196:	b12c      	cbz	r4, dc1a4 <__cxa_atexit+0x14>
   dc198:	460a      	mov	r2, r1
   dc19a:	4601      	mov	r1, r0
   dc19c:	2002      	movs	r0, #2
   dc19e:	f3af 8000 	nop.w
   dc1a2:	bd10      	pop	{r4, pc}
   dc1a4:	4620      	mov	r0, r4
   dc1a6:	e7fc      	b.n	dc1a2 <__cxa_atexit+0x12>
   dc1a8:	00000000 	.word	0x00000000

000dc1ac <memcpy>:
   dc1ac:	440a      	add	r2, r1
   dc1ae:	4291      	cmp	r1, r2
   dc1b0:	f100 33ff 	add.w	r3, r0, #4294967295
   dc1b4:	d100      	bne.n	dc1b8 <memcpy+0xc>
   dc1b6:	4770      	bx	lr
   dc1b8:	b510      	push	{r4, lr}
   dc1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc1be:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc1c2:	4291      	cmp	r1, r2
   dc1c4:	d1f9      	bne.n	dc1ba <memcpy+0xe>
   dc1c6:	bd10      	pop	{r4, pc}

000dc1c8 <memset>:
   dc1c8:	4402      	add	r2, r0
   dc1ca:	4603      	mov	r3, r0
   dc1cc:	4293      	cmp	r3, r2
   dc1ce:	d100      	bne.n	dc1d2 <memset+0xa>
   dc1d0:	4770      	bx	lr
   dc1d2:	f803 1b01 	strb.w	r1, [r3], #1
   dc1d6:	e7f9      	b.n	dc1cc <memset+0x4>

000dc1d8 <srand>:
   dc1d8:	b538      	push	{r3, r4, r5, lr}
   dc1da:	4b0d      	ldr	r3, [pc, #52]	; (dc210 <srand+0x38>)
   dc1dc:	681d      	ldr	r5, [r3, #0]
   dc1de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc1e0:	4604      	mov	r4, r0
   dc1e2:	b97b      	cbnz	r3, dc204 <srand+0x2c>
   dc1e4:	2018      	movs	r0, #24
   dc1e6:	f7fb fe21 	bl	d7e2c <malloc>
   dc1ea:	4a0a      	ldr	r2, [pc, #40]	; (dc214 <srand+0x3c>)
   dc1ec:	4b0a      	ldr	r3, [pc, #40]	; (dc218 <srand+0x40>)
   dc1ee:	63a8      	str	r0, [r5, #56]	; 0x38
   dc1f0:	e9c0 2300 	strd	r2, r3, [r0]
   dc1f4:	4b09      	ldr	r3, [pc, #36]	; (dc21c <srand+0x44>)
   dc1f6:	6083      	str	r3, [r0, #8]
   dc1f8:	230b      	movs	r3, #11
   dc1fa:	8183      	strh	r3, [r0, #12]
   dc1fc:	2201      	movs	r2, #1
   dc1fe:	2300      	movs	r3, #0
   dc200:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc204:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc206:	2200      	movs	r2, #0
   dc208:	611c      	str	r4, [r3, #16]
   dc20a:	615a      	str	r2, [r3, #20]
   dc20c:	bd38      	pop	{r3, r4, r5, pc}
   dc20e:	bf00      	nop
   dc210:	2003e0ac 	.word	0x2003e0ac
   dc214:	abcd330e 	.word	0xabcd330e
   dc218:	e66d1234 	.word	0xe66d1234
   dc21c:	0005deec 	.word	0x0005deec

000dc220 <strchr>:
   dc220:	b2c9      	uxtb	r1, r1
   dc222:	4603      	mov	r3, r0
   dc224:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc228:	b11a      	cbz	r2, dc232 <strchr+0x12>
   dc22a:	428a      	cmp	r2, r1
   dc22c:	d1f9      	bne.n	dc222 <strchr+0x2>
   dc22e:	4618      	mov	r0, r3
   dc230:	4770      	bx	lr
   dc232:	2900      	cmp	r1, #0
   dc234:	bf18      	it	ne
   dc236:	2300      	movne	r3, #0
   dc238:	e7f9      	b.n	dc22e <strchr+0xe>

000dc23a <strcmp>:
   dc23a:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc23e:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc242:	2a01      	cmp	r2, #1
   dc244:	bf28      	it	cs
   dc246:	429a      	cmpcs	r2, r3
   dc248:	d0f7      	beq.n	dc23a <strcmp>
   dc24a:	1ad0      	subs	r0, r2, r3
   dc24c:	4770      	bx	lr

000dc24e <strcpy>:
   dc24e:	4603      	mov	r3, r0
   dc250:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc254:	f803 2b01 	strb.w	r2, [r3], #1
   dc258:	2a00      	cmp	r2, #0
   dc25a:	d1f9      	bne.n	dc250 <strcpy+0x2>
   dc25c:	4770      	bx	lr
	...

000dc260 <strdup>:
   dc260:	4b02      	ldr	r3, [pc, #8]	; (dc26c <strdup+0xc>)
   dc262:	4601      	mov	r1, r0
   dc264:	6818      	ldr	r0, [r3, #0]
   dc266:	f000 b803 	b.w	dc270 <_strdup_r>
   dc26a:	bf00      	nop
   dc26c:	2003e0ac 	.word	0x2003e0ac

000dc270 <_strdup_r>:
   dc270:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc272:	4604      	mov	r4, r0
   dc274:	4608      	mov	r0, r1
   dc276:	460d      	mov	r5, r1
   dc278:	f000 f80f 	bl	dc29a <strlen>
   dc27c:	1c42      	adds	r2, r0, #1
   dc27e:	4611      	mov	r1, r2
   dc280:	4620      	mov	r0, r4
   dc282:	9201      	str	r2, [sp, #4]
   dc284:	f7fb fdfa 	bl	d7e7c <_malloc_r>
   dc288:	4604      	mov	r4, r0
   dc28a:	b118      	cbz	r0, dc294 <_strdup_r+0x24>
   dc28c:	9a01      	ldr	r2, [sp, #4]
   dc28e:	4629      	mov	r1, r5
   dc290:	f7ff ff8c 	bl	dc1ac <memcpy>
   dc294:	4620      	mov	r0, r4
   dc296:	b003      	add	sp, #12
   dc298:	bd30      	pop	{r4, r5, pc}

000dc29a <strlen>:
   dc29a:	4603      	mov	r3, r0
   dc29c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc2a0:	2a00      	cmp	r2, #0
   dc2a2:	d1fb      	bne.n	dc29c <strlen+0x2>
   dc2a4:	1a18      	subs	r0, r3, r0
   dc2a6:	3801      	subs	r0, #1
   dc2a8:	4770      	bx	lr

000dc2aa <strncmp>:
   dc2aa:	b510      	push	{r4, lr}
   dc2ac:	b16a      	cbz	r2, dc2ca <strncmp+0x20>
   dc2ae:	3901      	subs	r1, #1
   dc2b0:	1884      	adds	r4, r0, r2
   dc2b2:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc2b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc2ba:	4293      	cmp	r3, r2
   dc2bc:	d103      	bne.n	dc2c6 <strncmp+0x1c>
   dc2be:	42a0      	cmp	r0, r4
   dc2c0:	d001      	beq.n	dc2c6 <strncmp+0x1c>
   dc2c2:	2b00      	cmp	r3, #0
   dc2c4:	d1f5      	bne.n	dc2b2 <strncmp+0x8>
   dc2c6:	1a98      	subs	r0, r3, r2
   dc2c8:	bd10      	pop	{r4, pc}
   dc2ca:	4610      	mov	r0, r2
   dc2cc:	e7fc      	b.n	dc2c8 <strncmp+0x1e>

000dc2ce <strncpy>:
   dc2ce:	b510      	push	{r4, lr}
   dc2d0:	3901      	subs	r1, #1
   dc2d2:	4603      	mov	r3, r0
   dc2d4:	b132      	cbz	r2, dc2e4 <strncpy+0x16>
   dc2d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc2da:	f803 4b01 	strb.w	r4, [r3], #1
   dc2de:	3a01      	subs	r2, #1
   dc2e0:	2c00      	cmp	r4, #0
   dc2e2:	d1f7      	bne.n	dc2d4 <strncpy+0x6>
   dc2e4:	441a      	add	r2, r3
   dc2e6:	2100      	movs	r1, #0
   dc2e8:	4293      	cmp	r3, r2
   dc2ea:	d100      	bne.n	dc2ee <strncpy+0x20>
   dc2ec:	bd10      	pop	{r4, pc}
   dc2ee:	f803 1b01 	strb.w	r1, [r3], #1
   dc2f2:	e7f9      	b.n	dc2e8 <strncpy+0x1a>

000dc2f4 <strstr>:
   dc2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc2f6:	780c      	ldrb	r4, [r1, #0]
   dc2f8:	b164      	cbz	r4, dc314 <strstr+0x20>
   dc2fa:	4603      	mov	r3, r0
   dc2fc:	781a      	ldrb	r2, [r3, #0]
   dc2fe:	4618      	mov	r0, r3
   dc300:	1c5e      	adds	r6, r3, #1
   dc302:	b90a      	cbnz	r2, dc308 <strstr+0x14>
   dc304:	4610      	mov	r0, r2
   dc306:	e005      	b.n	dc314 <strstr+0x20>
   dc308:	4294      	cmp	r4, r2
   dc30a:	d108      	bne.n	dc31e <strstr+0x2a>
   dc30c:	460d      	mov	r5, r1
   dc30e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dc312:	b902      	cbnz	r2, dc316 <strstr+0x22>
   dc314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc316:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dc31a:	4297      	cmp	r7, r2
   dc31c:	d0f7      	beq.n	dc30e <strstr+0x1a>
   dc31e:	4633      	mov	r3, r6
   dc320:	e7ec      	b.n	dc2fc <strstr+0x8>

000dc322 <sulp>:
   dc322:	b570      	push	{r4, r5, r6, lr}
   dc324:	4604      	mov	r4, r0
   dc326:	460d      	mov	r5, r1
   dc328:	ec45 4b10 	vmov	d0, r4, r5
   dc32c:	4616      	mov	r6, r2
   dc32e:	f001 fd6f 	bl	dde10 <__ulp>
   dc332:	ec51 0b10 	vmov	r0, r1, d0
   dc336:	b17e      	cbz	r6, dc358 <sulp+0x36>
   dc338:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dc33c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc340:	2b00      	cmp	r3, #0
   dc342:	dd09      	ble.n	dc358 <sulp+0x36>
   dc344:	051b      	lsls	r3, r3, #20
   dc346:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dc34a:	2400      	movs	r4, #0
   dc34c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dc350:	4622      	mov	r2, r4
   dc352:	462b      	mov	r3, r5
   dc354:	f7ff fbaa 	bl	dbaac <__aeabi_dmul>
   dc358:	bd70      	pop	{r4, r5, r6, pc}
   dc35a:	0000      	movs	r0, r0
   dc35c:	0000      	movs	r0, r0
	...

000dc360 <_strtod_l>:
   dc360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc364:	b0a3      	sub	sp, #140	; 0x8c
   dc366:	461f      	mov	r7, r3
   dc368:	2300      	movs	r3, #0
   dc36a:	931e      	str	r3, [sp, #120]	; 0x78
   dc36c:	4ba4      	ldr	r3, [pc, #656]	; (dc600 <_strtod_l+0x2a0>)
   dc36e:	9219      	str	r2, [sp, #100]	; 0x64
   dc370:	681b      	ldr	r3, [r3, #0]
   dc372:	9307      	str	r3, [sp, #28]
   dc374:	4604      	mov	r4, r0
   dc376:	4618      	mov	r0, r3
   dc378:	4688      	mov	r8, r1
   dc37a:	f7ff ff8e 	bl	dc29a <strlen>
   dc37e:	f04f 0a00 	mov.w	sl, #0
   dc382:	4605      	mov	r5, r0
   dc384:	f04f 0b00 	mov.w	fp, #0
   dc388:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc38c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc38e:	781a      	ldrb	r2, [r3, #0]
   dc390:	2a2b      	cmp	r2, #43	; 0x2b
   dc392:	d04c      	beq.n	dc42e <_strtod_l+0xce>
   dc394:	d839      	bhi.n	dc40a <_strtod_l+0xaa>
   dc396:	2a0d      	cmp	r2, #13
   dc398:	d832      	bhi.n	dc400 <_strtod_l+0xa0>
   dc39a:	2a08      	cmp	r2, #8
   dc39c:	d832      	bhi.n	dc404 <_strtod_l+0xa4>
   dc39e:	2a00      	cmp	r2, #0
   dc3a0:	d03c      	beq.n	dc41c <_strtod_l+0xbc>
   dc3a2:	2300      	movs	r3, #0
   dc3a4:	930e      	str	r3, [sp, #56]	; 0x38
   dc3a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dc3a8:	7833      	ldrb	r3, [r6, #0]
   dc3aa:	2b30      	cmp	r3, #48	; 0x30
   dc3ac:	f040 80b4 	bne.w	dc518 <_strtod_l+0x1b8>
   dc3b0:	7873      	ldrb	r3, [r6, #1]
   dc3b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc3b6:	2b58      	cmp	r3, #88	; 0x58
   dc3b8:	d16c      	bne.n	dc494 <_strtod_l+0x134>
   dc3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc3bc:	9301      	str	r3, [sp, #4]
   dc3be:	ab1e      	add	r3, sp, #120	; 0x78
   dc3c0:	9702      	str	r7, [sp, #8]
   dc3c2:	9300      	str	r3, [sp, #0]
   dc3c4:	4a8f      	ldr	r2, [pc, #572]	; (dc604 <_strtod_l+0x2a4>)
   dc3c6:	ab1f      	add	r3, sp, #124	; 0x7c
   dc3c8:	a91d      	add	r1, sp, #116	; 0x74
   dc3ca:	4620      	mov	r0, r4
   dc3cc:	f000 ff1c 	bl	dd208 <__gethex>
   dc3d0:	f010 0707 	ands.w	r7, r0, #7
   dc3d4:	4605      	mov	r5, r0
   dc3d6:	d005      	beq.n	dc3e4 <_strtod_l+0x84>
   dc3d8:	2f06      	cmp	r7, #6
   dc3da:	d12a      	bne.n	dc432 <_strtod_l+0xd2>
   dc3dc:	3601      	adds	r6, #1
   dc3de:	2300      	movs	r3, #0
   dc3e0:	961d      	str	r6, [sp, #116]	; 0x74
   dc3e2:	930e      	str	r3, [sp, #56]	; 0x38
   dc3e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc3e6:	2b00      	cmp	r3, #0
   dc3e8:	f040 8596 	bne.w	dcf18 <_strtod_l+0xbb8>
   dc3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc3ee:	b1db      	cbz	r3, dc428 <_strtod_l+0xc8>
   dc3f0:	4652      	mov	r2, sl
   dc3f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dc3f6:	ec43 2b10 	vmov	d0, r2, r3
   dc3fa:	b023      	add	sp, #140	; 0x8c
   dc3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc400:	2a20      	cmp	r2, #32
   dc402:	d1ce      	bne.n	dc3a2 <_strtod_l+0x42>
   dc404:	3301      	adds	r3, #1
   dc406:	931d      	str	r3, [sp, #116]	; 0x74
   dc408:	e7c0      	b.n	dc38c <_strtod_l+0x2c>
   dc40a:	2a2d      	cmp	r2, #45	; 0x2d
   dc40c:	d1c9      	bne.n	dc3a2 <_strtod_l+0x42>
   dc40e:	2201      	movs	r2, #1
   dc410:	920e      	str	r2, [sp, #56]	; 0x38
   dc412:	1c5a      	adds	r2, r3, #1
   dc414:	921d      	str	r2, [sp, #116]	; 0x74
   dc416:	785b      	ldrb	r3, [r3, #1]
   dc418:	2b00      	cmp	r3, #0
   dc41a:	d1c4      	bne.n	dc3a6 <_strtod_l+0x46>
   dc41c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc41e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc422:	2b00      	cmp	r3, #0
   dc424:	f040 8576 	bne.w	dcf14 <_strtod_l+0xbb4>
   dc428:	4652      	mov	r2, sl
   dc42a:	465b      	mov	r3, fp
   dc42c:	e7e3      	b.n	dc3f6 <_strtod_l+0x96>
   dc42e:	2200      	movs	r2, #0
   dc430:	e7ee      	b.n	dc410 <_strtod_l+0xb0>
   dc432:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc434:	b13a      	cbz	r2, dc446 <_strtod_l+0xe6>
   dc436:	2135      	movs	r1, #53	; 0x35
   dc438:	a820      	add	r0, sp, #128	; 0x80
   dc43a:	f001 fde8 	bl	de00e <__copybits>
   dc43e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc440:	4620      	mov	r0, r4
   dc442:	f001 fa1d 	bl	dd880 <_Bfree>
   dc446:	3f01      	subs	r7, #1
   dc448:	2f05      	cmp	r7, #5
   dc44a:	d807      	bhi.n	dc45c <_strtod_l+0xfc>
   dc44c:	e8df f007 	tbb	[pc, r7]
   dc450:	1d180b0e 	.word	0x1d180b0e
   dc454:	030e      	.short	0x030e
   dc456:	f04f 0b00 	mov.w	fp, #0
   dc45a:	46da      	mov	sl, fp
   dc45c:	0728      	lsls	r0, r5, #28
   dc45e:	d5c1      	bpl.n	dc3e4 <_strtod_l+0x84>
   dc460:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dc464:	e7be      	b.n	dc3e4 <_strtod_l+0x84>
   dc466:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dc46a:	e7f7      	b.n	dc45c <_strtod_l+0xfc>
   dc46c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dc470:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dc472:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dc476:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dc47a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dc47e:	e7ed      	b.n	dc45c <_strtod_l+0xfc>
   dc480:	f8df b184 	ldr.w	fp, [pc, #388]	; dc608 <_strtod_l+0x2a8>
   dc484:	f04f 0a00 	mov.w	sl, #0
   dc488:	e7e8      	b.n	dc45c <_strtod_l+0xfc>
   dc48a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dc48e:	f04f 3aff 	mov.w	sl, #4294967295
   dc492:	e7e3      	b.n	dc45c <_strtod_l+0xfc>
   dc494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc496:	1c5a      	adds	r2, r3, #1
   dc498:	921d      	str	r2, [sp, #116]	; 0x74
   dc49a:	785b      	ldrb	r3, [r3, #1]
   dc49c:	2b30      	cmp	r3, #48	; 0x30
   dc49e:	d0f9      	beq.n	dc494 <_strtod_l+0x134>
   dc4a0:	2b00      	cmp	r3, #0
   dc4a2:	d09f      	beq.n	dc3e4 <_strtod_l+0x84>
   dc4a4:	2301      	movs	r3, #1
   dc4a6:	f04f 0900 	mov.w	r9, #0
   dc4aa:	9304      	str	r3, [sp, #16]
   dc4ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc4ae:	930a      	str	r3, [sp, #40]	; 0x28
   dc4b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dc4b4:	464f      	mov	r7, r9
   dc4b6:	220a      	movs	r2, #10
   dc4b8:	981d      	ldr	r0, [sp, #116]	; 0x74
   dc4ba:	7806      	ldrb	r6, [r0, #0]
   dc4bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dc4c0:	b2d9      	uxtb	r1, r3
   dc4c2:	2909      	cmp	r1, #9
   dc4c4:	d92a      	bls.n	dc51c <_strtod_l+0x1bc>
   dc4c6:	9907      	ldr	r1, [sp, #28]
   dc4c8:	462a      	mov	r2, r5
   dc4ca:	f7ff feee 	bl	dc2aa <strncmp>
   dc4ce:	b398      	cbz	r0, dc538 <_strtod_l+0x1d8>
   dc4d0:	2000      	movs	r0, #0
   dc4d2:	4633      	mov	r3, r6
   dc4d4:	463d      	mov	r5, r7
   dc4d6:	9007      	str	r0, [sp, #28]
   dc4d8:	4602      	mov	r2, r0
   dc4da:	2b65      	cmp	r3, #101	; 0x65
   dc4dc:	d001      	beq.n	dc4e2 <_strtod_l+0x182>
   dc4de:	2b45      	cmp	r3, #69	; 0x45
   dc4e0:	d118      	bne.n	dc514 <_strtod_l+0x1b4>
   dc4e2:	b91d      	cbnz	r5, dc4ec <_strtod_l+0x18c>
   dc4e4:	9b04      	ldr	r3, [sp, #16]
   dc4e6:	4303      	orrs	r3, r0
   dc4e8:	d098      	beq.n	dc41c <_strtod_l+0xbc>
   dc4ea:	2500      	movs	r5, #0
   dc4ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dc4f0:	f108 0301 	add.w	r3, r8, #1
   dc4f4:	931d      	str	r3, [sp, #116]	; 0x74
   dc4f6:	f898 3001 	ldrb.w	r3, [r8, #1]
   dc4fa:	2b2b      	cmp	r3, #43	; 0x2b
   dc4fc:	d075      	beq.n	dc5ea <_strtod_l+0x28a>
   dc4fe:	2b2d      	cmp	r3, #45	; 0x2d
   dc500:	d07b      	beq.n	dc5fa <_strtod_l+0x29a>
   dc502:	f04f 0c00 	mov.w	ip, #0
   dc506:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dc50a:	2909      	cmp	r1, #9
   dc50c:	f240 8082 	bls.w	dc614 <_strtod_l+0x2b4>
   dc510:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc514:	2600      	movs	r6, #0
   dc516:	e09d      	b.n	dc654 <_strtod_l+0x2f4>
   dc518:	2300      	movs	r3, #0
   dc51a:	e7c4      	b.n	dc4a6 <_strtod_l+0x146>
   dc51c:	2f08      	cmp	r7, #8
   dc51e:	bfd8      	it	le
   dc520:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dc522:	f100 0001 	add.w	r0, r0, #1
   dc526:	bfda      	itte	le
   dc528:	fb02 3301 	mlale	r3, r2, r1, r3
   dc52c:	9309      	strle	r3, [sp, #36]	; 0x24
   dc52e:	fb02 3909 	mlagt	r9, r2, r9, r3
   dc532:	3701      	adds	r7, #1
   dc534:	901d      	str	r0, [sp, #116]	; 0x74
   dc536:	e7bf      	b.n	dc4b8 <_strtod_l+0x158>
   dc538:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc53a:	195a      	adds	r2, r3, r5
   dc53c:	921d      	str	r2, [sp, #116]	; 0x74
   dc53e:	5d5b      	ldrb	r3, [r3, r5]
   dc540:	2f00      	cmp	r7, #0
   dc542:	d037      	beq.n	dc5b4 <_strtod_l+0x254>
   dc544:	9007      	str	r0, [sp, #28]
   dc546:	463d      	mov	r5, r7
   dc548:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dc54c:	2a09      	cmp	r2, #9
   dc54e:	d912      	bls.n	dc576 <_strtod_l+0x216>
   dc550:	2201      	movs	r2, #1
   dc552:	e7c2      	b.n	dc4da <_strtod_l+0x17a>
   dc554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc556:	1c5a      	adds	r2, r3, #1
   dc558:	921d      	str	r2, [sp, #116]	; 0x74
   dc55a:	785b      	ldrb	r3, [r3, #1]
   dc55c:	3001      	adds	r0, #1
   dc55e:	2b30      	cmp	r3, #48	; 0x30
   dc560:	d0f8      	beq.n	dc554 <_strtod_l+0x1f4>
   dc562:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dc566:	2a08      	cmp	r2, #8
   dc568:	f200 84db 	bhi.w	dcf22 <_strtod_l+0xbc2>
   dc56c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dc56e:	9007      	str	r0, [sp, #28]
   dc570:	2000      	movs	r0, #0
   dc572:	920a      	str	r2, [sp, #40]	; 0x28
   dc574:	4605      	mov	r5, r0
   dc576:	3b30      	subs	r3, #48	; 0x30
   dc578:	f100 0201 	add.w	r2, r0, #1
   dc57c:	d014      	beq.n	dc5a8 <_strtod_l+0x248>
   dc57e:	9907      	ldr	r1, [sp, #28]
   dc580:	4411      	add	r1, r2
   dc582:	9107      	str	r1, [sp, #28]
   dc584:	462a      	mov	r2, r5
   dc586:	eb00 0e05 	add.w	lr, r0, r5
   dc58a:	210a      	movs	r1, #10
   dc58c:	4572      	cmp	r2, lr
   dc58e:	d113      	bne.n	dc5b8 <_strtod_l+0x258>
   dc590:	182a      	adds	r2, r5, r0
   dc592:	2a08      	cmp	r2, #8
   dc594:	f105 0501 	add.w	r5, r5, #1
   dc598:	4405      	add	r5, r0
   dc59a:	dc1c      	bgt.n	dc5d6 <_strtod_l+0x276>
   dc59c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc59e:	220a      	movs	r2, #10
   dc5a0:	fb02 3301 	mla	r3, r2, r1, r3
   dc5a4:	9309      	str	r3, [sp, #36]	; 0x24
   dc5a6:	2200      	movs	r2, #0
   dc5a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc5aa:	1c59      	adds	r1, r3, #1
   dc5ac:	911d      	str	r1, [sp, #116]	; 0x74
   dc5ae:	785b      	ldrb	r3, [r3, #1]
   dc5b0:	4610      	mov	r0, r2
   dc5b2:	e7c9      	b.n	dc548 <_strtod_l+0x1e8>
   dc5b4:	4638      	mov	r0, r7
   dc5b6:	e7d2      	b.n	dc55e <_strtod_l+0x1fe>
   dc5b8:	2a08      	cmp	r2, #8
   dc5ba:	dc04      	bgt.n	dc5c6 <_strtod_l+0x266>
   dc5bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dc5be:	434e      	muls	r6, r1
   dc5c0:	9609      	str	r6, [sp, #36]	; 0x24
   dc5c2:	3201      	adds	r2, #1
   dc5c4:	e7e2      	b.n	dc58c <_strtod_l+0x22c>
   dc5c6:	f102 0c01 	add.w	ip, r2, #1
   dc5ca:	f1bc 0f10 	cmp.w	ip, #16
   dc5ce:	bfd8      	it	le
   dc5d0:	fb01 f909 	mulle.w	r9, r1, r9
   dc5d4:	e7f5      	b.n	dc5c2 <_strtod_l+0x262>
   dc5d6:	2d10      	cmp	r5, #16
   dc5d8:	bfdc      	itt	le
   dc5da:	220a      	movle	r2, #10
   dc5dc:	fb02 3909 	mlale	r9, r2, r9, r3
   dc5e0:	e7e1      	b.n	dc5a6 <_strtod_l+0x246>
   dc5e2:	2300      	movs	r3, #0
   dc5e4:	9307      	str	r3, [sp, #28]
   dc5e6:	2201      	movs	r2, #1
   dc5e8:	e77c      	b.n	dc4e4 <_strtod_l+0x184>
   dc5ea:	f04f 0c00 	mov.w	ip, #0
   dc5ee:	f108 0302 	add.w	r3, r8, #2
   dc5f2:	931d      	str	r3, [sp, #116]	; 0x74
   dc5f4:	f898 3002 	ldrb.w	r3, [r8, #2]
   dc5f8:	e785      	b.n	dc506 <_strtod_l+0x1a6>
   dc5fa:	f04f 0c01 	mov.w	ip, #1
   dc5fe:	e7f6      	b.n	dc5ee <_strtod_l+0x28e>
   dc600:	000df094 	.word	0x000df094
   dc604:	000def40 	.word	0x000def40
   dc608:	7ff00000 	.word	0x7ff00000
   dc60c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc60e:	1c59      	adds	r1, r3, #1
   dc610:	911d      	str	r1, [sp, #116]	; 0x74
   dc612:	785b      	ldrb	r3, [r3, #1]
   dc614:	2b30      	cmp	r3, #48	; 0x30
   dc616:	d0f9      	beq.n	dc60c <_strtod_l+0x2ac>
   dc618:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dc61c:	2908      	cmp	r1, #8
   dc61e:	f63f af79 	bhi.w	dc514 <_strtod_l+0x1b4>
   dc622:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dc626:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc628:	9308      	str	r3, [sp, #32]
   dc62a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc62c:	1c59      	adds	r1, r3, #1
   dc62e:	911d      	str	r1, [sp, #116]	; 0x74
   dc630:	785b      	ldrb	r3, [r3, #1]
   dc632:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dc636:	2e09      	cmp	r6, #9
   dc638:	d937      	bls.n	dc6aa <_strtod_l+0x34a>
   dc63a:	9e08      	ldr	r6, [sp, #32]
   dc63c:	1b89      	subs	r1, r1, r6
   dc63e:	2908      	cmp	r1, #8
   dc640:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dc644:	dc02      	bgt.n	dc64c <_strtod_l+0x2ec>
   dc646:	4576      	cmp	r6, lr
   dc648:	bfa8      	it	ge
   dc64a:	4676      	movge	r6, lr
   dc64c:	f1bc 0f00 	cmp.w	ip, #0
   dc650:	d000      	beq.n	dc654 <_strtod_l+0x2f4>
   dc652:	4276      	negs	r6, r6
   dc654:	2d00      	cmp	r5, #0
   dc656:	d14f      	bne.n	dc6f8 <_strtod_l+0x398>
   dc658:	9904      	ldr	r1, [sp, #16]
   dc65a:	4301      	orrs	r1, r0
   dc65c:	f47f aec2 	bne.w	dc3e4 <_strtod_l+0x84>
   dc660:	2a00      	cmp	r2, #0
   dc662:	f47f aedb 	bne.w	dc41c <_strtod_l+0xbc>
   dc666:	2b69      	cmp	r3, #105	; 0x69
   dc668:	d027      	beq.n	dc6ba <_strtod_l+0x35a>
   dc66a:	dc24      	bgt.n	dc6b6 <_strtod_l+0x356>
   dc66c:	2b49      	cmp	r3, #73	; 0x49
   dc66e:	d024      	beq.n	dc6ba <_strtod_l+0x35a>
   dc670:	2b4e      	cmp	r3, #78	; 0x4e
   dc672:	f47f aed3 	bne.w	dc41c <_strtod_l+0xbc>
   dc676:	499e      	ldr	r1, [pc, #632]	; (dc8f0 <_strtod_l+0x590>)
   dc678:	a81d      	add	r0, sp, #116	; 0x74
   dc67a:	f001 f80b 	bl	dd694 <__match>
   dc67e:	2800      	cmp	r0, #0
   dc680:	f43f aecc 	beq.w	dc41c <_strtod_l+0xbc>
   dc684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc686:	781b      	ldrb	r3, [r3, #0]
   dc688:	2b28      	cmp	r3, #40	; 0x28
   dc68a:	d12d      	bne.n	dc6e8 <_strtod_l+0x388>
   dc68c:	4999      	ldr	r1, [pc, #612]	; (dc8f4 <_strtod_l+0x594>)
   dc68e:	aa20      	add	r2, sp, #128	; 0x80
   dc690:	a81d      	add	r0, sp, #116	; 0x74
   dc692:	f001 f813 	bl	dd6bc <__hexnan>
   dc696:	2805      	cmp	r0, #5
   dc698:	d126      	bne.n	dc6e8 <_strtod_l+0x388>
   dc69a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dc69c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dc6a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dc6a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dc6a8:	e69c      	b.n	dc3e4 <_strtod_l+0x84>
   dc6aa:	210a      	movs	r1, #10
   dc6ac:	fb01 3e0e 	mla	lr, r1, lr, r3
   dc6b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dc6b4:	e7b9      	b.n	dc62a <_strtod_l+0x2ca>
   dc6b6:	2b6e      	cmp	r3, #110	; 0x6e
   dc6b8:	e7db      	b.n	dc672 <_strtod_l+0x312>
   dc6ba:	498f      	ldr	r1, [pc, #572]	; (dc8f8 <_strtod_l+0x598>)
   dc6bc:	a81d      	add	r0, sp, #116	; 0x74
   dc6be:	f000 ffe9 	bl	dd694 <__match>
   dc6c2:	2800      	cmp	r0, #0
   dc6c4:	f43f aeaa 	beq.w	dc41c <_strtod_l+0xbc>
   dc6c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc6ca:	498c      	ldr	r1, [pc, #560]	; (dc8fc <_strtod_l+0x59c>)
   dc6cc:	3b01      	subs	r3, #1
   dc6ce:	a81d      	add	r0, sp, #116	; 0x74
   dc6d0:	931d      	str	r3, [sp, #116]	; 0x74
   dc6d2:	f000 ffdf 	bl	dd694 <__match>
   dc6d6:	b910      	cbnz	r0, dc6de <_strtod_l+0x37e>
   dc6d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc6da:	3301      	adds	r3, #1
   dc6dc:	931d      	str	r3, [sp, #116]	; 0x74
   dc6de:	f8df b22c 	ldr.w	fp, [pc, #556]	; dc90c <_strtod_l+0x5ac>
   dc6e2:	f04f 0a00 	mov.w	sl, #0
   dc6e6:	e67d      	b.n	dc3e4 <_strtod_l+0x84>
   dc6e8:	4885      	ldr	r0, [pc, #532]	; (dc900 <_strtod_l+0x5a0>)
   dc6ea:	f7fe fef5 	bl	db4d8 <nan>
   dc6ee:	ed8d 0b04 	vstr	d0, [sp, #16]
   dc6f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc6f6:	e675      	b.n	dc3e4 <_strtod_l+0x84>
   dc6f8:	9b07      	ldr	r3, [sp, #28]
   dc6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc6fc:	1af3      	subs	r3, r6, r3
   dc6fe:	2f00      	cmp	r7, #0
   dc700:	bf08      	it	eq
   dc702:	462f      	moveq	r7, r5
   dc704:	2d10      	cmp	r5, #16
   dc706:	9308      	str	r3, [sp, #32]
   dc708:	46a8      	mov	r8, r5
   dc70a:	bfa8      	it	ge
   dc70c:	f04f 0810 	movge.w	r8, #16
   dc710:	f7ff f952 	bl	db9b8 <__aeabi_ui2d>
   dc714:	2d09      	cmp	r5, #9
   dc716:	4682      	mov	sl, r0
   dc718:	468b      	mov	fp, r1
   dc71a:	dd13      	ble.n	dc744 <_strtod_l+0x3e4>
   dc71c:	4b79      	ldr	r3, [pc, #484]	; (dc904 <_strtod_l+0x5a4>)
   dc71e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dc722:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dc726:	f7ff f9c1 	bl	dbaac <__aeabi_dmul>
   dc72a:	4682      	mov	sl, r0
   dc72c:	4648      	mov	r0, r9
   dc72e:	468b      	mov	fp, r1
   dc730:	f7ff f942 	bl	db9b8 <__aeabi_ui2d>
   dc734:	4602      	mov	r2, r0
   dc736:	460b      	mov	r3, r1
   dc738:	4650      	mov	r0, sl
   dc73a:	4659      	mov	r1, fp
   dc73c:	f7ff f800 	bl	db740 <__adddf3>
   dc740:	4682      	mov	sl, r0
   dc742:	468b      	mov	fp, r1
   dc744:	2d0f      	cmp	r5, #15
   dc746:	dc38      	bgt.n	dc7ba <_strtod_l+0x45a>
   dc748:	9b08      	ldr	r3, [sp, #32]
   dc74a:	2b00      	cmp	r3, #0
   dc74c:	f43f ae4a 	beq.w	dc3e4 <_strtod_l+0x84>
   dc750:	dd24      	ble.n	dc79c <_strtod_l+0x43c>
   dc752:	2b16      	cmp	r3, #22
   dc754:	dc0b      	bgt.n	dc76e <_strtod_l+0x40e>
   dc756:	4d6b      	ldr	r5, [pc, #428]	; (dc904 <_strtod_l+0x5a4>)
   dc758:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dc75c:	e9d5 0100 	ldrd	r0, r1, [r5]
   dc760:	4652      	mov	r2, sl
   dc762:	465b      	mov	r3, fp
   dc764:	f7ff f9a2 	bl	dbaac <__aeabi_dmul>
   dc768:	4682      	mov	sl, r0
   dc76a:	468b      	mov	fp, r1
   dc76c:	e63a      	b.n	dc3e4 <_strtod_l+0x84>
   dc76e:	9a08      	ldr	r2, [sp, #32]
   dc770:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dc774:	4293      	cmp	r3, r2
   dc776:	db20      	blt.n	dc7ba <_strtod_l+0x45a>
   dc778:	4c62      	ldr	r4, [pc, #392]	; (dc904 <_strtod_l+0x5a4>)
   dc77a:	f1c5 050f 	rsb	r5, r5, #15
   dc77e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dc782:	4652      	mov	r2, sl
   dc784:	465b      	mov	r3, fp
   dc786:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc78a:	f7ff f98f 	bl	dbaac <__aeabi_dmul>
   dc78e:	9b08      	ldr	r3, [sp, #32]
   dc790:	1b5d      	subs	r5, r3, r5
   dc792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dc796:	e9d4 2300 	ldrd	r2, r3, [r4]
   dc79a:	e7e3      	b.n	dc764 <_strtod_l+0x404>
   dc79c:	9b08      	ldr	r3, [sp, #32]
   dc79e:	3316      	adds	r3, #22
   dc7a0:	db0b      	blt.n	dc7ba <_strtod_l+0x45a>
   dc7a2:	9b07      	ldr	r3, [sp, #28]
   dc7a4:	4a57      	ldr	r2, [pc, #348]	; (dc904 <_strtod_l+0x5a4>)
   dc7a6:	1b9e      	subs	r6, r3, r6
   dc7a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dc7ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc7b0:	4650      	mov	r0, sl
   dc7b2:	4659      	mov	r1, fp
   dc7b4:	f7ff faa4 	bl	dbd00 <__aeabi_ddiv>
   dc7b8:	e7d6      	b.n	dc768 <_strtod_l+0x408>
   dc7ba:	9b08      	ldr	r3, [sp, #32]
   dc7bc:	eba5 0808 	sub.w	r8, r5, r8
   dc7c0:	4498      	add	r8, r3
   dc7c2:	f1b8 0f00 	cmp.w	r8, #0
   dc7c6:	dd71      	ble.n	dc8ac <_strtod_l+0x54c>
   dc7c8:	f018 030f 	ands.w	r3, r8, #15
   dc7cc:	d00a      	beq.n	dc7e4 <_strtod_l+0x484>
   dc7ce:	494d      	ldr	r1, [pc, #308]	; (dc904 <_strtod_l+0x5a4>)
   dc7d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dc7d4:	4652      	mov	r2, sl
   dc7d6:	465b      	mov	r3, fp
   dc7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc7dc:	f7ff f966 	bl	dbaac <__aeabi_dmul>
   dc7e0:	4682      	mov	sl, r0
   dc7e2:	468b      	mov	fp, r1
   dc7e4:	f038 080f 	bics.w	r8, r8, #15
   dc7e8:	d04d      	beq.n	dc886 <_strtod_l+0x526>
   dc7ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dc7ee:	dd22      	ble.n	dc836 <_strtod_l+0x4d6>
   dc7f0:	2500      	movs	r5, #0
   dc7f2:	462e      	mov	r6, r5
   dc7f4:	9509      	str	r5, [sp, #36]	; 0x24
   dc7f6:	9507      	str	r5, [sp, #28]
   dc7f8:	2322      	movs	r3, #34	; 0x22
   dc7fa:	f8df b110 	ldr.w	fp, [pc, #272]	; dc90c <_strtod_l+0x5ac>
   dc7fe:	6023      	str	r3, [r4, #0]
   dc800:	f04f 0a00 	mov.w	sl, #0
   dc804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc806:	2b00      	cmp	r3, #0
   dc808:	f43f adec 	beq.w	dc3e4 <_strtod_l+0x84>
   dc80c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc80e:	4620      	mov	r0, r4
   dc810:	f001 f836 	bl	dd880 <_Bfree>
   dc814:	9907      	ldr	r1, [sp, #28]
   dc816:	4620      	mov	r0, r4
   dc818:	f001 f832 	bl	dd880 <_Bfree>
   dc81c:	4631      	mov	r1, r6
   dc81e:	4620      	mov	r0, r4
   dc820:	f001 f82e 	bl	dd880 <_Bfree>
   dc824:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc826:	4620      	mov	r0, r4
   dc828:	f001 f82a 	bl	dd880 <_Bfree>
   dc82c:	4629      	mov	r1, r5
   dc82e:	4620      	mov	r0, r4
   dc830:	f001 f826 	bl	dd880 <_Bfree>
   dc834:	e5d6      	b.n	dc3e4 <_strtod_l+0x84>
   dc836:	2300      	movs	r3, #0
   dc838:	ea4f 1828 	mov.w	r8, r8, asr #4
   dc83c:	4650      	mov	r0, sl
   dc83e:	4659      	mov	r1, fp
   dc840:	4699      	mov	r9, r3
   dc842:	f1b8 0f01 	cmp.w	r8, #1
   dc846:	dc21      	bgt.n	dc88c <_strtod_l+0x52c>
   dc848:	b10b      	cbz	r3, dc84e <_strtod_l+0x4ee>
   dc84a:	4682      	mov	sl, r0
   dc84c:	468b      	mov	fp, r1
   dc84e:	4b2e      	ldr	r3, [pc, #184]	; (dc908 <_strtod_l+0x5a8>)
   dc850:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dc854:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dc858:	4652      	mov	r2, sl
   dc85a:	465b      	mov	r3, fp
   dc85c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dc860:	f7ff f924 	bl	dbaac <__aeabi_dmul>
   dc864:	4b29      	ldr	r3, [pc, #164]	; (dc90c <_strtod_l+0x5ac>)
   dc866:	460a      	mov	r2, r1
   dc868:	400b      	ands	r3, r1
   dc86a:	4929      	ldr	r1, [pc, #164]	; (dc910 <_strtod_l+0x5b0>)
   dc86c:	428b      	cmp	r3, r1
   dc86e:	4682      	mov	sl, r0
   dc870:	d8be      	bhi.n	dc7f0 <_strtod_l+0x490>
   dc872:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dc876:	428b      	cmp	r3, r1
   dc878:	bf86      	itte	hi
   dc87a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dc914 <_strtod_l+0x5b4>
   dc87e:	f04f 3aff 	movhi.w	sl, #4294967295
   dc882:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dc886:	2300      	movs	r3, #0
   dc888:	9304      	str	r3, [sp, #16]
   dc88a:	e081      	b.n	dc990 <_strtod_l+0x630>
   dc88c:	f018 0f01 	tst.w	r8, #1
   dc890:	d007      	beq.n	dc8a2 <_strtod_l+0x542>
   dc892:	4b1d      	ldr	r3, [pc, #116]	; (dc908 <_strtod_l+0x5a8>)
   dc894:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dc898:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc89c:	f7ff f906 	bl	dbaac <__aeabi_dmul>
   dc8a0:	2301      	movs	r3, #1
   dc8a2:	f109 0901 	add.w	r9, r9, #1
   dc8a6:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc8aa:	e7ca      	b.n	dc842 <_strtod_l+0x4e2>
   dc8ac:	d0eb      	beq.n	dc886 <_strtod_l+0x526>
   dc8ae:	f1c8 0800 	rsb	r8, r8, #0
   dc8b2:	f018 020f 	ands.w	r2, r8, #15
   dc8b6:	d00a      	beq.n	dc8ce <_strtod_l+0x56e>
   dc8b8:	4b12      	ldr	r3, [pc, #72]	; (dc904 <_strtod_l+0x5a4>)
   dc8ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dc8be:	4650      	mov	r0, sl
   dc8c0:	4659      	mov	r1, fp
   dc8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc8c6:	f7ff fa1b 	bl	dbd00 <__aeabi_ddiv>
   dc8ca:	4682      	mov	sl, r0
   dc8cc:	468b      	mov	fp, r1
   dc8ce:	ea5f 1828 	movs.w	r8, r8, asr #4
   dc8d2:	d0d8      	beq.n	dc886 <_strtod_l+0x526>
   dc8d4:	f1b8 0f1f 	cmp.w	r8, #31
   dc8d8:	dd1e      	ble.n	dc918 <_strtod_l+0x5b8>
   dc8da:	2500      	movs	r5, #0
   dc8dc:	462e      	mov	r6, r5
   dc8de:	9509      	str	r5, [sp, #36]	; 0x24
   dc8e0:	9507      	str	r5, [sp, #28]
   dc8e2:	2322      	movs	r3, #34	; 0x22
   dc8e4:	f04f 0a00 	mov.w	sl, #0
   dc8e8:	f04f 0b00 	mov.w	fp, #0
   dc8ec:	6023      	str	r3, [r4, #0]
   dc8ee:	e789      	b.n	dc804 <_strtod_l+0x4a4>
   dc8f0:	000dec09 	.word	0x000dec09
   dc8f4:	000def54 	.word	0x000def54
   dc8f8:	000dec0d 	.word	0x000dec0d
   dc8fc:	000def38 	.word	0x000def38
   dc900:	000de639 	.word	0x000de639
   dc904:	000df0d0 	.word	0x000df0d0
   dc908:	000df0a8 	.word	0x000df0a8
   dc90c:	7ff00000 	.word	0x7ff00000
   dc910:	7ca00000 	.word	0x7ca00000
   dc914:	7fefffff 	.word	0x7fefffff
   dc918:	f018 0310 	ands.w	r3, r8, #16
   dc91c:	bf18      	it	ne
   dc91e:	236a      	movne	r3, #106	; 0x6a
   dc920:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dccd8 <_strtod_l+0x978>
   dc924:	9304      	str	r3, [sp, #16]
   dc926:	4650      	mov	r0, sl
   dc928:	4659      	mov	r1, fp
   dc92a:	2300      	movs	r3, #0
   dc92c:	f018 0f01 	tst.w	r8, #1
   dc930:	d004      	beq.n	dc93c <_strtod_l+0x5dc>
   dc932:	e9d9 2300 	ldrd	r2, r3, [r9]
   dc936:	f7ff f8b9 	bl	dbaac <__aeabi_dmul>
   dc93a:	2301      	movs	r3, #1
   dc93c:	ea5f 0868 	movs.w	r8, r8, asr #1
   dc940:	f109 0908 	add.w	r9, r9, #8
   dc944:	d1f2      	bne.n	dc92c <_strtod_l+0x5cc>
   dc946:	b10b      	cbz	r3, dc94c <_strtod_l+0x5ec>
   dc948:	4682      	mov	sl, r0
   dc94a:	468b      	mov	fp, r1
   dc94c:	9b04      	ldr	r3, [sp, #16]
   dc94e:	b1bb      	cbz	r3, dc980 <_strtod_l+0x620>
   dc950:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dc954:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc958:	2b00      	cmp	r3, #0
   dc95a:	4659      	mov	r1, fp
   dc95c:	dd10      	ble.n	dc980 <_strtod_l+0x620>
   dc95e:	2b1f      	cmp	r3, #31
   dc960:	f340 8128 	ble.w	dcbb4 <_strtod_l+0x854>
   dc964:	2b34      	cmp	r3, #52	; 0x34
   dc966:	bfde      	ittt	le
   dc968:	3b20      	suble	r3, #32
   dc96a:	f04f 32ff 	movle.w	r2, #4294967295
   dc96e:	fa02 f303 	lslle.w	r3, r2, r3
   dc972:	f04f 0a00 	mov.w	sl, #0
   dc976:	bfcc      	ite	gt
   dc978:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc97c:	ea03 0b01 	andle.w	fp, r3, r1
   dc980:	2200      	movs	r2, #0
   dc982:	2300      	movs	r3, #0
   dc984:	4650      	mov	r0, sl
   dc986:	4659      	mov	r1, fp
   dc988:	f7ff faf8 	bl	dbf7c <__aeabi_dcmpeq>
   dc98c:	2800      	cmp	r0, #0
   dc98e:	d1a4      	bne.n	dc8da <_strtod_l+0x57a>
   dc990:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc992:	9300      	str	r3, [sp, #0]
   dc994:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc996:	462b      	mov	r3, r5
   dc998:	463a      	mov	r2, r7
   dc99a:	4620      	mov	r0, r4
   dc99c:	f000 ffc5 	bl	dd92a <__s2b>
   dc9a0:	9009      	str	r0, [sp, #36]	; 0x24
   dc9a2:	2800      	cmp	r0, #0
   dc9a4:	f43f af24 	beq.w	dc7f0 <_strtod_l+0x490>
   dc9a8:	9b07      	ldr	r3, [sp, #28]
   dc9aa:	1b9e      	subs	r6, r3, r6
   dc9ac:	9b08      	ldr	r3, [sp, #32]
   dc9ae:	2b00      	cmp	r3, #0
   dc9b0:	bfb4      	ite	lt
   dc9b2:	4633      	movlt	r3, r6
   dc9b4:	2300      	movge	r3, #0
   dc9b6:	9310      	str	r3, [sp, #64]	; 0x40
   dc9b8:	9b08      	ldr	r3, [sp, #32]
   dc9ba:	2500      	movs	r5, #0
   dc9bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc9c0:	9318      	str	r3, [sp, #96]	; 0x60
   dc9c2:	462e      	mov	r6, r5
   dc9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc9c6:	4620      	mov	r0, r4
   dc9c8:	6859      	ldr	r1, [r3, #4]
   dc9ca:	f000 ff25 	bl	dd818 <_Balloc>
   dc9ce:	9007      	str	r0, [sp, #28]
   dc9d0:	2800      	cmp	r0, #0
   dc9d2:	f43f af11 	beq.w	dc7f8 <_strtod_l+0x498>
   dc9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc9d8:	691a      	ldr	r2, [r3, #16]
   dc9da:	3202      	adds	r2, #2
   dc9dc:	f103 010c 	add.w	r1, r3, #12
   dc9e0:	0092      	lsls	r2, r2, #2
   dc9e2:	300c      	adds	r0, #12
   dc9e4:	f7ff fbe2 	bl	dc1ac <memcpy>
   dc9e8:	ec4b ab10 	vmov	d0, sl, fp
   dc9ec:	aa20      	add	r2, sp, #128	; 0x80
   dc9ee:	a91f      	add	r1, sp, #124	; 0x7c
   dc9f0:	4620      	mov	r0, r4
   dc9f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc9f6:	f001 fa87 	bl	ddf08 <__d2b>
   dc9fa:	901e      	str	r0, [sp, #120]	; 0x78
   dc9fc:	2800      	cmp	r0, #0
   dc9fe:	f43f aefb 	beq.w	dc7f8 <_strtod_l+0x498>
   dca02:	2101      	movs	r1, #1
   dca04:	4620      	mov	r0, r4
   dca06:	f001 f81e 	bl	dda46 <__i2b>
   dca0a:	4606      	mov	r6, r0
   dca0c:	2800      	cmp	r0, #0
   dca0e:	f43f aef3 	beq.w	dc7f8 <_strtod_l+0x498>
   dca12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dca14:	9904      	ldr	r1, [sp, #16]
   dca16:	2b00      	cmp	r3, #0
   dca18:	bfab      	itete	ge
   dca1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dca1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dca1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dca20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dca24:	bfac      	ite	ge
   dca26:	eb03 0902 	addge.w	r9, r3, r2
   dca2a:	1ad7      	sublt	r7, r2, r3
   dca2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dca2e:	eba3 0801 	sub.w	r8, r3, r1
   dca32:	4490      	add	r8, r2
   dca34:	4ba3      	ldr	r3, [pc, #652]	; (dccc4 <_strtod_l+0x964>)
   dca36:	f108 38ff 	add.w	r8, r8, #4294967295
   dca3a:	4598      	cmp	r8, r3
   dca3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dca40:	f280 80cc 	bge.w	dcbdc <_strtod_l+0x87c>
   dca44:	eba3 0308 	sub.w	r3, r3, r8
   dca48:	2b1f      	cmp	r3, #31
   dca4a:	eba2 0203 	sub.w	r2, r2, r3
   dca4e:	f04f 0101 	mov.w	r1, #1
   dca52:	f300 80b6 	bgt.w	dcbc2 <_strtod_l+0x862>
   dca56:	fa01 f303 	lsl.w	r3, r1, r3
   dca5a:	9311      	str	r3, [sp, #68]	; 0x44
   dca5c:	2300      	movs	r3, #0
   dca5e:	930c      	str	r3, [sp, #48]	; 0x30
   dca60:	eb09 0802 	add.w	r8, r9, r2
   dca64:	9b04      	ldr	r3, [sp, #16]
   dca66:	45c1      	cmp	r9, r8
   dca68:	4417      	add	r7, r2
   dca6a:	441f      	add	r7, r3
   dca6c:	464b      	mov	r3, r9
   dca6e:	bfa8      	it	ge
   dca70:	4643      	movge	r3, r8
   dca72:	42bb      	cmp	r3, r7
   dca74:	bfa8      	it	ge
   dca76:	463b      	movge	r3, r7
   dca78:	2b00      	cmp	r3, #0
   dca7a:	bfc2      	ittt	gt
   dca7c:	eba8 0803 	subgt.w	r8, r8, r3
   dca80:	1aff      	subgt	r7, r7, r3
   dca82:	eba9 0903 	subgt.w	r9, r9, r3
   dca86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dca88:	2b00      	cmp	r3, #0
   dca8a:	dd17      	ble.n	dcabc <_strtod_l+0x75c>
   dca8c:	4631      	mov	r1, r6
   dca8e:	461a      	mov	r2, r3
   dca90:	4620      	mov	r0, r4
   dca92:	f001 f87d 	bl	ddb90 <__pow5mult>
   dca96:	4606      	mov	r6, r0
   dca98:	2800      	cmp	r0, #0
   dca9a:	f43f aead 	beq.w	dc7f8 <_strtod_l+0x498>
   dca9e:	4601      	mov	r1, r0
   dcaa0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dcaa2:	4620      	mov	r0, r4
   dcaa4:	f000 ffd8 	bl	dda58 <__multiply>
   dcaa8:	900f      	str	r0, [sp, #60]	; 0x3c
   dcaaa:	2800      	cmp	r0, #0
   dcaac:	f43f aea4 	beq.w	dc7f8 <_strtod_l+0x498>
   dcab0:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcab2:	4620      	mov	r0, r4
   dcab4:	f000 fee4 	bl	dd880 <_Bfree>
   dcab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dcaba:	931e      	str	r3, [sp, #120]	; 0x78
   dcabc:	f1b8 0f00 	cmp.w	r8, #0
   dcac0:	f300 8091 	bgt.w	dcbe6 <_strtod_l+0x886>
   dcac4:	9b08      	ldr	r3, [sp, #32]
   dcac6:	2b00      	cmp	r3, #0
   dcac8:	dd08      	ble.n	dcadc <_strtod_l+0x77c>
   dcaca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dcacc:	9907      	ldr	r1, [sp, #28]
   dcace:	4620      	mov	r0, r4
   dcad0:	f001 f85e 	bl	ddb90 <__pow5mult>
   dcad4:	9007      	str	r0, [sp, #28]
   dcad6:	2800      	cmp	r0, #0
   dcad8:	f43f ae8e 	beq.w	dc7f8 <_strtod_l+0x498>
   dcadc:	2f00      	cmp	r7, #0
   dcade:	dd08      	ble.n	dcaf2 <_strtod_l+0x792>
   dcae0:	9907      	ldr	r1, [sp, #28]
   dcae2:	463a      	mov	r2, r7
   dcae4:	4620      	mov	r0, r4
   dcae6:	f001 f8a1 	bl	ddc2c <__lshift>
   dcaea:	9007      	str	r0, [sp, #28]
   dcaec:	2800      	cmp	r0, #0
   dcaee:	f43f ae83 	beq.w	dc7f8 <_strtod_l+0x498>
   dcaf2:	f1b9 0f00 	cmp.w	r9, #0
   dcaf6:	dd08      	ble.n	dcb0a <_strtod_l+0x7aa>
   dcaf8:	4631      	mov	r1, r6
   dcafa:	464a      	mov	r2, r9
   dcafc:	4620      	mov	r0, r4
   dcafe:	f001 f895 	bl	ddc2c <__lshift>
   dcb02:	4606      	mov	r6, r0
   dcb04:	2800      	cmp	r0, #0
   dcb06:	f43f ae77 	beq.w	dc7f8 <_strtod_l+0x498>
   dcb0a:	9a07      	ldr	r2, [sp, #28]
   dcb0c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcb0e:	4620      	mov	r0, r4
   dcb10:	f001 f907 	bl	ddd22 <__mdiff>
   dcb14:	4605      	mov	r5, r0
   dcb16:	2800      	cmp	r0, #0
   dcb18:	f43f ae6e 	beq.w	dc7f8 <_strtod_l+0x498>
   dcb1c:	68c3      	ldr	r3, [r0, #12]
   dcb1e:	930f      	str	r3, [sp, #60]	; 0x3c
   dcb20:	2300      	movs	r3, #0
   dcb22:	60c3      	str	r3, [r0, #12]
   dcb24:	4631      	mov	r1, r6
   dcb26:	f001 f8e0 	bl	ddcea <__mcmp>
   dcb2a:	2800      	cmp	r0, #0
   dcb2c:	da65      	bge.n	dcbfa <_strtod_l+0x89a>
   dcb2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dcb30:	ea53 030a 	orrs.w	r3, r3, sl
   dcb34:	f040 8087 	bne.w	dcc46 <_strtod_l+0x8e6>
   dcb38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcb3c:	2b00      	cmp	r3, #0
   dcb3e:	f040 8082 	bne.w	dcc46 <_strtod_l+0x8e6>
   dcb42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dcb46:	0d1b      	lsrs	r3, r3, #20
   dcb48:	051b      	lsls	r3, r3, #20
   dcb4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dcb4e:	d97a      	bls.n	dcc46 <_strtod_l+0x8e6>
   dcb50:	696b      	ldr	r3, [r5, #20]
   dcb52:	b913      	cbnz	r3, dcb5a <_strtod_l+0x7fa>
   dcb54:	692b      	ldr	r3, [r5, #16]
   dcb56:	2b01      	cmp	r3, #1
   dcb58:	dd75      	ble.n	dcc46 <_strtod_l+0x8e6>
   dcb5a:	4629      	mov	r1, r5
   dcb5c:	2201      	movs	r2, #1
   dcb5e:	4620      	mov	r0, r4
   dcb60:	f001 f864 	bl	ddc2c <__lshift>
   dcb64:	4631      	mov	r1, r6
   dcb66:	4605      	mov	r5, r0
   dcb68:	f001 f8bf 	bl	ddcea <__mcmp>
   dcb6c:	2800      	cmp	r0, #0
   dcb6e:	dd6a      	ble.n	dcc46 <_strtod_l+0x8e6>
   dcb70:	9904      	ldr	r1, [sp, #16]
   dcb72:	4a55      	ldr	r2, [pc, #340]	; (dccc8 <_strtod_l+0x968>)
   dcb74:	465b      	mov	r3, fp
   dcb76:	2900      	cmp	r1, #0
   dcb78:	f000 8085 	beq.w	dcc86 <_strtod_l+0x926>
   dcb7c:	ea02 010b 	and.w	r1, r2, fp
   dcb80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dcb84:	dc7f      	bgt.n	dcc86 <_strtod_l+0x926>
   dcb86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dcb8a:	f77f aeaa 	ble.w	dc8e2 <_strtod_l+0x582>
   dcb8e:	4a4f      	ldr	r2, [pc, #316]	; (dcccc <_strtod_l+0x96c>)
   dcb90:	2300      	movs	r3, #0
   dcb92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dcb96:	4650      	mov	r0, sl
   dcb98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dcb9c:	4659      	mov	r1, fp
   dcb9e:	f7fe ff85 	bl	dbaac <__aeabi_dmul>
   dcba2:	460b      	mov	r3, r1
   dcba4:	4303      	orrs	r3, r0
   dcba6:	bf08      	it	eq
   dcba8:	2322      	moveq	r3, #34	; 0x22
   dcbaa:	4682      	mov	sl, r0
   dcbac:	468b      	mov	fp, r1
   dcbae:	bf08      	it	eq
   dcbb0:	6023      	streq	r3, [r4, #0]
   dcbb2:	e62b      	b.n	dc80c <_strtod_l+0x4ac>
   dcbb4:	f04f 32ff 	mov.w	r2, #4294967295
   dcbb8:	fa02 f303 	lsl.w	r3, r2, r3
   dcbbc:	ea03 0a0a 	and.w	sl, r3, sl
   dcbc0:	e6de      	b.n	dc980 <_strtod_l+0x620>
   dcbc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dcbc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dcbca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dcbce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dcbd2:	fa01 f308 	lsl.w	r3, r1, r8
   dcbd6:	930c      	str	r3, [sp, #48]	; 0x30
   dcbd8:	9111      	str	r1, [sp, #68]	; 0x44
   dcbda:	e741      	b.n	dca60 <_strtod_l+0x700>
   dcbdc:	2300      	movs	r3, #0
   dcbde:	930c      	str	r3, [sp, #48]	; 0x30
   dcbe0:	2301      	movs	r3, #1
   dcbe2:	9311      	str	r3, [sp, #68]	; 0x44
   dcbe4:	e73c      	b.n	dca60 <_strtod_l+0x700>
   dcbe6:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcbe8:	4642      	mov	r2, r8
   dcbea:	4620      	mov	r0, r4
   dcbec:	f001 f81e 	bl	ddc2c <__lshift>
   dcbf0:	901e      	str	r0, [sp, #120]	; 0x78
   dcbf2:	2800      	cmp	r0, #0
   dcbf4:	f47f af66 	bne.w	dcac4 <_strtod_l+0x764>
   dcbf8:	e5fe      	b.n	dc7f8 <_strtod_l+0x498>
   dcbfa:	465f      	mov	r7, fp
   dcbfc:	d16e      	bne.n	dccdc <_strtod_l+0x97c>
   dcbfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dcc00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcc04:	b342      	cbz	r2, dcc58 <_strtod_l+0x8f8>
   dcc06:	4a32      	ldr	r2, [pc, #200]	; (dccd0 <_strtod_l+0x970>)
   dcc08:	4293      	cmp	r3, r2
   dcc0a:	d128      	bne.n	dcc5e <_strtod_l+0x8fe>
   dcc0c:	9b04      	ldr	r3, [sp, #16]
   dcc0e:	4650      	mov	r0, sl
   dcc10:	b1eb      	cbz	r3, dcc4e <_strtod_l+0x8ee>
   dcc12:	4a2d      	ldr	r2, [pc, #180]	; (dccc8 <_strtod_l+0x968>)
   dcc14:	403a      	ands	r2, r7
   dcc16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dcc1a:	f04f 31ff 	mov.w	r1, #4294967295
   dcc1e:	d819      	bhi.n	dcc54 <_strtod_l+0x8f4>
   dcc20:	0d12      	lsrs	r2, r2, #20
   dcc22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dcc26:	fa01 f303 	lsl.w	r3, r1, r3
   dcc2a:	4298      	cmp	r0, r3
   dcc2c:	d117      	bne.n	dcc5e <_strtod_l+0x8fe>
   dcc2e:	4b29      	ldr	r3, [pc, #164]	; (dccd4 <_strtod_l+0x974>)
   dcc30:	429f      	cmp	r7, r3
   dcc32:	d102      	bne.n	dcc3a <_strtod_l+0x8da>
   dcc34:	3001      	adds	r0, #1
   dcc36:	f43f addf 	beq.w	dc7f8 <_strtod_l+0x498>
   dcc3a:	4b23      	ldr	r3, [pc, #140]	; (dccc8 <_strtod_l+0x968>)
   dcc3c:	403b      	ands	r3, r7
   dcc3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dcc42:	f04f 0a00 	mov.w	sl, #0
   dcc46:	9b04      	ldr	r3, [sp, #16]
   dcc48:	2b00      	cmp	r3, #0
   dcc4a:	d1a0      	bne.n	dcb8e <_strtod_l+0x82e>
   dcc4c:	e5de      	b.n	dc80c <_strtod_l+0x4ac>
   dcc4e:	f04f 33ff 	mov.w	r3, #4294967295
   dcc52:	e7ea      	b.n	dcc2a <_strtod_l+0x8ca>
   dcc54:	460b      	mov	r3, r1
   dcc56:	e7e8      	b.n	dcc2a <_strtod_l+0x8ca>
   dcc58:	ea53 030a 	orrs.w	r3, r3, sl
   dcc5c:	d088      	beq.n	dcb70 <_strtod_l+0x810>
   dcc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dcc60:	b1db      	cbz	r3, dcc9a <_strtod_l+0x93a>
   dcc62:	423b      	tst	r3, r7
   dcc64:	d0ef      	beq.n	dcc46 <_strtod_l+0x8e6>
   dcc66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dcc68:	9a04      	ldr	r2, [sp, #16]
   dcc6a:	4650      	mov	r0, sl
   dcc6c:	4659      	mov	r1, fp
   dcc6e:	b1c3      	cbz	r3, dcca2 <_strtod_l+0x942>
   dcc70:	f7ff fb57 	bl	dc322 <sulp>
   dcc74:	4602      	mov	r2, r0
   dcc76:	460b      	mov	r3, r1
   dcc78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dcc7c:	f7fe fd60 	bl	db740 <__adddf3>
   dcc80:	4682      	mov	sl, r0
   dcc82:	468b      	mov	fp, r1
   dcc84:	e7df      	b.n	dcc46 <_strtod_l+0x8e6>
   dcc86:	4013      	ands	r3, r2
   dcc88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dcc8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dcc90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dcc94:	f04f 3aff 	mov.w	sl, #4294967295
   dcc98:	e7d5      	b.n	dcc46 <_strtod_l+0x8e6>
   dcc9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dcc9c:	ea13 0f0a 	tst.w	r3, sl
   dcca0:	e7e0      	b.n	dcc64 <_strtod_l+0x904>
   dcca2:	f7ff fb3e 	bl	dc322 <sulp>
   dcca6:	4602      	mov	r2, r0
   dcca8:	460b      	mov	r3, r1
   dccaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dccae:	f7fe fd45 	bl	db73c <__aeabi_dsub>
   dccb2:	2200      	movs	r2, #0
   dccb4:	2300      	movs	r3, #0
   dccb6:	4682      	mov	sl, r0
   dccb8:	468b      	mov	fp, r1
   dccba:	f7ff f95f 	bl	dbf7c <__aeabi_dcmpeq>
   dccbe:	2800      	cmp	r0, #0
   dccc0:	d0c1      	beq.n	dcc46 <_strtod_l+0x8e6>
   dccc2:	e60e      	b.n	dc8e2 <_strtod_l+0x582>
   dccc4:	fffffc02 	.word	0xfffffc02
   dccc8:	7ff00000 	.word	0x7ff00000
   dcccc:	39500000 	.word	0x39500000
   dccd0:	000fffff 	.word	0x000fffff
   dccd4:	7fefffff 	.word	0x7fefffff
   dccd8:	000def68 	.word	0x000def68
   dccdc:	4631      	mov	r1, r6
   dccde:	4628      	mov	r0, r5
   dcce0:	f001 f962 	bl	ddfa8 <__ratio>
   dcce4:	ec59 8b10 	vmov	r8, r9, d0
   dcce8:	ee10 0a10 	vmov	r0, s0
   dccec:	2200      	movs	r2, #0
   dccee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dccf2:	4649      	mov	r1, r9
   dccf4:	f7ff f956 	bl	dbfa4 <__aeabi_dcmple>
   dccf8:	2800      	cmp	r0, #0
   dccfa:	d07c      	beq.n	dcdf6 <_strtod_l+0xa96>
   dccfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dccfe:	2b00      	cmp	r3, #0
   dcd00:	d04c      	beq.n	dcd9c <_strtod_l+0xa3c>
   dcd02:	4b95      	ldr	r3, [pc, #596]	; (dcf58 <_strtod_l+0xbf8>)
   dcd04:	2200      	movs	r2, #0
   dcd06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dcd0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dcf58 <_strtod_l+0xbf8>
   dcd0e:	f04f 0800 	mov.w	r8, #0
   dcd12:	4b92      	ldr	r3, [pc, #584]	; (dcf5c <_strtod_l+0xbfc>)
   dcd14:	403b      	ands	r3, r7
   dcd16:	9311      	str	r3, [sp, #68]	; 0x44
   dcd18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dcd1a:	4b91      	ldr	r3, [pc, #580]	; (dcf60 <_strtod_l+0xc00>)
   dcd1c:	429a      	cmp	r2, r3
   dcd1e:	f040 80b2 	bne.w	dce86 <_strtod_l+0xb26>
   dcd22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dcd26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dcd2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dcd2e:	ec4b ab10 	vmov	d0, sl, fp
   dcd32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dcd36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dcd3a:	f001 f869 	bl	dde10 <__ulp>
   dcd3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dcd42:	ec53 2b10 	vmov	r2, r3, d0
   dcd46:	f7fe feb1 	bl	dbaac <__aeabi_dmul>
   dcd4a:	4652      	mov	r2, sl
   dcd4c:	465b      	mov	r3, fp
   dcd4e:	f7fe fcf7 	bl	db740 <__adddf3>
   dcd52:	460b      	mov	r3, r1
   dcd54:	4981      	ldr	r1, [pc, #516]	; (dcf5c <_strtod_l+0xbfc>)
   dcd56:	4a83      	ldr	r2, [pc, #524]	; (dcf64 <_strtod_l+0xc04>)
   dcd58:	4019      	ands	r1, r3
   dcd5a:	4291      	cmp	r1, r2
   dcd5c:	4682      	mov	sl, r0
   dcd5e:	d95e      	bls.n	dce1e <_strtod_l+0xabe>
   dcd60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dcd62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dcd66:	4293      	cmp	r3, r2
   dcd68:	d103      	bne.n	dcd72 <_strtod_l+0xa12>
   dcd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcd6c:	3301      	adds	r3, #1
   dcd6e:	f43f ad43 	beq.w	dc7f8 <_strtod_l+0x498>
   dcd72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dcf70 <_strtod_l+0xc10>
   dcd76:	f04f 3aff 	mov.w	sl, #4294967295
   dcd7a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcd7c:	4620      	mov	r0, r4
   dcd7e:	f000 fd7f 	bl	dd880 <_Bfree>
   dcd82:	9907      	ldr	r1, [sp, #28]
   dcd84:	4620      	mov	r0, r4
   dcd86:	f000 fd7b 	bl	dd880 <_Bfree>
   dcd8a:	4631      	mov	r1, r6
   dcd8c:	4620      	mov	r0, r4
   dcd8e:	f000 fd77 	bl	dd880 <_Bfree>
   dcd92:	4629      	mov	r1, r5
   dcd94:	4620      	mov	r0, r4
   dcd96:	f000 fd73 	bl	dd880 <_Bfree>
   dcd9a:	e613      	b.n	dc9c4 <_strtod_l+0x664>
   dcd9c:	f1ba 0f00 	cmp.w	sl, #0
   dcda0:	d11b      	bne.n	dcdda <_strtod_l+0xa7a>
   dcda2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcda6:	b9f3      	cbnz	r3, dcde6 <_strtod_l+0xa86>
   dcda8:	4b6b      	ldr	r3, [pc, #428]	; (dcf58 <_strtod_l+0xbf8>)
   dcdaa:	2200      	movs	r2, #0
   dcdac:	4640      	mov	r0, r8
   dcdae:	4649      	mov	r1, r9
   dcdb0:	f7ff f8ee 	bl	dbf90 <__aeabi_dcmplt>
   dcdb4:	b9d0      	cbnz	r0, dcdec <_strtod_l+0xa8c>
   dcdb6:	4640      	mov	r0, r8
   dcdb8:	4649      	mov	r1, r9
   dcdba:	4b6b      	ldr	r3, [pc, #428]	; (dcf68 <_strtod_l+0xc08>)
   dcdbc:	2200      	movs	r2, #0
   dcdbe:	f7fe fe75 	bl	dbaac <__aeabi_dmul>
   dcdc2:	4680      	mov	r8, r0
   dcdc4:	4689      	mov	r9, r1
   dcdc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dcdca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dcdce:	931b      	str	r3, [sp, #108]	; 0x6c
   dcdd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dcdd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dcdd8:	e79b      	b.n	dcd12 <_strtod_l+0x9b2>
   dcdda:	f1ba 0f01 	cmp.w	sl, #1
   dcdde:	d102      	bne.n	dcde6 <_strtod_l+0xa86>
   dcde0:	2f00      	cmp	r7, #0
   dcde2:	f43f ad7e 	beq.w	dc8e2 <_strtod_l+0x582>
   dcde6:	4b61      	ldr	r3, [pc, #388]	; (dcf6c <_strtod_l+0xc0c>)
   dcde8:	2200      	movs	r2, #0
   dcdea:	e78c      	b.n	dcd06 <_strtod_l+0x9a6>
   dcdec:	f8df 9178 	ldr.w	r9, [pc, #376]	; dcf68 <_strtod_l+0xc08>
   dcdf0:	f04f 0800 	mov.w	r8, #0
   dcdf4:	e7e7      	b.n	dcdc6 <_strtod_l+0xa66>
   dcdf6:	4b5c      	ldr	r3, [pc, #368]	; (dcf68 <_strtod_l+0xc08>)
   dcdf8:	4640      	mov	r0, r8
   dcdfa:	4649      	mov	r1, r9
   dcdfc:	2200      	movs	r2, #0
   dcdfe:	f7fe fe55 	bl	dbaac <__aeabi_dmul>
   dce02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dce04:	4680      	mov	r8, r0
   dce06:	4689      	mov	r9, r1
   dce08:	b933      	cbnz	r3, dce18 <_strtod_l+0xab8>
   dce0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dce0e:	9012      	str	r0, [sp, #72]	; 0x48
   dce10:	9313      	str	r3, [sp, #76]	; 0x4c
   dce12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dce16:	e7dd      	b.n	dcdd4 <_strtod_l+0xa74>
   dce18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dce1c:	e7f9      	b.n	dce12 <_strtod_l+0xab2>
   dce1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dce22:	9b04      	ldr	r3, [sp, #16]
   dce24:	2b00      	cmp	r3, #0
   dce26:	d1a8      	bne.n	dcd7a <_strtod_l+0xa1a>
   dce28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dce2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dce2e:	0d1b      	lsrs	r3, r3, #20
   dce30:	051b      	lsls	r3, r3, #20
   dce32:	429a      	cmp	r2, r3
   dce34:	d1a1      	bne.n	dcd7a <_strtod_l+0xa1a>
   dce36:	4640      	mov	r0, r8
   dce38:	4649      	mov	r1, r9
   dce3a:	f001 f949 	bl	de0d0 <__aeabi_d2lz>
   dce3e:	f7fe fe07 	bl	dba50 <__aeabi_l2d>
   dce42:	4602      	mov	r2, r0
   dce44:	460b      	mov	r3, r1
   dce46:	4640      	mov	r0, r8
   dce48:	4649      	mov	r1, r9
   dce4a:	f7fe fc77 	bl	db73c <__aeabi_dsub>
   dce4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dce50:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dce54:	ea43 030a 	orr.w	r3, r3, sl
   dce58:	4313      	orrs	r3, r2
   dce5a:	4680      	mov	r8, r0
   dce5c:	4689      	mov	r9, r1
   dce5e:	d053      	beq.n	dcf08 <_strtod_l+0xba8>
   dce60:	a335      	add	r3, pc, #212	; (adr r3, dcf38 <_strtod_l+0xbd8>)
   dce62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce66:	f7ff f893 	bl	dbf90 <__aeabi_dcmplt>
   dce6a:	2800      	cmp	r0, #0
   dce6c:	f47f acce 	bne.w	dc80c <_strtod_l+0x4ac>
   dce70:	a333      	add	r3, pc, #204	; (adr r3, dcf40 <_strtod_l+0xbe0>)
   dce72:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce76:	4640      	mov	r0, r8
   dce78:	4649      	mov	r1, r9
   dce7a:	f7ff f8a7 	bl	dbfcc <__aeabi_dcmpgt>
   dce7e:	2800      	cmp	r0, #0
   dce80:	f43f af7b 	beq.w	dcd7a <_strtod_l+0xa1a>
   dce84:	e4c2      	b.n	dc80c <_strtod_l+0x4ac>
   dce86:	9b04      	ldr	r3, [sp, #16]
   dce88:	b333      	cbz	r3, dced8 <_strtod_l+0xb78>
   dce8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dce8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dce90:	d822      	bhi.n	dced8 <_strtod_l+0xb78>
   dce92:	a32d      	add	r3, pc, #180	; (adr r3, dcf48 <_strtod_l+0xbe8>)
   dce94:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce98:	4640      	mov	r0, r8
   dce9a:	4649      	mov	r1, r9
   dce9c:	f7ff f882 	bl	dbfa4 <__aeabi_dcmple>
   dcea0:	b1a0      	cbz	r0, dcecc <_strtod_l+0xb6c>
   dcea2:	4649      	mov	r1, r9
   dcea4:	4640      	mov	r0, r8
   dcea6:	f7ff f8d9 	bl	dc05c <__aeabi_d2uiz>
   dceaa:	2801      	cmp	r0, #1
   dceac:	bf38      	it	cc
   dceae:	2001      	movcc	r0, #1
   dceb0:	f7fe fd82 	bl	db9b8 <__aeabi_ui2d>
   dceb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dceb6:	4680      	mov	r8, r0
   dceb8:	4689      	mov	r9, r1
   dceba:	bb13      	cbnz	r3, dcf02 <_strtod_l+0xba2>
   dcebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dcec0:	9014      	str	r0, [sp, #80]	; 0x50
   dcec2:	9315      	str	r3, [sp, #84]	; 0x54
   dcec4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dcec8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dcecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dcece:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dced0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dced4:	1a9b      	subs	r3, r3, r2
   dced6:	930d      	str	r3, [sp, #52]	; 0x34
   dced8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dcedc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dcee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dcee4:	f000 ff94 	bl	dde10 <__ulp>
   dcee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dceec:	ec53 2b10 	vmov	r2, r3, d0
   dcef0:	f7fe fddc 	bl	dbaac <__aeabi_dmul>
   dcef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dcef8:	f7fe fc22 	bl	db740 <__adddf3>
   dcefc:	4682      	mov	sl, r0
   dcefe:	468b      	mov	fp, r1
   dcf00:	e78f      	b.n	dce22 <_strtod_l+0xac2>
   dcf02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dcf06:	e7dd      	b.n	dcec4 <_strtod_l+0xb64>
   dcf08:	a311      	add	r3, pc, #68	; (adr r3, dcf50 <_strtod_l+0xbf0>)
   dcf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf0e:	f7ff f83f 	bl	dbf90 <__aeabi_dcmplt>
   dcf12:	e7b4      	b.n	dce7e <_strtod_l+0xb1e>
   dcf14:	2300      	movs	r3, #0
   dcf16:	930e      	str	r3, [sp, #56]	; 0x38
   dcf18:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dcf1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcf1c:	6013      	str	r3, [r2, #0]
   dcf1e:	f7ff ba65 	b.w	dc3ec <_strtod_l+0x8c>
   dcf22:	2b65      	cmp	r3, #101	; 0x65
   dcf24:	f43f ab5d 	beq.w	dc5e2 <_strtod_l+0x282>
   dcf28:	2b45      	cmp	r3, #69	; 0x45
   dcf2a:	f43f ab5a 	beq.w	dc5e2 <_strtod_l+0x282>
   dcf2e:	2201      	movs	r2, #1
   dcf30:	f7ff bb92 	b.w	dc658 <_strtod_l+0x2f8>
   dcf34:	f3af 8000 	nop.w
   dcf38:	94a03595 	.word	0x94a03595
   dcf3c:	3fdfffff 	.word	0x3fdfffff
   dcf40:	35afe535 	.word	0x35afe535
   dcf44:	3fe00000 	.word	0x3fe00000
   dcf48:	ffc00000 	.word	0xffc00000
   dcf4c:	41dfffff 	.word	0x41dfffff
   dcf50:	94a03595 	.word	0x94a03595
   dcf54:	3fcfffff 	.word	0x3fcfffff
   dcf58:	3ff00000 	.word	0x3ff00000
   dcf5c:	7ff00000 	.word	0x7ff00000
   dcf60:	7fe00000 	.word	0x7fe00000
   dcf64:	7c9fffff 	.word	0x7c9fffff
   dcf68:	3fe00000 	.word	0x3fe00000
   dcf6c:	bff00000 	.word	0xbff00000
   dcf70:	7fefffff 	.word	0x7fefffff

000dcf74 <strtod>:
   dcf74:	460a      	mov	r2, r1
   dcf76:	4601      	mov	r1, r0
   dcf78:	4802      	ldr	r0, [pc, #8]	; (dcf84 <strtod+0x10>)
   dcf7a:	4b03      	ldr	r3, [pc, #12]	; (dcf88 <strtod+0x14>)
   dcf7c:	6800      	ldr	r0, [r0, #0]
   dcf7e:	f7ff b9ef 	b.w	dc360 <_strtod_l>
   dcf82:	bf00      	nop
   dcf84:	2003e0ac 	.word	0x2003e0ac
   dcf88:	2003e114 	.word	0x2003e114

000dcf8c <strtok>:
   dcf8c:	4b13      	ldr	r3, [pc, #76]	; (dcfdc <strtok+0x50>)
   dcf8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dcf90:	681e      	ldr	r6, [r3, #0]
   dcf92:	6db4      	ldr	r4, [r6, #88]	; 0x58
   dcf94:	4605      	mov	r5, r0
   dcf96:	b9c4      	cbnz	r4, dcfca <strtok+0x3e>
   dcf98:	2050      	movs	r0, #80	; 0x50
   dcf9a:	9101      	str	r1, [sp, #4]
   dcf9c:	f7fa ff46 	bl	d7e2c <malloc>
   dcfa0:	65b0      	str	r0, [r6, #88]	; 0x58
   dcfa2:	e9c0 4400 	strd	r4, r4, [r0]
   dcfa6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   dcfaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   dcfae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   dcfb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   dcfb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   dcfba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   dcfbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   dcfc2:	9901      	ldr	r1, [sp, #4]
   dcfc4:	6184      	str	r4, [r0, #24]
   dcfc6:	7704      	strb	r4, [r0, #28]
   dcfc8:	6244      	str	r4, [r0, #36]	; 0x24
   dcfca:	6db2      	ldr	r2, [r6, #88]	; 0x58
   dcfcc:	2301      	movs	r3, #1
   dcfce:	4628      	mov	r0, r5
   dcfd0:	b002      	add	sp, #8
   dcfd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dcfd6:	f000 b803 	b.w	dcfe0 <__strtok_r>
   dcfda:	bf00      	nop
   dcfdc:	2003e0ac 	.word	0x2003e0ac

000dcfe0 <__strtok_r>:
   dcfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcfe2:	b908      	cbnz	r0, dcfe8 <__strtok_r+0x8>
   dcfe4:	6810      	ldr	r0, [r2, #0]
   dcfe6:	b188      	cbz	r0, dd00c <__strtok_r+0x2c>
   dcfe8:	4604      	mov	r4, r0
   dcfea:	4620      	mov	r0, r4
   dcfec:	f814 5b01 	ldrb.w	r5, [r4], #1
   dcff0:	460f      	mov	r7, r1
   dcff2:	f817 6b01 	ldrb.w	r6, [r7], #1
   dcff6:	b91e      	cbnz	r6, dd000 <__strtok_r+0x20>
   dcff8:	b965      	cbnz	r5, dd014 <__strtok_r+0x34>
   dcffa:	6015      	str	r5, [r2, #0]
   dcffc:	4628      	mov	r0, r5
   dcffe:	e005      	b.n	dd00c <__strtok_r+0x2c>
   dd000:	42b5      	cmp	r5, r6
   dd002:	d1f6      	bne.n	dcff2 <__strtok_r+0x12>
   dd004:	2b00      	cmp	r3, #0
   dd006:	d1f0      	bne.n	dcfea <__strtok_r+0xa>
   dd008:	6014      	str	r4, [r2, #0]
   dd00a:	7003      	strb	r3, [r0, #0]
   dd00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd00e:	461c      	mov	r4, r3
   dd010:	e00c      	b.n	dd02c <__strtok_r+0x4c>
   dd012:	b915      	cbnz	r5, dd01a <__strtok_r+0x3a>
   dd014:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd018:	460e      	mov	r6, r1
   dd01a:	f816 5b01 	ldrb.w	r5, [r6], #1
   dd01e:	42ab      	cmp	r3, r5
   dd020:	d1f7      	bne.n	dd012 <__strtok_r+0x32>
   dd022:	2b00      	cmp	r3, #0
   dd024:	d0f3      	beq.n	dd00e <__strtok_r+0x2e>
   dd026:	2300      	movs	r3, #0
   dd028:	f804 3c01 	strb.w	r3, [r4, #-1]
   dd02c:	6014      	str	r4, [r2, #0]
   dd02e:	e7ed      	b.n	dd00c <__strtok_r+0x2c>

000dd030 <_strtol_l.isra.0>:
   dd030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd034:	4e3a      	ldr	r6, [pc, #232]	; (dd120 <_strtol_l.isra.0+0xf0>)
   dd036:	4686      	mov	lr, r0
   dd038:	468c      	mov	ip, r1
   dd03a:	4660      	mov	r0, ip
   dd03c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd040:	5da5      	ldrb	r5, [r4, r6]
   dd042:	f015 0508 	ands.w	r5, r5, #8
   dd046:	d1f8      	bne.n	dd03a <_strtol_l.isra.0+0xa>
   dd048:	2c2d      	cmp	r4, #45	; 0x2d
   dd04a:	d133      	bne.n	dd0b4 <_strtol_l.isra.0+0x84>
   dd04c:	f89c 4000 	ldrb.w	r4, [ip]
   dd050:	f04f 0801 	mov.w	r8, #1
   dd054:	f100 0c02 	add.w	ip, r0, #2
   dd058:	2b00      	cmp	r3, #0
   dd05a:	d05c      	beq.n	dd116 <_strtol_l.isra.0+0xe6>
   dd05c:	2b10      	cmp	r3, #16
   dd05e:	d10c      	bne.n	dd07a <_strtol_l.isra.0+0x4a>
   dd060:	2c30      	cmp	r4, #48	; 0x30
   dd062:	d10a      	bne.n	dd07a <_strtol_l.isra.0+0x4a>
   dd064:	f89c 0000 	ldrb.w	r0, [ip]
   dd068:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dd06c:	2858      	cmp	r0, #88	; 0x58
   dd06e:	d14d      	bne.n	dd10c <_strtol_l.isra.0+0xdc>
   dd070:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dd074:	2310      	movs	r3, #16
   dd076:	f10c 0c02 	add.w	ip, ip, #2
   dd07a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dd07e:	3f01      	subs	r7, #1
   dd080:	2600      	movs	r6, #0
   dd082:	fbb7 f9f3 	udiv	r9, r7, r3
   dd086:	4630      	mov	r0, r6
   dd088:	fb03 7a19 	mls	sl, r3, r9, r7
   dd08c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dd090:	2d09      	cmp	r5, #9
   dd092:	d818      	bhi.n	dd0c6 <_strtol_l.isra.0+0x96>
   dd094:	462c      	mov	r4, r5
   dd096:	42a3      	cmp	r3, r4
   dd098:	dd24      	ble.n	dd0e4 <_strtol_l.isra.0+0xb4>
   dd09a:	1c75      	adds	r5, r6, #1
   dd09c:	d007      	beq.n	dd0ae <_strtol_l.isra.0+0x7e>
   dd09e:	4581      	cmp	r9, r0
   dd0a0:	d31d      	bcc.n	dd0de <_strtol_l.isra.0+0xae>
   dd0a2:	d101      	bne.n	dd0a8 <_strtol_l.isra.0+0x78>
   dd0a4:	45a2      	cmp	sl, r4
   dd0a6:	db1a      	blt.n	dd0de <_strtol_l.isra.0+0xae>
   dd0a8:	fb00 4003 	mla	r0, r0, r3, r4
   dd0ac:	2601      	movs	r6, #1
   dd0ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd0b2:	e7eb      	b.n	dd08c <_strtol_l.isra.0+0x5c>
   dd0b4:	2c2b      	cmp	r4, #43	; 0x2b
   dd0b6:	bf08      	it	eq
   dd0b8:	f89c 4000 	ldrbeq.w	r4, [ip]
   dd0bc:	46a8      	mov	r8, r5
   dd0be:	bf08      	it	eq
   dd0c0:	f100 0c02 	addeq.w	ip, r0, #2
   dd0c4:	e7c8      	b.n	dd058 <_strtol_l.isra.0+0x28>
   dd0c6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dd0ca:	2d19      	cmp	r5, #25
   dd0cc:	d801      	bhi.n	dd0d2 <_strtol_l.isra.0+0xa2>
   dd0ce:	3c37      	subs	r4, #55	; 0x37
   dd0d0:	e7e1      	b.n	dd096 <_strtol_l.isra.0+0x66>
   dd0d2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dd0d6:	2d19      	cmp	r5, #25
   dd0d8:	d804      	bhi.n	dd0e4 <_strtol_l.isra.0+0xb4>
   dd0da:	3c57      	subs	r4, #87	; 0x57
   dd0dc:	e7db      	b.n	dd096 <_strtol_l.isra.0+0x66>
   dd0de:	f04f 36ff 	mov.w	r6, #4294967295
   dd0e2:	e7e4      	b.n	dd0ae <_strtol_l.isra.0+0x7e>
   dd0e4:	1c73      	adds	r3, r6, #1
   dd0e6:	d106      	bne.n	dd0f6 <_strtol_l.isra.0+0xc6>
   dd0e8:	2322      	movs	r3, #34	; 0x22
   dd0ea:	f8ce 3000 	str.w	r3, [lr]
   dd0ee:	4638      	mov	r0, r7
   dd0f0:	b942      	cbnz	r2, dd104 <_strtol_l.isra.0+0xd4>
   dd0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd0f6:	f1b8 0f00 	cmp.w	r8, #0
   dd0fa:	d000      	beq.n	dd0fe <_strtol_l.isra.0+0xce>
   dd0fc:	4240      	negs	r0, r0
   dd0fe:	2a00      	cmp	r2, #0
   dd100:	d0f7      	beq.n	dd0f2 <_strtol_l.isra.0+0xc2>
   dd102:	b10e      	cbz	r6, dd108 <_strtol_l.isra.0+0xd8>
   dd104:	f10c 31ff 	add.w	r1, ip, #4294967295
   dd108:	6011      	str	r1, [r2, #0]
   dd10a:	e7f2      	b.n	dd0f2 <_strtol_l.isra.0+0xc2>
   dd10c:	2430      	movs	r4, #48	; 0x30
   dd10e:	2b00      	cmp	r3, #0
   dd110:	d1b3      	bne.n	dd07a <_strtol_l.isra.0+0x4a>
   dd112:	2308      	movs	r3, #8
   dd114:	e7b1      	b.n	dd07a <_strtol_l.isra.0+0x4a>
   dd116:	2c30      	cmp	r4, #48	; 0x30
   dd118:	d0a4      	beq.n	dd064 <_strtol_l.isra.0+0x34>
   dd11a:	230a      	movs	r3, #10
   dd11c:	e7ad      	b.n	dd07a <_strtol_l.isra.0+0x4a>
   dd11e:	bf00      	nop
   dd120:	000def91 	.word	0x000def91

000dd124 <strtol>:
   dd124:	4613      	mov	r3, r2
   dd126:	460a      	mov	r2, r1
   dd128:	4601      	mov	r1, r0
   dd12a:	4802      	ldr	r0, [pc, #8]	; (dd134 <strtol+0x10>)
   dd12c:	6800      	ldr	r0, [r0, #0]
   dd12e:	f7ff bf7f 	b.w	dd030 <_strtol_l.isra.0>
   dd132:	bf00      	nop
   dd134:	2003e0ac 	.word	0x2003e0ac

000dd138 <rshift>:
   dd138:	6903      	ldr	r3, [r0, #16]
   dd13a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dd13e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd142:	ea4f 1261 	mov.w	r2, r1, asr #5
   dd146:	f100 0414 	add.w	r4, r0, #20
   dd14a:	dd45      	ble.n	dd1d8 <rshift+0xa0>
   dd14c:	f011 011f 	ands.w	r1, r1, #31
   dd150:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dd154:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dd158:	d10c      	bne.n	dd174 <rshift+0x3c>
   dd15a:	f100 0710 	add.w	r7, r0, #16
   dd15e:	4629      	mov	r1, r5
   dd160:	42b1      	cmp	r1, r6
   dd162:	d334      	bcc.n	dd1ce <rshift+0x96>
   dd164:	1a9b      	subs	r3, r3, r2
   dd166:	009b      	lsls	r3, r3, #2
   dd168:	1eea      	subs	r2, r5, #3
   dd16a:	4296      	cmp	r6, r2
   dd16c:	bf38      	it	cc
   dd16e:	2300      	movcc	r3, #0
   dd170:	4423      	add	r3, r4
   dd172:	e015      	b.n	dd1a0 <rshift+0x68>
   dd174:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dd178:	f1c1 0820 	rsb	r8, r1, #32
   dd17c:	40cf      	lsrs	r7, r1
   dd17e:	f105 0e04 	add.w	lr, r5, #4
   dd182:	46a1      	mov	r9, r4
   dd184:	4576      	cmp	r6, lr
   dd186:	46f4      	mov	ip, lr
   dd188:	d815      	bhi.n	dd1b6 <rshift+0x7e>
   dd18a:	1a9b      	subs	r3, r3, r2
   dd18c:	009a      	lsls	r2, r3, #2
   dd18e:	3a04      	subs	r2, #4
   dd190:	3501      	adds	r5, #1
   dd192:	42ae      	cmp	r6, r5
   dd194:	bf38      	it	cc
   dd196:	2200      	movcc	r2, #0
   dd198:	18a3      	adds	r3, r4, r2
   dd19a:	50a7      	str	r7, [r4, r2]
   dd19c:	b107      	cbz	r7, dd1a0 <rshift+0x68>
   dd19e:	3304      	adds	r3, #4
   dd1a0:	1b1a      	subs	r2, r3, r4
   dd1a2:	42a3      	cmp	r3, r4
   dd1a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dd1a8:	bf08      	it	eq
   dd1aa:	2300      	moveq	r3, #0
   dd1ac:	6102      	str	r2, [r0, #16]
   dd1ae:	bf08      	it	eq
   dd1b0:	6143      	streq	r3, [r0, #20]
   dd1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd1b6:	f8dc c000 	ldr.w	ip, [ip]
   dd1ba:	fa0c fc08 	lsl.w	ip, ip, r8
   dd1be:	ea4c 0707 	orr.w	r7, ip, r7
   dd1c2:	f849 7b04 	str.w	r7, [r9], #4
   dd1c6:	f85e 7b04 	ldr.w	r7, [lr], #4
   dd1ca:	40cf      	lsrs	r7, r1
   dd1cc:	e7da      	b.n	dd184 <rshift+0x4c>
   dd1ce:	f851 cb04 	ldr.w	ip, [r1], #4
   dd1d2:	f847 cf04 	str.w	ip, [r7, #4]!
   dd1d6:	e7c3      	b.n	dd160 <rshift+0x28>
   dd1d8:	4623      	mov	r3, r4
   dd1da:	e7e1      	b.n	dd1a0 <rshift+0x68>

000dd1dc <__hexdig_fun>:
   dd1dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dd1e0:	2b09      	cmp	r3, #9
   dd1e2:	d802      	bhi.n	dd1ea <__hexdig_fun+0xe>
   dd1e4:	3820      	subs	r0, #32
   dd1e6:	b2c0      	uxtb	r0, r0
   dd1e8:	4770      	bx	lr
   dd1ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dd1ee:	2b05      	cmp	r3, #5
   dd1f0:	d801      	bhi.n	dd1f6 <__hexdig_fun+0x1a>
   dd1f2:	3847      	subs	r0, #71	; 0x47
   dd1f4:	e7f7      	b.n	dd1e6 <__hexdig_fun+0xa>
   dd1f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dd1fa:	2b05      	cmp	r3, #5
   dd1fc:	d801      	bhi.n	dd202 <__hexdig_fun+0x26>
   dd1fe:	3827      	subs	r0, #39	; 0x27
   dd200:	e7f1      	b.n	dd1e6 <__hexdig_fun+0xa>
   dd202:	2000      	movs	r0, #0
   dd204:	4770      	bx	lr
	...

000dd208 <__gethex>:
   dd208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd20c:	ed2d 8b02 	vpush	{d8}
   dd210:	b089      	sub	sp, #36	; 0x24
   dd212:	ee08 0a10 	vmov	s16, r0
   dd216:	9304      	str	r3, [sp, #16]
   dd218:	4bbc      	ldr	r3, [pc, #752]	; (dd50c <__gethex+0x304>)
   dd21a:	681b      	ldr	r3, [r3, #0]
   dd21c:	9301      	str	r3, [sp, #4]
   dd21e:	4618      	mov	r0, r3
   dd220:	468b      	mov	fp, r1
   dd222:	4690      	mov	r8, r2
   dd224:	f7ff f839 	bl	dc29a <strlen>
   dd228:	9b01      	ldr	r3, [sp, #4]
   dd22a:	f8db 2000 	ldr.w	r2, [fp]
   dd22e:	4403      	add	r3, r0
   dd230:	4682      	mov	sl, r0
   dd232:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dd236:	9305      	str	r3, [sp, #20]
   dd238:	1c93      	adds	r3, r2, #2
   dd23a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dd23e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dd242:	32fe      	adds	r2, #254	; 0xfe
   dd244:	18d1      	adds	r1, r2, r3
   dd246:	461f      	mov	r7, r3
   dd248:	f813 0b01 	ldrb.w	r0, [r3], #1
   dd24c:	9100      	str	r1, [sp, #0]
   dd24e:	2830      	cmp	r0, #48	; 0x30
   dd250:	d0f8      	beq.n	dd244 <__gethex+0x3c>
   dd252:	f7ff ffc3 	bl	dd1dc <__hexdig_fun>
   dd256:	4604      	mov	r4, r0
   dd258:	2800      	cmp	r0, #0
   dd25a:	d13a      	bne.n	dd2d2 <__gethex+0xca>
   dd25c:	9901      	ldr	r1, [sp, #4]
   dd25e:	4652      	mov	r2, sl
   dd260:	4638      	mov	r0, r7
   dd262:	f7ff f822 	bl	dc2aa <strncmp>
   dd266:	4605      	mov	r5, r0
   dd268:	2800      	cmp	r0, #0
   dd26a:	d168      	bne.n	dd33e <__gethex+0x136>
   dd26c:	f817 000a 	ldrb.w	r0, [r7, sl]
   dd270:	eb07 060a 	add.w	r6, r7, sl
   dd274:	f7ff ffb2 	bl	dd1dc <__hexdig_fun>
   dd278:	2800      	cmp	r0, #0
   dd27a:	d062      	beq.n	dd342 <__gethex+0x13a>
   dd27c:	4633      	mov	r3, r6
   dd27e:	7818      	ldrb	r0, [r3, #0]
   dd280:	2830      	cmp	r0, #48	; 0x30
   dd282:	461f      	mov	r7, r3
   dd284:	f103 0301 	add.w	r3, r3, #1
   dd288:	d0f9      	beq.n	dd27e <__gethex+0x76>
   dd28a:	f7ff ffa7 	bl	dd1dc <__hexdig_fun>
   dd28e:	2301      	movs	r3, #1
   dd290:	fab0 f480 	clz	r4, r0
   dd294:	0964      	lsrs	r4, r4, #5
   dd296:	4635      	mov	r5, r6
   dd298:	9300      	str	r3, [sp, #0]
   dd29a:	463a      	mov	r2, r7
   dd29c:	4616      	mov	r6, r2
   dd29e:	3201      	adds	r2, #1
   dd2a0:	7830      	ldrb	r0, [r6, #0]
   dd2a2:	f7ff ff9b 	bl	dd1dc <__hexdig_fun>
   dd2a6:	2800      	cmp	r0, #0
   dd2a8:	d1f8      	bne.n	dd29c <__gethex+0x94>
   dd2aa:	9901      	ldr	r1, [sp, #4]
   dd2ac:	4652      	mov	r2, sl
   dd2ae:	4630      	mov	r0, r6
   dd2b0:	f7fe fffb 	bl	dc2aa <strncmp>
   dd2b4:	b980      	cbnz	r0, dd2d8 <__gethex+0xd0>
   dd2b6:	b94d      	cbnz	r5, dd2cc <__gethex+0xc4>
   dd2b8:	eb06 050a 	add.w	r5, r6, sl
   dd2bc:	462a      	mov	r2, r5
   dd2be:	4616      	mov	r6, r2
   dd2c0:	3201      	adds	r2, #1
   dd2c2:	7830      	ldrb	r0, [r6, #0]
   dd2c4:	f7ff ff8a 	bl	dd1dc <__hexdig_fun>
   dd2c8:	2800      	cmp	r0, #0
   dd2ca:	d1f8      	bne.n	dd2be <__gethex+0xb6>
   dd2cc:	1bad      	subs	r5, r5, r6
   dd2ce:	00ad      	lsls	r5, r5, #2
   dd2d0:	e004      	b.n	dd2dc <__gethex+0xd4>
   dd2d2:	2400      	movs	r4, #0
   dd2d4:	4625      	mov	r5, r4
   dd2d6:	e7e0      	b.n	dd29a <__gethex+0x92>
   dd2d8:	2d00      	cmp	r5, #0
   dd2da:	d1f7      	bne.n	dd2cc <__gethex+0xc4>
   dd2dc:	7833      	ldrb	r3, [r6, #0]
   dd2de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dd2e2:	2b50      	cmp	r3, #80	; 0x50
   dd2e4:	d13b      	bne.n	dd35e <__gethex+0x156>
   dd2e6:	7873      	ldrb	r3, [r6, #1]
   dd2e8:	2b2b      	cmp	r3, #43	; 0x2b
   dd2ea:	d02c      	beq.n	dd346 <__gethex+0x13e>
   dd2ec:	2b2d      	cmp	r3, #45	; 0x2d
   dd2ee:	d02e      	beq.n	dd34e <__gethex+0x146>
   dd2f0:	1c71      	adds	r1, r6, #1
   dd2f2:	f04f 0900 	mov.w	r9, #0
   dd2f6:	7808      	ldrb	r0, [r1, #0]
   dd2f8:	f7ff ff70 	bl	dd1dc <__hexdig_fun>
   dd2fc:	1e43      	subs	r3, r0, #1
   dd2fe:	b2db      	uxtb	r3, r3
   dd300:	2b18      	cmp	r3, #24
   dd302:	d82c      	bhi.n	dd35e <__gethex+0x156>
   dd304:	f1a0 0210 	sub.w	r2, r0, #16
   dd308:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dd30c:	f7ff ff66 	bl	dd1dc <__hexdig_fun>
   dd310:	1e43      	subs	r3, r0, #1
   dd312:	b2db      	uxtb	r3, r3
   dd314:	2b18      	cmp	r3, #24
   dd316:	d91d      	bls.n	dd354 <__gethex+0x14c>
   dd318:	f1b9 0f00 	cmp.w	r9, #0
   dd31c:	d000      	beq.n	dd320 <__gethex+0x118>
   dd31e:	4252      	negs	r2, r2
   dd320:	4415      	add	r5, r2
   dd322:	f8cb 1000 	str.w	r1, [fp]
   dd326:	b1e4      	cbz	r4, dd362 <__gethex+0x15a>
   dd328:	9b00      	ldr	r3, [sp, #0]
   dd32a:	2b00      	cmp	r3, #0
   dd32c:	bf14      	ite	ne
   dd32e:	2700      	movne	r7, #0
   dd330:	2706      	moveq	r7, #6
   dd332:	4638      	mov	r0, r7
   dd334:	b009      	add	sp, #36	; 0x24
   dd336:	ecbd 8b02 	vpop	{d8}
   dd33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd33e:	463e      	mov	r6, r7
   dd340:	4625      	mov	r5, r4
   dd342:	2401      	movs	r4, #1
   dd344:	e7ca      	b.n	dd2dc <__gethex+0xd4>
   dd346:	f04f 0900 	mov.w	r9, #0
   dd34a:	1cb1      	adds	r1, r6, #2
   dd34c:	e7d3      	b.n	dd2f6 <__gethex+0xee>
   dd34e:	f04f 0901 	mov.w	r9, #1
   dd352:	e7fa      	b.n	dd34a <__gethex+0x142>
   dd354:	230a      	movs	r3, #10
   dd356:	fb03 0202 	mla	r2, r3, r2, r0
   dd35a:	3a10      	subs	r2, #16
   dd35c:	e7d4      	b.n	dd308 <__gethex+0x100>
   dd35e:	4631      	mov	r1, r6
   dd360:	e7df      	b.n	dd322 <__gethex+0x11a>
   dd362:	1bf3      	subs	r3, r6, r7
   dd364:	3b01      	subs	r3, #1
   dd366:	4621      	mov	r1, r4
   dd368:	2b07      	cmp	r3, #7
   dd36a:	dc52      	bgt.n	dd412 <__gethex+0x20a>
   dd36c:	ee18 0a10 	vmov	r0, s16
   dd370:	f000 fa52 	bl	dd818 <_Balloc>
   dd374:	f04f 0b00 	mov.w	fp, #0
   dd378:	f100 0914 	add.w	r9, r0, #20
   dd37c:	f1ca 0301 	rsb	r3, sl, #1
   dd380:	4604      	mov	r4, r0
   dd382:	f8cd 9008 	str.w	r9, [sp, #8]
   dd386:	f8cd b000 	str.w	fp, [sp]
   dd38a:	9306      	str	r3, [sp, #24]
   dd38c:	42b7      	cmp	r7, r6
   dd38e:	d343      	bcc.n	dd418 <__gethex+0x210>
   dd390:	9802      	ldr	r0, [sp, #8]
   dd392:	9b00      	ldr	r3, [sp, #0]
   dd394:	f840 3b04 	str.w	r3, [r0], #4
   dd398:	eba0 0009 	sub.w	r0, r0, r9
   dd39c:	1080      	asrs	r0, r0, #2
   dd39e:	0146      	lsls	r6, r0, #5
   dd3a0:	6120      	str	r0, [r4, #16]
   dd3a2:	4618      	mov	r0, r3
   dd3a4:	f000 faff 	bl	dd9a6 <__hi0bits>
   dd3a8:	1a30      	subs	r0, r6, r0
   dd3aa:	f8d8 6000 	ldr.w	r6, [r8]
   dd3ae:	42b0      	cmp	r0, r6
   dd3b0:	dd66      	ble.n	dd480 <__gethex+0x278>
   dd3b2:	1b87      	subs	r7, r0, r6
   dd3b4:	4639      	mov	r1, r7
   dd3b6:	4620      	mov	r0, r4
   dd3b8:	f000 fe4c 	bl	de054 <__any_on>
   dd3bc:	4682      	mov	sl, r0
   dd3be:	b1a8      	cbz	r0, dd3ec <__gethex+0x1e4>
   dd3c0:	1e7b      	subs	r3, r7, #1
   dd3c2:	1159      	asrs	r1, r3, #5
   dd3c4:	f003 021f 	and.w	r2, r3, #31
   dd3c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dd3cc:	f04f 0a01 	mov.w	sl, #1
   dd3d0:	fa0a f202 	lsl.w	r2, sl, r2
   dd3d4:	420a      	tst	r2, r1
   dd3d6:	d009      	beq.n	dd3ec <__gethex+0x1e4>
   dd3d8:	4553      	cmp	r3, sl
   dd3da:	dd05      	ble.n	dd3e8 <__gethex+0x1e0>
   dd3dc:	1eb9      	subs	r1, r7, #2
   dd3de:	4620      	mov	r0, r4
   dd3e0:	f000 fe38 	bl	de054 <__any_on>
   dd3e4:	2800      	cmp	r0, #0
   dd3e6:	d148      	bne.n	dd47a <__gethex+0x272>
   dd3e8:	f04f 0a02 	mov.w	sl, #2
   dd3ec:	4639      	mov	r1, r7
   dd3ee:	4620      	mov	r0, r4
   dd3f0:	f7ff fea2 	bl	dd138 <rshift>
   dd3f4:	443d      	add	r5, r7
   dd3f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd3fa:	42ab      	cmp	r3, r5
   dd3fc:	da4f      	bge.n	dd49e <__gethex+0x296>
   dd3fe:	ee18 0a10 	vmov	r0, s16
   dd402:	4621      	mov	r1, r4
   dd404:	f000 fa3c 	bl	dd880 <_Bfree>
   dd408:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dd40a:	2300      	movs	r3, #0
   dd40c:	6013      	str	r3, [r2, #0]
   dd40e:	27a3      	movs	r7, #163	; 0xa3
   dd410:	e78f      	b.n	dd332 <__gethex+0x12a>
   dd412:	3101      	adds	r1, #1
   dd414:	105b      	asrs	r3, r3, #1
   dd416:	e7a7      	b.n	dd368 <__gethex+0x160>
   dd418:	1e73      	subs	r3, r6, #1
   dd41a:	9a05      	ldr	r2, [sp, #20]
   dd41c:	9303      	str	r3, [sp, #12]
   dd41e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dd422:	4293      	cmp	r3, r2
   dd424:	d019      	beq.n	dd45a <__gethex+0x252>
   dd426:	f1bb 0f20 	cmp.w	fp, #32
   dd42a:	d107      	bne.n	dd43c <__gethex+0x234>
   dd42c:	9b02      	ldr	r3, [sp, #8]
   dd42e:	9a00      	ldr	r2, [sp, #0]
   dd430:	f843 2b04 	str.w	r2, [r3], #4
   dd434:	9302      	str	r3, [sp, #8]
   dd436:	2300      	movs	r3, #0
   dd438:	9300      	str	r3, [sp, #0]
   dd43a:	469b      	mov	fp, r3
   dd43c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dd440:	f7ff fecc 	bl	dd1dc <__hexdig_fun>
   dd444:	9b00      	ldr	r3, [sp, #0]
   dd446:	f000 000f 	and.w	r0, r0, #15
   dd44a:	fa00 f00b 	lsl.w	r0, r0, fp
   dd44e:	4303      	orrs	r3, r0
   dd450:	9300      	str	r3, [sp, #0]
   dd452:	f10b 0b04 	add.w	fp, fp, #4
   dd456:	9b03      	ldr	r3, [sp, #12]
   dd458:	e00d      	b.n	dd476 <__gethex+0x26e>
   dd45a:	9b03      	ldr	r3, [sp, #12]
   dd45c:	9a06      	ldr	r2, [sp, #24]
   dd45e:	4413      	add	r3, r2
   dd460:	42bb      	cmp	r3, r7
   dd462:	d3e0      	bcc.n	dd426 <__gethex+0x21e>
   dd464:	4618      	mov	r0, r3
   dd466:	9901      	ldr	r1, [sp, #4]
   dd468:	9307      	str	r3, [sp, #28]
   dd46a:	4652      	mov	r2, sl
   dd46c:	f7fe ff1d 	bl	dc2aa <strncmp>
   dd470:	9b07      	ldr	r3, [sp, #28]
   dd472:	2800      	cmp	r0, #0
   dd474:	d1d7      	bne.n	dd426 <__gethex+0x21e>
   dd476:	461e      	mov	r6, r3
   dd478:	e788      	b.n	dd38c <__gethex+0x184>
   dd47a:	f04f 0a03 	mov.w	sl, #3
   dd47e:	e7b5      	b.n	dd3ec <__gethex+0x1e4>
   dd480:	da0a      	bge.n	dd498 <__gethex+0x290>
   dd482:	1a37      	subs	r7, r6, r0
   dd484:	4621      	mov	r1, r4
   dd486:	ee18 0a10 	vmov	r0, s16
   dd48a:	463a      	mov	r2, r7
   dd48c:	f000 fbce 	bl	ddc2c <__lshift>
   dd490:	1bed      	subs	r5, r5, r7
   dd492:	4604      	mov	r4, r0
   dd494:	f100 0914 	add.w	r9, r0, #20
   dd498:	f04f 0a00 	mov.w	sl, #0
   dd49c:	e7ab      	b.n	dd3f6 <__gethex+0x1ee>
   dd49e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dd4a2:	42a8      	cmp	r0, r5
   dd4a4:	dd6d      	ble.n	dd582 <__gethex+0x37a>
   dd4a6:	1b45      	subs	r5, r0, r5
   dd4a8:	42ae      	cmp	r6, r5
   dd4aa:	dc31      	bgt.n	dd510 <__gethex+0x308>
   dd4ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dd4b0:	2b02      	cmp	r3, #2
   dd4b2:	d023      	beq.n	dd4fc <__gethex+0x2f4>
   dd4b4:	2b03      	cmp	r3, #3
   dd4b6:	d025      	beq.n	dd504 <__gethex+0x2fc>
   dd4b8:	2b01      	cmp	r3, #1
   dd4ba:	d115      	bne.n	dd4e8 <__gethex+0x2e0>
   dd4bc:	42ae      	cmp	r6, r5
   dd4be:	d113      	bne.n	dd4e8 <__gethex+0x2e0>
   dd4c0:	2e01      	cmp	r6, #1
   dd4c2:	d10b      	bne.n	dd4dc <__gethex+0x2d4>
   dd4c4:	9a04      	ldr	r2, [sp, #16]
   dd4c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dd4ca:	6013      	str	r3, [r2, #0]
   dd4cc:	2301      	movs	r3, #1
   dd4ce:	6123      	str	r3, [r4, #16]
   dd4d0:	f8c9 3000 	str.w	r3, [r9]
   dd4d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dd4d6:	2762      	movs	r7, #98	; 0x62
   dd4d8:	601c      	str	r4, [r3, #0]
   dd4da:	e72a      	b.n	dd332 <__gethex+0x12a>
   dd4dc:	1e71      	subs	r1, r6, #1
   dd4de:	4620      	mov	r0, r4
   dd4e0:	f000 fdb8 	bl	de054 <__any_on>
   dd4e4:	2800      	cmp	r0, #0
   dd4e6:	d1ed      	bne.n	dd4c4 <__gethex+0x2bc>
   dd4e8:	ee18 0a10 	vmov	r0, s16
   dd4ec:	4621      	mov	r1, r4
   dd4ee:	f000 f9c7 	bl	dd880 <_Bfree>
   dd4f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dd4f4:	2300      	movs	r3, #0
   dd4f6:	6013      	str	r3, [r2, #0]
   dd4f8:	2750      	movs	r7, #80	; 0x50
   dd4fa:	e71a      	b.n	dd332 <__gethex+0x12a>
   dd4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd4fe:	2b00      	cmp	r3, #0
   dd500:	d1f2      	bne.n	dd4e8 <__gethex+0x2e0>
   dd502:	e7df      	b.n	dd4c4 <__gethex+0x2bc>
   dd504:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd506:	2b00      	cmp	r3, #0
   dd508:	d1dc      	bne.n	dd4c4 <__gethex+0x2bc>
   dd50a:	e7ed      	b.n	dd4e8 <__gethex+0x2e0>
   dd50c:	000df094 	.word	0x000df094
   dd510:	1e6f      	subs	r7, r5, #1
   dd512:	f1ba 0f00 	cmp.w	sl, #0
   dd516:	d131      	bne.n	dd57c <__gethex+0x374>
   dd518:	b127      	cbz	r7, dd524 <__gethex+0x31c>
   dd51a:	4639      	mov	r1, r7
   dd51c:	4620      	mov	r0, r4
   dd51e:	f000 fd99 	bl	de054 <__any_on>
   dd522:	4682      	mov	sl, r0
   dd524:	117b      	asrs	r3, r7, #5
   dd526:	2101      	movs	r1, #1
   dd528:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dd52c:	f007 071f 	and.w	r7, r7, #31
   dd530:	fa01 f707 	lsl.w	r7, r1, r7
   dd534:	421f      	tst	r7, r3
   dd536:	4629      	mov	r1, r5
   dd538:	4620      	mov	r0, r4
   dd53a:	bf18      	it	ne
   dd53c:	f04a 0a02 	orrne.w	sl, sl, #2
   dd540:	1b76      	subs	r6, r6, r5
   dd542:	f7ff fdf9 	bl	dd138 <rshift>
   dd546:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dd54a:	2702      	movs	r7, #2
   dd54c:	f1ba 0f00 	cmp.w	sl, #0
   dd550:	d048      	beq.n	dd5e4 <__gethex+0x3dc>
   dd552:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dd556:	2b02      	cmp	r3, #2
   dd558:	d015      	beq.n	dd586 <__gethex+0x37e>
   dd55a:	2b03      	cmp	r3, #3
   dd55c:	d017      	beq.n	dd58e <__gethex+0x386>
   dd55e:	2b01      	cmp	r3, #1
   dd560:	d109      	bne.n	dd576 <__gethex+0x36e>
   dd562:	f01a 0f02 	tst.w	sl, #2
   dd566:	d006      	beq.n	dd576 <__gethex+0x36e>
   dd568:	f8d9 0000 	ldr.w	r0, [r9]
   dd56c:	ea4a 0a00 	orr.w	sl, sl, r0
   dd570:	f01a 0f01 	tst.w	sl, #1
   dd574:	d10e      	bne.n	dd594 <__gethex+0x38c>
   dd576:	f047 0710 	orr.w	r7, r7, #16
   dd57a:	e033      	b.n	dd5e4 <__gethex+0x3dc>
   dd57c:	f04f 0a01 	mov.w	sl, #1
   dd580:	e7d0      	b.n	dd524 <__gethex+0x31c>
   dd582:	2701      	movs	r7, #1
   dd584:	e7e2      	b.n	dd54c <__gethex+0x344>
   dd586:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd588:	f1c3 0301 	rsb	r3, r3, #1
   dd58c:	9315      	str	r3, [sp, #84]	; 0x54
   dd58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd590:	2b00      	cmp	r3, #0
   dd592:	d0f0      	beq.n	dd576 <__gethex+0x36e>
   dd594:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dd598:	f104 0314 	add.w	r3, r4, #20
   dd59c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dd5a0:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dd5a4:	f04f 0c00 	mov.w	ip, #0
   dd5a8:	4618      	mov	r0, r3
   dd5aa:	f853 2b04 	ldr.w	r2, [r3], #4
   dd5ae:	f1b2 3fff 	cmp.w	r2, #4294967295
   dd5b2:	d01c      	beq.n	dd5ee <__gethex+0x3e6>
   dd5b4:	3201      	adds	r2, #1
   dd5b6:	6002      	str	r2, [r0, #0]
   dd5b8:	2f02      	cmp	r7, #2
   dd5ba:	f104 0314 	add.w	r3, r4, #20
   dd5be:	d13a      	bne.n	dd636 <__gethex+0x42e>
   dd5c0:	f8d8 2000 	ldr.w	r2, [r8]
   dd5c4:	3a01      	subs	r2, #1
   dd5c6:	42b2      	cmp	r2, r6
   dd5c8:	d10a      	bne.n	dd5e0 <__gethex+0x3d8>
   dd5ca:	1171      	asrs	r1, r6, #5
   dd5cc:	2201      	movs	r2, #1
   dd5ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dd5d2:	f006 061f 	and.w	r6, r6, #31
   dd5d6:	fa02 f606 	lsl.w	r6, r2, r6
   dd5da:	421e      	tst	r6, r3
   dd5dc:	bf18      	it	ne
   dd5de:	4617      	movne	r7, r2
   dd5e0:	f047 0720 	orr.w	r7, r7, #32
   dd5e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dd5e6:	601c      	str	r4, [r3, #0]
   dd5e8:	9b04      	ldr	r3, [sp, #16]
   dd5ea:	601d      	str	r5, [r3, #0]
   dd5ec:	e6a1      	b.n	dd332 <__gethex+0x12a>
   dd5ee:	4299      	cmp	r1, r3
   dd5f0:	f843 cc04 	str.w	ip, [r3, #-4]
   dd5f4:	d8d8      	bhi.n	dd5a8 <__gethex+0x3a0>
   dd5f6:	68a3      	ldr	r3, [r4, #8]
   dd5f8:	4599      	cmp	r9, r3
   dd5fa:	db14      	blt.n	dd626 <__gethex+0x41e>
   dd5fc:	6861      	ldr	r1, [r4, #4]
   dd5fe:	ee18 0a10 	vmov	r0, s16
   dd602:	3101      	adds	r1, #1
   dd604:	f000 f908 	bl	dd818 <_Balloc>
   dd608:	6922      	ldr	r2, [r4, #16]
   dd60a:	3202      	adds	r2, #2
   dd60c:	f104 010c 	add.w	r1, r4, #12
   dd610:	4682      	mov	sl, r0
   dd612:	0092      	lsls	r2, r2, #2
   dd614:	300c      	adds	r0, #12
   dd616:	f7fe fdc9 	bl	dc1ac <memcpy>
   dd61a:	4621      	mov	r1, r4
   dd61c:	ee18 0a10 	vmov	r0, s16
   dd620:	f000 f92e 	bl	dd880 <_Bfree>
   dd624:	4654      	mov	r4, sl
   dd626:	6923      	ldr	r3, [r4, #16]
   dd628:	1c5a      	adds	r2, r3, #1
   dd62a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dd62e:	6122      	str	r2, [r4, #16]
   dd630:	2201      	movs	r2, #1
   dd632:	615a      	str	r2, [r3, #20]
   dd634:	e7c0      	b.n	dd5b8 <__gethex+0x3b0>
   dd636:	6922      	ldr	r2, [r4, #16]
   dd638:	454a      	cmp	r2, r9
   dd63a:	dd0b      	ble.n	dd654 <__gethex+0x44c>
   dd63c:	2101      	movs	r1, #1
   dd63e:	4620      	mov	r0, r4
   dd640:	f7ff fd7a 	bl	dd138 <rshift>
   dd644:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd648:	3501      	adds	r5, #1
   dd64a:	42ab      	cmp	r3, r5
   dd64c:	f6ff aed7 	blt.w	dd3fe <__gethex+0x1f6>
   dd650:	2701      	movs	r7, #1
   dd652:	e7c5      	b.n	dd5e0 <__gethex+0x3d8>
   dd654:	f016 061f 	ands.w	r6, r6, #31
   dd658:	d0fa      	beq.n	dd650 <__gethex+0x448>
   dd65a:	449b      	add	fp, r3
   dd65c:	f1c6 0620 	rsb	r6, r6, #32
   dd660:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dd664:	f000 f99f 	bl	dd9a6 <__hi0bits>
   dd668:	42b0      	cmp	r0, r6
   dd66a:	dbe7      	blt.n	dd63c <__gethex+0x434>
   dd66c:	e7f0      	b.n	dd650 <__gethex+0x448>
   dd66e:	bf00      	nop

000dd670 <L_shift>:
   dd670:	f1c2 0208 	rsb	r2, r2, #8
   dd674:	0092      	lsls	r2, r2, #2
   dd676:	b570      	push	{r4, r5, r6, lr}
   dd678:	f1c2 0620 	rsb	r6, r2, #32
   dd67c:	6843      	ldr	r3, [r0, #4]
   dd67e:	6804      	ldr	r4, [r0, #0]
   dd680:	fa03 f506 	lsl.w	r5, r3, r6
   dd684:	432c      	orrs	r4, r5
   dd686:	40d3      	lsrs	r3, r2
   dd688:	6004      	str	r4, [r0, #0]
   dd68a:	f840 3f04 	str.w	r3, [r0, #4]!
   dd68e:	4288      	cmp	r0, r1
   dd690:	d3f4      	bcc.n	dd67c <L_shift+0xc>
   dd692:	bd70      	pop	{r4, r5, r6, pc}

000dd694 <__match>:
   dd694:	b530      	push	{r4, r5, lr}
   dd696:	6803      	ldr	r3, [r0, #0]
   dd698:	3301      	adds	r3, #1
   dd69a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd69e:	b914      	cbnz	r4, dd6a6 <__match+0x12>
   dd6a0:	6003      	str	r3, [r0, #0]
   dd6a2:	2001      	movs	r0, #1
   dd6a4:	bd30      	pop	{r4, r5, pc}
   dd6a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd6aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dd6ae:	2d19      	cmp	r5, #25
   dd6b0:	bf98      	it	ls
   dd6b2:	3220      	addls	r2, #32
   dd6b4:	42a2      	cmp	r2, r4
   dd6b6:	d0f0      	beq.n	dd69a <__match+0x6>
   dd6b8:	2000      	movs	r0, #0
   dd6ba:	e7f3      	b.n	dd6a4 <__match+0x10>

000dd6bc <__hexnan>:
   dd6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd6c0:	680b      	ldr	r3, [r1, #0]
   dd6c2:	6801      	ldr	r1, [r0, #0]
   dd6c4:	115e      	asrs	r6, r3, #5
   dd6c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dd6ca:	f013 031f 	ands.w	r3, r3, #31
   dd6ce:	b087      	sub	sp, #28
   dd6d0:	bf18      	it	ne
   dd6d2:	3604      	addne	r6, #4
   dd6d4:	2500      	movs	r5, #0
   dd6d6:	1f37      	subs	r7, r6, #4
   dd6d8:	4682      	mov	sl, r0
   dd6da:	4690      	mov	r8, r2
   dd6dc:	9301      	str	r3, [sp, #4]
   dd6de:	f846 5c04 	str.w	r5, [r6, #-4]
   dd6e2:	46b9      	mov	r9, r7
   dd6e4:	463c      	mov	r4, r7
   dd6e6:	9502      	str	r5, [sp, #8]
   dd6e8:	46ab      	mov	fp, r5
   dd6ea:	784a      	ldrb	r2, [r1, #1]
   dd6ec:	1c4b      	adds	r3, r1, #1
   dd6ee:	9303      	str	r3, [sp, #12]
   dd6f0:	b342      	cbz	r2, dd744 <__hexnan+0x88>
   dd6f2:	4610      	mov	r0, r2
   dd6f4:	9105      	str	r1, [sp, #20]
   dd6f6:	9204      	str	r2, [sp, #16]
   dd6f8:	f7ff fd70 	bl	dd1dc <__hexdig_fun>
   dd6fc:	2800      	cmp	r0, #0
   dd6fe:	d14f      	bne.n	dd7a0 <__hexnan+0xe4>
   dd700:	9a04      	ldr	r2, [sp, #16]
   dd702:	9905      	ldr	r1, [sp, #20]
   dd704:	2a20      	cmp	r2, #32
   dd706:	d818      	bhi.n	dd73a <__hexnan+0x7e>
   dd708:	9b02      	ldr	r3, [sp, #8]
   dd70a:	459b      	cmp	fp, r3
   dd70c:	dd13      	ble.n	dd736 <__hexnan+0x7a>
   dd70e:	454c      	cmp	r4, r9
   dd710:	d206      	bcs.n	dd720 <__hexnan+0x64>
   dd712:	2d07      	cmp	r5, #7
   dd714:	dc04      	bgt.n	dd720 <__hexnan+0x64>
   dd716:	462a      	mov	r2, r5
   dd718:	4649      	mov	r1, r9
   dd71a:	4620      	mov	r0, r4
   dd71c:	f7ff ffa8 	bl	dd670 <L_shift>
   dd720:	4544      	cmp	r4, r8
   dd722:	d950      	bls.n	dd7c6 <__hexnan+0x10a>
   dd724:	2300      	movs	r3, #0
   dd726:	f1a4 0904 	sub.w	r9, r4, #4
   dd72a:	f844 3c04 	str.w	r3, [r4, #-4]
   dd72e:	f8cd b008 	str.w	fp, [sp, #8]
   dd732:	464c      	mov	r4, r9
   dd734:	461d      	mov	r5, r3
   dd736:	9903      	ldr	r1, [sp, #12]
   dd738:	e7d7      	b.n	dd6ea <__hexnan+0x2e>
   dd73a:	2a29      	cmp	r2, #41	; 0x29
   dd73c:	d156      	bne.n	dd7ec <__hexnan+0x130>
   dd73e:	3102      	adds	r1, #2
   dd740:	f8ca 1000 	str.w	r1, [sl]
   dd744:	f1bb 0f00 	cmp.w	fp, #0
   dd748:	d050      	beq.n	dd7ec <__hexnan+0x130>
   dd74a:	454c      	cmp	r4, r9
   dd74c:	d206      	bcs.n	dd75c <__hexnan+0xa0>
   dd74e:	2d07      	cmp	r5, #7
   dd750:	dc04      	bgt.n	dd75c <__hexnan+0xa0>
   dd752:	462a      	mov	r2, r5
   dd754:	4649      	mov	r1, r9
   dd756:	4620      	mov	r0, r4
   dd758:	f7ff ff8a 	bl	dd670 <L_shift>
   dd75c:	4544      	cmp	r4, r8
   dd75e:	d934      	bls.n	dd7ca <__hexnan+0x10e>
   dd760:	f1a8 0204 	sub.w	r2, r8, #4
   dd764:	4623      	mov	r3, r4
   dd766:	f853 1b04 	ldr.w	r1, [r3], #4
   dd76a:	f842 1f04 	str.w	r1, [r2, #4]!
   dd76e:	429f      	cmp	r7, r3
   dd770:	d2f9      	bcs.n	dd766 <__hexnan+0xaa>
   dd772:	1b3b      	subs	r3, r7, r4
   dd774:	f023 0303 	bic.w	r3, r3, #3
   dd778:	3304      	adds	r3, #4
   dd77a:	3401      	adds	r4, #1
   dd77c:	3e03      	subs	r6, #3
   dd77e:	42b4      	cmp	r4, r6
   dd780:	bf88      	it	hi
   dd782:	2304      	movhi	r3, #4
   dd784:	4443      	add	r3, r8
   dd786:	2200      	movs	r2, #0
   dd788:	f843 2b04 	str.w	r2, [r3], #4
   dd78c:	429f      	cmp	r7, r3
   dd78e:	d2fb      	bcs.n	dd788 <__hexnan+0xcc>
   dd790:	683b      	ldr	r3, [r7, #0]
   dd792:	b91b      	cbnz	r3, dd79c <__hexnan+0xe0>
   dd794:	4547      	cmp	r7, r8
   dd796:	d127      	bne.n	dd7e8 <__hexnan+0x12c>
   dd798:	2301      	movs	r3, #1
   dd79a:	603b      	str	r3, [r7, #0]
   dd79c:	2005      	movs	r0, #5
   dd79e:	e026      	b.n	dd7ee <__hexnan+0x132>
   dd7a0:	3501      	adds	r5, #1
   dd7a2:	2d08      	cmp	r5, #8
   dd7a4:	f10b 0b01 	add.w	fp, fp, #1
   dd7a8:	dd06      	ble.n	dd7b8 <__hexnan+0xfc>
   dd7aa:	4544      	cmp	r4, r8
   dd7ac:	d9c3      	bls.n	dd736 <__hexnan+0x7a>
   dd7ae:	2300      	movs	r3, #0
   dd7b0:	f844 3c04 	str.w	r3, [r4, #-4]
   dd7b4:	2501      	movs	r5, #1
   dd7b6:	3c04      	subs	r4, #4
   dd7b8:	6822      	ldr	r2, [r4, #0]
   dd7ba:	f000 000f 	and.w	r0, r0, #15
   dd7be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dd7c2:	6022      	str	r2, [r4, #0]
   dd7c4:	e7b7      	b.n	dd736 <__hexnan+0x7a>
   dd7c6:	2508      	movs	r5, #8
   dd7c8:	e7b5      	b.n	dd736 <__hexnan+0x7a>
   dd7ca:	9b01      	ldr	r3, [sp, #4]
   dd7cc:	2b00      	cmp	r3, #0
   dd7ce:	d0df      	beq.n	dd790 <__hexnan+0xd4>
   dd7d0:	f04f 32ff 	mov.w	r2, #4294967295
   dd7d4:	f1c3 0320 	rsb	r3, r3, #32
   dd7d8:	fa22 f303 	lsr.w	r3, r2, r3
   dd7dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dd7e0:	401a      	ands	r2, r3
   dd7e2:	f846 2c04 	str.w	r2, [r6, #-4]
   dd7e6:	e7d3      	b.n	dd790 <__hexnan+0xd4>
   dd7e8:	3f04      	subs	r7, #4
   dd7ea:	e7d1      	b.n	dd790 <__hexnan+0xd4>
   dd7ec:	2004      	movs	r0, #4
   dd7ee:	b007      	add	sp, #28
   dd7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd7f4 <__ascii_mbtowc>:
   dd7f4:	b082      	sub	sp, #8
   dd7f6:	b901      	cbnz	r1, dd7fa <__ascii_mbtowc+0x6>
   dd7f8:	a901      	add	r1, sp, #4
   dd7fa:	b142      	cbz	r2, dd80e <__ascii_mbtowc+0x1a>
   dd7fc:	b14b      	cbz	r3, dd812 <__ascii_mbtowc+0x1e>
   dd7fe:	7813      	ldrb	r3, [r2, #0]
   dd800:	600b      	str	r3, [r1, #0]
   dd802:	7812      	ldrb	r2, [r2, #0]
   dd804:	1e10      	subs	r0, r2, #0
   dd806:	bf18      	it	ne
   dd808:	2001      	movne	r0, #1
   dd80a:	b002      	add	sp, #8
   dd80c:	4770      	bx	lr
   dd80e:	4610      	mov	r0, r2
   dd810:	e7fb      	b.n	dd80a <__ascii_mbtowc+0x16>
   dd812:	f06f 0001 	mvn.w	r0, #1
   dd816:	e7f8      	b.n	dd80a <__ascii_mbtowc+0x16>

000dd818 <_Balloc>:
   dd818:	b570      	push	{r4, r5, r6, lr}
   dd81a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd81c:	4604      	mov	r4, r0
   dd81e:	460d      	mov	r5, r1
   dd820:	b93e      	cbnz	r6, dd832 <_Balloc+0x1a>
   dd822:	2010      	movs	r0, #16
   dd824:	f7fa fb02 	bl	d7e2c <malloc>
   dd828:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd82c:	6260      	str	r0, [r4, #36]	; 0x24
   dd82e:	6006      	str	r6, [r0, #0]
   dd830:	60c6      	str	r6, [r0, #12]
   dd832:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dd834:	68f3      	ldr	r3, [r6, #12]
   dd836:	b183      	cbz	r3, dd85a <_Balloc+0x42>
   dd838:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd83a:	68db      	ldr	r3, [r3, #12]
   dd83c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dd840:	b9b8      	cbnz	r0, dd872 <_Balloc+0x5a>
   dd842:	2101      	movs	r1, #1
   dd844:	fa01 f605 	lsl.w	r6, r1, r5
   dd848:	1d72      	adds	r2, r6, #5
   dd84a:	0092      	lsls	r2, r2, #2
   dd84c:	4620      	mov	r0, r4
   dd84e:	f000 fc22 	bl	de096 <_calloc_r>
   dd852:	b160      	cbz	r0, dd86e <_Balloc+0x56>
   dd854:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dd858:	e00e      	b.n	dd878 <_Balloc+0x60>
   dd85a:	2221      	movs	r2, #33	; 0x21
   dd85c:	2104      	movs	r1, #4
   dd85e:	4620      	mov	r0, r4
   dd860:	f000 fc19 	bl	de096 <_calloc_r>
   dd864:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd866:	60f0      	str	r0, [r6, #12]
   dd868:	68db      	ldr	r3, [r3, #12]
   dd86a:	2b00      	cmp	r3, #0
   dd86c:	d1e4      	bne.n	dd838 <_Balloc+0x20>
   dd86e:	2000      	movs	r0, #0
   dd870:	bd70      	pop	{r4, r5, r6, pc}
   dd872:	6802      	ldr	r2, [r0, #0]
   dd874:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dd878:	2300      	movs	r3, #0
   dd87a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dd87e:	e7f7      	b.n	dd870 <_Balloc+0x58>

000dd880 <_Bfree>:
   dd880:	b570      	push	{r4, r5, r6, lr}
   dd882:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd884:	4605      	mov	r5, r0
   dd886:	460c      	mov	r4, r1
   dd888:	b93e      	cbnz	r6, dd89a <_Bfree+0x1a>
   dd88a:	2010      	movs	r0, #16
   dd88c:	f7fa face 	bl	d7e2c <malloc>
   dd890:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd894:	6268      	str	r0, [r5, #36]	; 0x24
   dd896:	6006      	str	r6, [r0, #0]
   dd898:	60c6      	str	r6, [r0, #12]
   dd89a:	b13c      	cbz	r4, dd8ac <_Bfree+0x2c>
   dd89c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dd89e:	6862      	ldr	r2, [r4, #4]
   dd8a0:	68db      	ldr	r3, [r3, #12]
   dd8a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dd8a6:	6021      	str	r1, [r4, #0]
   dd8a8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dd8ac:	bd70      	pop	{r4, r5, r6, pc}

000dd8ae <__multadd>:
   dd8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd8b2:	690e      	ldr	r6, [r1, #16]
   dd8b4:	4607      	mov	r7, r0
   dd8b6:	4698      	mov	r8, r3
   dd8b8:	460c      	mov	r4, r1
   dd8ba:	f101 0014 	add.w	r0, r1, #20
   dd8be:	2300      	movs	r3, #0
   dd8c0:	6805      	ldr	r5, [r0, #0]
   dd8c2:	b2a9      	uxth	r1, r5
   dd8c4:	fb02 8101 	mla	r1, r2, r1, r8
   dd8c8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dd8cc:	0c2d      	lsrs	r5, r5, #16
   dd8ce:	fb02 c505 	mla	r5, r2, r5, ip
   dd8d2:	b289      	uxth	r1, r1
   dd8d4:	3301      	adds	r3, #1
   dd8d6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dd8da:	429e      	cmp	r6, r3
   dd8dc:	f840 1b04 	str.w	r1, [r0], #4
   dd8e0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dd8e4:	dcec      	bgt.n	dd8c0 <__multadd+0x12>
   dd8e6:	f1b8 0f00 	cmp.w	r8, #0
   dd8ea:	d01b      	beq.n	dd924 <__multadd+0x76>
   dd8ec:	68a3      	ldr	r3, [r4, #8]
   dd8ee:	42b3      	cmp	r3, r6
   dd8f0:	dc12      	bgt.n	dd918 <__multadd+0x6a>
   dd8f2:	6861      	ldr	r1, [r4, #4]
   dd8f4:	4638      	mov	r0, r7
   dd8f6:	3101      	adds	r1, #1
   dd8f8:	f7ff ff8e 	bl	dd818 <_Balloc>
   dd8fc:	6922      	ldr	r2, [r4, #16]
   dd8fe:	3202      	adds	r2, #2
   dd900:	f104 010c 	add.w	r1, r4, #12
   dd904:	4605      	mov	r5, r0
   dd906:	0092      	lsls	r2, r2, #2
   dd908:	300c      	adds	r0, #12
   dd90a:	f7fe fc4f 	bl	dc1ac <memcpy>
   dd90e:	4621      	mov	r1, r4
   dd910:	4638      	mov	r0, r7
   dd912:	f7ff ffb5 	bl	dd880 <_Bfree>
   dd916:	462c      	mov	r4, r5
   dd918:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dd91c:	3601      	adds	r6, #1
   dd91e:	f8c3 8014 	str.w	r8, [r3, #20]
   dd922:	6126      	str	r6, [r4, #16]
   dd924:	4620      	mov	r0, r4
   dd926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd92a <__s2b>:
   dd92a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd92e:	460c      	mov	r4, r1
   dd930:	4615      	mov	r5, r2
   dd932:	461f      	mov	r7, r3
   dd934:	2209      	movs	r2, #9
   dd936:	3308      	adds	r3, #8
   dd938:	4606      	mov	r6, r0
   dd93a:	fb93 f3f2 	sdiv	r3, r3, r2
   dd93e:	2100      	movs	r1, #0
   dd940:	2201      	movs	r2, #1
   dd942:	429a      	cmp	r2, r3
   dd944:	db20      	blt.n	dd988 <__s2b+0x5e>
   dd946:	4630      	mov	r0, r6
   dd948:	f7ff ff66 	bl	dd818 <_Balloc>
   dd94c:	9b08      	ldr	r3, [sp, #32]
   dd94e:	6143      	str	r3, [r0, #20]
   dd950:	2d09      	cmp	r5, #9
   dd952:	f04f 0301 	mov.w	r3, #1
   dd956:	6103      	str	r3, [r0, #16]
   dd958:	dd19      	ble.n	dd98e <__s2b+0x64>
   dd95a:	f104 0909 	add.w	r9, r4, #9
   dd95e:	46c8      	mov	r8, r9
   dd960:	442c      	add	r4, r5
   dd962:	f818 3b01 	ldrb.w	r3, [r8], #1
   dd966:	4601      	mov	r1, r0
   dd968:	3b30      	subs	r3, #48	; 0x30
   dd96a:	220a      	movs	r2, #10
   dd96c:	4630      	mov	r0, r6
   dd96e:	f7ff ff9e 	bl	dd8ae <__multadd>
   dd972:	45a0      	cmp	r8, r4
   dd974:	d1f5      	bne.n	dd962 <__s2b+0x38>
   dd976:	f1a5 0408 	sub.w	r4, r5, #8
   dd97a:	444c      	add	r4, r9
   dd97c:	1b2d      	subs	r5, r5, r4
   dd97e:	1963      	adds	r3, r4, r5
   dd980:	42bb      	cmp	r3, r7
   dd982:	db07      	blt.n	dd994 <__s2b+0x6a>
   dd984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd988:	0052      	lsls	r2, r2, #1
   dd98a:	3101      	adds	r1, #1
   dd98c:	e7d9      	b.n	dd942 <__s2b+0x18>
   dd98e:	340a      	adds	r4, #10
   dd990:	2509      	movs	r5, #9
   dd992:	e7f3      	b.n	dd97c <__s2b+0x52>
   dd994:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd998:	4601      	mov	r1, r0
   dd99a:	3b30      	subs	r3, #48	; 0x30
   dd99c:	220a      	movs	r2, #10
   dd99e:	4630      	mov	r0, r6
   dd9a0:	f7ff ff85 	bl	dd8ae <__multadd>
   dd9a4:	e7eb      	b.n	dd97e <__s2b+0x54>

000dd9a6 <__hi0bits>:
   dd9a6:	0c03      	lsrs	r3, r0, #16
   dd9a8:	041b      	lsls	r3, r3, #16
   dd9aa:	b9d3      	cbnz	r3, dd9e2 <__hi0bits+0x3c>
   dd9ac:	0400      	lsls	r0, r0, #16
   dd9ae:	2310      	movs	r3, #16
   dd9b0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dd9b4:	bf04      	itt	eq
   dd9b6:	0200      	lsleq	r0, r0, #8
   dd9b8:	3308      	addeq	r3, #8
   dd9ba:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dd9be:	bf04      	itt	eq
   dd9c0:	0100      	lsleq	r0, r0, #4
   dd9c2:	3304      	addeq	r3, #4
   dd9c4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dd9c8:	bf04      	itt	eq
   dd9ca:	0080      	lsleq	r0, r0, #2
   dd9cc:	3302      	addeq	r3, #2
   dd9ce:	2800      	cmp	r0, #0
   dd9d0:	db05      	blt.n	dd9de <__hi0bits+0x38>
   dd9d2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dd9d6:	f103 0301 	add.w	r3, r3, #1
   dd9da:	bf08      	it	eq
   dd9dc:	2320      	moveq	r3, #32
   dd9de:	4618      	mov	r0, r3
   dd9e0:	4770      	bx	lr
   dd9e2:	2300      	movs	r3, #0
   dd9e4:	e7e4      	b.n	dd9b0 <__hi0bits+0xa>

000dd9e6 <__lo0bits>:
   dd9e6:	6803      	ldr	r3, [r0, #0]
   dd9e8:	f013 0207 	ands.w	r2, r3, #7
   dd9ec:	4601      	mov	r1, r0
   dd9ee:	d00b      	beq.n	dda08 <__lo0bits+0x22>
   dd9f0:	07da      	lsls	r2, r3, #31
   dd9f2:	d424      	bmi.n	dda3e <__lo0bits+0x58>
   dd9f4:	0798      	lsls	r0, r3, #30
   dd9f6:	bf49      	itett	mi
   dd9f8:	085b      	lsrmi	r3, r3, #1
   dd9fa:	089b      	lsrpl	r3, r3, #2
   dd9fc:	2001      	movmi	r0, #1
   dd9fe:	600b      	strmi	r3, [r1, #0]
   dda00:	bf5c      	itt	pl
   dda02:	600b      	strpl	r3, [r1, #0]
   dda04:	2002      	movpl	r0, #2
   dda06:	4770      	bx	lr
   dda08:	b298      	uxth	r0, r3
   dda0a:	b9b0      	cbnz	r0, dda3a <__lo0bits+0x54>
   dda0c:	0c1b      	lsrs	r3, r3, #16
   dda0e:	2010      	movs	r0, #16
   dda10:	f013 0fff 	tst.w	r3, #255	; 0xff
   dda14:	bf04      	itt	eq
   dda16:	0a1b      	lsreq	r3, r3, #8
   dda18:	3008      	addeq	r0, #8
   dda1a:	071a      	lsls	r2, r3, #28
   dda1c:	bf04      	itt	eq
   dda1e:	091b      	lsreq	r3, r3, #4
   dda20:	3004      	addeq	r0, #4
   dda22:	079a      	lsls	r2, r3, #30
   dda24:	bf04      	itt	eq
   dda26:	089b      	lsreq	r3, r3, #2
   dda28:	3002      	addeq	r0, #2
   dda2a:	07da      	lsls	r2, r3, #31
   dda2c:	d403      	bmi.n	dda36 <__lo0bits+0x50>
   dda2e:	085b      	lsrs	r3, r3, #1
   dda30:	f100 0001 	add.w	r0, r0, #1
   dda34:	d005      	beq.n	dda42 <__lo0bits+0x5c>
   dda36:	600b      	str	r3, [r1, #0]
   dda38:	4770      	bx	lr
   dda3a:	4610      	mov	r0, r2
   dda3c:	e7e8      	b.n	dda10 <__lo0bits+0x2a>
   dda3e:	2000      	movs	r0, #0
   dda40:	4770      	bx	lr
   dda42:	2020      	movs	r0, #32
   dda44:	4770      	bx	lr

000dda46 <__i2b>:
   dda46:	b510      	push	{r4, lr}
   dda48:	460c      	mov	r4, r1
   dda4a:	2101      	movs	r1, #1
   dda4c:	f7ff fee4 	bl	dd818 <_Balloc>
   dda50:	2201      	movs	r2, #1
   dda52:	6144      	str	r4, [r0, #20]
   dda54:	6102      	str	r2, [r0, #16]
   dda56:	bd10      	pop	{r4, pc}

000dda58 <__multiply>:
   dda58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dda5c:	4615      	mov	r5, r2
   dda5e:	690a      	ldr	r2, [r1, #16]
   dda60:	692b      	ldr	r3, [r5, #16]
   dda62:	429a      	cmp	r2, r3
   dda64:	bfb8      	it	lt
   dda66:	460b      	movlt	r3, r1
   dda68:	460c      	mov	r4, r1
   dda6a:	bfbc      	itt	lt
   dda6c:	462c      	movlt	r4, r5
   dda6e:	461d      	movlt	r5, r3
   dda70:	6927      	ldr	r7, [r4, #16]
   dda72:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dda76:	68a3      	ldr	r3, [r4, #8]
   dda78:	6861      	ldr	r1, [r4, #4]
   dda7a:	eb07 0609 	add.w	r6, r7, r9
   dda7e:	42b3      	cmp	r3, r6
   dda80:	bfb8      	it	lt
   dda82:	3101      	addlt	r1, #1
   dda84:	b085      	sub	sp, #20
   dda86:	f7ff fec7 	bl	dd818 <_Balloc>
   dda8a:	f100 0114 	add.w	r1, r0, #20
   dda8e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dda92:	460b      	mov	r3, r1
   dda94:	2200      	movs	r2, #0
   dda96:	4543      	cmp	r3, r8
   dda98:	d31d      	bcc.n	ddad6 <__multiply+0x7e>
   dda9a:	f104 0314 	add.w	r3, r4, #20
   dda9e:	f105 0214 	add.w	r2, r5, #20
   ddaa2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ddaa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   ddaaa:	9302      	str	r3, [sp, #8]
   ddaac:	1b3b      	subs	r3, r7, r4
   ddaae:	3b15      	subs	r3, #21
   ddab0:	f023 0303 	bic.w	r3, r3, #3
   ddab4:	3304      	adds	r3, #4
   ddab6:	f104 0515 	add.w	r5, r4, #21
   ddaba:	42af      	cmp	r7, r5
   ddabc:	bf38      	it	cc
   ddabe:	2304      	movcc	r3, #4
   ddac0:	9301      	str	r3, [sp, #4]
   ddac2:	9b02      	ldr	r3, [sp, #8]
   ddac4:	9203      	str	r2, [sp, #12]
   ddac6:	4293      	cmp	r3, r2
   ddac8:	d808      	bhi.n	ddadc <__multiply+0x84>
   ddaca:	2e00      	cmp	r6, #0
   ddacc:	dc5a      	bgt.n	ddb84 <__multiply+0x12c>
   ddace:	6106      	str	r6, [r0, #16]
   ddad0:	b005      	add	sp, #20
   ddad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddad6:	f843 2b04 	str.w	r2, [r3], #4
   ddada:	e7dc      	b.n	dda96 <__multiply+0x3e>
   ddadc:	f8b2 a000 	ldrh.w	sl, [r2]
   ddae0:	f1ba 0f00 	cmp.w	sl, #0
   ddae4:	d024      	beq.n	ddb30 <__multiply+0xd8>
   ddae6:	f104 0e14 	add.w	lr, r4, #20
   ddaea:	4689      	mov	r9, r1
   ddaec:	f04f 0c00 	mov.w	ip, #0
   ddaf0:	f85e 5b04 	ldr.w	r5, [lr], #4
   ddaf4:	f8d9 b000 	ldr.w	fp, [r9]
   ddaf8:	b2ab      	uxth	r3, r5
   ddafa:	fa1f fb8b 	uxth.w	fp, fp
   ddafe:	fb0a b303 	mla	r3, sl, r3, fp
   ddb02:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   ddb06:	f8d9 5000 	ldr.w	r5, [r9]
   ddb0a:	4463      	add	r3, ip
   ddb0c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ddb10:	fb0a c50b 	mla	r5, sl, fp, ip
   ddb14:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   ddb18:	b29b      	uxth	r3, r3
   ddb1a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   ddb1e:	4577      	cmp	r7, lr
   ddb20:	f849 3b04 	str.w	r3, [r9], #4
   ddb24:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ddb28:	d8e2      	bhi.n	ddaf0 <__multiply+0x98>
   ddb2a:	9b01      	ldr	r3, [sp, #4]
   ddb2c:	f841 c003 	str.w	ip, [r1, r3]
   ddb30:	9b03      	ldr	r3, [sp, #12]
   ddb32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   ddb36:	3204      	adds	r2, #4
   ddb38:	f1b9 0f00 	cmp.w	r9, #0
   ddb3c:	d020      	beq.n	ddb80 <__multiply+0x128>
   ddb3e:	680b      	ldr	r3, [r1, #0]
   ddb40:	f104 0c14 	add.w	ip, r4, #20
   ddb44:	468e      	mov	lr, r1
   ddb46:	f04f 0a00 	mov.w	sl, #0
   ddb4a:	f8bc 5000 	ldrh.w	r5, [ip]
   ddb4e:	f8be b002 	ldrh.w	fp, [lr, #2]
   ddb52:	fb09 b505 	mla	r5, r9, r5, fp
   ddb56:	44aa      	add	sl, r5
   ddb58:	b29b      	uxth	r3, r3
   ddb5a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   ddb5e:	f84e 3b04 	str.w	r3, [lr], #4
   ddb62:	f85c 3b04 	ldr.w	r3, [ip], #4
   ddb66:	f8be 5000 	ldrh.w	r5, [lr]
   ddb6a:	0c1b      	lsrs	r3, r3, #16
   ddb6c:	fb09 5303 	mla	r3, r9, r3, r5
   ddb70:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   ddb74:	4567      	cmp	r7, ip
   ddb76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   ddb7a:	d8e6      	bhi.n	ddb4a <__multiply+0xf2>
   ddb7c:	9d01      	ldr	r5, [sp, #4]
   ddb7e:	514b      	str	r3, [r1, r5]
   ddb80:	3104      	adds	r1, #4
   ddb82:	e79e      	b.n	ddac2 <__multiply+0x6a>
   ddb84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ddb88:	2b00      	cmp	r3, #0
   ddb8a:	d1a0      	bne.n	ddace <__multiply+0x76>
   ddb8c:	3e01      	subs	r6, #1
   ddb8e:	e79c      	b.n	ddaca <__multiply+0x72>

000ddb90 <__pow5mult>:
   ddb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ddb94:	4615      	mov	r5, r2
   ddb96:	f012 0203 	ands.w	r2, r2, #3
   ddb9a:	4606      	mov	r6, r0
   ddb9c:	460f      	mov	r7, r1
   ddb9e:	d007      	beq.n	ddbb0 <__pow5mult+0x20>
   ddba0:	4c21      	ldr	r4, [pc, #132]	; (ddc28 <__pow5mult+0x98>)
   ddba2:	3a01      	subs	r2, #1
   ddba4:	2300      	movs	r3, #0
   ddba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ddbaa:	f7ff fe80 	bl	dd8ae <__multadd>
   ddbae:	4607      	mov	r7, r0
   ddbb0:	10ad      	asrs	r5, r5, #2
   ddbb2:	d035      	beq.n	ddc20 <__pow5mult+0x90>
   ddbb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ddbb6:	b93c      	cbnz	r4, ddbc8 <__pow5mult+0x38>
   ddbb8:	2010      	movs	r0, #16
   ddbba:	f7fa f937 	bl	d7e2c <malloc>
   ddbbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ddbc2:	6270      	str	r0, [r6, #36]	; 0x24
   ddbc4:	6004      	str	r4, [r0, #0]
   ddbc6:	60c4      	str	r4, [r0, #12]
   ddbc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ddbcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ddbd0:	b94c      	cbnz	r4, ddbe6 <__pow5mult+0x56>
   ddbd2:	f240 2171 	movw	r1, #625	; 0x271
   ddbd6:	4630      	mov	r0, r6
   ddbd8:	f7ff ff35 	bl	dda46 <__i2b>
   ddbdc:	2300      	movs	r3, #0
   ddbde:	f8c8 0008 	str.w	r0, [r8, #8]
   ddbe2:	4604      	mov	r4, r0
   ddbe4:	6003      	str	r3, [r0, #0]
   ddbe6:	f04f 0900 	mov.w	r9, #0
   ddbea:	07eb      	lsls	r3, r5, #31
   ddbec:	d50a      	bpl.n	ddc04 <__pow5mult+0x74>
   ddbee:	4639      	mov	r1, r7
   ddbf0:	4622      	mov	r2, r4
   ddbf2:	4630      	mov	r0, r6
   ddbf4:	f7ff ff30 	bl	dda58 <__multiply>
   ddbf8:	4639      	mov	r1, r7
   ddbfa:	4680      	mov	r8, r0
   ddbfc:	4630      	mov	r0, r6
   ddbfe:	f7ff fe3f 	bl	dd880 <_Bfree>
   ddc02:	4647      	mov	r7, r8
   ddc04:	106d      	asrs	r5, r5, #1
   ddc06:	d00b      	beq.n	ddc20 <__pow5mult+0x90>
   ddc08:	6820      	ldr	r0, [r4, #0]
   ddc0a:	b938      	cbnz	r0, ddc1c <__pow5mult+0x8c>
   ddc0c:	4622      	mov	r2, r4
   ddc0e:	4621      	mov	r1, r4
   ddc10:	4630      	mov	r0, r6
   ddc12:	f7ff ff21 	bl	dda58 <__multiply>
   ddc16:	6020      	str	r0, [r4, #0]
   ddc18:	f8c0 9000 	str.w	r9, [r0]
   ddc1c:	4604      	mov	r4, r0
   ddc1e:	e7e4      	b.n	ddbea <__pow5mult+0x5a>
   ddc20:	4638      	mov	r0, r7
   ddc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ddc26:	bf00      	nop
   ddc28:	000df198 	.word	0x000df198

000ddc2c <__lshift>:
   ddc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddc30:	460c      	mov	r4, r1
   ddc32:	6849      	ldr	r1, [r1, #4]
   ddc34:	6923      	ldr	r3, [r4, #16]
   ddc36:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ddc3a:	68a3      	ldr	r3, [r4, #8]
   ddc3c:	4607      	mov	r7, r0
   ddc3e:	4691      	mov	r9, r2
   ddc40:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ddc44:	f108 0601 	add.w	r6, r8, #1
   ddc48:	42b3      	cmp	r3, r6
   ddc4a:	db3f      	blt.n	ddccc <__lshift+0xa0>
   ddc4c:	4638      	mov	r0, r7
   ddc4e:	f7ff fde3 	bl	dd818 <_Balloc>
   ddc52:	2300      	movs	r3, #0
   ddc54:	4605      	mov	r5, r0
   ddc56:	f100 0114 	add.w	r1, r0, #20
   ddc5a:	f100 0210 	add.w	r2, r0, #16
   ddc5e:	4618      	mov	r0, r3
   ddc60:	4553      	cmp	r3, sl
   ddc62:	db36      	blt.n	ddcd2 <__lshift+0xa6>
   ddc64:	6920      	ldr	r0, [r4, #16]
   ddc66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ddc6a:	f104 0314 	add.w	r3, r4, #20
   ddc6e:	f019 091f 	ands.w	r9, r9, #31
   ddc72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ddc76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   ddc7a:	d02e      	beq.n	ddcda <__lshift+0xae>
   ddc7c:	f1c9 0e20 	rsb	lr, r9, #32
   ddc80:	468a      	mov	sl, r1
   ddc82:	2200      	movs	r2, #0
   ddc84:	6818      	ldr	r0, [r3, #0]
   ddc86:	fa00 f009 	lsl.w	r0, r0, r9
   ddc8a:	4302      	orrs	r2, r0
   ddc8c:	f84a 2b04 	str.w	r2, [sl], #4
   ddc90:	f853 2b04 	ldr.w	r2, [r3], #4
   ddc94:	459c      	cmp	ip, r3
   ddc96:	fa22 f20e 	lsr.w	r2, r2, lr
   ddc9a:	d8f3      	bhi.n	ddc84 <__lshift+0x58>
   ddc9c:	ebac 0304 	sub.w	r3, ip, r4
   ddca0:	3b15      	subs	r3, #21
   ddca2:	f023 0303 	bic.w	r3, r3, #3
   ddca6:	3304      	adds	r3, #4
   ddca8:	f104 0015 	add.w	r0, r4, #21
   ddcac:	4560      	cmp	r0, ip
   ddcae:	bf88      	it	hi
   ddcb0:	2304      	movhi	r3, #4
   ddcb2:	50ca      	str	r2, [r1, r3]
   ddcb4:	b10a      	cbz	r2, ddcba <__lshift+0x8e>
   ddcb6:	f108 0602 	add.w	r6, r8, #2
   ddcba:	3e01      	subs	r6, #1
   ddcbc:	4638      	mov	r0, r7
   ddcbe:	612e      	str	r6, [r5, #16]
   ddcc0:	4621      	mov	r1, r4
   ddcc2:	f7ff fddd 	bl	dd880 <_Bfree>
   ddcc6:	4628      	mov	r0, r5
   ddcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddccc:	3101      	adds	r1, #1
   ddcce:	005b      	lsls	r3, r3, #1
   ddcd0:	e7ba      	b.n	ddc48 <__lshift+0x1c>
   ddcd2:	f842 0f04 	str.w	r0, [r2, #4]!
   ddcd6:	3301      	adds	r3, #1
   ddcd8:	e7c2      	b.n	ddc60 <__lshift+0x34>
   ddcda:	3904      	subs	r1, #4
   ddcdc:	f853 2b04 	ldr.w	r2, [r3], #4
   ddce0:	f841 2f04 	str.w	r2, [r1, #4]!
   ddce4:	459c      	cmp	ip, r3
   ddce6:	d8f9      	bhi.n	ddcdc <__lshift+0xb0>
   ddce8:	e7e7      	b.n	ddcba <__lshift+0x8e>

000ddcea <__mcmp>:
   ddcea:	b530      	push	{r4, r5, lr}
   ddcec:	6902      	ldr	r2, [r0, #16]
   ddcee:	690c      	ldr	r4, [r1, #16]
   ddcf0:	1b12      	subs	r2, r2, r4
   ddcf2:	d10e      	bne.n	ddd12 <__mcmp+0x28>
   ddcf4:	f100 0314 	add.w	r3, r0, #20
   ddcf8:	3114      	adds	r1, #20
   ddcfa:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ddcfe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ddd02:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ddd06:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ddd0a:	42a5      	cmp	r5, r4
   ddd0c:	d003      	beq.n	ddd16 <__mcmp+0x2c>
   ddd0e:	d305      	bcc.n	ddd1c <__mcmp+0x32>
   ddd10:	2201      	movs	r2, #1
   ddd12:	4610      	mov	r0, r2
   ddd14:	bd30      	pop	{r4, r5, pc}
   ddd16:	4283      	cmp	r3, r0
   ddd18:	d3f3      	bcc.n	ddd02 <__mcmp+0x18>
   ddd1a:	e7fa      	b.n	ddd12 <__mcmp+0x28>
   ddd1c:	f04f 32ff 	mov.w	r2, #4294967295
   ddd20:	e7f7      	b.n	ddd12 <__mcmp+0x28>

000ddd22 <__mdiff>:
   ddd22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddd26:	460c      	mov	r4, r1
   ddd28:	4606      	mov	r6, r0
   ddd2a:	4611      	mov	r1, r2
   ddd2c:	4620      	mov	r0, r4
   ddd2e:	4617      	mov	r7, r2
   ddd30:	f7ff ffdb 	bl	ddcea <__mcmp>
   ddd34:	1e05      	subs	r5, r0, #0
   ddd36:	d108      	bne.n	ddd4a <__mdiff+0x28>
   ddd38:	4629      	mov	r1, r5
   ddd3a:	4630      	mov	r0, r6
   ddd3c:	f7ff fd6c 	bl	dd818 <_Balloc>
   ddd40:	2301      	movs	r3, #1
   ddd42:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ddd46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddd4a:	bfa4      	itt	ge
   ddd4c:	463b      	movge	r3, r7
   ddd4e:	4627      	movge	r7, r4
   ddd50:	4630      	mov	r0, r6
   ddd52:	6879      	ldr	r1, [r7, #4]
   ddd54:	bfa6      	itte	ge
   ddd56:	461c      	movge	r4, r3
   ddd58:	2500      	movge	r5, #0
   ddd5a:	2501      	movlt	r5, #1
   ddd5c:	f7ff fd5c 	bl	dd818 <_Balloc>
   ddd60:	693e      	ldr	r6, [r7, #16]
   ddd62:	60c5      	str	r5, [r0, #12]
   ddd64:	6925      	ldr	r5, [r4, #16]
   ddd66:	f107 0114 	add.w	r1, r7, #20
   ddd6a:	f104 0914 	add.w	r9, r4, #20
   ddd6e:	f100 0e14 	add.w	lr, r0, #20
   ddd72:	f107 0210 	add.w	r2, r7, #16
   ddd76:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   ddd7a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   ddd7e:	46f2      	mov	sl, lr
   ddd80:	2700      	movs	r7, #0
   ddd82:	f859 3b04 	ldr.w	r3, [r9], #4
   ddd86:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ddd8a:	fa1f f883 	uxth.w	r8, r3
   ddd8e:	fa17 f78b 	uxtah	r7, r7, fp
   ddd92:	0c1b      	lsrs	r3, r3, #16
   ddd94:	eba7 0808 	sub.w	r8, r7, r8
   ddd98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ddd9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ddda0:	fa1f f888 	uxth.w	r8, r8
   ddda4:	141f      	asrs	r7, r3, #16
   ddda6:	454d      	cmp	r5, r9
   ddda8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dddac:	f84a 3b04 	str.w	r3, [sl], #4
   dddb0:	d8e7      	bhi.n	ddd82 <__mdiff+0x60>
   dddb2:	1b2b      	subs	r3, r5, r4
   dddb4:	3b15      	subs	r3, #21
   dddb6:	f023 0303 	bic.w	r3, r3, #3
   dddba:	3304      	adds	r3, #4
   dddbc:	3415      	adds	r4, #21
   dddbe:	42a5      	cmp	r5, r4
   dddc0:	bf38      	it	cc
   dddc2:	2304      	movcc	r3, #4
   dddc4:	4419      	add	r1, r3
   dddc6:	4473      	add	r3, lr
   dddc8:	469e      	mov	lr, r3
   dddca:	460d      	mov	r5, r1
   dddcc:	4565      	cmp	r5, ip
   dddce:	d30e      	bcc.n	dddee <__mdiff+0xcc>
   dddd0:	f10c 0203 	add.w	r2, ip, #3
   dddd4:	1a52      	subs	r2, r2, r1
   dddd6:	f022 0203 	bic.w	r2, r2, #3
   dddda:	3903      	subs	r1, #3
   ddddc:	458c      	cmp	ip, r1
   dddde:	bf38      	it	cc
   ddde0:	2200      	movcc	r2, #0
   ddde2:	441a      	add	r2, r3
   ddde4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ddde8:	b17b      	cbz	r3, dde0a <__mdiff+0xe8>
   dddea:	6106      	str	r6, [r0, #16]
   dddec:	e7ab      	b.n	ddd46 <__mdiff+0x24>
   dddee:	f855 8b04 	ldr.w	r8, [r5], #4
   dddf2:	fa17 f488 	uxtah	r4, r7, r8
   dddf6:	1422      	asrs	r2, r4, #16
   dddf8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dddfc:	b2a4      	uxth	r4, r4
   dddfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dde02:	f84e 4b04 	str.w	r4, [lr], #4
   dde06:	1417      	asrs	r7, r2, #16
   dde08:	e7e0      	b.n	dddcc <__mdiff+0xaa>
   dde0a:	3e01      	subs	r6, #1
   dde0c:	e7ea      	b.n	ddde4 <__mdiff+0xc2>
	...

000dde10 <__ulp>:
   dde10:	b082      	sub	sp, #8
   dde12:	ed8d 0b00 	vstr	d0, [sp]
   dde16:	9b01      	ldr	r3, [sp, #4]
   dde18:	4912      	ldr	r1, [pc, #72]	; (dde64 <__ulp+0x54>)
   dde1a:	4019      	ands	r1, r3
   dde1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dde20:	2900      	cmp	r1, #0
   dde22:	dd05      	ble.n	dde30 <__ulp+0x20>
   dde24:	2200      	movs	r2, #0
   dde26:	460b      	mov	r3, r1
   dde28:	ec43 2b10 	vmov	d0, r2, r3
   dde2c:	b002      	add	sp, #8
   dde2e:	4770      	bx	lr
   dde30:	4249      	negs	r1, r1
   dde32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dde36:	ea4f 5021 	mov.w	r0, r1, asr #20
   dde3a:	f04f 0200 	mov.w	r2, #0
   dde3e:	f04f 0300 	mov.w	r3, #0
   dde42:	da04      	bge.n	dde4e <__ulp+0x3e>
   dde44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dde48:	fa41 f300 	asr.w	r3, r1, r0
   dde4c:	e7ec      	b.n	dde28 <__ulp+0x18>
   dde4e:	f1a0 0114 	sub.w	r1, r0, #20
   dde52:	291e      	cmp	r1, #30
   dde54:	bfda      	itte	le
   dde56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dde5a:	fa20 f101 	lsrle.w	r1, r0, r1
   dde5e:	2101      	movgt	r1, #1
   dde60:	460a      	mov	r2, r1
   dde62:	e7e1      	b.n	dde28 <__ulp+0x18>
   dde64:	7ff00000 	.word	0x7ff00000

000dde68 <__b2d>:
   dde68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dde6a:	6905      	ldr	r5, [r0, #16]
   dde6c:	f100 0714 	add.w	r7, r0, #20
   dde70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dde74:	1f2e      	subs	r6, r5, #4
   dde76:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dde7a:	4620      	mov	r0, r4
   dde7c:	f7ff fd93 	bl	dd9a6 <__hi0bits>
   dde80:	f1c0 0320 	rsb	r3, r0, #32
   dde84:	280a      	cmp	r0, #10
   dde86:	f8df c07c 	ldr.w	ip, [pc, #124]	; ddf04 <__b2d+0x9c>
   dde8a:	600b      	str	r3, [r1, #0]
   dde8c:	dc14      	bgt.n	ddeb8 <__b2d+0x50>
   dde8e:	f1c0 0e0b 	rsb	lr, r0, #11
   dde92:	fa24 f10e 	lsr.w	r1, r4, lr
   dde96:	42b7      	cmp	r7, r6
   dde98:	ea41 030c 	orr.w	r3, r1, ip
   dde9c:	bf34      	ite	cc
   dde9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ddea2:	2100      	movcs	r1, #0
   ddea4:	3015      	adds	r0, #21
   ddea6:	fa04 f000 	lsl.w	r0, r4, r0
   ddeaa:	fa21 f10e 	lsr.w	r1, r1, lr
   ddeae:	ea40 0201 	orr.w	r2, r0, r1
   ddeb2:	ec43 2b10 	vmov	d0, r2, r3
   ddeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ddeb8:	42b7      	cmp	r7, r6
   ddeba:	bf3a      	itte	cc
   ddebc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ddec0:	f1a5 0608 	subcc.w	r6, r5, #8
   ddec4:	2100      	movcs	r1, #0
   ddec6:	380b      	subs	r0, #11
   ddec8:	d017      	beq.n	ddefa <__b2d+0x92>
   ddeca:	f1c0 0c20 	rsb	ip, r0, #32
   ddece:	fa04 f500 	lsl.w	r5, r4, r0
   dded2:	42be      	cmp	r6, r7
   dded4:	fa21 f40c 	lsr.w	r4, r1, ip
   dded8:	ea45 0504 	orr.w	r5, r5, r4
   ddedc:	bf8c      	ite	hi
   ddede:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ddee2:	2400      	movls	r4, #0
   ddee4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ddee8:	fa01 f000 	lsl.w	r0, r1, r0
   ddeec:	fa24 f40c 	lsr.w	r4, r4, ip
   ddef0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ddef4:	ea40 0204 	orr.w	r2, r0, r4
   ddef8:	e7db      	b.n	ddeb2 <__b2d+0x4a>
   ddefa:	ea44 030c 	orr.w	r3, r4, ip
   ddefe:	460a      	mov	r2, r1
   ddf00:	e7d7      	b.n	ddeb2 <__b2d+0x4a>
   ddf02:	bf00      	nop
   ddf04:	3ff00000 	.word	0x3ff00000

000ddf08 <__d2b>:
   ddf08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ddf0c:	4689      	mov	r9, r1
   ddf0e:	2101      	movs	r1, #1
   ddf10:	ec57 6b10 	vmov	r6, r7, d0
   ddf14:	4690      	mov	r8, r2
   ddf16:	f7ff fc7f 	bl	dd818 <_Balloc>
   ddf1a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ddf1e:	4604      	mov	r4, r0
   ddf20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ddf24:	bb35      	cbnz	r5, ddf74 <__d2b+0x6c>
   ddf26:	2e00      	cmp	r6, #0
   ddf28:	9301      	str	r3, [sp, #4]
   ddf2a:	d028      	beq.n	ddf7e <__d2b+0x76>
   ddf2c:	4668      	mov	r0, sp
   ddf2e:	9600      	str	r6, [sp, #0]
   ddf30:	f7ff fd59 	bl	dd9e6 <__lo0bits>
   ddf34:	9900      	ldr	r1, [sp, #0]
   ddf36:	b300      	cbz	r0, ddf7a <__d2b+0x72>
   ddf38:	9a01      	ldr	r2, [sp, #4]
   ddf3a:	f1c0 0320 	rsb	r3, r0, #32
   ddf3e:	fa02 f303 	lsl.w	r3, r2, r3
   ddf42:	430b      	orrs	r3, r1
   ddf44:	40c2      	lsrs	r2, r0
   ddf46:	6163      	str	r3, [r4, #20]
   ddf48:	9201      	str	r2, [sp, #4]
   ddf4a:	9b01      	ldr	r3, [sp, #4]
   ddf4c:	61a3      	str	r3, [r4, #24]
   ddf4e:	2b00      	cmp	r3, #0
   ddf50:	bf14      	ite	ne
   ddf52:	2202      	movne	r2, #2
   ddf54:	2201      	moveq	r2, #1
   ddf56:	6122      	str	r2, [r4, #16]
   ddf58:	b1d5      	cbz	r5, ddf90 <__d2b+0x88>
   ddf5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ddf5e:	4405      	add	r5, r0
   ddf60:	f8c9 5000 	str.w	r5, [r9]
   ddf64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ddf68:	f8c8 0000 	str.w	r0, [r8]
   ddf6c:	4620      	mov	r0, r4
   ddf6e:	b003      	add	sp, #12
   ddf70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ddf74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ddf78:	e7d5      	b.n	ddf26 <__d2b+0x1e>
   ddf7a:	6161      	str	r1, [r4, #20]
   ddf7c:	e7e5      	b.n	ddf4a <__d2b+0x42>
   ddf7e:	a801      	add	r0, sp, #4
   ddf80:	f7ff fd31 	bl	dd9e6 <__lo0bits>
   ddf84:	9b01      	ldr	r3, [sp, #4]
   ddf86:	6163      	str	r3, [r4, #20]
   ddf88:	2201      	movs	r2, #1
   ddf8a:	6122      	str	r2, [r4, #16]
   ddf8c:	3020      	adds	r0, #32
   ddf8e:	e7e3      	b.n	ddf58 <__d2b+0x50>
   ddf90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ddf94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ddf98:	f8c9 0000 	str.w	r0, [r9]
   ddf9c:	6918      	ldr	r0, [r3, #16]
   ddf9e:	f7ff fd02 	bl	dd9a6 <__hi0bits>
   ddfa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ddfa6:	e7df      	b.n	ddf68 <__d2b+0x60>

000ddfa8 <__ratio>:
   ddfa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddfac:	4688      	mov	r8, r1
   ddfae:	4669      	mov	r1, sp
   ddfb0:	4681      	mov	r9, r0
   ddfb2:	f7ff ff59 	bl	dde68 <__b2d>
   ddfb6:	a901      	add	r1, sp, #4
   ddfb8:	4640      	mov	r0, r8
   ddfba:	ec55 4b10 	vmov	r4, r5, d0
   ddfbe:	f7ff ff53 	bl	dde68 <__b2d>
   ddfc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ddfc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ddfca:	eba3 0c02 	sub.w	ip, r3, r2
   ddfce:	e9dd 3200 	ldrd	r3, r2, [sp]
   ddfd2:	1a9b      	subs	r3, r3, r2
   ddfd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ddfd8:	ec51 0b10 	vmov	r0, r1, d0
   ddfdc:	2b00      	cmp	r3, #0
   ddfde:	bfd6      	itet	le
   ddfe0:	460a      	movle	r2, r1
   ddfe2:	462a      	movgt	r2, r5
   ddfe4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ddfe8:	468b      	mov	fp, r1
   ddfea:	462f      	mov	r7, r5
   ddfec:	bfd4      	ite	le
   ddfee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ddff2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ddff6:	4620      	mov	r0, r4
   ddff8:	ee10 2a10 	vmov	r2, s0
   ddffc:	465b      	mov	r3, fp
   ddffe:	4639      	mov	r1, r7
   de000:	f7fd fe7e 	bl	dbd00 <__aeabi_ddiv>
   de004:	ec41 0b10 	vmov	d0, r0, r1
   de008:	b003      	add	sp, #12
   de00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de00e <__copybits>:
   de00e:	3901      	subs	r1, #1
   de010:	b570      	push	{r4, r5, r6, lr}
   de012:	1149      	asrs	r1, r1, #5
   de014:	6914      	ldr	r4, [r2, #16]
   de016:	3101      	adds	r1, #1
   de018:	f102 0314 	add.w	r3, r2, #20
   de01c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   de020:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   de024:	1f05      	subs	r5, r0, #4
   de026:	42a3      	cmp	r3, r4
   de028:	d30c      	bcc.n	de044 <__copybits+0x36>
   de02a:	1aa3      	subs	r3, r4, r2
   de02c:	3b11      	subs	r3, #17
   de02e:	f023 0303 	bic.w	r3, r3, #3
   de032:	3211      	adds	r2, #17
   de034:	42a2      	cmp	r2, r4
   de036:	bf88      	it	hi
   de038:	2300      	movhi	r3, #0
   de03a:	4418      	add	r0, r3
   de03c:	2300      	movs	r3, #0
   de03e:	4288      	cmp	r0, r1
   de040:	d305      	bcc.n	de04e <__copybits+0x40>
   de042:	bd70      	pop	{r4, r5, r6, pc}
   de044:	f853 6b04 	ldr.w	r6, [r3], #4
   de048:	f845 6f04 	str.w	r6, [r5, #4]!
   de04c:	e7eb      	b.n	de026 <__copybits+0x18>
   de04e:	f840 3b04 	str.w	r3, [r0], #4
   de052:	e7f4      	b.n	de03e <__copybits+0x30>

000de054 <__any_on>:
   de054:	f100 0214 	add.w	r2, r0, #20
   de058:	6900      	ldr	r0, [r0, #16]
   de05a:	114b      	asrs	r3, r1, #5
   de05c:	4298      	cmp	r0, r3
   de05e:	b510      	push	{r4, lr}
   de060:	db11      	blt.n	de086 <__any_on+0x32>
   de062:	dd0a      	ble.n	de07a <__any_on+0x26>
   de064:	f011 011f 	ands.w	r1, r1, #31
   de068:	d007      	beq.n	de07a <__any_on+0x26>
   de06a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   de06e:	fa24 f001 	lsr.w	r0, r4, r1
   de072:	fa00 f101 	lsl.w	r1, r0, r1
   de076:	428c      	cmp	r4, r1
   de078:	d10b      	bne.n	de092 <__any_on+0x3e>
   de07a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   de07e:	4293      	cmp	r3, r2
   de080:	d803      	bhi.n	de08a <__any_on+0x36>
   de082:	2000      	movs	r0, #0
   de084:	bd10      	pop	{r4, pc}
   de086:	4603      	mov	r3, r0
   de088:	e7f7      	b.n	de07a <__any_on+0x26>
   de08a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   de08e:	2900      	cmp	r1, #0
   de090:	d0f5      	beq.n	de07e <__any_on+0x2a>
   de092:	2001      	movs	r0, #1
   de094:	e7f6      	b.n	de084 <__any_on+0x30>

000de096 <_calloc_r>:
   de096:	b513      	push	{r0, r1, r4, lr}
   de098:	434a      	muls	r2, r1
   de09a:	4611      	mov	r1, r2
   de09c:	9201      	str	r2, [sp, #4]
   de09e:	f7f9 feed 	bl	d7e7c <_malloc_r>
   de0a2:	4604      	mov	r4, r0
   de0a4:	b118      	cbz	r0, de0ae <_calloc_r+0x18>
   de0a6:	9a01      	ldr	r2, [sp, #4]
   de0a8:	2100      	movs	r1, #0
   de0aa:	f7fe f88d 	bl	dc1c8 <memset>
   de0ae:	4620      	mov	r0, r4
   de0b0:	b002      	add	sp, #8
   de0b2:	bd10      	pop	{r4, pc}

000de0b4 <__ascii_wctomb>:
   de0b4:	b149      	cbz	r1, de0ca <__ascii_wctomb+0x16>
   de0b6:	2aff      	cmp	r2, #255	; 0xff
   de0b8:	bf85      	ittet	hi
   de0ba:	238a      	movhi	r3, #138	; 0x8a
   de0bc:	6003      	strhi	r3, [r0, #0]
   de0be:	700a      	strbls	r2, [r1, #0]
   de0c0:	f04f 30ff 	movhi.w	r0, #4294967295
   de0c4:	bf98      	it	ls
   de0c6:	2001      	movls	r0, #1
   de0c8:	4770      	bx	lr
   de0ca:	4608      	mov	r0, r1
   de0cc:	4770      	bx	lr
	...

000de0d0 <__aeabi_d2lz>:
   de0d0:	b538      	push	{r3, r4, r5, lr}
   de0d2:	2200      	movs	r2, #0
   de0d4:	2300      	movs	r3, #0
   de0d6:	4604      	mov	r4, r0
   de0d8:	460d      	mov	r5, r1
   de0da:	f7fd ff59 	bl	dbf90 <__aeabi_dcmplt>
   de0de:	b928      	cbnz	r0, de0ec <__aeabi_d2lz+0x1c>
   de0e0:	4620      	mov	r0, r4
   de0e2:	4629      	mov	r1, r5
   de0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de0e8:	f7fe b828 	b.w	dc13c <__aeabi_d2ulz>
   de0ec:	4620      	mov	r0, r4
   de0ee:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   de0f2:	f7fe f823 	bl	dc13c <__aeabi_d2ulz>
   de0f6:	4240      	negs	r0, r0
   de0f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de0fc:	bd38      	pop	{r3, r4, r5, pc}
   de0fe:	bf00      	nop

000de100 <dynalib_user>:
   de100:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   de110:	0000 0000 6925 2500 696c 6f00 7475 7000     ....%i.%li.out.p
   de120:	6d77 6400 0077 7761 7600 0077 7276 6200     wm.dw.aw.vw.vr.b
   de130:	796c 6b6e 632d 6f6c 6475 632e 6d6f 6300     lynk-cloud.com.c
   de140:	726c 5700 4669 2069 6f63 6e6e 6365 6574     lr.WiFi connecte
   de150:	0a64 6d00 5f6c 6f74 635f 6c6f 656c 7463     d..ml_to_collect
   de160:	7320 7465 7420 3a6f 0020 6d20 0a4c 7300      set to: . mL..s
   de170:	6d61 6c70 2065 6e69 6574 7672 6c61 7320     ample interval s
   de180:	7465 7420 3a6f 0020 6d20 6e69 000a 6874     et to: . min..th
   de190:	6572 6873 6c6f 2064 6573 2074 6f74 203a     reshold set to: 
   de1a0:	2000 6d63 000a 6173 706d 656c 625f 746f     . cm..sample_bot
   de1b0:	6c74 5f65 4c6d 7320 7465 7420 3a6f 0020     tle_mL set to: .
   de1c0:	3225 332e 0066 7246 6d6f 2520 2073 6f74     %2.3f.From %s to
   de1d0:	2520 0073 6148 746c 6465 6920 206e 7265      %s.Halted in er
   de1e0:	6f72 2072 7473 7461 0a65 4c00 7665 6c65     ror state..Level
   de1f0:	635f 006d 7352 6973 5300 6769 0053 4242     _cm.Rssi.SigS.BB
   de200:	4646 342d 7449 4a45 304b 4b56 524b 317a     FF-4ItEJK0VKKRz1
   de210:	684e 7847 6934 3639 7a6f 5648 5365 5435     NhGx4i96ozHVeS5T
   de220:	006c                                        l.

000de222 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   de222:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   de232:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   de242:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   de252:	6974 6c63 0065 7562 6c69 0064 7541 2067     ticle.build.Aug 
   de262:	3532 3220 3230 2031 3830 323a 3a31 3833     25 2021 08:21:38
   de272:	0000 0000 0000                              ......

000de278 <_ZTV12AccelStepper>:
	...
   de280:	5a15 000d 5a45 000d 590b 000d 5847 000d     .Z..EZ...Y..GX..
   de290:	5995 000d 594d 000d 59a9 000d 59cb 000d     .Y..MY...Y...Y..
   de2a0:	59f3 000d 5887 000d 58d1 000d 7441 6574     .Y...X...X..Atte
   de2b0:	706d 6974 676e 7420 206f 6572 6f63 6e6e     mpting to reconn
   de2c0:	6365 0074 7254 6979 676e 7420 206f 6f63     ect.Trying to co
   de2d0:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   de2e0:	6d65 7470 6e20 6d75 6562 3a72 0020 4c7c     empt number: .|L
   de2f0:	7c56 5000 7961 6f6c 6461 6620 726f 7220     V|.Payload for r
   de300:	7165 6575 7473 003a 2d0a 2d2d 002d 6974     equest:..----.ti
   de310:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   de320:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   de330:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   de340:	5300 7265 6576 2772 2073 6572 7073 6e6f     .Server's respon
   de350:	6573 003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d     se:..----------.
   de360:	4f50 5453 4f00 004b 6f43 6c75 2064 6f6e     POST.OK.Could no
   de370:	2074 6f63 6e6e 6365 2074 6f74 7420 6568     t connect to the
   de380:	6820 736f 0074 564c 4500 5252 524f 6320      host.LV.ERROR c
   de390:	756f 646c 6e20 746f 6320 6e6f 656e 7463     ould not connect
   de3a0:	7420 206f 6874 2065 6573 7672 7265 6e00      to the server.n
   de3b0:	6c75 006c 5245 4f52 0052 0000               ull.ERROR...

000de3bc <_ZTV6UbiTCP>:
	...
   de3c4:	61d9 000d 627d 000d 5edf 000d 64f9 000d     .a..}b...^...d..
   de3d4:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   de3e4:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   de3f4:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   de404:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   de414:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   de424:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   de434:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   de444:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   de454:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   de464:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
   de474:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
   de484:	0032 7325 507c 534f 7c54 7325 007c 7325     2.%s|POST|%s|.%s
   de494:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
   de4a4:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
   de4b4:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
   de4c4:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
   de4d4:	6469 746f 2e73 6f63 006d 7441 6574 706d     idots.com.Attemp
   de4e4:	2074 6966 696e 6873 6465 5000 534f 2054     t finished.POST 
   de4f4:	612f 6970 762f 2e31 2f36 6564 6976 6563     /api/v1.6/device
   de504:	2f73 2000 5448 5054 312f 312e 0a0d 4800     s/. HTTP/1.1...H
   de514:	736f 3a74 0020 7355 7265 412d 6567 746e     ost: .User-Agent
   de524:	203a 5800 412d 7475 2d68 6f54 656b 3a6e     : .X-Auth-Token:
   de534:	0020 6f43 6e6e 6365 6974 6e6f 203a 6c63      .Connection: cl
   de544:	736f 0d65 000a 6f43 746e 6e65 2d74 7954     ose...Content-Ty
   de554:	6570 203a 7061 6c70 6369 7461 6f69 2f6e     pe: application/
   de564:	736a 6e6f 0a0d 4300 6e6f 6574 746e 4c2d     json...Content-L
   de574:	6e65 7467 3a68 0020 614d 696b 676e 7220     ength: .Making r
   de584:	7165 6575 7473 7420 206f 6255 6469 746f     equest to Ubidot
   de594:	3a73 000a 6177 7469 6e69 2067 6f66 2072     s:..waiting for 
   de5a4:	6573 7672 7265 6120 736e 6577 2072 2e2e     server answer ..
   de5b4:	002e 550a 6962 6f64 7374 2027 6553 7672     ...Ubidots' Serv
   de5c4:	7265 7220 7365 6f70 736e 3a65 000a 6f43     er response:..Co
   de5d4:	6c75 2064 6f6e 2074 6573 646e 6420 7461     uld not send dat
   de5e4:	2061 6f74 7520 6962 6f64 7374 7520 6973     a to ubidots usi
   de5f4:	676e 4820 5454 0050 4547 2054 612f 6970     ng HTTP.GET /api
   de604:	762f 2e31 2f36 6564 6976 6563 2f73 2f00     /v1.6/devices/./
   de614:	766c 4300 6e6f 6574 746e 542d 7079 3a65     lv.Content-Type:
   de624:	6120 7070 696c 6163 6974 6e6f 6a2f 6f73      application/jso
   de634:	0d6e 0d0a 000a 6f43 6e6e 6365 6974 6e6f     n.....Connection
   de644:	4620 6961 656c 2064 6275 6469 746f 2073      Failed ubidots 
   de654:	202d 7254 2079 6741 6961 006e               - Try Again.

000de660 <_ZTV7UbiHTTP>:
	...
   de668:	6e89 000d 70b9 000d 6c33 000d 6c37 000d     .n...p..3l..7l..
   de678:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   de688:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   de698:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   de6a8:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   de6b8:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   de6c8:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   de6d8:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   de6e8:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   de6f8:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   de708:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   de718:	7720 7469 2068 4455 0050 0000                with UDP...

000de724 <_ZTV6UbiUDP>:
	...
   de72c:	7719 000d 76a1 000d 76ad 000d 76b1 000d     .w...v...v...v..

000de73c <_ZTV11UbiParticle>:
	...
   de744:	7809 000d 77e9 000d 77f5 000d 77f9 000d     .x...w...w...w..

000de754 <_ZL22BlynkReadHandlerVector>:
   de754:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de764:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de774:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de784:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de794:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7a4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7b4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7c4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7d4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7e4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de7f4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de804:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de814:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de824:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de834:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de844:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de854:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de864:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de874:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de884:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de894:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8a4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8b4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8c4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8d4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8e4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de8f4:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de904:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de914:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de924:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de934:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..
   de944:	78a5 000d 78a5 000d 78a5 000d 78a5 000d     .x...x...x...x..

000de954 <_ZL23BlynkWriteHandlerVector>:
   de954:	78a7 000d 4d45 000d 78a7 000d 4d9d 000d     .x..EM...x...M..
   de964:	4df1 000d 4e39 000d 78a7 000d 78a7 000d     .M..9N...x...x..
   de974:	78a7 000d 4339 000d 78a7 000d 78a7 000d     .x..9C...x...x..
   de984:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de994:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9a4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9b4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9c4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9d4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9e4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   de9f4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea04:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea14:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea24:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea34:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea44:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea54:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea64:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea74:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea84:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dea94:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deaa4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deab4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deac4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   dead4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deae4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deaf4:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deb04:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deb14:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deb24:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deb34:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..
   deb44:	78a7 000d 78a7 000d 78a7 000d 78a7 000d     .x...x...x...x..

000deb54 <_ZTVN5spark13EthernetClassE>:
	...
   deb5c:	7f1b 000d 7f11 000d 7f07 000d 7efd 000d     .............~..
   deb6c:	7ef1 000d 7ee5 000d 9c85 000d 9c8d 000d     .~...~..........
   deb7c:	7ed9 000d 7ed1 000d 7ec7 000d 7ebd 000d     .~...~...~...~..
   deb8c:	9cbd 000d                                   ....

000deb90 <_ZTV3UDP>:
	...
   deb98:	6601 000d 6621 000d 7fc9 000d 80f1 000d     .f..!f..........
   deba8:	7fc1 000d 7fe1 000d 7fff 000d 8019 000d     ................
   debb8:	803d 000d 80d5 000d 823b 000d 8179 000d     =.......;...y...
   debc8:	84b1 000d 7fa9 000d 8325 000d 8439 000d     ........%...9...
   debd8:	81b1 000d 8353 000d 811b 000d 7fb7 000d     ....S...........
   debe8:	8159 000d 7fbd 000d 801b 000d fff0 ffff     Y...............
   debf8:	0000 0000 8035 000d                         ....5...

000dec00 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dec08:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
   dec18:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   dec28:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000dec34 <_ZTV14CellularSignal>:
	...
   dec3c:	8a0d 000d 8a71 000d 8a0f 000d 8a81 000d     ....q...........
   dec4c:	8ab5 000d 8ae1 000d 8b15 000d 8a35 000d     ............5...
   dec5c:	8a13 000d 8a2f 000d fffc ffff 0000 0000     ..../...........
   dec6c:	8a69 000d                                   i...

000dec70 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dec78:	8c7d 000d 8c83 000d 8cc1 000d 8c91 000d     }...............
   dec88:	8c7f 000d                                   ....

000dec8c <_ZTV9IPAddress>:
	...
   dec94:	91c5 000d 91b5 000d 91b7 000d               ............

000deca0 <_ZTV9USBSerial>:
	...
   deca8:	92e9 000d 9351 000d 9327 000d 85f9 000d     ....Q...'.......
   decb8:	9319 000d 92eb 000d 92fb 000d 934b 000d     ............K...
   decc8:	930b 000d 92e5 000d                         ........

000decd0 <_ZTVN5spark13CellularClassE>:
	...
   decd8:	945f 000d 9455 000d 944b 000d 9401 000d     _...U...K.......
   dece8:	943f 000d 9433 000d 9c85 000d 9c8d 000d     ?...3...........
   decf8:	9427 000d 941f 000d 9415 000d 940b 000d     '...............
   ded08:	9cbd 000d                                   ....

000ded0c <_ZTV11USARTSerial>:
	...
   ded14:	94ed 000d 9559 000d 9531 000d 85f9 000d     ....Y...1.......
   ded24:	9501 000d 951d 000d 950f 000d 952b 000d     ............+...
   ded34:	94ef 000d 94f3 000d                         ........

000ded3c <_ZTV7TwoWire>:
	...
   ded44:	9645 000d 968f 000d 9667 000d 9647 000d     E.......g...G...
   ded54:	966f 000d 9677 000d 967f 000d 9687 000d     o...w...........
   ded64:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   ded74:	2072 203d 6425 0000                         r = %d..

000ded7c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ded84:	9743 000d 9765 000d 9b43 000d 9773 000d     C...e...C...s...
   ded94:	9745 000d                                   E...

000ded98 <_ZTV9TCPClient>:
	...
   deda0:	5ee5 000d 5f19 000d 96c1 000d 96db 000d     .^..._..........
   dedb0:	99cd 000d 983f 000d 9811 000d 9705 000d     ....?...........
   dedc0:	98d7 000d 9b49 000d 9873 000d 9a81 000d     ....I...s.......
   dedd0:	9707 000d 9739 000d 96ed 000d 9777 000d     ....9.......w...
   dede0:	97f1 000d                                   ....

000dede4 <_ZTVN5spark12NetworkClassE>:
	...
   dedec:	9c45 000d 9c4f 000d 9c59 000d 9c63 000d     E...O...Y...c...
   dedfc:	9c6d 000d 9c79 000d 9c85 000d 9c8d 000d     m...y...........
   dee0c:	9c95 000d 9ca1 000d 9ca9 000d 9cb3 000d     ................
   dee1c:	9cbd 000d                                   ....

000dee20 <_ZSt7nothrow>:
	...

000dee21 <_ZTSSt19_Sp_make_shared_tag>:
   dee21:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dee31:	6572 5f64 6174 0067 0000                     red_tag....

000dee3c <_ZTISt19_Sp_make_shared_tag>:
   dee3c:	ee7c 000d ee21 000d                         |...!...

000dee44 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dee44:	eedc 000d ee50 000d ef00 000d               ....P.......

000dee50 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dee50:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dee60:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dee70:	0045 0000                                   E...

000dee74 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dee74:	0000 0000 ee44 000d a169 000d a17d 000d     ....D...i...}...
   dee84:	a311 000d a311 000d a1e7 000d a129 000d     ............)...
   dee94:	a1cf 000d a191 000d a15d 000d               ........]...

000deea0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   deea0:	eedc 000d eeac 000d ee44 000d               ........D...

000deeac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   deeac:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   deebc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   deecc:	666e 456f 0000 0000                         nfoE....

000deed4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   deed4:	0000 0000 eea0 000d a211 000d a225 000d     ............%...
   deee4:	a311 000d a311 000d a1e7 000d a129 000d     ............)...
   deef4:	a2e5 000d a271 000d a239 000d               ....q...9...

000def00 <_ZTISt9type_info>:
   def00:	ee7c 000d ef08 000d                         |.......

000def08 <_ZTSSt9type_info>:
   def08:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   def18:	6f70 0077 7173 7472 0000 0000 0000 0000     pow.sqrt........

000def28 <TWO52>:
   def28:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   def38:	6e69 7469 0079 0000                         inity...

000def40 <fpi.7566>:
   def40:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   def50:	0000 0000                                   ....

000def54 <fpinan.7602>:
   def54:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   def64:	0000 0000                                   ....

000def68 <tinytens>:
   def68:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   def78:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   def88:	6f43 64ac 0628 1168                         Co.d(.h.

000def90 <_ctype_>:
   def90:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   defa0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   defb0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   defc0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   defd0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   defe0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   deff0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   df000:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   df010:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000df094 <_C_numeric_locale>:
   df094:	e5b4 000d e639 000d e110 2003 0043 4f50     ....9...... C.PO
   df0a4:	4953 0058                                   SIX.

000df0a8 <__mprec_bigtens>:
   df0a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   df0b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   df0c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000df0d0 <__mprec_tens>:
   df0d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   df0e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   df0f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   df100:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   df110:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   df120:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   df130:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   df140:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   df150:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   df160:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   df170:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   df180:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   df190:	9db4 79d9 7843 44ea                         ...yCx.D

000df198 <p05.7490>:
   df198:	0005 0000 0019 0000 007d 0000               ........}...

000df1a4 <link_const_variable_data_end>:
   df1a4:	000d55e9 	.word	0x000d55e9
   df1a8:	000d65dd 	.word	0x000d65dd
   df1ac:	000d6b49 	.word	0x000d6b49
   df1b0:	000d7295 	.word	0x000d7295
   df1b4:	000d764d 	.word	0x000d764d
   df1b8:	000d76e1 	.word	0x000d76e1
   df1bc:	000d7f25 	.word	0x000d7f25
   df1c0:	000d7f6d 	.word	0x000d7f6d
   df1c4:	000d85d1 	.word	0x000d85d1
   df1c8:	000d88c1 	.word	0x000d88c1
   df1cc:	000d89c9 	.word	0x000d89c9
   df1d0:	000d89f1 	.word	0x000d89f1
   df1d4:	000d94bd 	.word	0x000d94bd
   df1d8:	000d9d9d 	.word	0x000d9d9d

000df1dc <link_constructors_end>:
   df1dc:	00000000 	.word	0x00000000
